<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold, the Director for Capital One's   Platform Services Center of Excellence. Much of what appears here dated prior to 2017 was  previously published at VoxPop.co and VoxPopDesign.com. There's also a bit  of legacy detritus from older experiments like mutednoise.com,  miltiantgeek.com, codeaway.org, etc. Yes, I am the adult male that still plays with Lego. You should too.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Mar 2018 11:39:22 -0400</pubDate>
    <lastBuildDate>Mon, 26 Mar 2018 11:39:22 -0400</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Facebook, Regulation, and the Kitchen Sink</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/03/facebook-apology.jpg&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Last week, concerns over Facebook’s data collection practices reached an all-time fever pitch. I had intended on sharing my thoughts, along with a handful of recommended takeaways for API providers, as part of my &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/archive&quot;&gt;REST API Notes&lt;/a&gt;. However, the longer I compiled breaking news, the longer the piece became. Eventually, it seemed warranted to break Facebook off into its own dedicated post.&lt;/p&gt;

&lt;p&gt;I’ve tried to be thorough, but “uncritical” set sail awhile ago. I’m biased. People, like techno-sociologist Zeynep Tufekci, raised the alarm years ago, when meaningful action could have been taken.  &lt;a href=&quot;/2016/08/01/CodifiedCulturalBias/&quot;&gt;I left Facebook around the same time over concerns on the power uber data aggregators wield&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite those protestations, Facebook’s practices continued. It doesn’t appear that the internal conversations ever switched from “can we?” to “should we?” And now the mob, embittered and frustrated by the cultural malaise of the moment, are coming with torches and regulatory pitchforks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About. Goddamn. Time.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Mid-March, The New York Times reported that Cambridge Analytica &lt;a href=&quot;https://www.nytimes.com/2018/03/17/us/politics/cambridge-analytica-trump-campaign.html&quot;&gt;improperly acquired the private data&lt;/a&gt; of approximately 50 million Facebook users. It then, subsequently, used the psychological profiles it created with the data to target voters on behalf of the Trump campaign during the 2016 presidential election. The Obama campaign, in 2012, &lt;a href=&quot;https://www.youtube.com/watch?time_continue=1189&amp;amp;v=LGiiQUMaShw&quot;&gt;also ingested Facebook relationship data&lt;/a&gt;. However, while the Obama campaign was transparent that people were giving their information (and their friends’ information) to the cause of re-electing Obama, the Trump campaign used data culled from a personality quiz app.&lt;/p&gt;

&lt;p&gt;This app used the 1.0 version of the Facebook’s Graph API. That version launched in April, 2010 and allowed developers to “not only see the social connection between people, &lt;a href=&quot;https://techcrunch.com/2010/04/21/zuckerbergs-buildin-web-default-social/&quot;&gt;but see and create the connections people have with their interests - things, places, brands, and other sites&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Very &lt;em&gt;little&lt;/em&gt; information is needed before profound insights can be inferred about a person. &lt;a href=&quot;https://web.archive.org/web/20090328103238/http://privacy.cs.cmu.edu/dataprivacy/HIPAA/HIPAAcomments.html&quot;&gt;A Carnegie Mellon study has shown&lt;/a&gt;, 87% of Americans can be positively identified using only a 5-digit postal code, gender, and date of birth. Full name, postal code, and date of birth equate to voter rolls, which themselves are sold by many states. Using nothing but likes, &lt;a href=&quot;http://www.pnas.org/content/early/2013/03/06/1218772110&quot;&gt;researchers Michal Kosinski, David Stillwell, and Thore Graepel have successfully shown they can predict a wide range of sensitive personal attributes&lt;/a&gt; including “sexual orientation, ethnicity, religious and political views, personality traits, intelligence, happiness, use of addictive substances, parental separation, age, and gender”.&lt;/p&gt;

&lt;p&gt;Further, version 1.0 of the Graph API didn’t just make information about a specific user available; it allowed “extended permissions”. This feature allowed approved apps to request a range of users’ &lt;em&gt;friends&lt;/em&gt;, along with their information. This additional information &lt;em&gt;did not require the consent of those friends before it was shared&lt;/em&gt;. In addition to Personally Identifiable Information (or PII), this friend information included education, groups, hometown, interests, location, relationships, religion, work history, etc. Having understanding of information flow is powerful; according to one study, &lt;a href=&quot;https://blog.acolyer.org/2018/03/26/information-flow-reveals-prediction-limits-in-online-social-activity/&quot;&gt;‘95% of the potential predictive accuracy attainable for an individual is available within the social ties of that individual only, without requiring the individual’s data’&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A University of Cambridge professor, Aleksadr Kogan, created an app called &lt;em&gt;thisisyourdigitallife&lt;/em&gt;. Built using Facebook’s Graph API, he seeded the initial userbase with people paid through Amazon’s “Mechanical Turk”. Subsequently, &lt;a href=&quot;https://www.nytimes.com/2018/03/19/opinion/facebook-cambridge-analytica.html&quot;&gt;around 270,000 people were paid between $1 and $2 to download and use the personality quiz app&lt;/a&gt;. Through the use of ‘extended permissions’ the initial 270,000 users resulted in 50 million populated profiles; profiles containing the names, dates of birth, employment history, likes, and more. Aleksadr then gave the information he collected to Cambridge Analytica. &lt;em&gt;Technically&lt;/em&gt;, only the last step violated Facebook’s rules, which prohibit selling or giving away data collected by a third-party app.&lt;/p&gt;

&lt;p&gt;Graph 1.0 was deprecated on April 2014 (and access ended entirely in 2015). The second version of the Graph API, while providing information for the conscenting user, &lt;a href=&quot;https://stackoverflow.com/questions/23417356/facebook-graph-api-v2-0-me-friends-returns-empty-or-only-friends-who-also-u&quot;&gt;no longer has extended permissions&lt;/a&gt;. However, the data collected by external entities during this time cannot be expunged; revoking access does nothing to the apps that might have had access and saved themselves a copy. The data is out there, on who-knows-how-many private servers, with the potential to be purchased, aggregated with other datasets, and weaponized for future scenarios.&lt;/p&gt;

&lt;p&gt;In fact, &lt;a href=&quot;https://www.theatlantic.com/technology/archive/2018/03/my-cow-game-extracted-your-facebook-data/556214/&quot;&gt;as the author of the Facebook game ‘Cow Clicker’ stated&lt;/a&gt;, “all the publicity around Facebook’s Cambridge Analytica crisis might be sending lots of old app developers, like me, back to old code and dusty databases, wondering what they’ve even got stored and what it might yet be worth”.&lt;/p&gt;

&lt;p&gt;Furthermore, the abuses didn’t stop when Graph 1.0 was fully shutdown in 2015. Other Facebook products, like Instagram’s API, &lt;a href=&quot;https://business.instagram.com/blog/new-instagram-api-features&quot;&gt;still exhibit similar behavior&lt;/a&gt;. In March, 2016, &lt;a href=&quot;https://promarket.org/roger-mcnamee-think-can-make-legitimate-case-facebook-become-parasitic/&quot;&gt;Facebook expelled a group that was using its API to scrape data about people who expressed interest in Black Lives Matter&lt;/a&gt;. The group had been selling the data to police departments. At the end of the same year, &lt;a href=&quot;https://www.propublica.org/article/hud-has-serious-concerns-about-facebooks-ethnic-targeting&quot;&gt;the Department of Housing and Urban Development launched an investigation following concerns that Facebook’s advertising tools allow real estate advertisers to discriminate users according to race&lt;/a&gt;. Facebook &lt;a href=&quot;http://time.com/5215274/facebook-messenger-android-call-text-message-data/&quot;&gt;has also admitted to collecting call and text message history of users who own Android phones&lt;/a&gt; (while users were asked if they wanted to import their phone contacts, it was not obvious to many users that they were agreeing to have their cell phone activity recorded).&lt;/p&gt;

&lt;p&gt;Mark Zuckerberg &lt;a href=&quot;https://www.techdirt.com/articles/20180321/17312239474/mark-zuckerberg-finally-speaks-about-cambridge-analytica-it-wont-be-enough.shtml&quot;&gt;responded last Wednesday afternoon, outlining reactive steps to the situation&lt;/a&gt;: Facebook would &lt;em&gt;investigate old apps that used v1.0&lt;/em&gt;, &lt;em&gt;further restrict access to data&lt;/em&gt;, and &lt;em&gt;give more transparency and control to end users&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, Facebook and Cambridge Analytica have &lt;a href=&quot;https://www.techdirt.com/articles/20180318/00111439443/both-facebook-cambridge-analytica-threatened-to-sue-journalists-over-stories-cas-use-facebook-data.shtml&quot;&gt;threatened to sue&lt;/a&gt; the journalists that broke the original story. This seems, primarily, over the erroneous use of the word “breach” in the course of describing events; if determined to be a data breach (which this wasn’t), the company could face fines.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Frustratingly, Facebook seems to be taking the wrong lessons from the incident (or, if I’m cynical, they’re skewing in a direction that cements their market dominance). They are correct that the loss of trust is so much bigger than whatever terms of service Cambridge Analytica violated. However, the stated conclusion that there is a binary relationship between data portability and privacy - that either everything must be shared or Facebook controls everything - is &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.techdirt.com/articles/20180321/17312239474/mark-zuckerberg-finally-speaks-about-cambridge-analytica-it-wont-be-enough.shtml&quot;&gt;Techdirt summarized the round of media interviews that Mark Zuckerberg did, where he said&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I was maybe too idealistic on the side of data portability, that it would create more good experiences — and it created some — but I think what the clear feedback from our community was that people value privacy a lot more.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Later, he bemoans having to make these kinds of tradeoffs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I guess I have to, because of [where we are] now, but I’d rather not.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If consumers &lt;em&gt;had&lt;/em&gt; control, it would take Mark out of the leadership role that he is, apparently, uncomfortable playing.  Why &lt;em&gt;can’t&lt;/em&gt; someone easily be able to bulk-delete “likes” older than a year? Why is it necessary for Facebook to retain work history older than the last employer? Sexual orientation, race, and religious affiliation can get someone killed - so why can’t people indicate that these should never be stored, or even &lt;em&gt;inferred&lt;/em&gt; - as part of their profile?&lt;/p&gt;

&lt;p&gt;The most valuable part of Facebook, for an individual, is not the status updates, or the images uploaded - it is the network of connections they’ve built. This is why so many apps, unable to get the social graph from Facebook, resort to the kludge of the “access your contacts” email workaround. If the individual chose, why couldn’t they take those relationships (sans ‘extended permissions’ data) with them somewhere else?&lt;/p&gt;

&lt;p&gt;Rather than allow apps to hoover up the kind of information useful for psyops, why not allow developers to create 3rd party tools for permissions configuration, &lt;a href=&quot;https://www.eff.org/deeplinks/2018/03/why-we-didnt-make-fix-my-facebook-privacy-settings-tool&quot;&gt;the kind Cory Doctorow wrote about&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Unfortunately, because there is little market incentive for Facebook to do so. Till now, the profitable thing has not aligned with the right thing. As Doc Searls has written, &lt;a href=&quot;http://blogs.harvard.edu/doc/2018/03/23/nothing/&quot;&gt;this is a problem not just for Facebook, but for an entire online publishing industry dependent on building advertising panopticons for revenue growth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regulation, above and beyond what currently exists, is coming. It &lt;em&gt;could&lt;/em&gt; make a difference. However, ideas currently swirling entrench Facebook as the market leader, with little likelihood of alternatives arising. An example is the European ‘&lt;a href=&quot;https://pagefair.com/blog/2017/gdpr_risk_to_the_duopoly/&quot;&gt;General Data Protection Regulation&lt;/a&gt;’ (GDPR). It goes into effect May, 2018. Some have hailed it as progress toward defining when user consent is necessary. It also has provisions for data portability. However, &lt;a href=&quot;https://medium.com/mydata/gdpr-data-portability-is-a-false-promise-af460d35a629&quot;&gt;there are already workarounds devised, with the social graph considered a “legitimate interest” of the social network&lt;/a&gt;. As a ‘legitimate interest’ of the business, it is not privy to export.&lt;/p&gt;

&lt;p&gt;As Techdirt summarized:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Solving” the problem isn’t going to be solving the problem for real – and it’s just going to end up giving Facebook greater power over our data. That’s an unfortunate result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What we need is thoughtful, not knee-jerk, regulation. We need consumer-friendly policies that promote the principles of the open web and eschew monopolies. We need to treat personal data with the kind of care and responsibility that we do with powerful, and potentially dangerous, things in the real world. And we need to look for answers outside of Facebook, because there’s few incentives to drive the necessary change from within.&lt;/p&gt;

&lt;div style=&quot;max-width:854px&quot;&gt;&lt;div style=&quot;position:relative;height:0;padding-bottom:56.25%&quot;&gt;&lt;iframe src=&quot;https://embed.ted.com/talks/zeynep_tufekci_we_re_building_a_dystopia_just_to_make_people_click_on_ads&quot; width=&quot;854&quot; height=&quot;480&quot; style=&quot;position:absolute;left:0;top:0;width:100%;height:100%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/03/26/Facebook/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/26/Facebook/</guid>
        
        <category>Facebook</category>
        
        <category>Zeynep Tufekci</category>
        
        <category>regulation</category>
        
        <category>governance</category>
        
        <category>Trump</category>
        
        <category>Obama</category>
        
        <category>Graph API</category>
        
        <category>Carnegie Mellon</category>
        
        <category>Michal Kosinski</category>
        
        <category>David Stillwell</category>
        
        <category>Thore Graepel</category>
        
        <category>Aleksadr Kogan</category>
        
        <category>Cambridge Analytica</category>
        
        <category>Mechanical Turk</category>
        
        <category>Instagram</category>
        
        <category>Mark Zuckerberg</category>
        
        <category>open web</category>
        
        <category>Cory Doctorow</category>
        
        <category>Doc Searls</category>
        
        <category>GDPR</category>
        
        
      </item>
    
      <item>
        <title>The Role of Product Management in API Design</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“The handles of a craftman’s tools bespeak an absolute simplicity, the plainest forms affording the greatest range of possibilitites for the user’s hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“That which is overdesigned, too highly specific, anticipates outcome; the anticipation of the outcomes guarantees, if not failure, the absence of grace.” - William Gibson, &lt;em&gt;All Tomorrow’s Parties&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/03/management-books.png&quot; alt=&quot;a picture of product management books on a bookstore shelf, taken from Morguefile.com&quot; /&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Successful APIs, whether they are external products or internal glue, require strong product management. However, given an API’s ephemeral nature, product managers may have difficulty with how to proceed. This poor API product management results in a product that doesn’t meet the needs of users. Adoption will be limited. Integrations, when they do happen, will be difficult. And correcting mistakes after development will remain a demoralizing and expensive proposition.&lt;/p&gt;

&lt;p&gt;Martin Eriksson, &lt;a href=&quot;https://www.mindtheproduct.com/2011/10/what-exactly-is-a-product-manager/&quot;&gt;defines the Product Manager role as an expertise that lies at the intersection of tech, business, and UX&lt;/a&gt;. Martin then quotes the book, &lt;a href=&quot;https://www.amazon.com/INSPIRED-Create-Tech-Products-Customers/dp/1119387507/&quot;&gt;Inspired&lt;/a&gt;, that states a product manager should ‘discover a product that is valuable, usable and feasible’. What constitutes “valuable”, “usable”, and “feasible” for an API?&lt;/p&gt;

&lt;h2 id=&quot;valuable&quot;&gt;Valuable&lt;/h2&gt;
&lt;p&gt;At the most fundamental level, an API must provide a useful function. Determining what is useful and what is not is the first job for an API product manager.&lt;/p&gt;

&lt;h3 id=&quot;building-for-the-correct-audience&quot;&gt;Building for the Correct Audience&lt;/h3&gt;
&lt;p&gt;Product managers should understand the audience that will consume the API. That may be easier than it sounds, as there actually several different types of people evaluating an API, each with their own questions. As &lt;a href=&quot;https://bradfults.com/the-best-api-documentation-b9e46400379a&quot;&gt;Brad Fults mentions&lt;/a&gt;, these audiences may include, but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Decision Makers&lt;/strong&gt; evaluating competing API products&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developers&lt;/strong&gt; looking to get started&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integrators&lt;/strong&gt; attempting to debug a specific issue in an existing client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each audience has different needs. For the decision maker, is the functionality provided by an API the same, if not better, than other competitive offerings? Can a developer get started with an API easily, perhaps with nothing more than a CURL statement? Does the API return the type of error messages that, when things go wrong, make it easy for an integrator to fix?&lt;/p&gt;

&lt;h3 id=&quot;api-design-that-is-outside-in-not-reflections-of-internal-implementations&quot;&gt;API Design that is ‘Outside In’, not Reflections of Internal Implementations&lt;/h3&gt;

&lt;p&gt;An API design should align with the integrator’s understanding. Creating an interface constrained to the internal systems implementation is rarely a good idea. These systems, particularly those that have existed in legacy environments, are a complex aggregation of shifting business priorities, technical advancement, team experience, etc. Exposing years (if not decades) of ‘dirty laundry’ at once significantly increases the barriers to comprehension and adoption.&lt;/p&gt;

&lt;h3 id=&quot;clear-ownership&quot;&gt;Clear Ownership&lt;/h3&gt;
&lt;p&gt;Product management includes a degree of ownership. The part of ownership that integrators care about is the amount, and form, that ownership is exhibited in. Trust in an API is difficult to earn and can be easily fumbled away.&lt;/p&gt;

&lt;p&gt;Ownership of an API translates to the following communication:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Uptime Dashboard/SLA&lt;/li&gt;
  &lt;li&gt;Change Log/Release Notes&lt;/li&gt;
  &lt;li&gt;Roadmaps&lt;/li&gt;
  &lt;li&gt;Known and Communicated Support and Feedback Channels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The individual forms may vary. But each of these is an attempt to convey stability and permanence - two crucial elements when wooing developers with other options. A product with a future and team behind it is orders of magnitude more desirable than unmaintained code deployed on a computer under someone’s desk. A product manager should ensure that the former is being communicated, not the latter.&lt;/p&gt;

&lt;h2 id=&quot;usable&quot;&gt;Usable&lt;/h2&gt;
&lt;p&gt;There are a variety of different approaches for web-based APIs. Whether using RPC, REST, or subsequent variations, an API design produced by one team may vary significantly in usage and &lt;a href=&quot;http://amundsen.com/blog/archives/1109&quot;&gt;affordances&lt;/a&gt; from another team’s product - even when both teams work for the same company! The number of design choices, and how they subsequently manifest in the design, require additional work to ensure the designs are usable.&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;This collection of differences means that documentation is incredibly important. In fact, in John Musser’s talk, “&lt;a href=&quot;https://www.slideshare.net/jmusser/ten-reasons-developershateyourapi/&quot;&gt;Ten Reasons Developers Hate Your API&lt;/a&gt;”, “sucky” documentation was listed as the &lt;strong&gt;#1&lt;/strong&gt; API problem.&lt;/p&gt;

&lt;p&gt;Reasons that documentation may suck include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Being inaccurate/out-of-date/incomplete&lt;/li&gt;
  &lt;li&gt;Lacking a getting started onramp&lt;/li&gt;
  &lt;li&gt;Unprofessional and/or lacking clarity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rise of various formats that capture API intent in structured ways, like the OpenAPI specification, are a start. These &lt;em&gt;integration contracts&lt;/em&gt; can be used to &lt;em&gt;render&lt;/em&gt; documentation in a manner similar to how annotations in a Java codebase can render Javadoc.&lt;/p&gt;

&lt;p&gt;However, like Javadocs, this “documentation” is often the bare minimum that can be done towards effective communication and understanding. An API product manager should be closely involved in the creation of an API’s documentation. They should ensure that the business value of their product is clearly captured to the intended audience.&lt;/p&gt;

&lt;h3 id=&quot;standards&quot;&gt;Standards&lt;/h3&gt;
&lt;p&gt;A common design consideration is “&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;the principle of least surprise&lt;/a&gt;&lt;/em&gt;”. Design works best when it reuses familiar interface concepts. With a user interface (UI), this allows end users to make successful educated guesses, resulting in better user experience (UX). This developer experience, or “DX” should be part of the consideration when creating an API design.&lt;/p&gt;

&lt;p&gt;Common industry patterns for should be used. Where possible, data should adhere standards, and those standards explicitly referenced in the documentation. For example, why force a consumer to create their own parsing for your bespoke date and time format? Use ISO8601 instead, reference it in the documentation, and be done with it. Extra points if the API design takes advantage of the work on &lt;a href=&quot;http://schema.org/&quot;&gt;schema.org&lt;/a&gt; and properly uses &lt;a href=&quot;https://www.iana.org/assignments/media-types/media-types.xhtml&quot;&gt;media types&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;feasible&quot;&gt;Feasible&lt;/h2&gt;
&lt;p&gt;Different integrations will have different consumptions needs. Some may be able to consume the entire payload as designed. Others, do to computational or bandwidth constraints, may want a refined perspective on the resource available. Working with potential consumers to build in rate controls from the beginning is important.&lt;/p&gt;

&lt;h3 id=&quot;malleability&quot;&gt;Malleability&lt;/h3&gt;
&lt;p&gt;Support for sort ordering and pagination on returned collections is important. Default return amounts, rather than to defaulting to the entire collection, should be explicitly stated in the documentation and modifiable (within reason - page size limits should also be explicitly called out). Filtering, depending on the collection size, may be important. A more advanced option, depending on the need, is to allow for selective parameter retrieval.&lt;/p&gt;

&lt;h3 id=&quot;cacheability&quot;&gt;Cacheability&lt;/h3&gt;
&lt;p&gt;APIs should take advantage of the idempotent and safe natures available on the appropriate endpoints. Services enhance cache-ability by setting headers on responses. These headers, at a minimum, include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Date&lt;/li&gt;
  &lt;li&gt;Cache-Control&lt;/li&gt;
  &lt;li&gt;Expires&lt;/li&gt;
  &lt;li&gt;Pragma&lt;/li&gt;
  &lt;li&gt;Last-Modified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also possible to use the ETag header for validating the freshness of cached representations, as well as helping with conditional read and update operations. Its value is an arbitrary string for the version of a representation, sometimes a simple hash of the underlying object.&lt;/p&gt;

&lt;p&gt;A product manager may not understand the &lt;em&gt;exactly&lt;/em&gt; technical mechanisms behind how these headers work. However, they should desire the best customer experience possible, and - for many - that means zippy responses.&lt;/p&gt;

&lt;p&gt;Phil Sturgeon has a couple of fantastic pieces on HTTP caching. The first is &lt;a href=&quot;https://blog.apisyouwonthate.com/speeding-up-apis-apps-smart-toasters-with-http-response-caching-a67becf829c6&quot;&gt;a blog post on how to speed up API performance with HTTP response caching&lt;/a&gt;. The second is &lt;a href=&quot;https://www.youtube.com/watch?v=OwoVFGnpqpM&quot;&gt;a presentation he recently gave that was posted to YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;If that sounds like a lot to manage, it’s because it is. Being a product manager for an API comes with all the research and testing of a normal product, but with an additional dash of technical acumen and developer savvy. But the reward - easier integrations, more developer happiness, and better expressions of business value - is worth it.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/03/12/ProductManagementInAPIDesign/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/12/ProductManagementInAPIDesign/</guid>
        
        <category>API Design</category>
        
        <category>product management</category>
        
        <category>REST API</category>
        
        <category>API Governance</category>
        
        <category>caching</category>
        
        <category>Martin Eriksson</category>
        
        <category>John Musser</category>
        
        <category>Phil Sturgeon</category>
        
        
      </item>
    
      <item>
        <title>RIP John Perry Barlow</title>
        <description>&lt;p&gt;John Perry Barlow did many amazing things. He was a Grateful Dead lyricist. He was a Wyoming rancher for more than a decade and a half, itself no small feat. Much too late in my professional career I contributed to the Electronic Frontier Foundation (EFF), an organization he founded to fight for a free and open internet. However, JPB will be most notable, for me, as the author of the “&lt;a href=&quot;https://www.eff.org/cyberspace-independence&quot;&gt;Declaration of Independence of Cyberspace&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;It starts:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Governments of the Industrial World, you weary giants of flesh and steel, I come from Cyberspace, the new home of Mind. On behalf of the future, I ask you of the past to leave us alone. You are not welcome among us. You have no sovereignty where we gather.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have no elected government, nor are we likely to have one, so I address you with no greater authority than that with which liberty itself always speaks. I declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. You have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JPB wrote the manifesto as an email in 1996. Even in the wide-eye days of the web’s infancy, it was controversial. Arrogant. Eye-roll inducing. In light of everything today - from &lt;a href=&quot;https://spectrum.ieee.org/telecom/security/the-real-story-of-stuxnet&quot;&gt;nation state cyber-warfare&lt;/a&gt; to &lt;a href=&quot;https://mashable.com/2014/06/05/edward-snowden-revelations/&quot;&gt;the Snowden revelations&lt;/a&gt;, from &lt;a href=&quot;https://www.axios.com/here-are-the-election-facebook-ads-russia-bought-1513306606-f8d07e39-085f-44e7-9958-975d35d3b4f0.html&quot;&gt;Facebook manipulating elections&lt;/a&gt; to &lt;a href=&quot;https://www.cnn.com/2018/01/03/us/kansas-police-shooting-swatting/index.html&quot;&gt;people dying from swatting&lt;/a&gt; - it is hard not to choke on the naivety.&lt;/p&gt;

&lt;p&gt;And yet, the loss of that innocence, and the visionary who articulated what the web &lt;em&gt;could&lt;/em&gt; be, &lt;strong&gt;hurts so much&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The same year that JPB declared cyberspace’s independence, I started my freshman year at college. His web became the web I aspired to. In addition to the manifesto, I was also quickly introduced to the works of William Gibson, Bruce Sterling, Neal Stephenson, 90’s British Rave Culture, Hacking, Phreaking, IRC, Napster, Icecasting, Pseudo, and so much, much more. Instead of fiddling with index cards, report research was just an AltaVista search away. I learned HTML on a Geocities site so that I could share the same miserable poetry as others from exotic locations like Europe, or Australia, or Des Moine. And music; there was so much music. Music to study to, music to make-out to, and music to ring in a new millenium where anyone with an ounce of ambition and a newly minted degree in computers could save the world (while getting fabulously rich in the process).&lt;/p&gt;

&lt;p&gt;The dot-com bust turned out to be a speed bump. In 2004-2005, I was a regular listener of podcasts and ran a web forum for an MMORPG guild. By 2007, I was all in on ‘Web 2.0’, or ‘The Social Web’. Friends attending SXSW that year invited me to try something called ‘Twitter’. By the end of that year, I was producing (poorly attended) conferences extolling the virtues of blogging for businesses. &lt;em&gt;Brands would be conversational, not unidirectional&lt;/em&gt;! Businesses could harness the &lt;em&gt;wisdom of the crowds&lt;/em&gt;! &lt;a href=&quot;http://www.cluetrain.com/&quot;&gt;All aboard the Cluetrain&lt;/a&gt;! “&lt;strong&gt;If only&lt;/strong&gt;,” I would argue without irony, “&lt;strong&gt;everyone would blog, we’d see we aren’t really that different!&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;Sitting here, writing on a private VPN network, in a browser meticulously stripped of as much ad tracking as I can manage, with a sticker slapped over the webcam, I’m humbled. This isn’t the web &lt;em&gt;I&lt;/em&gt; want. &lt;em&gt;This isn’t the web he wanted&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;JBP saw physical space’s &lt;a href=&quot;https://en.wikipedia.org/wiki/City_upon_a_Hill&quot;&gt;city on the hill&lt;/a&gt; for what it was - a gated community of power and privilege that looked down on those different or unwanted. He called for something new. However, it is important to point out that JPB’s dream for cyberspace wasn’t an appeal for lawlessness; his streak of libertarianism wasn’t ‘do whatever you want’. It was an appeal to be something better than we’ve been. The blackest backwaters of Reddit, or the white power movement, or malware opportunists were inevitable, but unwelcome. He was in a race to sow the seeds of something wonderful before the weeds of our worst nature could take root and choke it out. In JBP’s “new home of Mind”, we’d see a vision of a virtual place beyond the violence beget of physical judgement and maybe, just maybe, we’d finally treat each other like human beings.&lt;/p&gt;

&lt;p&gt;And now John Perry Barlow is dead. A mantle has been laid down and its owner put to rest. Cyberspace is dead. Long live cyberspace.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/111576518?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/111576518&quot;&gt;A Declaration of the Independence of Cyberspace by John Perry Barlow.&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/idealogue&quot;&gt;IDEALOGUE&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/02/08/RIPJohnPerryBarlow/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/08/RIPJohnPerryBarlow/</guid>
        
        <category>cyberspace</category>
        
        <category>john perry barlow</category>
        
        <category>twitter</category>
        
        <category>EFF</category>
        
        <category>college</category>
        
        <category>Edward Snowden</category>
        
        <category>privacy</category>
        
        <category>William Gibson</category>
        
        <category>Bruce Sterling</category>
        
        <category>Neal Stephenson</category>
        
        <category>raves</category>
        
        <category>Hacking</category>
        
        <category>Phreaking</category>
        
        <category>IRC</category>
        
        <category>Napster</category>
        
        <category>Icecasting</category>
        
        <category>Pseudo</category>
        
        <category>AltaVista</category>
        
        <category>SXSW</category>
        
        <category>social web</category>
        
        <category>Enclosure</category>
        
        
      </item>
    
      <item>
        <title>Hypermedia, Swagger, and More &amp;#x2709;</title>
        <description>&lt;p&gt;This edition of the REST API notes starts with a review of a tool review (very meta). Not to be outdone, I then move to hypermedia extractions and end with a look at JSON Hyper-Schema. Before I begin loving a post professing to loving love or hating on the haters who ever hated I call it an update with some interesting industry milestones.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-01-31&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-01-31&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/01/31/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Stewart Brand</category>
        
        <category>Pace Layers</category>
        
        <category>Gartner</category>
        
        <category>Frank Duffy</category>
        
        <category>SmartBear</category>
        
        <category>Swagger</category>
        
        <category>David Berlin</category>
        
        <category>OpenAPI</category>
        
        <category>Mike Hibay</category>
        
        <category>hypermedia</category>
        
        <category>JSON</category>
        
        <category>JSON Hyper-Schema</category>
        
        <category>Keith Casey</category>
        
        <category>OAuth</category>
        
        <category>OpenId</category>
        
        <category>Okta</category>
        
        <category>Keen.io</category>
        
        <category>Scaleworks</category>
        
        <category>Joyce Stack</category>
        
        <category>Aaron Hedges</category>
        
        
      </item>
    
      <item>
        <title>Web APIs: 2018 and Beyond &amp;#x2709;</title>
        <description>&lt;p&gt;Have we reached &lt;strong&gt;peak microservices&lt;/strong&gt;? Sure, the architectural pattern is powerful. But have we gone round the bend and arrived at hypetown? Now that stories of actual implementations are being shared, will the cost of increased complexity hijack the primary narrative?&lt;/p&gt;

&lt;p&gt;While pondering the ramifications for the coming year, I also talk about numerous other trends: service meshes, reactive microservices, webhooks/pubsub, and more. It's an accessment of the horizon. While we may not make it everywhere, there's a fair amount of ground we'll cover in 2018.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2018-and-beyond&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2018-and-beyond&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/01/24/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/24/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>microservices</category>
        
        <category>Simon Brown</category>
        
        <category>Diogo Lucas</category>
        
        <category>Nicolo Pignatelli</category>
        
        <category>Dave Kerr</category>
        
        <category>Sam Newman</category>
        
        <category>Gartner</category>
        
        <category>hype cycl</category>
        
        <category>Mark O'Neill</category>
        
        <category>Kelsey Hightower</category>
        
        <category>service meshes</category>
        
        <category>reactive microservices</category>
        
        <category>webhooks</category>
        
        <category>pubsub</category>
        
        <category>Phil Sturgeon</category>
        
        <category>Irakli nadareishvili</category>
        
        <category>Pedro Felix</category>
        
        <category>OpenAPI</category>
        
        <category>AsynchAPI</category>
        
        <category>Matthew Trask</category>
        
        <category>Roy Fielding</category>
        
        <category>Stewart Brand</category>
        
        <category>Pace Layers</category>
        
        
      </item>
    
      <item>
        <title>2017 Laid to REST &amp;#x2709;</title>
        <description>&lt;p&gt;At year's end, there's a handful of notable articles to highlight before heading out for the holidays. In this edition of the REST API notes, it is worth covering a bit of API Design thinking, revisiting the benefits semi-structured representations, and why microservice contracts are so useful. If the term &quot;&lt;em&gt;evolutionary compatibility&lt;/em&gt;&quot; isn't top of mind, read on for more.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2017-12-19&quot;&gt;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2017-12-19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/12/19/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/19/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Flavia Sequeira</category>
        
        <category>Pat Helland</category>
        
        <category>XML</category>
        
        <category>JSON</category>
        
        <category>microservices</category>
        
        <category>Stefano Rocco</category>
        
        <category>Postman</category>
        
        <category>Auth0</category>
        
        
      </item>
    
      <item>
        <title>Three Ways Conways Law Affects API Governance</title>
        <description>&lt;p&gt;When I presented ‘3 Ways Conway’s Law Affects API Governance’ at the 2016 API Strategy Conference, I had no idea that it would become my most requested talk. Even now, a year later, I still get the occasional email asking if the talk has been posted anywhere. What had started as a handful of observations in how organizational structure was showing up in API designs had struck a cord with those in other areas.&lt;/p&gt;

&lt;p&gt;So why haven’t I shared the deck before now? No good reason; there just always seemed to be some other more pressing need (or want). However, people persisted and made me realize that the content wasn’t just a blip in the conference milieu; rather, it was something that needed to be shared.&lt;/p&gt;

&lt;p&gt;So, without further ado, here’s “3 Ways Conway’s Law Affects API Governance”.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide1.PNG&quot; /&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide2.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Before I start my slides, I'd like to start with someone else's presentation. Recently, Elon Musk presented his plan for how to make humans an &lt;em&gt;interplanetary species&lt;/em&gt;. &lt;a href=&quot;https://www.youtube.com/watch?v=H7Uyfqi_TE8&quot; target=&quot;_blank&quot;&gt;It is available online&lt;/a&gt; and has a number of interesting ideas. What intrigued me most, however, was how Musk illustrated why going to Mars remains prohibitively expensive. 
&lt;/p&gt;
&lt;p&gt;Musk argued that “full reusability” was vital to reducing the cost, thus making a trip to Mars viable. 
&lt;/p&gt;
&lt;p&gt;
How many of you flew on a plane to get to this conference? 
&lt;/p&gt;
&lt;p&gt;
Elon’s argument that if we built a 737 for one time use, a seat from LA to Las Vegas would cost $500,000. Of course, a plane is reused, lowering the price which makes air travel much more accessible for everyone. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide3.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Why is that? 
&lt;/p&gt;
&lt;p&gt;
Because the plane is used, day after day, year after year. The cost, prohibitively expensive when used once, is distributed over the life of the vehicle. Reusability is why a ticket from LA to Los Vegas can cost as little as $43 dollars. Reusability is a key cornerstone in Musk's plan to reduce costs to the point that going to Mars becomes viable. And reusability is a compelling feature for internal APIs.
&lt;/p&gt;
&lt;p&gt;
Building a plane for one use is crazy. &lt;strong&gt;And yet&lt;/strong&gt; enterprise organizations are filled with point-to-point software, one time use API interfaces that the organization pays for. Then they do that again, again, and again. 
&lt;/p&gt;
&lt;p&gt;
Instead of creating consistent service architecture and demonstrating service re-use, teams inadvertently produce Just a Bunch of REST Services (JBORS): a spaghetti web of One-to-One connections between providers and consumers. As a result, an enterprise may find the REST effort &lt;strong&gt;doesn’t&lt;/strong&gt; improve technical or business agility, but, instead, end ups in only swapping out IT toolsets, message formats, and protocols.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;The job of API governance is to identify and mitigate these problems.&lt;/strong&gt; 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide4.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Web APIs promise better business agility while, simultaneously, achieving better ROI on developer time. This is why I've seen an increasing number of APIs created within our organization. With sufficient volume, patterns begin to emerge. 
&lt;/p&gt;
&lt;p&gt;
Capital One, broadly speaking, has five lines of business. In the card business alone we have hundreds of sprint teams developing and deploying APIs.
&lt;/p&gt;
&lt;p&gt;
Our teams are API-First. They describe their API intent in an Swagger/OpenAPI description. They then submit this for collaboration. The graph shown here are API submissions for review to my area, the API Center of Excellence, grouped by week. In the first year there were over 2600 submissions for more than 650 unique APIs. 
&lt;/p&gt;
&lt;p&gt;
Sure, there’s a fair amount of poor resource design or misapplication of a status code in those designs. For those API design problems, the fix is straightforward. However, when you look at this many APIs, deeper, more challenging design issues begin to emerge. 
&lt;/p&gt;
&lt;p&gt;
At enterprise scale, reusability can be blocked by something deeper, something more institutional, than what can be handled simply by &quot;lexicon police&quot;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide5.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Harvard Business Review may not be where you'd expect to seek out your software architecture insight. However, they published &lt;a href=&quot;http://www.hbs.edu/faculty/Publication%20Files/08-039_1861e507-1dc1-4602-85b8-90d71559d85b.pdf&quot; target=&quot;_blank&quot;&gt;a fantastic study attempting to measure the duality between product and organization architectures&lt;/a&gt;. The conclusion was:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt; &quot;[software] products tend to 'mirror' the architectures of the organizations in which they are developed. This dynamic occurs because the organization’s governance structures, problem solving routines and communication patterns constrain the space in which it searches for new solutions&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide6.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Of course, anyone that has seen a microservices presentation will have heard of this phenomenon by a different name: &lt;em&gt;Conway's Law&lt;/em&gt;. 
&lt;/p&gt;
&lt;p&gt;
Informally, &lt;a href=&quot;http://www.design.caltech.edu/erik/Misc/Conway.html&quot; target=&quot;_blank&quot;&gt;Conway's law&lt;/a&gt; has come to be known as:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;&quot;Any organization that designs a system will produce a design whose structure is a copy of the organization's communication structure.&quot;&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
This isn't new, revelatory linkbait dominating social media at the moment. Conway made these observations about software development &lt;em&gt;in 1968&lt;/em&gt;. The reason we're still talking about it today is because it continues to illustrate a fundamental piece of human behavior. 
&lt;/p&gt;
&lt;p&gt;
As Conway, more formally, stated:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt; &quot;Consider a large system S that the government wants to build. The government hires company X to build system S. Say company X has three engineering groups, E1, E2, and E3 that participate in the project. Conway's law suggests that it is likely that the resultant system will consist of 3 major subsystems (S1, S2, S3), each built by one of the engineering groups. More importantly, the resultant interfaces between the subsystems (S1-S2, S1-S3, etc) will reflect the quality and nature of the real-world interpersonal communications between the respective engineering groups (E1-E2, E1-E3, etc).&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Let's discuss how this behavior affects API design.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide7.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Fred Brooks, in his seminal work, &lt;em&gt;The Mythical Man Month&lt;/em&gt; observed that the more people that were added to the project, the more likely that software project would take &lt;em&gt;longer&lt;/em&gt;. Just adding people to a project doesn't make it go faster. In fact, the increase in the amount of communication overhead is more likely to slow a project even after the initial 'drinking from the fire hose' phase has past. Simply put, the more people, the more communication that needs to occur. 
&lt;/p&gt;
&lt;p&gt;
That also applies to design. The more people contributing to a design, the more diverse the number of approaches, experiences, and desired outcomes a group is likely to have. The lack of cohesion result in an API design that is difficult to use. 
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://dzone.com/articles/conways-law-v-software&quot; target=&quot;_blank&quot;&gt;From Conway’s Paper&lt;/a&gt;: 
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&quot;Ways must be found to reward design managers for keeping their organizations lean and flexible. There is need for a philosophy of system design management which is not based on the assumption that adding manpower simply adds to productivity.&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Businesses need to incentivize correct bounded context creations first, then apply manpower; not the other way around.  
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide8.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
But what does the really mean? How does a company's communication patterns inadvertently affect API production? An advantage of adopting the microservice architecture is that small capsules of functionality are independently deployable. Work can be partitioned out to separate teams.  
&lt;/p&gt;
&lt;p&gt;
When beginning an API interface design, the correct identification of logical bounded contexts is essential. When done incorrectly, the resource association, or lack thereof, are a signal of the communication patterns of the organization behind the scenes. 
&lt;/p&gt;
&lt;p&gt;
Let's start with a simple example. Suppose we need to create an API that does something with a company's users. We identify that we'll need two resources - the collection (&quot;/users&quot;) and the instances within that collection (&quot;/users/{userId}&quot;). Given that we want this done ASAP, a natural mistake might be to divide the labor across two different development teams; Team A will be responsible for the endpoints against &quot;/users&quot;, and Team B will create the design for the userId instance. Adding two development teams means that we'll have the work delivered in half the time, right? Isn't this 'division of labor' in action?
&lt;/p&gt;
&lt;p&gt;
Any time you have a collections and instance resource, they strongly imply that they should be in a single API. However, I see these separated into different work units all the time. The teams are assigned to produce code by resource. Subsequently, when a you, a potential consumer of these APIs, goes to the portal site for discovery, you find multiple APIs related to a single concept - &quot;user stuff&quot;. Moreover, if the key provisioning requires separate keys in order to access each item, you've just doubled the problem on the part of the user.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide9.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's suppose that the teams &lt;em&gt;did&lt;/em&gt; deliver their contributions in the expected amount of time. Chances are, if you have two teams, you're going to get two different approaches. Take the user object on the left; this is a simple set of fields to POST to the &quot;/users&quot; resource to create a new instance. We have things like &quot;name&quot;, &quot;street&quot;, &quot;city&quot;, etc. Simple and straightforward; no room for misunderstanding, right?
&lt;/p&gt;
&lt;p&gt;
Actually, even with this simple example, there's plenty of places for discrepancies to appear. Look at the output by Team B on the left. They've taken the single &quot;name&quot; field and, instead, decided to represent it as two fields, &quot;firstname&quot; and &quot;lastname&quot;. Rather than having a number of address elements as siblings of the other user fields, they've created an array structure. They start with &quot;home&quot;, but the structure leaves room for alternative values, like &quot;office&quot; and &quot;shipping&quot;. Even the &quot;zip&quot; has been modified to be &quot;postal-code&quot;, assuming that they intend to support both US &lt;em&gt;and&lt;/em&gt; Canadian customers. 
&lt;/p&gt;
&lt;p&gt;
This is a fairly trivial example. After quickly scanning the two objects, a consumer would be able to map values from one item to the other. However, imagine the kinds of internal jargon, abbreviations, and assumptions that may exist within one group that may not be obvious to another. By separating the design across multiple teams, the API consumer is forced to bridge these discrepancies, increasing their pain and sapping their productiveness. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide10.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;	
The solution for this is to define the bounded context first. Let it determine the units of work, and then assign a single team to own that. Don't start with the number of teams available and let that drive the division of labor. Otherwise, there are guaranteed to be inconsistencies in the API nuances that are invisible to teams, but friction to integrators.
&lt;/p&gt;
&lt;p&gt;
Having a single team working on a common concept means that objects used in both the creation and retrieval are guaranteed to look the same, because the team has clear communication among itself (or &lt;em&gt;should&lt;/em&gt;). Further, when consumers go looking, what they find maps to their expected model, rather than APIs designs via division-of-labor convenience.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide11.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The second observation is a bit of a mouthful. However, how many have dealt with &quot;not invented here&quot; thinking? If so, you've seen this effect in action.
&lt;/p&gt;
&lt;p&gt;
If you're within the same line of business, or even same geographical location your development teams will be much more inclined to reach out, build a bridge, and ask a question. The faces are familiar. Those folks are &quot;one of us&quot;. 
&lt;/p&gt;
&lt;p&gt;
Different line of business? Hell, different floor in the same building? The attitude is much more likely to default to &quot;those people speak a different language - it would be easier to just do it ourselves&quot;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide12.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's return to our 'users' resource example, only now the model has been included to include an instance of a user's &lt;em&gt;preferences&lt;/em&gt;. &lt;strong&gt;Team A&lt;/strong&gt; is put in charge of the code for this feature, including the API to retrieve and update these properties. These are common things that you would find on most accounts: &lt;em&gt;language preference&lt;/em&gt;, &lt;em&gt;avatar image&lt;/em&gt;, and so on. That works well and is used to populate a 'settings' UI in an app or on the web. Everyone is happy when the 1.0 ships. 
&lt;/p&gt;
&lt;p&gt;
A little while later, Team B is working on a new feature that allows users to customize the sort orders for their search pages. They've got the ordering down to a science, but it is now time to save the user's preference somewhere. Conceptually, it &lt;em&gt;should&lt;/em&gt; be part of the 'preferences' resource. However, nobody on &lt;strong&gt;Team B&lt;/strong&gt; knows anyone from &lt;strong&gt;Team A&lt;/strong&gt;. In fact, &lt;strong&gt;Team A&lt;/strong&gt; is in a different location. &lt;strong&gt;Team B&lt;/strong&gt; &lt;em&gt;could&lt;/em&gt; pick up the phone, make the introductions, relate the use case for the zillionth time, and argue with &lt;strong&gt;Team A&lt;/strong&gt; over their existing backlog prioritization.
&lt;/p&gt;
&lt;p&gt;
Or &lt;strong&gt;Team B&lt;/strong&gt; could create a new one-off resource: &quot;/users/{userId}/preferences/sort&quot;, and avoid all that. After all, &lt;strong&gt;Team B&lt;/strong&gt; knows how to create APIs - they don't need help there. And &quot;preferences&quot; already kinda implies a collection, of which &quot;sort&quot; or &quot;sortOrder&quot; would be one. So what's the problem? 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide13.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The problem is that the lack of communication on the part of the teams will manifest as additional &quot;chattiness&quot; on the part of the consumers. Yes, adding &quot;just one more&quot; resource doesn't seem, in the moment, like that bad of thing. However, it is a slippery slope, as illustrated in this mockup on the left. 
&lt;/p&gt;
&lt;p&gt;
In this sample we see things like &quot;out-of-office&quot;, manager, time zone, etc. If the previous strategy employed by &lt;strong&gt;Team B&lt;/strong&gt; is allowed to proliferate, one could see how the resources would also explode into a host of one-off, fine-grained items. Imagine a consumer, like a mobile device, not only having to call each of these to populate a display, but track their dependencies on each of these. 
&lt;/p&gt;
&lt;p&gt;
Yuck.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide14.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The solution to this second item is identifying, and enforcing, that teams own a &lt;strong&gt;context&lt;/strong&gt;, not a &lt;strong&gt;codebase&lt;/strong&gt;. In our example, &lt;strong&gt;Team A&lt;/strong&gt; &lt;em&gt;owns&lt;/em&gt; the user preferences context (if not the user context itself). Any additions, updates, or removals from that context should be performed by the owning team. 
&lt;/p&gt;
&lt;p&gt;
If not, the conceptual debt incurred in order to convenience the API producers will be, subsequently, paid on every integration.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide15.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The 3rd Conway's Law Effect is that one's internal organization may not align to external perceptions. This can be extremely problematic when attempting to convert internal APIs to external products - things simply don’t map. Conversations are impeded and business value can't be derived, because the APIs on offer are from the perspective of internal hierarchy, rather than externally presumed functionality.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide16.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Suppose we are responsible for the APIs in a global consumer goods business called &quot;Veridian Dynamics&quot;. There's the shampoo division and, somewhere upstate, the razors folks. Across the country lies the newly acquired &quot;Big Pumpkin&quot; division, responsible for the glut of seasonal products that one sees each fall- things like pumpkin spice candy, toothpaste, toilet paper, etc. They are the &lt;em&gt;weaponized pumpkin division&lt;/em&gt;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide17.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's look at our first attempt to articulate what our conglomerate does. This first mapping results in a resource design organized around the various divisions. We create three high level path concepts to begin grouping those things that are similar. Under an &quot;api.veridian.com&quot; domain, we put an identifier for &quot;/shampoo&quot;, &quot;/razor&quot;, and &quot;/pumpkin&quot;. 
&lt;/p&gt;
&lt;p&gt;
Each line of business has its own set of needs, which they exposed as APIs in the appropriate area. These take the form of collection and instance resources under the appropriate areas. Shampoo has its formulas. Razors have their own innovative product strategies. So, too, does the weaponized pumpkin division. 
&lt;/p&gt;
&lt;p&gt;
While it might make the utmost sense in the moment, this first API resource attempt that Veridian made is problematic. Development teams have been organized around specific product divisions, and the resource produced reflect those organizational structures. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide18.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
That may not be a problem if the codification of internal structure only remains available internally. But let's introduce another fictional conglomerate, &lt;em&gt;Buy 'n Large&lt;/em&gt;, or BnL. They are a national big-box store and they are looking to carry Veridian Dynamics' products in their hundreds of stores. In order to do so, they want to integrate their purchasing and fulfillment systems with Veridian Dynamics' inventory levels. 
&lt;/p&gt;
&lt;p&gt;
Veridian Dynamics is ecstatic; they have APIs! The integration will be easy! The executives head off to the golf course while the developers send over the documentation for how to get their inventory levels. It takes awhile, as it has to be collected from each of the units and compiled into documentation for BnL.
&lt;/p&gt;
&lt;p&gt;
Shortly after that, BnL begins to grumble. They want inventories, they should be able to just call for Veridian Dynamics inventories. However, because Veridian has organized its resources by organization division, BnL has to make multiple calls. 
&lt;/p&gt;
&lt;p&gt;
Further, because each division was allowed to define its own approach, none of the calls behave the same. If one wants to retrieve inventories from the shampoo division, one would call the shampoo inventory collection. That seems straightforward until BnL's engineers try to do the same thing for razors and find (surprise!) that they need a product identifier before being able to get the stock; they're now in the business of keeping lists of razor productIds, or polling other APIs to make sure they have the latest information. And the pumpkin division? The division across the country that was recently acquired? That API is more than a little different: a caller not only needs to know the 'stock keeping unit' (or sku) but have an understanding of that division's regional warehousing. What should have been a simple task for an external entity becomes a prolonged and ongoing conversation about Veridian's internal organization.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide19.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
And that is only the immediate problem. With an API resource design aligned to the organization, what happens when new initiatives &lt;strong&gt;cross&lt;/strong&gt; those boundaries? For example, what if the shampoo and pumpkin divisions join forces to create pumpkin-spiced shampoo? Under the previous model, does that go under the 'pumpkin' or 'shampoo' top-level paths? How are external entities going to know where to find the self-lubricating razor product that comes out of a shampoo and razor team-up? Where do we send the congressional inquiry when Veridian announces its razor pumpkin home defense product? 
&lt;/p&gt;
&lt;p&gt;
Ultimately, if there is an external perception of a central concept, then the APIs - at least the external facing ones - should express that concept. In our BnL example, if they perceive Veridian's products as a single entity, then the resource design should reflect that. If being able to call for the inventories of individual products is important, we could create an API endpoint of a GET to '/products/{productId}/inventories'. If BnL still wanted all inventories, we could maintain path hierarchy by pass a wildcard, in this case the tilde ('~'), for the productId. There are several options. The point is, there API design would be aligned to the external expectation of the business function, not the internal organizational chart. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/farley.gif&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;em&gt;#TFW Devs Realize These Problems Can't be Fixed with Tools, but by Changing People&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
If we continue to treat API design is something that is just for developers, then developers will attempt to fix the problems with the developer tools on hand. But, as Conway’s Law implies, no amount of automation or framework selection will solve this problem.
&lt;/p&gt;
&lt;p&gt;
I've demonstrated three ways in which API Design is effected by the communication patterns in a company. But how do you change those patterns? 
&lt;/p&gt;
&lt;p&gt;Ultimately, changing the communication patterns means changing the culture. That may sound daunting. But there are common sense, incremental ways of getting started.&lt;/p&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide21.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The first step is recognizing that there may be a problem. Viewing API design through the lens of Conway's law allows us to find spots where an API's design may be suboptimal due to organizational factors. But once we've identified that there is a problem, what do we do about it? 
&lt;/p&gt;
&lt;p&gt;
Blue Ocean Strategy was written by W. Chan Kim and Renee Mauborgne in 2005. In it the authors articulated the challenges and possible approaches for creating meaningful organizational change. Much of the latter portion of the book includes impactful guidance for making culture change possible. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide22.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The book identifies for challenges to cultural change. The first is &lt;strong&gt;cognitive&lt;/strong&gt; challenges. Going back to our Veridian and BnL example, the engineers that designed the first set of resources may not realize how difficult those APIs are for an external entity. 
&lt;/p&gt;
&lt;p&gt;
The second challenge is &lt;strong&gt;motivation&lt;/strong&gt;. Once the inconsistencies is brought to the Veridian engineers' attention, they may &lt;em&gt;understand&lt;/em&gt; why their initial design is suboptimal, but have very little financial or intellectual motivation for making a change. There may be a lack of urgency:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&quot;It's a pain, sure. But that is job security for their guys, am I right?&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
The incentives here may be intrinsic (why aren't we the API Twilio or SendGrid of retail giants?) or extrinsic (we have quantified the amount of lost sales the integration headaches are costing our business). Either way &lt;em&gt;understanding&lt;/em&gt; there is a problem and wanting to &lt;em&gt;take action&lt;/em&gt; are two different things. 
&lt;/p&gt;
&lt;p&gt;
The next challenge to cultural change are resources (or the lack thereof). Suppose that we've shown Veridian's engineers the problem. And they are motivated to solve it because they see how the current design is limiting new initiatives. However, they may question where the budget for this new centralized, product API comes from. Or state that redesigning the API needs to be put on a backlog, the prioritization to be fought over at the next planning iteration. 
&lt;/p&gt;
&lt;p&gt;
The final challenge may be the most difficult: the &lt;strong&gt;institutional politics&lt;/strong&gt;. Teams within each one of Veridian's divisions may acknowledge there is a problem (but it is someone else's problem). They are motivated to change (if that change supports their already existing initiatives). They might be committed to helping the company get more business (as long as it doesn't come at the expense to what the divisions are doing). 
&lt;/p&gt;
&lt;p&gt;
The politics don't go away because we're talking about technology. If anything, they get &lt;em&gt;more complex&lt;/em&gt;.  
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide23.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
That sounds daunting, because it is. Positive culture change within a company can be one of the most difficult professional things to do. However, not all is lost. There are ways of seeding change that don't involve wheelbarrows full of money or a vice president title. 
&lt;/p&gt;
&lt;p&gt;
To begin, start with disproportionate influencers. You know these people - the ones who are incredibly plugged in, always seem to get the regular raises, and who leadership turns to in meetings. Every company has these stars. Once these people are identified, determine how your agenda compliments, or even furthers theirs. Appealing to their better nature or a sense of duty will only get you so far. But if it can be demonstrated how your course of action actually gets them what they want, and things will begin to happen. 
&lt;/p&gt;
&lt;p&gt;
Once the disproportionate influencers are onboard, &lt;em&gt;shine a light&lt;/em&gt; on their accomplishments. To change a culture, you have to paint a picture of what the destination will look like. Not only does that reward the influencer for their alliance, but it communicates to the rest of the org what behavior gets rewarded.
&lt;/p&gt;
&lt;p&gt;
One mistake that wordy people, like myself, make is assuming that a single presentation, or a well-reasoned argument, is all it takes. This may appeal to people's logic. However, action rarely takes root until the audience &lt;em&gt;feels the pain&lt;/em&gt; of a certain situation. The realities of business-as-usual (BAU) don't become real until individuals are living it.
&lt;/p&gt;
&lt;p&gt;
Finally, resources should be redistributed from &quot;coldspots&quot; (high need but little impact) to &quot;hotspots&quot; (big impact for little investment). Can ongoing, in-person training be recorded and provided in self-service fashion? Constantly evaluating where time is being spent, and the impacts of that time, is critical for any effort. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide24.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
At this point, I've hopefully made the argument that an organization's structure can adversely affect API design. Any API design culture needs to:
&lt;/p&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt; Incentivize correct bounded context creation first, then apply manpower&lt;/li&gt;
&lt;li&gt; Overcome resistance to reuse inherent in the org chart&lt;/li&gt;
&lt;li&gt; Align bounded context for external APIs with external expectations&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Thank you for your attention.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Update:&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;For more thinking along these lines, check out James Lewis's 2015 GOTO Conference talk, &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=l1tyfb5we7I&quot;&gt;How I Finally Stopped Worrying and Learnt to Love Conway's Law&lt;/a&gt;&lt;/em&gt;. Concepts include John Boyd's OODA Loops and the microservice stability onion. Really.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 07 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/12/07/ConwayAndAPIDesign/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/07/ConwayAndAPIDesign/</guid>
        
        <category>REST API</category>
        
        <category>Melvin Conway</category>
        
        <category>presos</category>
        
        <category>Elon Musk</category>
        
        <category>Harvard Business Review</category>
        
        <category>Fred Brooks</category>
        
        <category>Blue Ocean Strategy</category>
        
        <category>conferences</category>
        
        <category>James Lewis</category>
        
        <category>John Boyd</category>
        
        <category>microservices</category>
        
        
      </item>
    
      <item>
        <title>Kubernetes, Sidecars, and Service Meshes, Oh My &amp;#x2709;</title>
        <description>&lt;p&gt;Two things happened, independently, that dovetailed into an industry movement worth talking about. Both the AWS re:Invent event and Thoughtworks Technology Radar were &lt;em&gt;heavy&lt;/em&gt; on service meshes; specifically, the kind delivered through Kubernetes. But what is Kubernetes, what does that have to do with a sidecar, and how does this effect API developers? I attempt to shed some light on this recent phenomena.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2017-12-05&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-2017-12-05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/12/05/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/05/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>kubernetes</category>
        
        <category>service meshes</category>
        
        <category>AWS</category>
        
        <category>Ben Thompson</category>
        
        <category>strategy</category>
        
        <category>Kong</category>
        
        <category>API Gateways</category>
        
        <category>Facebook</category>
        
        
      </item>
    
      <item>
        <title>Thanksgiving Leftovers and Microservices &amp;#x2709;</title>
        <description>&lt;p&gt;While I might be tripping on tryptophan, the authors in this edition of REST API notes were busy sharing insights. In addition to a higher-than-usual smattering of industry news (Sendgrid, RESTlet, Twitter, AirBnB, and Strip), I gather up numerous, recent pieces on microservices and put them in one single, easily digestible place. Give it a gander.  &lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-11-28&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-11-28&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/11/28/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/28/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Kostas Livieratos</category>
        
        <category>DX</category>
        
        <category>Kin Lane</category>
        
        <category>microservices</category>
        
        <category>InnoQ</category>
        
        <category>Stefan Tilkov</category>
        
        <category>Daniel Bryant</category>
        
        <category>Mike Amundsen</category>
        
        <category>Sendgrid</category>
        
        <category>Twilio</category>
        
        <category>RESTlet</category>
        
        <category>Talend</category>
        
        <category>Runscope</category>
        
        <category>Hitch</category>
        
        <category>New Relic</category>
        
        <category>Twitter</category>
        
        <category>AirBnB</category>
        
        <category>Stripe</category>
        
        <category>OpenAPI</category>
        
        <category>Romain Huet</category>
        
        
      </item>
    
      <item>
        <title>An Interview with Kin Lane  &amp;#x2709;</title>
        <description>&lt;p&gt;I recently had the opportunity to sit down to interview Kin Lane, the API Evangelist. Shot at Capital One, we discuss the past, present, and future of web-based APIs. &lt;/p&gt;

&lt;p&gt;
	&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DbatBt_fPug&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-11-16&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-11-16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/11/16/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/16/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Kin Lane</category>
        
        <category>video</category>
        
        <category>Capital One</category>
        
        
      </item>
    
  </channel>
</rss>
