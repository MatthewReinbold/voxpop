<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold, the Director for Capital One's   Platform Services Center of Excellence. Much of what appears here dated prior to 2017 was  previously published at VoxPop.co and VoxPopDesign.com. There's also a bit  of legacy detritus from older experiments like mutednoise.com,  miltiantgeek.com, codeaway.org, etc. Yes, I am the adult male that still plays with Lego. You should too.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Nov 2018 10:58:10 -0500</pubDate>
    <lastBuildDate>Thu, 15 Nov 2018 10:58:10 -0500</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Soft and Hard Power in Software Governance</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/11/lights.png&quot; /&gt;&lt;figcaption&gt;An complex image of power at play across a ceiling.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the privilege (or curse, depending on your predilection) of working in a software governance role for the last several years. What started as a simple API design advisory job has scaled into something that is equal parts technical acumen, developer empathy, business strategy, process psychology, and cultural anthropology. In growing, I’ve had to learn some new things.&lt;/p&gt;

&lt;p&gt;One of those things is the power within systems, and how it is wielded.  I’ve seen top-down, “do as your told”, initiatives flounder, despite the impressive titles of those declaring the mandate. This is because applying linear thinking in blunt ways to dynamic systems often fails.&lt;/p&gt;

&lt;p&gt;But it doesn’t have to be that way. If you have a technical leadership position within your organization, &lt;em&gt;you have more at your disposal than ‘my way or the highway’&lt;/em&gt;. Success in a non-linear system requires an appreciation of different governance power: soft power and hard power.&lt;/p&gt;

&lt;h2 id=&quot;soft-power&quot;&gt;SOFT POWER&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_power&quot;&gt;Soft power&lt;/a&gt; is a political concept developed by Harvard University’s Joseph Nye. Nye defined soft power as the ability to achieve objectives through appeal and attraction, rather than force or coercion. He clarified that it is in opposition to “command power”, or a nation “ordering others to do what it wants.”&lt;/p&gt;

&lt;p&gt;Soft power applies to change agents within a company who may have the &lt;em&gt;responsibility&lt;/em&gt; of achieving technology initiative outcomes, but lack the authority over all the participants. They cannot command people to comply. Instead, they have to rely on a different set of actions: &lt;strong&gt;diplomacy&lt;/strong&gt;, &lt;strong&gt;strategic communication&lt;/strong&gt;, &lt;strong&gt;assistance&lt;/strong&gt;, &lt;strong&gt;negotiation&lt;/strong&gt;, and &lt;strong&gt;community building&lt;/strong&gt;. These actions share an inclusive vision for the future that others embrace without being told.&lt;/p&gt;

&lt;p&gt;Creating standards or processes with a soft power approach may be as simple as stating a new expectation for teams to aspire to in a public forum. Or it might be a mutual agreement between parties on how to move forward on a particular issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soft power excels when the situation is new and/or evolving rapidly.&lt;/strong&gt; During this phase of an initiative, it is beneficial to adapt to new information while experience is gathered. Needs, some of which could not have been anticipated ahead of time, can be rapidly responded to. In cases where governance does not know what the final outcome should be, where flexibility and experimentation are most important, soft power should be the preferred approach until a desirable tenable solution is discovered.&lt;/p&gt;

&lt;h2 id=&quot;hard-power&quot;&gt;Hard Power&lt;/h2&gt;
&lt;p&gt;Hard power is the ability to command (or restrict) a person or group to a specific set of behaviors. &lt;em&gt;Usually&lt;/em&gt;, it describes the recognized authority for one individual (or organization) to direct another. But &lt;strong&gt;hard power can also be described as the set of allowances that a software system exposes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lawrence Lessig, in his books &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_and_Other_Laws_of_Cyberspace&quot;&gt;Code and Other Laws of Cyberspace&lt;/a&gt; (1999), and &lt;a href=&quot;https://en.wikipedia.org/wiki/Code:_Version_2.0&quot;&gt;Code v2&lt;/a&gt; (2006) proposed that software regulates behavior the same way laws do, albeit within the confines of a program. Software commands (or restricts) the user’s actions in a way that coercive, soft power methods do not.&lt;/p&gt;

&lt;p&gt;Soft power may be a suggestion to do something a particular way via a persuasive argument. Hard power, as delivered via software tooling, is the encoded set of things a user is allowed to do. There is less malleability to a specific context. But the outcomes are stable and predictable. Also, because it is delivered via software, hard power can scale more efficiently than soft power.&lt;/p&gt;

&lt;p&gt;A change to hard power, however, &lt;em&gt;means changing code&lt;/em&gt;. Hard power’s capability to react and adapt is only as fast as a team’s deployment cycle. That cycle may include creation of a backlog item, gathering of stories, prioritization in a sprint, coding, functional testing, integration testing, user-acceptance testing, and final deployment. For stable, mature environments that don’t change often, that round-tripping may be an acceptible trade off for hard-power’s benefits.&lt;/p&gt;

&lt;h2 id=&quot;two-recent-examples&quot;&gt;Two Recent Examples&lt;/h2&gt;
&lt;p&gt;Two recent work examples illustrate how I employ soft and hard power to support developers delivering business value.&lt;/p&gt;

&lt;p&gt;In one case, we were tasked with creating a collaboration process on a newly launched technology platform. It was so new, in fact, that what success looked like was tbd. With so many things like developer maturity, throughput, expectations, etc., yet to be determined, we needed to have the flexibility to experiment and change over time. Few things warranted dedicated tooling, or a ‘hard’ power approach, in this situation. Ignore the delivery lag; nothing kills developer moral like telling them to throw out what they just proudly delivered because “the situation is fluid”.&lt;/p&gt;

&lt;p&gt;In the second situation, we recognized an opportunity to express hard power through our lifecycle tooling. The process flow was mature, with clear parameters and desired outcomes. However, we had an immediate problem that stalled a team. In that case, we defined a soft power agreement (“we will proceed with things in this way, and manually track what comes through during this intermediate phase”) until the hard power updated could be applied. It allowed us to solve issues today while we waited for backlog priority could align.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being a change agent managing a software process across thousands of developers is no simple task. Moving from a simple linear system to a complex ecosystem requires a different set of approaches. I came from a development background; “applying power” talk still makes me  uncomfortable. But, in order to be effective in my role, it is essential understand the nuance and how it can be applied.&lt;/p&gt;

&lt;p&gt;This framework for how I classify approaches has been helpful to me, and hopefully it will be helpful for you, too.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Nov 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/11/13/SoftPowerVHardPower/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/13/SoftPowerVHardPower/</guid>
        
        <category>API Governance</category>
        
        <category>soft power</category>
        
        <category>hard power</category>
        
        <category>Joseph Nye</category>
        
        <category>management</category>
        
        <category>Lawrence Lessig</category>
        
        
      </item>
    
      <item>
        <title>A Gardener's Approach to Growing an API Culture</title>
        <description>&lt;p&gt;My work on pragmatic software governance has evolved. It started with a focus scaling good API design across a modern enterprise company. Increasingly, I'm interested in how culture impacts technology adoption. Why are do some approaches become deeply embedded within an org, while others disappear after a hot minute? &lt;/p&gt;

&lt;p&gt;I gave this talk several times this past fall - most notably at APIStrat (Nashville) and API City (Bremerton, outside Seattle). For many, the content may have been unrelatable; what's all this talk about ecosystems when one is only submitting pull requests to a single branch? For a select subset of enterprise folks, however, these issues of scale and co-habitation loom large. There's also few resources available. Hopefully, this post will provide some insight into what they're seeing based on my own experiences.&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/01.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Hello everyone. My name is Matthew Reinbold and the title for this talk is &quot;A Gardener's Approach to Growing an API Culture&quot;. If that topic sounds a bit different, that's because I hope it is. And I'm guessing that it might have attracted an audience in search of something a bit different. &lt;/p&gt;

&lt;p&gt;What this talk is about is APIs at scale. What considerations occur when you go from managing &quot;a few APIs&quot; to being a gardener of an ecosystem?&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/02.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I don't know how big your organizations are but, no doubt, you seen an increase in the level of software complexity. Also, our industry, collectively, has adopted some very nasty habits; everything from move fast and break things to resume-driven development. How do we cultivate software design that, as Fielding described, has a &quot;scale of decades&quot; when &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;the average developer tenure at a company is a year and a half&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;What I hope to do in this talk is share some of what I have found to be resilient about an API culture, make it relatable through the use of a garden analogy, and share some techniques for those grappling with ongoing technological change within their own organizations. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/03.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;For the last several years I've been the Director of the Capital One Platform Services Center of Excellence.&lt;/p&gt;

&lt;p&gt;My team and I are responsible for gardening a complex, distributed-systems ecosystem. Capital One has around 9000 developers that we work with on API and event streaming designs, standards, and lifecycle management. These developers are spread across numerous North American locations and multiple lines of business. They've produced thousands of APIs that we manage with our own infrastructure, resulting in more than two billion request/responses a day. And our messaging infrastructure is on pace to surpass the historical adoption trends we experienced for internal APIs. &lt;/p&gt;

&lt;p&gt;My team and I are responsible for software process management. We build shared communities of practice and federated responsibility.  We've used centralized design mangaement to best cross-pollinate the best ideas and multiply infrastructure across the organization. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/04.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;In addition to powerful internal functionality, our investments into distributed architectures have allowed us to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be the first company to offer Amazon Echo access to their financial accounts, &lt;/li&gt;
&lt;li&gt;Win multiple JD Power Awards for our mobile experience&lt;/li&gt;
&lt;li&gt;Sign partnership portfolios worth tens-of-billions-of-dollars&lt;/li&gt;
&lt;li&gt;Hover just outside the top Fortune 100 companies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems aren't a theoretical gamble for us. It's who we've become as a culture. It's how we win in the competitive marketplace.&lt;/p&gt;

&lt;p&gt;We are reaping the fruits of our labor. And increasingly, I'm not just interested in the harvest that we have, but how we keep it healthy and prosperous going forward. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/05.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I like this image – it takes many of the components of a healthy garden and breaks them up into their individual components. We can have a greater appreciation for all interplay that occurs within one of these systems.&lt;/p&gt;

&lt;p&gt;I'm guessing most people here would be familiar with a garden ecosystem. There's the ground, which includes the mineral composition, the producer plant life, and the consumers - both the animals attracted by the plants - the worms, the bees - and the second order consumers - the snakes, the spiders, etc. I glossing over a tremendous amount, and probably doing a disservice in the process, but an ecosystem can be complex. &lt;/p&gt;

&lt;p&gt;But ecosystems don't just happen. Throwing seeds on the ground and coming back months later expecting something to harvest isn't statistically likely. And micro-managing the interplay between the numerous participants in such a complex environment doesn't scale.&lt;/p&gt;

&lt;p&gt;[Image taken from &lt;a href=&quot;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&quot;&gt;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/06.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Likewise, technology ecosystems have numerous components. Attempting to address only one of them, while ignoring all the other factors, is like attempting to make a garden flourish while only being able control the flow of water. What is adequate during times of drought or flooding does little to deal with insect infestation, or an invasive species.&lt;/p&gt;

&lt;p&gt;[Breakdown of elements taken from Matt McLarty's presentation, &quot;&lt;a href=&quot;https://www.slideshare.net/MattMcLarty/designbased-microservices-aka-planes-trains-automobiles&quot;&gt;Design-based Microservices, AKA Planes, Trains, and Automobiles&lt;/a&gt;&quot;, slide 42]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/07.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Kudzu is a Chinese vine introduced by way of Japan to the United States. It was a perfect match for the climate of the southeastern United States. In the right conditions, a Kudzu vine can grow almost a foot a day (or between 19 to 30 centimeters). During the dust bowl of the 1930's, planting Kudzu was encouraged as a way of preventing soil erosion; it's addition to the ecosystem was a desirable thing. &lt;/p&gt;

&lt;p&gt;And then the ecosystem changed. Rain returned and these places where Kudzu had taken root suddenly themselves with a problem. It grows so fast it smothers native plants and trees, drastically reducing access to sunlight and water. It eventually kills them and will devastate ecosystems dependent on native plant and wildlife. In the US it does not have any natural predators.&lt;/p&gt;

&lt;p&gt;[Photo by Eli Christman and shared under a Creative Commons 2.0 license. Original photo here: &lt;a href=&quot;https://flic.kr/p/abgksv&quot;&gt;https://flic.kr/p/abgksv&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/08.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;The modern software development environment has also been one of increasing complexity. On this page are a variety of processes, techniques, frameworks, technologies, and styles.&lt;/p&gt; 

&lt;p&gt;The last decade has been marked by creating incrementally smaller deployable units. The tradeoff of increasingly granular executables is a non-linear increase in configuration and communication management. Today's modern development environment includes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Microservices, functions, SaaS-all-the-things&lt;/li&gt;
&lt;li&gt;Polyglot languages (at least in theory)&lt;/li&gt;
&lt;li&gt;Cloud and Containers&lt;/li&gt;
&lt;li&gt;Software-Defined Everything&lt;/li&gt;
&lt;li&gt;Everything Optimized for Replacement&lt;/li&gt;
&lt;li&gt;Existence of Platform Teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This trend results in complexity, and complexity leads to emergent behaviors, or behaviors that may not be easily addressed with linear thinking. It is an &lt;em&gt;ecosystem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How does one go about determining the right fit? Which of these things will be around two years from now? Five? Is there a way of identifying those things, like Kudzu, which seem to have short term benefits and long term ramifications? How do we identify complimentary species to our ecosystems and those that will unbalance it?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/09.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Think about the complex ecosystem of the forest and how it handles change. There is a size hierarchy: pine needle, tree crown, patch, stand, forest, and biome. But those differences in scale are also a time hierarchy; said differently, as we increase in scope, we also increase in time frames of reference:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The needle changes within a year&lt;/li&gt;
&lt;li&gt;the tree crown over several years&lt;/li&gt;
&lt;li&gt;the patch over many decades&lt;/li&gt;
&lt;li&gt;the stand over a couple centuries&lt;/li&gt;
&lt;li&gt;the forest over a thousand years&lt;/li&gt;
&lt;li&gt;and the biome over ten thousand years&lt;/li&gt; 
&lt;/ul&gt;

&lt;p&gt;What can happen in the short term is &lt;em&gt;constrained&lt;/em&gt; by the larger, slower moving concepts. The range of what the needle may do is constrained by the tree crown, which is constrained by the patch and stand, which are controlled by the forest, which is controlled by the biome.&lt;/p&gt;

&lt;p&gt;It is a complex ecosystem. &lt;strong&gt;But it is not static&lt;/strong&gt;. Innovation happens throughout the system via evolutionary competition among individual trees dealing with the stresses of crowding, parasites, predators, and weather.&lt;/p&gt;


&lt;p&gt;[Photo by Julien R on Unsplash]&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/10.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;&lt;strong&gt;Stewart Brand's Pace Layer model is an attempt to capture this layering&lt;/strong&gt;. &quot;Pace Layers&quot; appeared in Stewart's 1999 book, The Clock of the Long Now, and was an extension of the architectural concept of &quot;shearing layers&quot;. Shearing Layers, a concept coined by architect Frank Duffy, was elaborated on by Stewart in his 1995 book, How Buildings Learn. It describes how buildings are a set of components that evolve in different timescales. The book was, subsequently, &lt;a href=&quot;https://www.youtube.com/user/brandst/videos&quot;&gt;turned into a BBC television series that can be viewed online&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different parts of a society, or industry, move at different rates. Concepts at the top of the graph change at a rapid clip. The further down one goes, the slower change occurs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take, for example, a conference center.  It is a complex ecosystem necessary to produce a given outcome: an event. The chairs are reconfigured as need dictates. They'll be swapped out according to fashion. They have rates of change much greater than the carpet or the visual facade, which changes faster than the street ordinances. All of which changes faster than our cultural tendency getting together face to face. &lt;/p&gt;

&lt;p&gt;It is the combination of fast and slow moving parts that gives a system its resiliency. The layers are not independent. As each moves at its own speed, there is tension at the edges where they layers touch, something called &quot;slip zones&quot;.&lt;/p&gt; 

&lt;p&gt;Consider any recent emerging technology. Those electric scooters you've probably seen around are in a slip zone. Will they decend beyond a fad, becoming part of a city's transportation &lt;strong&gt;infrastructure&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://www.theverge.com/platform/amp/2018/10/24/18016486/oakland-scooter-meeting-skip-lime-bird-helmet-safety-responsibility&quot;&gt;perhaps even requiring governance&lt;/a&gt;&lt;/strong&gt;, to become part of culture? Or is it a fad, resulting in some commerce but disappearing after the VC money runs out? &lt;/p&gt;

&lt;p&gt;Fidget spinners were a fad, that caused changes to commerce to sell product. But they never became part of people's routines (their habitual infrastructure). There was no need for governance, and they never embedded themselves in cultural identity. As a result, the ubiquitous thing one summer is easily disposed of and replaced by the next. 
&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/11.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;This is such a beautiful summary, it is worth repeating.&lt;/p&gt;

&lt;p&gt;&quot;The fast parts learn. The slow parts remember. The fast parts propose things, the slow parts dispose things. The fast and small instruct the slow and big with accrued innovations and occasional revolutions. At the same time, and we don't respect this as much as we should, the big and the slow control the fast and the small with constraints and with constancy. All the attention is paid to the fast parts. But all the power is in the slow parts.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Each layer needs to respect each other's pace. If commerce is too dominate in a society, it can jerk governance around harmfully. Or it can reach down and disrupt culture and nature by going too fast while not having the patience to deal with infrastructure problems. The flip side is where the Soviet Union tried to run everything at governance pace (five year plans, for example) and they destroyed other layers.&quot;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/12.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;So let's start to bring this together. &lt;/p&gt;

&lt;p&gt;The web as a platform is a result of its architectural simplicity, the use of a widely implemented and agreed-upon protocol (HTTP), and the pervasiveness of common representation formats (JSON). Fashion (gRPC, GraphQL, RPC, SOA, etc.) will come and go. However, creating distributed systems with web-based APIs in the same manner of the web will continue because of foundation in something deeper, more substantial. This is because of web principles like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Independent Deployment and Evolution&lt;/li&gt;
&lt;li&gt;Independent Scalability&lt;/li&gt;
&lt;li&gt;Resiliency/Isolation &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key for distributed systems success is &lt;strong&gt;a few well-known actions and the application-specific interpretation of resource representations.&lt;/strong&gt;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/13.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;According to the book, ‘&lt;a href=&quot;https://global.oup.com/academic/product/the-modern-firm-9780198293750?cc=us&amp;amp;lang=en&amp;amp;&quot;&gt;The Modern Firm&lt;/a&gt;', by John Roberts, culture is three things: &lt;strong&gt;people, architectures,&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A software development culture is not ping pong tables and keg stand Fridays. Culture is not open floor plans or the glowing adjectives used in press releases. Culture is how a company behaves when stressed.&lt;/p&gt;

&lt;p&gt;By mimicking the web, and embracing people, architectures, and routines that promote &lt;strong&gt;loose coupling&lt;/strong&gt;, &lt;strong&gt;individual scaling&lt;/strong&gt;, and &lt;strong&gt;resiliency&lt;/strong&gt; between individual elements, the company I work for has embraced an API culture for sustaining innovation. How successful would a garden be if every plant had to grow at the same rate? If the entire ecosystem was comprised of a single flower? We nurture an ecosystem that is diverse, has a degree of independence, but is &lt;strong&gt;mutually responsible to the whole&lt;/strong&gt;. More importantly, knock on wood, that firmament will remain stable while we evaluate new technology fashions that arise.&lt;/p&gt;

&lt;p&gt;The faster layers propose things. But we're not beholden to try everything. The slower-moving, cultural layer &lt;em&gt;constrains&lt;/em&gt; the faster moving layers for the stability of the entire system. That said, how do we use this when evaluating change? &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/14.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Let's look at two comparable, but different, API-related items.&lt;/p&gt; 

&lt;p&gt;On the surface, we might lump things like hypermedia and microservices together. They are both popular topics on the API speaking circuit over the last half decade and, in a rush, we can hand-wave at them as &quot;web-API&quot; things. &lt;/p&gt;

&lt;p&gt;I've written my email newsletter, &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/archive&quot;&gt;REST API Notes&lt;/a&gt;, for the last several years. I consume numerous blog posts, slide decks, and video recordings every week in an attempt to share only the best, most salient information with my busy audience. In parsing all that material, it has become clear that microservices has taken root across software development shops in a way that hypermedia hasn't. It doesn't mean that hypermedia is a bad idea - far from it. And yet, time and time again, these hypermedia seeds cast don't seem to flourish. &lt;/p&gt;

&lt;p&gt;The Pace Layer model provides a theory.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/15.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Microservices are implementation details. They are supposed to be the smallest possible cohesive unit in a system.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;http://shop.oreilly.com/product/0636920050308.do&quot;&gt;Irakli Nadareishvili&lt;/a&gt; likes to say, &quot;microservices are not about reuse!&quot; They are about reducing the coordination overhead costs among teams. They are not &quot;little APIs&quot;, although they use all of the infrastructure (the protocols, networking frameworks, etc.) that already exists within a company. They lack exposure (remember, they're not about reuse) in order to maximize their ephemeraility.&lt;/p&gt;

&lt;p&gt;They are like the chairs in this building. Or the pine needles in the forest. Their rate of change combined mean that they were primed for taking off. The rate of change is within the infrastructure layer.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/16.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Hypermedia is more than just providing links to related information, although it might be pitched that way.&lt;/p&gt;

&lt;p&gt;At a previous e-commerce job, I was an backend developer and architect for a product &lt;em&gt;perfect&lt;/em&gt; for hypermedia. On checkout, the business wanted to dynamically A/B test various upsell offers based on the contents of the cart. Because of the rate at which they wanted to test offers, combined with the dynamic nature of the cart contents, trying to bake every possible upsell paramutation into an executable that went through an app store approval process (itself which might take two weeks) was impossible.&lt;/p&gt;

&lt;p&gt;Hypermedia is a great solution for &quot;workflow&quot; like events, which the checkout flow primarily was. Each state returned by the server would provide links to the next step. That next step may change, depending on what is being tested. The mobile application would navigate the path presented it, and the business case would be fulfilled.&lt;/p&gt;

&lt;p&gt;Despite the natural fit, however, the work floundered. Hypermedia is more than just links. Its an inversion of communication flow. Rather than the mobile developer being able to look at the totality of exposed functionality and call their shot, they where now expected to respond to a bread trail they were given. It was a different &lt;em&gt;architecture&lt;/em&gt; resulting in a different calling &lt;em&gt;routine&lt;/em&gt; for the &lt;em&gt;people&lt;/em&gt; involved. As we mentioned from John Robert's definition, people, routines, and architecture are aspects of &lt;strong&gt;culture&lt;/strong&gt;.&lt;/p&gt; 

&lt;p&gt;Hypermedia, done correctly, challenges conventional development paradigms. It requires the appropriate supporting culture, something that moves more slowly to support new forms. It doesn't mean that hypermedia will never happen. What it does mean, however, is that adoption is on the order of a &lt;strong&gt;culture&lt;/strong&gt; change, not an &lt;strong&gt;infrastructure&lt;/strong&gt; one. Successful culture change requires a different set of approaches to pull off successfully.&lt;/p&gt;

&lt;p&gt;Note: this is a model. Anyone using a model should be quick to share the George Box quote, &quot;all models are wrong, but some are useful&quot;. But despite the fact they are an oversimplified version of reality, a good model let's us see a situation in a new light, and makes us ask different questions in the pursuit of new and/or different insights.&lt;/p&gt;

&lt;p&gt;Using Stewart Brand's Pace Layering model, I conclude that there haven't been many compelling cases of hypermedia because the layer that needs to change, an organization's people and routines representing its culture, move at a much slower rate. Culture change is much more challenging than changing infrastructure. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/17.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I'll leave the exercise of walking through GraphQL, what change layer it is most likely to come to rest in, and the ramifications that will have for future IT environments to the reader. However, if you do that, make sure to key the following questions in mind:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Of the problems that GraphQL claims to solve, out of which layers in the pace layer did those problems emerge?&lt;/li&gt;
&lt;li&gt;In which layer are those problems most felt?&lt;/li&gt;
&lt;li&gt;From which layer is a solution most likely to merge?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, consider a company where GraphQL is being considered. Perhaps previously created REST-ish APIs have had poor bounded contexts, ill fitting with desired business experiences. But if the culture of a company (the people, routines, and architectures) can't accruately articulate well isolated, composed pieces of business functionality, what happens if the culture stays the same and we swap infrastructure, instead?&lt;/p&gt;

&lt;p&gt;Your mileage may vary. But I'd argue that, in the above example, you've conceded defeat and pushed the hard work of creating well-understood business interactions onto the integrating client. Is that a sustainable decision for your ecosystem? Or, over time, will we look back on this as a moment where Kudzu was encouraged?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/18.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;We work in an industry proficient in eating its young, of chasing the dragon of the ‘next big thing', of disposing perfectly workable solutions in the pursuit of the next silver bullet. &lt;/p&gt;

&lt;p&gt;We can't (or want to) stop the growth of our ecosystems. Excellence within our software development circles will remain an ongoing, evolving conversation with constant change. But we also don't have to accept a binge-purge cycle of architectural violence as a given. We can break that pattern. We can stand on the shoulders of giants, rather than repeatedly attempting to chop them off at the knees. &lt;/p&gt;

&lt;p&gt;Like attentive gardeners, we can carefully cultivate dynamic, complex environments where innovation can happen, while being wary to threats that might jeopardize the balance. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/19.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Thank you for your attention.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/10/31/Gardeners-Approach/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/31/Gardeners-Approach/</guid>
        
        <category>REST API</category>
        
        <category>presos</category>
        
        <category>APIStrat</category>
        
        <category>Capital One</category>
        
        <category>API Governance</category>
        
        <category>conferences</category>
        
        
      </item>
    
      <item>
        <title>Adding SSL to WebAPI.events</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/08/screenshot.png&quot; /&gt;&lt;figcaption&gt;A screenshot of the previous WebAPI.events desktop experience.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-original-architecture---spreadsheets--3rd-parties--captive-portals-oh-my&quot;&gt;The Original Architecture - Spreadsheets &amp;amp; 3rd Parties &amp;amp; Captive Portals, Oh My!&lt;/h2&gt;
&lt;p&gt;Years ago, in an effort to support the API community, I started a website called “&lt;a href=&quot;https://webapi.events&quot;&gt;WebAPI.events&lt;/a&gt;”. It listed a collection of upcoming, in-person conferences and meetups for those interested in service design.&lt;/p&gt;

&lt;p&gt;I used the original site as an opportunity to play with several ideas converging in my head. The first was using a Google spreadsheet as the data store. Setting up, securing, hosting, and maintaining traditional database software seemed like overkill for a little project like this. A spreadsheet also, significantly, broadens the audience able to follow with a similar approach.&lt;/p&gt;

&lt;p&gt;I also didn’t think a little “tool” site warranted a paid hosting account. Github pages are a simple, free means of hosting “static” sites - those comprised of CSS, HTML, and JavaScript. The “trick” was to get the information from the spreadsheet to Javascript uploaded to Github. For that, I used APISpark, from Restlet. After some configuration, it converted a Google spreadsheet into an API.&lt;/p&gt;

&lt;p&gt;That worked for many years. It never occurred to me, however, that SSL was something that this kind of site needed. Even when free certs became available, from sources like &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncyrpt&lt;/a&gt;, it seemed silly. I wasn’t storing sensitive information!&lt;/p&gt;

&lt;p&gt;Besides, not having SSL made WebAPI.events my go-to on “&lt;a href=&quot;https://en.wikipedia.org/wiki/Captive_portal&quot;&gt;captive portals&lt;/a&gt;”. Encrypted sites, like Google or Twitter, usually just timed out if I attempted to open them before agreeing to the captive portal terms. A quick browse attempt to WebAPI.events, however, and the hotel sign-in page appeared immediately.&lt;/p&gt;

&lt;h2 id=&quot;the-need-for-change&quot;&gt;The Need for Change&lt;/h2&gt;
&lt;p&gt;Today, however, there are several reasons to change. The first was the &lt;a href=&quot;https://www.theverge.com/2018/2/8/16991254/chrome-not-secure-marked-http-encryption-ssl&quot;&gt;announcement that Chrome would begin marking ‘http-only’ sites as insecure&lt;/a&gt;. It was a move copied by other browsers, like Firefox. Some, like RSS co-creator David Winer, &lt;a href=&quot;https://www.wired.com/story/google-chrome-https-not-secure-label/&quot;&gt;felt the move was a gross overreach, and that it painted sites that don’t collect info, like webapi.events, with too broad a brush&lt;/a&gt;. However, I was convinced that my site needed SSL &lt;a href=&quot;https://www.troyhunt.com/heres-why-your-static-website-needs-https/&quot;&gt;after watching security expert Troy Hunt demonstrate the importance for static sites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This happened about the same time that &lt;a href=&quot;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&quot;&gt;Github announced SSL support for custom domain names&lt;/a&gt;. It was the right thing to do, it was free, and it &lt;em&gt;should&lt;/em&gt; have been easy. With little other excuse, it was time to get to work.&lt;/p&gt;

&lt;h2 id=&quot;the-work&quot;&gt;The Work&lt;/h2&gt;
&lt;p&gt;The first bit was some light rework on the software architecture. Out went the Google Form fronting the spreadsheet, the spreadsheet itself, and RESTlet. I’d just edit JSON data, directly. It would be stored in a file alongside the site code. The GUI, rather than calling an API, would instead load JSON from the same site. That part of the plan went pretty much as intended.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://twitter.com/libel_vox/status/1022282428172316672&quot;&gt;live tweeted the challenge of updating the site within the runtime of the latest Mission Impossible movie&lt;/a&gt;. The part that tripped me up was the application of Github’s cert on a custom domain name. &lt;a href=&quot;https://twitter.com/codinghorror/status/1022647165246529536&quot;&gt;I was in good company&lt;/a&gt;. I ended that tweet-storm, and the evening, on a sour note.&lt;/p&gt;

&lt;p&gt;After a few more fruitless attempts, I resorted to &lt;a href=&quot;https://matthewreinbold.com/2017/07/04/SiteUpdate/&quot;&gt;the CloudFoundry solution that had worked so well for my personal site&lt;/a&gt;. A few minutes referring to my notes from last time, some time to let the new d33ts propagate, and &lt;a href=&quot;https://webapi.events/&quot;&gt;webAPI.events&lt;/a&gt; was back!&lt;/p&gt;

&lt;h2 id=&quot;yet-to-do&quot;&gt;Yet to Do&lt;/h2&gt;
&lt;p&gt;At the time I was pulling this piece together, designer Eric Meyer &lt;a href=&quot;https://meyerweb.com/eric/thoughts/2018/08/07/securing-sites-made-them-less-accessible/&quot;&gt;shared a different perspective&lt;/a&gt;. He described how certain parts of the world, like rural Uganda, are dependent on geosynchronous-satellite internet. Because of the slow speeds and rampant packet loss, &lt;em&gt;local caching servers&lt;/em&gt; are a popular thing.&lt;/p&gt;

&lt;p&gt;HTTPS is meant to prevent “man-in-the-middle” manipulations of a page. However, caching content also happens to require a “man-in-the-middle”. The move to SSL everywhere has rendered these important services unusable.&lt;/p&gt;

&lt;p&gt;A possible solution is the usage of “&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;service workers&lt;/a&gt;”. I don’t know much about them, right now, but it seems important in order to enable reasonable access to the widest audience possible.&lt;/p&gt;

&lt;p&gt;As Eric points out, it doesn’t completely solve the problem. There is still the issue of older browsers and operating systems. And it is not just in far flung locations; libraries are another location where those dependent on access are limited to whatever older installations are available. Service workers won’t address that situation.&lt;/p&gt;

&lt;p&gt;The design could also use some twiddling. What is there, now, is serviceable (although the table is a bit small on mobile devices). There are templates available, but the thousands of CSS boilerplate to support many responsive designs is shocking. Given the normalized complexity in everything from cloud deployment pipelines to front-end JavaScript frameworks, I probably shouldn’t be surprised. But damn.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/08/screenshot-2.png&quot; /&gt;&lt;figcaption&gt;A screenshot of the new WebAPI.events desktop experience.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So webapi.events is refreshed. It has a simplified workflow, reduced dependencies on 3rd parties, a simplified design, and is only ever served up with SSL.&lt;/p&gt;

&lt;p&gt;And those “captive portals” at airport and hotel wifi spots? Rather than pinging my own stuff, I’ve started using “&lt;a href=&quot;http://neverssl.com/&quot;&gt;NeverSSL.com&lt;/a&gt;”. Simple, easy-to-remember, and perfect for man-in-the-middle hijacking.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Aug 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/08/13/UpdatingWebAPIEvents/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/13/UpdatingWebAPIEvents/</guid>
        
        <category>webapi.events</category>
        
        <category>Google</category>
        
        <category>Github</category>
        
        <category>APISpark</category>
        
        <category>RESTlet</category>
        
        <category>LetsEncrypt</category>
        
        <category>SSL</category>
        
        <category>David Winer</category>
        
        <category>Misson Impossible</category>
        
        <category>CloudFoundry</category>
        
        <category>Eric Meyer</category>
        
        <category>Uganda</category>
        
        <category>service workers</category>
        
        <category>captive portals</category>
        
        <category>responsive design</category>
        
        <category>NeverSSL</category>
        
        
      </item>
    
      <item>
        <title>Rethinking NPS for API Quality</title>
        <description>&lt;p&gt;Previously, &lt;a href=&quot;/2017/10/03/API-Governance-Blueprint/&quot;&gt;I shared my team’s 2017 blueprint for API Governance&lt;/a&gt;. A component was measuring API quality using a “management tool” called &lt;em&gt;Net Promoter Score&lt;/em&gt;, or NPS. While NPS is usually used to quantify customer loyalty, I had hoped to repurpose it. As I explained in my previous work, NPS shortcutted much of the hand-wringing and tedious defense of any methodology we derived ourselves; when measuring “quality of experience”, NPS was already lingua franca among leadership.&lt;/p&gt;

&lt;p&gt;You are probably familiar with NPS, even if you don’t know it by name. Ever been asked to rank your experience between a 0 and 10? Most likely your answer is being compiled into an NPS score.&lt;/p&gt;

&lt;p&gt;After a year of experimenting with NPS, however, we’ve moved on. This is a update on the why, what we’ve done in the first half of 2018, and where I see continuing challenges in measuring API quality.&lt;/p&gt;

&lt;p&gt;There are many repudiations of NPS. However, none encapsulated as many of the problems we were experiencing as Jared Spool’s “&lt;a href=&quot;https://articles.uie.com/net-promoter-score-considered-harmful-and-what-ux-professionals-can-do-about-it/&quot;&gt;Net Promoter Score Considered Harmful (and What UX Professionals Can Do About It)&lt;/a&gt;”.&lt;/p&gt;

&lt;h2 id=&quot;problems-with-nps&quot;&gt;Problems with NPS&lt;/h2&gt;
&lt;h3 id=&quot;it-skews-negative&quot;&gt;It Skews Negative&lt;/h3&gt;
&lt;p&gt;As Jared points out, NPS is &lt;strong&gt;not&lt;/strong&gt; a mean/average of all the scores collected. Rather, values “0-6” are considered &lt;em&gt;detractors&lt;/em&gt;, or people who are unlikely to recommend something to others. Based on how my team used it, this was whether my API team would recommend the API design for emulation by others within the org. A “7” or “8” is passable; neither so offensive that we have a clear call to action, but not the best of what we hope to see. Anything rated “9” or “10” we shout about from the roof tops.&lt;/p&gt;

&lt;p&gt;Framing scores int his way doesn’t match with people’s expectations. A ‘middle of the pack’ rating of 5 &lt;em&gt;seems&lt;/em&gt; as though it should be neutral, neither good or bad, halfway between either pole. Yet, when computing NPS (the % of promoter scores minus the % of detractors), this value negatively impacts the rating.&lt;/p&gt;

&lt;p&gt;It became a training issue for reviewers. And if it was non-obvious for the people doing the scoring, it certainly was a challenge for the development teams reviewed (who are different than executive leadership).&lt;/p&gt;

&lt;p&gt;When meeting with busy folks outside your normal sphere of influence, you only get a few, fleeting minutes to hook them with “an ask”. Arguing over methodology minutia was &lt;em&gt;not&lt;/em&gt; a good use of precious time.&lt;/p&gt;

&lt;h3 id=&quot;quality-improvement-on-individual-apis-or-otherwise-is-washed-out&quot;&gt;Quality Improvement, on Individual APIs or Otherwise, is Washed Out&lt;/h3&gt;
&lt;p&gt;Let’s suppose a team has done the bare minimum for an API and, for various reasons, it exhibits intention that is neither &lt;a href=&quot;/2016/06/02/ConsistencyAndCohesion/&quot;&gt;consistent or cohesive with what has come before&lt;/a&gt;. My team would give this design a low score in an effort to incentivize improvement. Let’s say that score is “1” (a detractor). There’s no promoters, so the NPS results in a value of &lt;strong&gt;-100&lt;/strong&gt;, or the worst score a design can get.&lt;/p&gt;

&lt;p&gt;Shocked by “-100”, the group sets out to improve the design: perhaps they improve the documentation, address some of the unintuitive RPC patterns, etc. The prioritize this work against a backlog of competing features, resubmit for review, the reviewer acknowledges their effort by scoring them a “6” and…&lt;/p&gt;

&lt;p&gt;…&lt;em&gt;the team still gets -100 NPS&lt;/em&gt;. The team has made huge strides; their design is now above average! Yet, in the number reported to leadership, that effort was invisible. Imagine how demoralizing that would be on the part of the team, and how unlikely they’ll prioritize effort on new work in the future.&lt;/p&gt;

&lt;p&gt;There’s also a scenario, as Jared points out, where a team improves a design previously rated “8”. That “neutral” score results in an NPS of 0. But, with a bit of polish, the design is re-reviewed at “9”. The result is an NPS of 100: &lt;strong&gt;a perfect score&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;What is more valuable for future integrations? A team that improves a design from “1” to “6”, or a team that moves from “8” to a “9”? With NPS, the former is ignored. In the latter, it is overemphasized.&lt;/p&gt;

&lt;p&gt;The purpose of that my team produces these metrics is to incentivize positive behavior. If the correct behavior is happening, but it isn’t reflected in the metrics, then we need to change things.&lt;/p&gt;

&lt;h2 id=&quot;what-were-doing-now&quot;&gt;What We’re Doing Now&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/07/sample-chart.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
A sample chart of what we're currently reporting out, grouped by business division.
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Since moving away from NPS, we’ve gone to a much more straightforward average of reviewer scores. While each of these have a high degree of nuance, at a high level APIs are scored on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Standards Adherence&lt;/li&gt;
  &lt;li&gt;Completeness of the Documentation&lt;/li&gt;
  &lt;li&gt;Consistency and Cohesion with Previously Published Work&lt;/li&gt;
  &lt;li&gt;Viability to Exist as an API Product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The average score remains useful for leadership to know where they are in their API design maturity. But what is much more &lt;em&gt;actionable&lt;/em&gt; for teams is directed feedback. A team that learns that their design averaged a score of “6” could cast about for changes to make on their next version. Or they could address a detailed list of concerns.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;h3 id=&quot;stop-converting-noise-into-science&quot;&gt;Stop Converting Noise into Science&lt;/h3&gt;
&lt;p&gt;After moving away from computing NPS, we still had a considerable amount of scoring activity that was useful. But it was based on the 11-point (0-10) scale used by NPS. So, when we continued with more straightforward averages, we maintained the previous scale so that we could blend the old and new scores.&lt;/p&gt;

&lt;p&gt;Unfortunately, I’d be hard pressed to define the specific difference between an API design where one is rated a “4” and another is rated “5” on an 11-point scale. The distinction isn’t clear and leads to situations where one person’s “7” may be another person’s “5”.&lt;/p&gt;

&lt;p&gt;A 3-point scale is very straightforward: if an API design is “bad”, give it a “1”, just ok APIs get a “2”, and awesome API designs get a “3”. However, that doesn’t leave a whole lot of nuance. Something akin to a 5-point scale seems to be a better fit. However, retrofitting the past year of scoring activity, &lt;a href=&quot;https://www.linkedin.com/pulse/amazons-rating-system-broken-might-your-fault-samuel-carter/&quot;&gt;along with avoiding polarization tendencies&lt;/a&gt; remains a challenge.&lt;/p&gt;

&lt;h3 id=&quot;conflicts-of-interest-when-judge-jury-and-executioner&quot;&gt;Conflicts of Interest when Judge, Jury, and Executioner&lt;/h3&gt;
&lt;p&gt;Presenting a picture of where leadership is at in their journey is one thing. We create the expectations and measure how well we meet those expectations. A conflict of interest arises when leadership, subsequently, sets specific scoring targets that they expect my reviewing team, working with software development teams, to deliver.&lt;/p&gt;

&lt;p&gt;That could be a problem. The USDA food inspector isn’t required to show improvement in the produce they’re reviewing. The engineers that inspect bridges aren’t expected to have their defects detected trend downward overtime. Putting those who review a thing with a well intentioned, but misplaced, incentive can result in &lt;a href=&quot;https://money.cnn.com/2016/09/26/investing/wells-fargo-fake-accounts-before-2011/index.html&quot;&gt;some troubling outcomes&lt;/a&gt;. There’s tremendous pressure to pull a punch here, or turn a blind eye there.&lt;/p&gt;

&lt;p&gt;The team and I need to define a better way forward here, with clear accountability and laser focus on driving the correct outcomes.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Ultimately, this is part of a healthy process. We tried something, learned a ton in the process, and are iterating to get to something better. We have a ways to go. But I think it’s a sign of maturity to be able to take on new information and evolve to something better because of it.&lt;/p&gt;

&lt;p&gt;Do you have an API quality metrics story? Are you wrestling with accountability and socialization of organizational improvements? Shoot me a line. I’d love to compare notes.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Jul 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/07/10/Update-on-NPS/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/10/Update-on-NPS/</guid>
        
        <category>REST API</category>
        
        <category>Capital One</category>
        
        <category>API Governance</category>
        
        <category>metrics</category>
        
        <category>NPS</category>
        
        
      </item>
    
      <item>
        <title>Evolving APIs without Breaking &amp;#x2709;</title>
        <description>&lt;p&gt;The lead story in this edition of the newsletter is Phil Sturgeon's piece on how to evolve an API design without breaking. &lt;em&gt;Usually&lt;/em&gt;, people resort to versioning in these cases. Phil does an excellent job of illustrating an alternative way.&lt;/p&gt;

&lt;p&gt;There's also a bit from Matt McLarty on the future of microservices, and more from Sarah Elson on testing. Good, fundamental stuff on tap.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-05-09&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-05-09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 May 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/05/09/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/05/09/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Phil Sturgeon</category>
        
        <category>microservices</category>
        
        <category>Matt McLarty</category>
        
        <category>Sarah Elson</category>
        
        <category>testing</category>
        
        <category>API City Conference</category>
        
        <category>Gartner</category>
        
        <category>Kai Todter</category>
        
        <category>HAL</category>
        
        <category>Facebook</category>
        
        <category>Google</category>
        
        <category>Sam Newman</category>
        
        <category>Erik Wilde</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>microxchng 2018 Recap &amp;#x2709;</title>
        <description>&lt;p&gt;It's a celebration of all things microservice related in this edition of the REST API Notes. The microxchng conference, this year in Berlin, is one of the best out there. And thanks to video being posted to YouTube, all technologists can enjoy! I highlight some of my favorite pieces, through in a counter argument here and there to keep it spicy, and share a couple of notable milestones.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-05-01&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-05-01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 May 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/05/01/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/05/01/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>microservices</category>
        
        <category>Michael Plod</category>
        
        <category>Zhamak Dehghani</category>
        
        <category>Stefan Tilkov</category>
        
        <category>Tareq Abedrabbo</category>
        
        <category>Eberhard Wolff</category>
        
        <category>microxchng</category>
        
        <category>API Transformer</category>
        
        <category>IFTTT</category>
        
        <category>Salesforce</category>
        
        <category>YouTube</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Contrasting API Maturity Models &amp;#x2709;</title>
        <description>&lt;p&gt;For years, the Richardson Maturity Model has been the standard by which an API design has been gauged. Awhile later, Mike Amundsen proposed his own Maturity Model. In this edition of the REST API Notes newsletter, Zdenek Nemec summarizes and contrasts the two models. It's a thoughtful decomposition that leads to additional insights.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-19&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/04/11/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/04/11/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Zdenek Nemec</category>
        
        <category>Richardson Maturity Model</category>
        
        <category>Amundsen Maturity Model</category>
        
        <category>Jose Montoya</category>
        
        <category>Kristopher Sandoval</category>
        
        <category>auth0</category>
        
        <category>microservices</category>
        
        <category>Fran Mendez</category>
        
        <category>Kafka</category>
        
        <category>RabbitMQ</category>
        
        <category>Red Hat</category>
        
        <category>Istio</category>
        
        <category>service mesh</category>
        
        <category>Christian Posta</category>
        
        <category>Burr Sutter</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Facebook, Twitter and Understanding API Business Models &amp;#x2709;</title>
        <description>&lt;p&gt;In light of recent scandal, Facebook (along with its child company, Instagram) has clamped down on usage of its API. The move resulted in numerous parties questioning whether Facebook is even in the platform business. In this edition of the REST API Notes, I give the cliff note version of SaaS v PaaS v IaaS:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Software-as-a-service&lt;/strong&gt; (SaaS) is where the software is already built. Think the original incarnation of Salesforce, where it was an entire customer relationship management (or CRM) system that could be integrated with. You &lt;em&gt;integrate with&lt;/em&gt; a SaaS.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Platform-as-a-service&lt;/strong&gt; (PaaS), where all of the pieces to build software are readily accessible but the integrator brings their own logic. Twilio or Sendgrid, in my mental model, are here. You &lt;em&gt;program for&lt;/em&gt; a PaaS.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Infrastructure-as-a-service&lt;/strong&gt; (IaaS) is where virtual servers and related raw-compute services are sold. AWS, Azure, etc are here. You &lt;em&gt;deploy to&lt;/em&gt; an IaaS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where does Facebook sit? And was a misalignment between its geeky ambition and what made it money the reason they're in the trouble they're in? That in the latest newsletter, and more.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-11&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/04/11/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/04/11/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Facebook</category>
        
        <category>Zynga</category>
        
        <category>Cambridge-Analytica</category>
        
        <category>Instagram</category>
        
        <category>AWS</category>
        
        <category>Twilio</category>
        
        <category>Sendgrid</category>
        
        <category>Azure</category>
        
        <category>ESPN</category>
        
        <category>Twitter</category>
        
        <category>Talon</category>
        
        <category>Tweetbot</category>
        
        <category>Tweetings</category>
        
        <category>Twitterrific</category>
        
        <category>Oracle</category>
        
        <category>Google</category>
        
        <category>Talend</category>
        
        <category>OpenAPI</category>
        
        <category>Restlet</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Google, Oracle, and Copyrightable APIs &amp;#x2709;</title>
        <description>&lt;p&gt;What does the prospect of a $9 billion payout get you? Apparently, one long legal challenge that, despite various twists and turns, has come out in Oracle's favor. I've been dubious that an API design could be copyrighted. But I'm also not a lawyer. A federal court has ruled the Google has done damage to Oracle by copying the Java interface. It is a ridiculous claim; I would argue that Java is as popular as ever largely &lt;em&gt;because of&lt;/em&gt; Google's Android operating system. But here we are.&lt;/p&gt;

&lt;p&gt;But that isn't all. I also cover an interesting hypermedia manifesto and four common misconceptions of REST. There's also a whirlwind recap of API fallout after the Facebook fiasco.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-03&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-04-03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/04/03/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/04/03/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Google</category>
        
        <category>Oracle</category>
        
        <category>Java</category>
        
        <category>Peter Williams</category>
        
        <category>hypermedia</category>
        
        <category>Asbjorn Ulsberg</category>
        
        <category>Facebook</category>
        
        <category>Instagram</category>
        
        <category>Cloud Elements</category>
        
        <category>microservices</category>
        
        <category>Aadhaar</category>
        
        <category>Keith Casey</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Facebook, Mulesoft Acquired, and More &amp;#x2709;</title>
        <description>&lt;p&gt;This edition of the REST API Notes is double stuffed. For starters, I've got loads to say about Facebook (I try to keep it more on the technologist side here, but &lt;a href=&quot;/2018/03/26/Facebook/&quot;&gt;I have additional, policy-related, thoughts too&lt;/a&gt;). Next up, we need to spend some time talking about Salesforce's &lt;strong&gt;$6.5 billion&lt;/strong&gt; bid for Mulesoft. Oh, and there's some top shelf microservice thought leadership from the recently concluded microXchg conference.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-03-27-facebook-salesforce-and-more&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2018-03-27-facebook-salesforce-and-more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/03/27/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/03/27/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Facebook</category>
        
        <category>Salesforce</category>
        
        <category>Mulesoft</category>
        
        <category>microXchg</category>
        
        <category>Graph API</category>
        
        <category>Kin Lane</category>
        
        <category>OAuth</category>
        
        <category>Zeynep Tufekci</category>
        
        <category>PII</category>
        
        <category>Equifax</category>
        
        <category>GDPR</category>
        
        <category>Stefan Tilkov</category>
        
        <category>Uwe Friedrichsen</category>
        
        <category>RapidAPI</category>
        
        <category>Andreessen Horowitz</category>
        
        <category>A16Z</category>
        
        <category>Mashape</category>
        
        <category>Kong</category>
        
        <category>Algorithmia</category>
        
        <category>Apigee</category>
        
        <category>Runscope</category>
        
        <category>microservices</category>
        
        
        <category>newsletter</category>
        
      </item>
    
  </channel>
</rss>
