<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold, the Director for Capital One's   Platform Services Center of Excellence. Much of what appears here dated prior to 2017 was  previously published at VoxPop.co and VoxPopDesign.com. There's also a bit  of legacy detritus from older experiments like mutednoise.com,  miltiantgeek.com, codeaway.org, etc. Yes, I am the adult male that still plays with Lego. You should too.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Feb 2019 01:46:32 -0500</pubDate>
    <lastBuildDate>Sun, 03 Feb 2019 01:46:32 -0500</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Newsletter Thanksgiving Special! &amp;#x2709;</title>
        <description>&lt;p&gt;There's plenty of API hoot and nanny to cover. However, I take a moment to highlight not only some recent accomplishments, but thank readers for their time and attention. And there is also a colorful summation of Thanksgiving:&lt;/p&gt;

&lt;blockquote&gt;If you're in the United States, this email probably finds you either in transit or in preparation (or both!) for the Thanksgiving holiday. It is a time that is associated with indulgent shopping, strained family conversations, and overeating while the Detroit Lions find less entertaining ways to lose.&lt;/blockquote&gt;

&lt;p&gt;Happy holidays!&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/letters/rest-api-notes-thanksgiving-special-2018-11-21&quot;&gt;https://tinyletter.com/NetAPINotes/letters/rest-api-notes-thanksgiving-special-2018-11-21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Nov 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/newsletter/2018/11/21/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/11/21/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>thanksgiving</category>
        
        <category>NFL</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>GraphQL, Landscaping, and API Discovery &amp;#x2709;</title>
        <description>&lt;p&gt;Zdenek &quot;Z&quot; Nemec settles the GraphQL/REST debate (or does he?) and Postman (the tool) has a developer survey out. Erik Wilde also defines a new concept, &quot;API landscapes&quot;. It is an interesting concept, and seems similar to what I refer to as &quot;&lt;a href=&quot;/2018/10/31/Gardeners-Approach/&quot;&gt;API Ecosystems&lt;/a&gt;&quot;. &lt;/p&gt;

&lt;p&gt;All this and more in the latest note.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-11-13&quot;&gt;https://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-11-13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Nov 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/newsletter/2018/11/21/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/11/21/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Zdenek Nemec</category>
        
        <category>GraphQL</category>
        
        <category>Erik Wilde</category>
        
        <category>API Management</category>
        
        <category>Bruno Pedro</category>
        
        <category>Postman</category>
        
        <category>API landscapes</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Soft and Hard Power in Software Governance</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/11/lights.png&quot; /&gt;&lt;figcaption&gt;An complex image of power at play across a ceiling.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the privilege (or curse, depending on your predilection) of working in a software governance role for the last several years. What started as a simple API design advisory job has scaled into something that is equal parts technical acumen, developer empathy, business strategy, process psychology, and cultural anthropology. In growing, I’ve had to learn some new things.&lt;/p&gt;

&lt;p&gt;One of those things is the power within systems, and how it is wielded.  I’ve seen top-down, “do as your told”, initiatives flounder, despite the impressive titles of those declaring the mandate. This is because applying linear thinking in blunt ways to dynamic systems often fails.&lt;/p&gt;

&lt;p&gt;But it doesn’t have to be that way. If you have a technical leadership position within your organization, &lt;em&gt;you have more at your disposal than ‘my way or the highway’&lt;/em&gt;. Success in a non-linear system requires an appreciation of different governance power: soft power and hard power.&lt;/p&gt;

&lt;h2 id=&quot;soft-power&quot;&gt;SOFT POWER&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_power&quot;&gt;Soft power&lt;/a&gt; is a political concept developed by Harvard University’s Joseph Nye. Nye defined soft power as the ability to achieve objectives through appeal and attraction, rather than force or coercion. He clarified that it is in opposition to “command power”, or a nation “ordering others to do what it wants.”&lt;/p&gt;

&lt;p&gt;Soft power applies to change agents within a company who may have the &lt;em&gt;responsibility&lt;/em&gt; of achieving technology initiative outcomes, but lack the authority over all the participants. They cannot command people to comply. Instead, they have to rely on a different set of actions: &lt;strong&gt;diplomacy&lt;/strong&gt;, &lt;strong&gt;strategic communication&lt;/strong&gt;, &lt;strong&gt;assistance&lt;/strong&gt;, &lt;strong&gt;negotiation&lt;/strong&gt;, and &lt;strong&gt;community building&lt;/strong&gt;. These actions share an inclusive vision for the future that others embrace without being told.&lt;/p&gt;

&lt;p&gt;Creating standards or processes with a soft power approach may be as simple as stating a new expectation for teams to aspire to in a public forum. Or it might be a mutual agreement between parties on how to move forward on a particular issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soft power excels when the situation is new and/or evolving rapidly.&lt;/strong&gt; During this phase of an initiative, it is beneficial to adapt to new information while experience is gathered. Needs, some of which could not have been anticipated ahead of time, can be rapidly responded to. In cases where governance does not know what the final outcome should be, where flexibility and experimentation are most important, soft power should be the preferred approach until a desirable tenable solution is discovered.&lt;/p&gt;

&lt;h2 id=&quot;hard-power&quot;&gt;Hard Power&lt;/h2&gt;
&lt;p&gt;Hard power is the ability to command (or restrict) a person or group to a specific set of behaviors. &lt;em&gt;Usually&lt;/em&gt;, it describes the recognized authority for one individual (or organization) to direct another. But &lt;strong&gt;hard power can also be described as the set of allowances that a software system exposes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lawrence Lessig, in his books &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_and_Other_Laws_of_Cyberspace&quot;&gt;Code and Other Laws of Cyberspace&lt;/a&gt; (1999), and &lt;a href=&quot;https://en.wikipedia.org/wiki/Code:_Version_2.0&quot;&gt;Code v2&lt;/a&gt; (2006) proposed that software regulates behavior the same way laws do, albeit within the confines of a program. Software commands (or restricts) the user’s actions in a way that coercive, soft power methods do not.&lt;/p&gt;

&lt;p&gt;Soft power may be a suggestion to do something a particular way via a persuasive argument. Hard power, as delivered via software tooling, is the encoded set of things a user is allowed to do. There is less malleability to a specific context. But the outcomes are stable and predictable. Also, because it is delivered via software, hard power can scale more efficiently than soft power.&lt;/p&gt;

&lt;p&gt;A change to hard power, however, &lt;em&gt;means changing code&lt;/em&gt;. Hard power’s capability to react and adapt is only as fast as a team’s deployment cycle. That cycle may include creation of a backlog item, gathering of stories, prioritization in a sprint, coding, functional testing, integration testing, user-acceptance testing, and final deployment. For stable, mature environments that don’t change often, that round-tripping may be an acceptible trade off for hard-power’s benefits.&lt;/p&gt;

&lt;h2 id=&quot;two-recent-examples&quot;&gt;Two Recent Examples&lt;/h2&gt;
&lt;p&gt;Two recent work examples illustrate how I employ soft and hard power to support developers delivering business value.&lt;/p&gt;

&lt;p&gt;In one case, we were tasked with creating a collaboration process on a newly launched technology platform. It was so new, in fact, that what success looked like was tbd. With so many things like developer maturity, throughput, expectations, etc., yet to be determined, we needed to have the flexibility to experiment and change over time. Few things warranted dedicated tooling, or a ‘hard’ power approach, in this situation. Ignore the delivery lag; nothing kills developer moral like telling them to throw out what they just proudly delivered because “the situation is fluid”.&lt;/p&gt;

&lt;p&gt;In the second situation, we recognized an opportunity to express hard power through our lifecycle tooling. The process flow was mature, with clear parameters and desired outcomes. However, we had an immediate problem that stalled a team. In that case, we defined a soft power agreement (“we will proceed with things in this way, and manually track what comes through during this intermediate phase”) until the hard power updated could be applied. It allowed us to solve issues today while we waited for backlog priority could align.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being a change agent managing a software process across thousands of developers is no simple task. Moving from a simple linear system to a complex ecosystem requires a different set of approaches. I came from a development background; “applying power” talk still makes me  uncomfortable. But, in order to be effective in my role, it is essential understand the nuance and how it can be applied.&lt;/p&gt;

&lt;p&gt;This framework for how I classify approaches has been helpful to me, and hopefully it will be helpful for you, too.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Nov 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/11/13/SoftPowerVHardPower/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/13/SoftPowerVHardPower/</guid>
        
        <category>API Governance</category>
        
        <category>soft power</category>
        
        <category>hard power</category>
        
        <category>Joseph Nye</category>
        
        <category>management</category>
        
        <category>Lawrence Lessig</category>
        
        
      </item>
    
      <item>
        <title>A Gardener's Approach to Growing an API Culture</title>
        <description>&lt;p&gt;My work on pragmatic software governance has evolved. It started with a focus scaling good API design across a modern enterprise company. Increasingly, I'm interested in how culture impacts technology adoption. Why are do some approaches become deeply embedded within an org, while others disappear after a hot minute? &lt;/p&gt;

&lt;p&gt;I gave this talk several times this past fall - most notably at APIStrat (Nashville) and API City (Bremerton, outside Seattle). For many, the content may have been unrelatable; what's all this talk about ecosystems when one is only submitting pull requests to a single branch? For a select subset of enterprise folks, however, these issues of scale and co-habitation loom large. There's also few resources available. Hopefully, this post will provide some insight into what they're seeing based on my own experiences.&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/01.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Hello everyone. My name is Matthew Reinbold and the title for this talk is &quot;A Gardener's Approach to Growing an API Culture&quot;. If that topic sounds a bit different, that's because I hope it is. And I'm guessing that it might have attracted an audience in search of something a bit different. &lt;/p&gt;

&lt;p&gt;What this talk is about is APIs at scale. What considerations occur when you go from managing &quot;a few APIs&quot; to being a gardener of an ecosystem?&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/02.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I don't know how big your organizations are but, no doubt, you've seen an increase in the level of software complexity. Also,  our collective industry  has adopted some very nasty habits; everything from move fast and break things to resume-driven development. How do we cultivate software design that, as Fielding described, has a &quot;scale of decades&quot; when &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;the average developer tenure at a company is a year and a half&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;What I hope to do in this talk is share some of what I have found to be resilient about an API culture, make it relatable through the use of a garden analogy, and share some techniques for those grappling with ongoing technological change within their own organizations. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/03.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;For the last several years I've been the Director of the Capital One Platform Services Center of Excellence.&lt;/p&gt;

&lt;p&gt;My team and I are responsible for gardening a complex, distributed-systems ecosystem. Capital One has around 9000 developers that we work with on API and event streaming designs, standards, and lifecycle management. These developers are spread across numerous North American locations and multiple lines of business. They've produced thousands of APIs that we manage with our own infrastructure, resulting in more than two billion request/responses a day. And our messaging infrastructure is on pace to surpass the historical adoption trends we experienced for internal APIs. &lt;/p&gt;

&lt;p&gt;My team and I are responsible for software process management. We build shared communities of practice and federated responsibility.  We've used centralized design management to cross-pollinate the best ideas and multiply infrastructure impact across the organization. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/04.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;In addition to powerful internal functionality, our investments into distributed architectures have allowed us to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be &lt;a href=&quot;https://developer.amazon.com/blogs/alexa/post/c70e3a9b-405c-4fe1-bc20-bc0519d48c97/the-story-of-the-capital-one-alexa-skill&quot;&gt;the first company to offer Amazon Echo access to their financial accounts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Win multiple &lt;a href=&quot;https://www.jdpower.com/business/press-releases/jd-power-2018-us-banking-and-credit-card-app-satisfaction-studies&quot;&gt;JD Power Awards&lt;/a&gt; for our mobile experience&lt;/li&gt;
&lt;li&gt;Sign &lt;a href=&quot;https://www.wsj.com/articles/walmart-taps-capital-one-for-store-cards-dealing-major-blow-to-synchrony-1532626208&quot;&gt;partnership portfolios worth tens-of-billions-of-dollars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hover just outside &lt;a href=&quot;http://fortune.com/fortune500/capital-one-financial/&quot;&gt;the top Fortune 100 companies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems aren't a theoretical gamble for us. It's who we've become as a culture. It's how we win in the competitive marketplace.&lt;/p&gt;

&lt;p&gt;We are reaping the fruits of our labor. And increasingly, I'm not just interested in the harvest that we have, but how we keep it healthy and prosperous going forward. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/05.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I like this image – it takes many of the components of a healthy garden and breaks them up into their individual components. We can have a greater appreciation for all interplay that occurs within one of these systems.&lt;/p&gt;

&lt;p&gt;I'm guessing most people here would be familiar with a garden ecosystem. There's the ground, which includes the mineral composition, the producer plant life, and the consumers - both the animals attracted by the plants - the worms, the bees - and the second order consumers - the snakes, the spiders, etc. I glossing over a tremendous amount, and probably doing a disservice in the process, but an ecosystem can be complex. &lt;/p&gt;

&lt;p&gt;But ecosystems don't just happen. Throwing seeds on the ground and coming back months later expecting something to harvest isn't statistically likely. And micro-managing the interplay between the numerous participants in such a complex environment doesn't scale.&lt;/p&gt;

&lt;p&gt;[Image taken from &lt;a href=&quot;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&quot;&gt;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/06.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Likewise, technology ecosystems have numerous components. Attempting to address only one of them, while ignoring all the other factors, is like attempting to make a garden flourish while only being able control the flow of water. What is adequate during times of drought or flooding does little to deal with insect infestation, or an invasive species.&lt;/p&gt;

&lt;p&gt;[Breakdown of elements taken from Matt McLarty's presentation, &quot;&lt;a href=&quot;https://www.slideshare.net/MattMcLarty/designbased-microservices-aka-planes-trains-automobiles&quot;&gt;Design-based Microservices, AKA Planes, Trains, and Automobiles&lt;/a&gt;&quot;, slide 42]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/07.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Kudzu is a Chinese vine introduced by way of Japan to the United States. It was a perfect match for the climate of the southeastern United States. In the right conditions, a Kudzu vine can grow almost a foot a day (or between 19 to 30 centimeters). During the dust bowl of the 1930's, planting Kudzu was encouraged as a way of preventing soil erosion; it's addition to the ecosystem was a desirable thing. &lt;/p&gt;

&lt;p&gt;And then the ecosystem changed. Rain returned and the places where Kudzu had taken root suddenly had themselves a problem. It grows so fast it smothers native plants and trees, drastically reducing their access to sunlight and water. Left unchecked, Kudzu will devastate ecosystems that are dependent on native plant and wildlife. In the US it does not have any natural predators.&lt;/p&gt;

&lt;p&gt;[Photo by Eli Christman and shared under a Creative Commons 2.0 license. Original photo here: &lt;a href=&quot;https://flic.kr/p/abgksv&quot;&gt;https://flic.kr/p/abgksv&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/08.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;The modern software development environment has also been one of increasing complexity. On this page are a variety of processes, techniques, frameworks, technologies, and styles.&lt;/p&gt; 

&lt;p&gt;The last decade has been marked by creating incrementally smaller deployable units. The tradeoff of increasingly granular executables is a non-linear increase in configuration and communication management. Today's modern development environment includes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Microservices, functions, SaaS-all-the-things&lt;/li&gt;
&lt;li&gt;Polyglot languages (at least in theory)&lt;/li&gt;
&lt;li&gt;Cloud and Containers&lt;/li&gt;
&lt;li&gt;Software-Defined Everything&lt;/li&gt;
&lt;li&gt;Everything Optimized for Replacement&lt;/li&gt;
&lt;li&gt;Existence of Platform Teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This trend results in complexity, and complexity leads to emergent behaviors, or behaviors that may not be easily addressed with linear thinking. It is an &lt;em&gt;ecosystem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How does one go about determining the right fit? Which of these things will be around two years from now? Five? Is there a way of identifying those things, like Kudzu, which seem to have short term benefits and long term ramifications? How do we identify complimentary species to our ecosystems and those that will unbalance it?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/09.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;A forest is a complex ecosystem. Think about how it handles change. There is a size hierarchy: pine needle, tree crown, patch, stand, forest, and biome. Those differences in scale also form a time hierarchy; said differently, as we increase in scope, we also increase in time frames of reference:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The needle changes within a year -&lt;/li&gt;
&lt;li&gt;the tree crown over several years -&lt;/li&gt;
&lt;li&gt;the patch over many decades -&lt;/li&gt;
&lt;li&gt;the stand over a couple centuries -&lt;/li&gt;
&lt;li&gt;the forest over a thousand years -&lt;/li&gt;
&lt;li&gt;and the biome over ten thousand years&lt;/li&gt; 
&lt;/ul&gt;

&lt;p&gt;What can happen in the short term is &lt;em&gt;constrained&lt;/em&gt; by the larger, slower moving concepts. The range of what the needle may do is constrained by the tree crown, which is constrained by the patch and stand, which are controlled by the forest, which is controlled by the biome.&lt;/p&gt;

&lt;p&gt;It is a complex ecosystem. &lt;strong&gt;But it is not static&lt;/strong&gt;. Innovation happens throughout the system via evolutionary competition among individual trees. Each tree survives or dies dealing with the stresses of crowding, parasites, predators, and weather.&lt;/p&gt;


&lt;p&gt;[Photo by Julien R on Unsplash]&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/10.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;&lt;strong&gt;Stewart Brand's Pace Layer model is an attempt to capture this layering&lt;/strong&gt;. &quot;Pace Layers&quot; appeared in Stewart's 1999 book, The Clock of the Long Now, and was an extension of the architectural concept of &quot;shearing layers&quot;. Shearing Layers, a concept coined by architect Frank Duffy, was elaborated on by Stewart in his 1995 book, How Buildings Learn. It describes how buildings are a set of components that evolve in different timescales. The book was, subsequently, &lt;a href=&quot;https://www.youtube.com/user/brandst/videos&quot;&gt;turned into a BBC television series that can be viewed online&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different parts of a society, or industry, move at different rates. Concepts at the top of the graph change at a rapid clip. The further down one goes, the slower change occurs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take, for example, a conference center.  It is a complex ecosystem necessary to produce a given outcome: an event. The chairs are reconfigured as need dictates. They'll be swapped out according to fashion. They have rates of change much greater than the carpet or the visual facade, which changes faster than the street ordinances or hospitality laws. All of which changes faster than our cultural tendency of getting together face to face. &lt;/p&gt;

&lt;p&gt;It is the combination of fast and slow moving parts that gives a system its resiliency. The layers are not independent. As each moves at its own speed, there is tension at the edges where they layers touch, something called &quot;slip zones&quot;.&lt;/p&gt; 

&lt;p&gt;Consider any recent emerging technology. Those electric scooters you've probably seen around are in a slip zone. Will they decend beyond a fad, becoming part of a city's transportation &lt;strong&gt;infrastructure&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://www.theverge.com/platform/amp/2018/10/24/18016486/oakland-scooter-meeting-skip-lime-bird-helmet-safety-responsibility&quot;&gt;perhaps even requiring governance&lt;/a&gt;&lt;/strong&gt;, on the way to becoming a cultural touchstone? Or is it a fad, resulting in some commerce but disappearing after the VC money runs out? &lt;/p&gt;

&lt;p&gt;Fidget spinners were a fad. They decended to the commerace layer as everyone sought to sell some product. But they never became part of people's routines (their habitual infrastructure). There was no need for governance, and they never embedded themselves in cultural identity. As a result, the ubiquitous thing one summer is easily disposed of and replaced by the next. 
&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/11.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;This is such a beautiful summary, it is worth repeating.&lt;/p&gt;

&lt;p&gt;&quot;The fast parts learn. The slow parts remember. The fast parts propose things, the slow parts dispose things. The fast and small instruct the slow and big with accrued innovations and occasional revolutions. At the same time, and we don't respect this as much as we should, the big and the slow control the fast and the small with constraints and with constancy. All the attention is paid to the fast parts. But all the power is in the slow parts.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Each layer needs to respect each other's pace. If commerce is too dominate in a society, it can jerk governance around harmfully. Or it can reach down and disrupt culture and nature by going too fast while not having the patience to deal with infrastructure problems. The flip side is where the Soviet Union tried to run everything at governance pace (five year plans, for example) and they destroyed other layers.&quot;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/12.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;So let's start to bring this together. &lt;/p&gt;

&lt;p&gt;The web as a platform is a result of its architectural simplicity, the use of a widely implemented and agreed-upon protocol (HTTP), and the pervasiveness of common representation formats (JSON). Fashion (gRPC, GraphQL, RPC, SOA, etc.) will come and go. However, creating distributed systems with web-based APIs in the same manner of the web will continue because of foundation in something deeper, more substantial. This is because of web principles like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Independent Deployment and Evolution&lt;/li&gt;
&lt;li&gt;Independent Scalability&lt;/li&gt;
&lt;li&gt;Resiliency/Isolation &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key for distributed systems success is &lt;strong&gt;a few well-known actions and the application-specific interpretation of resource representations.&lt;/strong&gt;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/13.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;According to the book, ‘&lt;a href=&quot;https://global.oup.com/academic/product/the-modern-firm-9780198293750?cc=us&amp;amp;lang=en&amp;amp;&quot;&gt;The Modern Firm&lt;/a&gt;', by John Roberts, culture is three things: &lt;strong&gt;people, architectures,&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A software development culture is not ping pong tables and keg stand Fridays. Culture is not open floor plans or the glowing adjectives used in press releases. Culture is how a company behaves when stressed.&lt;/p&gt;

&lt;p&gt;By mimicking the web, and embracing people, architectures, and routines that promote &lt;strong&gt;loose coupling&lt;/strong&gt;, &lt;strong&gt;individual scaling&lt;/strong&gt;, and &lt;strong&gt;resiliency&lt;/strong&gt; between individual elements, the company I work for has embraced an API culture for sustaining innovation. How successful would a garden be if every plant had to grow at the same rate? If the entire ecosystem was comprised of a single flower? We nurture an ecosystem that is diverse, has a degree of independence, but is &lt;strong&gt;mutually responsible to the whole&lt;/strong&gt;. More importantly, knock on wood, that firmament will remain stable while we evaluate new technology fashions that arise.&lt;/p&gt;

&lt;p&gt;The faster layers propose things. But we're not beholden to try everything. The slower-moving, cultural layer &lt;em&gt;constrains&lt;/em&gt; the faster moving layers for the stability of the entire system. That said, how do we use this when evaluating change? &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/14.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Let's look at two comparable, but different, API-related items.&lt;/p&gt; 

&lt;p&gt;On the surface, we might lump things like hypermedia and microservices together. They are both popular topics on the API speaking circuit over the last half decade and, in a rush, we can hand-wave at them as &quot;web-API&quot; things. &lt;/p&gt;

&lt;p&gt;I've written my email newsletter, &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;REST API Notes&lt;/a&gt;, for the last several years. I consume numerous blog posts, slide decks, and video recordings every week in an attempt to share only the best, most salient information with my busy audience. In parsing all that material, it has become clear that microservices has taken root across software development shops in a way that hypermedia hasn't. It doesn't mean that hypermedia is a bad idea - far from it. And yet, time and time again, these hypermedia seeds cast don't seem to flourish. &lt;/p&gt;

&lt;p&gt;The Pace Layer model provides a theory.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/15.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Microservices are implementation details. They are supposed to be the smallest possible cohesive unit in a system.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;http://shop.oreilly.com/product/0636920050308.do&quot;&gt;Irakli Nadareishvili&lt;/a&gt; likes to say, &quot;microservices are not about reuse!&quot; They are about reducing the coordination overhead costs among teams. They are not &quot;little APIs&quot;, although they use all of the API infrastructure (the protocols, networking frameworks, etc.) that already exists within a company. They lack exposure (remember, they're not about reuse) in order to maximize their ephemeraility.&lt;/p&gt;

&lt;p&gt;They are like the chairs in this building. Or the pine needles in the forest. The rate of change is within the infrastructure layer.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/16.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Hypermedia is more than just providing links to related information, although it might be pitched that way.&lt;/p&gt;

&lt;p&gt;At a previous e-commerce job, I was an backend developer and architect for a product &lt;em&gt;perfect&lt;/em&gt; for hypermedia. On checkout, the business wanted to dynamically A/B test various upsell offers based on the contents of the cart. Because of the rate at which they wanted to test offers, combined with the dynamic nature of the cart contents, trying to bake every possible upsell paramutation into an executable that went through an app store approval process (itself which might take two weeks) was impossible.&lt;/p&gt;

&lt;p&gt;Hypermedia is a great solution for &quot;workflow&quot; like events, which the checkout flow primarily was. Each state returned by the server would provide links to the next step. That next step may change, depending on what is being tested. The mobile application would navigate the path presented it, and the business case would be fulfilled.&lt;/p&gt;

&lt;p&gt;Despite the natural fit, however, the work floundered. Hypermedia is more than just links. Its an inversion of communication flow. Rather than the mobile developer being able to look at the totality of exposed functionality and call their shot, they where now expected to respond to a bread trail they were given. It was a different &lt;em&gt;architecture&lt;/em&gt; resulting in a different calling &lt;em&gt;routine&lt;/em&gt; for the &lt;em&gt;people&lt;/em&gt; involved. As we mentioned from John Robert's definition, people, routines, and architecture are aspects of &lt;strong&gt;culture&lt;/strong&gt;.&lt;/p&gt; 

&lt;p&gt;Hypermedia, done correctly, challenges conventional development paradigms. It requires the appropriate supporting culture, something that moves more slowly to support new forms. It doesn't mean that hypermedia will never happen. What it does mean, however, is that adoption is on the order of a &lt;strong&gt;culture&lt;/strong&gt; change, not &lt;strong&gt;infrastructure&lt;/strong&gt;. Not only does it take longer, but successful culture change also requires a different set of approaches.&lt;/p&gt;

&lt;p&gt;Note: this is a model. Anyone using a model should be quick to share the George Box quote, &quot;all models are wrong, but some are useful&quot;. But despite the fact they are an oversimplified version of reality, a good model let's us see a situation in a new light, and makes us ask different questions in the pursuit of new and/or different insights.&lt;/p&gt;

&lt;p&gt;Using Stewart Brand's Pace Layering model, I conclude that there haven't been many compelling cases of hypermedia because the layer that needs to change, an organization's culture, moves at a much slower rate in adopting new things. Changing culture is more challenging than changing infrastructure. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/17.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I'll leave the exercise of walking through GraphQL, what change layer it is most likely to be, and the future ramifications to the reader. However, if you do that, keep the following questions in mind:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Of the problems that GraphQL claims to solve, out of which layers in the pace layer did those problems emerge?&lt;/li&gt;
&lt;li&gt;In which layer are those problems most felt?&lt;/li&gt;
&lt;li&gt;From which layer is a solution most likely to merge?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, consider a company where GraphQL is being considered. Perhaps previously created REST-ish APIs have had poor bounded contexts, ill fitting with desired business experiences. But if the culture of a company (the people, routines, and architectures) can't accruately articulate well isolated, composed pieces of business functionality, what happens if the culture stays the same and we swap infrastructure, instead?&lt;/p&gt;

&lt;p&gt;Your mileage may vary. But I'd argue that, in the above example, you've conceded defeat and pushed the hard work of creating well-understood business interactions onto the integrating client. Is that a sustainable decision for your ecosystem? Or, over time, will we look back on this as a moment where Kudzu was encouraged?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/18.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;We work in an industry proficient in eating its young, of chasing the dragon of the ‘next big thing', of disposing perfectly workable solutions in the pursuit of the next silver bullet. &lt;/p&gt;

&lt;p&gt;We can't (or want to) stop the growth of our ecosystems. Excellence within our software development circles will remain an ongoing, evolving conversation with constant change. But we also don't have to accept a binge-purge cycle of architectural violence as a given. We can break that pattern. We can stand on the shoulders of giants, rather than repeatedly attempting to chop them off at the knees. &lt;/p&gt;

&lt;p&gt;Like attentive gardeners, we can carefully cultivate dynamic, complex environments where innovation can happen, while being wary to threats that might jeopardize the balance. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/19.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Thank you for your attention.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/10/31/Gardeners-Approach/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/31/Gardeners-Approach/</guid>
        
        <category>REST API</category>
        
        <category>presos</category>
        
        <category>APIStrat</category>
        
        <category>Capital One</category>
        
        <category>API Governance</category>
        
        <category>conferences</category>
        
        
      </item>
    
      <item>
        <title>IBM Buys Red Hat With All the Moneys &amp;#x2709;</title>
        <description>&lt;p&gt;This week's REST API Notes is big. Chris Wood discusses API design-first creation, Daniel Lindau talks OAuth flows, and Marjukka Niinioja recaps the Nordic APIs Platform Summit. In particular, she emphasizes the importance of API documentation. &lt;/p&gt;

&lt;p&gt;Oh, and &lt;em&gt;34 billion somethings happened between IBM &amp;amp; Red Hat&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-29&quot;&gt;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/10/29/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/10/29/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Chris Wood</category>
        
        <category>Daniel Lindau</category>
        
        <category>OAuth</category>
        
        <category>Marjukka Niinioja</category>
        
        <category>API Design First</category>
        
        <category>Nordic APIs</category>
        
        <category>API Documentation</category>
        
        <category>IBM</category>
        
        <category>Red Hat</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Recapping the API City Conference&amp;#x2709;</title>
        <description>&lt;p&gt;In this newsletter, Phil Sturgeon covers the importance of schemas, Michael Hibay shares a nuanced take on the relationship maturity model, and Mike Amundsen tweets up a storm. This, and a thank you to Tessa Mero and the APICity2018 conference.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-16&quot;&gt;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/10/16/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/10/16/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Phil Sturgeon</category>
        
        <category>Michael Hibay</category>
        
        <category>Mike Amundsen</category>
        
        <category>Tessa Mero</category>
        
        <category>APICity2018</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Recapping APIStrat 2018&amp;#x2709;</title>
        <description>&lt;p&gt;The October 1st REST API Notes is all about APIStrat, with highlights of the presentations by the API Handyman, Arnaud Lauret, James Higginbotham, Shaun Gallagher, and Lou Powell.&lt;/p&gt;

&lt;p&gt;Of course, just because I'm at a conference doesn't mean the rest of the world stands still. There's also contributions by Ben Nadel and Phil Calçado so impactful, they couldn't wait until a different week. This and more.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-01-apistrat-recap&quot;&gt;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-10-01-apistrat-recap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/10/16/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/10/16/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>APIStrat</category>
        
        <category>Arnaud Lauret</category>
        
        <category>James Higginbotham</category>
        
        <category>Shaun Gallagher</category>
        
        <category>Lou Powell</category>
        
        <category>Ben Nadel</category>
        
        <category>Phil Calçado</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>API Labeling and Grindr Security Flaw&amp;#x2709;</title>
        <description>&lt;p&gt;In this newsletter, I cover API World presentations from Irakli Nadareishvili and Christian Posta. I also suggest a deep read of Kristopher Sandoval's safety and idempotence piece; a thorough coverage of some core REST principles. There's also an API Labeling proposal by Erik Wilde and Cesare Pautasso that gives pause.&lt;/p&gt;

&lt;p&gt;Finally, I end with yet &lt;em&gt;another&lt;/em&gt; Grindr's API security problem.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-09-20&quot;&gt;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-09-20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Sep 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/09/20/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/09/20/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>API World</category>
        
        <category>Irakli Nadareishvili</category>
        
        <category>Christian Posta</category>
        
        <category>Kristopher Sandoval</category>
        
        <category>Erik Wilde</category>
        
        <category>Cesare Pautasso</category>
        
        <category>API Labeling</category>
        
        <category>Grindr</category>
        
        <category>apis.fail</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>API History, Service Meshes, and GraphQL Realities&amp;#x2709;</title>
        <description>&lt;p&gt;After an August rest, there's a new edition of the REST API Notes out! In this compilation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chelsea Troy drops historical API knowledge bombs&lt;/li&gt;
&lt;li&gt;Daniel Bryant clears his ridiculously high infodump bar with service meshes&lt;/li&gt;
&lt;li&gt;Matthew Weier O'Phinney illuminates hashtag#GraphQL realities&lt;/li&gt;
&lt;li&gt;Ericka Chickowski talks API security&lt;/li&gt;
&amp;lt;/p&amp;gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-09-11&quot;&gt;http://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-09-11&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;http://tinyletter.com/NetAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/newsletter/2018/09/11/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/newsletter/2018/09/11/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Chelsea Troy</category>
        
        <category>Daniel Bryant</category>
        
        <category>service mesh</category>
        
        <category>Matthew Weier O'Phinney</category>
        
        <category>GraphQL</category>
        
        <category>Ericka Chickowski</category>
        
        <category>apis.fail</category>
        
        
        <category>newsletter</category>
        
      </item>
    
      <item>
        <title>Adding SSL to WebAPI.events</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/08/screenshot.png&quot; /&gt;&lt;figcaption&gt;A screenshot of the previous WebAPI.events desktop experience.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-original-architecture---spreadsheets--3rd-parties--captive-portals-oh-my&quot;&gt;The Original Architecture - Spreadsheets &amp;amp; 3rd Parties &amp;amp; Captive Portals, Oh My!&lt;/h2&gt;
&lt;p&gt;Years ago, in an effort to support the API community, I started a website called “&lt;a href=&quot;https://webapi.events&quot;&gt;WebAPI.events&lt;/a&gt;”. It listed a collection of upcoming, in-person conferences and meetups for those interested in service design.&lt;/p&gt;

&lt;p&gt;I used the original site as an opportunity to play with several ideas converging in my head. The first was using a Google spreadsheet as the data store. Setting up, securing, hosting, and maintaining traditional database software seemed like overkill for a little project like this. A spreadsheet also, significantly, broadens the audience able to follow with a similar approach.&lt;/p&gt;

&lt;p&gt;I also didn’t think a little “tool” site warranted a paid hosting account. Github pages are a simple, free means of hosting “static” sites - those comprised of CSS, HTML, and JavaScript. The “trick” was to get the information from the spreadsheet to Javascript uploaded to Github. For that, I used APISpark, from Restlet. After some configuration, it converted a Google spreadsheet into an API.&lt;/p&gt;

&lt;p&gt;That worked for many years. It never occurred to me, however, that SSL was something that this kind of site needed. Even when free certs became available, from sources like &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncyrpt&lt;/a&gt;, it seemed silly. I wasn’t storing sensitive information!&lt;/p&gt;

&lt;p&gt;Besides, not having SSL made WebAPI.events my go-to on “&lt;a href=&quot;https://en.wikipedia.org/wiki/Captive_portal&quot;&gt;captive portals&lt;/a&gt;”. Encrypted sites, like Google or Twitter, usually just timed out if I attempted to open them before agreeing to the captive portal terms. A quick browse attempt to WebAPI.events, however, and the hotel sign-in page appeared immediately.&lt;/p&gt;

&lt;h2 id=&quot;the-need-for-change&quot;&gt;The Need for Change&lt;/h2&gt;
&lt;p&gt;Today, however, there are several reasons to change. The first was the &lt;a href=&quot;https://www.theverge.com/2018/2/8/16991254/chrome-not-secure-marked-http-encryption-ssl&quot;&gt;announcement that Chrome would begin marking ‘http-only’ sites as insecure&lt;/a&gt;. It was a move copied by other browsers, like Firefox. Some, like RSS co-creator David Winer, &lt;a href=&quot;https://www.wired.com/story/google-chrome-https-not-secure-label/&quot;&gt;felt the move was a gross overreach, and that it painted sites that don’t collect info, like webapi.events, with too broad a brush&lt;/a&gt;. However, I was convinced that my site needed SSL &lt;a href=&quot;https://www.troyhunt.com/heres-why-your-static-website-needs-https/&quot;&gt;after watching security expert Troy Hunt demonstrate the importance for static sites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This happened about the same time that &lt;a href=&quot;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&quot;&gt;Github announced SSL support for custom domain names&lt;/a&gt;. It was the right thing to do, it was free, and it &lt;em&gt;should&lt;/em&gt; have been easy. With little other excuse, it was time to get to work.&lt;/p&gt;

&lt;h2 id=&quot;the-work&quot;&gt;The Work&lt;/h2&gt;
&lt;p&gt;The first bit was some light rework on the software architecture. Out went the Google Form fronting the spreadsheet, the spreadsheet itself, and RESTlet. I’d just edit JSON data, directly. It would be stored in a file alongside the site code. The GUI, rather than calling an API, would instead load JSON from the same site. That part of the plan went pretty much as intended.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://twitter.com/libel_vox/status/1022282428172316672&quot;&gt;live tweeted the challenge of updating the site within the runtime of the latest Mission Impossible movie&lt;/a&gt;. The part that tripped me up was the application of Github’s cert on a custom domain name. &lt;a href=&quot;https://twitter.com/codinghorror/status/1022647165246529536&quot;&gt;I was in good company&lt;/a&gt;. I ended that tweet-storm, and the evening, on a sour note.&lt;/p&gt;

&lt;p&gt;After a few more fruitless attempts, I resorted to &lt;a href=&quot;https://matthewreinbold.com/2017/07/04/SiteUpdate/&quot;&gt;the CloudFoundry solution that had worked so well for my personal site&lt;/a&gt;. A few minutes referring to my notes from last time, some time to let the new d33ts propagate, and &lt;a href=&quot;https://webapi.events/&quot;&gt;webAPI.events&lt;/a&gt; was back!&lt;/p&gt;

&lt;h2 id=&quot;yet-to-do&quot;&gt;Yet to Do&lt;/h2&gt;
&lt;p&gt;At the time I was pulling this piece together, designer Eric Meyer &lt;a href=&quot;https://meyerweb.com/eric/thoughts/2018/08/07/securing-sites-made-them-less-accessible/&quot;&gt;shared a different perspective&lt;/a&gt;. He described how certain parts of the world, like rural Uganda, are dependent on geosynchronous-satellite internet. Because of the slow speeds and rampant packet loss, &lt;em&gt;local caching servers&lt;/em&gt; are a popular thing.&lt;/p&gt;

&lt;p&gt;HTTPS is meant to prevent “man-in-the-middle” manipulations of a page. However, caching content also happens to require a “man-in-the-middle”. The move to SSL everywhere has rendered these important services unusable.&lt;/p&gt;

&lt;p&gt;A possible solution is the usage of “&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;service workers&lt;/a&gt;”. I don’t know much about them, right now, but it seems important in order to enable reasonable access to the widest audience possible.&lt;/p&gt;

&lt;p&gt;As Eric points out, it doesn’t completely solve the problem. There is still the issue of older browsers and operating systems. And it is not just in far flung locations; libraries are another location where those dependent on access are limited to whatever older installations are available. Service workers won’t address that situation.&lt;/p&gt;

&lt;p&gt;The design could also use some twiddling. What is there, now, is serviceable (although the table is a bit small on mobile devices). There are templates available, but the thousands of CSS boilerplate to support many responsive designs is shocking. Given the normalized complexity in everything from cloud deployment pipelines to front-end JavaScript frameworks, I probably shouldn’t be surprised. But damn.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/08/screenshot-2.png&quot; /&gt;&lt;figcaption&gt;A screenshot of the new WebAPI.events desktop experience.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So webapi.events is refreshed. It has a simplified workflow, reduced dependencies on 3rd parties, a simplified design, and is only ever served up with SSL.&lt;/p&gt;

&lt;p&gt;And those “captive portals” at airport and hotel wifi spots? Rather than pinging my own stuff, I’ve started using “&lt;a href=&quot;http://neverssl.com/&quot;&gt;NeverSSL.com&lt;/a&gt;”. Simple, easy-to-remember, and perfect for man-in-the-middle hijacking.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Aug 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2018/08/13/UpdatingWebAPIEvents/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/13/UpdatingWebAPIEvents/</guid>
        
        <category>webapi.events</category>
        
        <category>Google</category>
        
        <category>Github</category>
        
        <category>APISpark</category>
        
        <category>RESTlet</category>
        
        <category>LetsEncrypt</category>
        
        <category>SSL</category>
        
        <category>David Winer</category>
        
        <category>Misson Impossible</category>
        
        <category>CloudFoundry</category>
        
        <category>Eric Meyer</category>
        
        <category>Uganda</category>
        
        <category>service workers</category>
        
        <category>captive portals</category>
        
        <category>responsive design</category>
        
        <category>NeverSSL</category>
        
        
      </item>
    
  </channel>
</rss>
