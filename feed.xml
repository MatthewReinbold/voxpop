<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold, the Director for Capital One's   Platform Services Center of Excellence. I also write the 'Net API Notes' email  newsletter and curate NetAPI.events. Much of what appears here dated prior to 2017 was  previously published at VoxPop.co and VoxPopDesign.com. There's also a bit  of legacy detritus from older experiments like mutednoise.com,  miltiantgeek.com, codeaway.org, etc. Adult fan of Lego. And trying to make Dakota Gothic a thing. 
</description>
    <link>https://matthewreinbold.com/</link>
    <atom:link href="https://matthewreinbold.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Aug 2019 00:41:47 -0400</pubDate>
    <lastBuildDate>Thu, 22 Aug 2019 00:41:47 -0400</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Agile Antipatterns</title>
        <description>&lt;p&gt;“Agile Antipatterns” was a June workshop I lead for the DC Technical Product Management Community. The purpose was, through techniques borrowed from Lego Serious Play, to take the audience through a journey discovery about their own software development challenges. It was different from the lecture style I usually do but, despite this, the quality and depth of the ensuing conversation exceeded my expectations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This presentation is part of my goal to produce six original works in six months. For more information see &lt;a href=&quot;https://matthewreinbold.com/2019/06/21/On-Travel/&quot;&gt;the post about my conversion of travel time to productive time in 2019&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The slides and script are below.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide1.PNG&quot; /&gt;&lt;figcaption&gt;Title Slide&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide2.PNG&quot; /&gt;&lt;figcaption&gt;Agenda&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Hello everyone! Let’s get started.&lt;/p&gt;

&lt;p&gt;Welcome to agile anti-patterns. Thank you to Rob for giving me a chance to deliver this talk where we’re going to talk about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tetris Planning&lt;/li&gt;
  &lt;li&gt;Feature Factories&lt;/li&gt;
  &lt;li&gt;Success Theater&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More importantly than just talk about those things, we’re going to discuss what to do if you happen to find yourself in those situations.&lt;/p&gt;

&lt;p&gt;And if none of that sounds appealing, we also have some Lego at our disposal. Regardless of what you were looking to do, by the end you shouldn’t leave disappointed.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide3.PNG&quot; /&gt;&lt;figcaption&gt;More About Me&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;My name is Matthew Reinbold and I am an adult fan of Lego. When I’m not tinkering on my own builds in my home office I am also the director of Capital One’s Platform Services Center of Excellence. My team and I are responsible for balancing software programmer independence and platform integration needs for API and event streaming development. Capital One has approximately 9,000 developers. At some point in their lifecycle, my team collaborates with those development teams. I also have done similar roles at other enterprise companies. In the past year I’ve also consulted with Allstate, CVS, and Google on how they can create more effective software development pipelines.&lt;/p&gt;

&lt;p&gt;When you deal with that many teams over the course of many years, you tend to see some things. Certain behaviors show up time and time again. At some point, these behaviors go from being random things and begin to be patterns.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Photo Credit: &lt;a href=&quot;https://www.flickr.com/photos/linuxfoundation/44245802094&quot;&gt;Linux Foundation&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide4.PNG&quot; /&gt;&lt;figcaption&gt;Models Convey Meaning&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Creating models - either rhetorically or with physical bricks- is important. Models allow us to visualize assumptions and surface unknown values. Models help create shared understanding between many individuals, supplementing language.&lt;/p&gt;

&lt;p&gt;This image is from 2014, just after I was getting back into Lego during my adult years. I was trying to model the stairwell at work, to better understand how space was used. While I could have pondered things for some time, building a physical representation of a stairwell gave me a different perspective and greater appreciation for how the space was optimized.&lt;/p&gt;

&lt;p&gt;There are many ways that one might create a model. I could ask you to draw your responses, or perform some interpretation of your current challenges. Don’t worry, I am not going to ask you to do that, but I would be willing to bet that some of you already have the hairs on the back of your neck just at the thought.&lt;/p&gt;

&lt;p&gt;Bricks, however, are far less intimidating. Many people have reservations about their artistic or thespian talents. But everyone can stick two or three bricks together. Lego presents a simple, approachable means to creating models: click/snap.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide5.PNG&quot; /&gt;&lt;figcaption&gt;More About Lego Serious Play&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;How many here have heard of or participated in a Lego Serious Play activity?&lt;/p&gt;

&lt;p&gt;Lego Serious Play, or LSP, is a technique that uses Lego blocks in directed exercises to build structures that metaphorically represent business models. In the 1990s, under the direction of then president and CEO, Kjeld Kirk Kristiansen (grandson of the original Lego founder), Lego began looking for new techniques leadership teams could use when developing their strategies. The first version and trained facilitators began appearing in 2001. By 2010, Lego created the “community model” of sharing the technique, akin to open sourcing the ideas behind Lego Serious Play.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://matthewreinbold.com/2014/10/29/TechnicalLiteracyForAll/&quot;&gt;I’ve used Lego, previously, engage kids in computer science exploration&lt;/a&gt;. However, tonight I’m using a less structured version of a Lego Serious Play experience, while still heavily leaning into the model creation for discussion and discovery.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide6.PNG&quot; /&gt;&lt;figcaption&gt;Complex Stories Can Start with Simple Models&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;You can tell a great story with a few bricks. What you can see here are a series of advertisements that Lego has run in the past. While the models may be simple, they tell a very complex story.&lt;/p&gt;

&lt;p&gt;The point with this models is not to have picture perfect recreations of their real-world counterparts. What we’re going for here is the metaphor. If there is one rule this evening, it is that people should “&lt;strong&gt;Comment on and critique the metaphor, not the construction&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide7.PNG&quot; /&gt;&lt;figcaption&gt;Title Slide.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;That brings us to our first question for us to dig into. As technical product management, you either are working, or have worked with, a development team. I want you take a few minutes and create a model for your role in the development process.&lt;/p&gt;

&lt;p&gt;Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(&lt;em&gt;hold up a stack of bricks&lt;/em&gt;) Perhaps this is your model -a bastion of stability, solid and firm for your team to be built upon&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;hold a gear&lt;/em&gt;) Or maybe this is your model - a cog in a machine&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;hold up a captain minifig&lt;/em&gt;) Maybe this is how you see your role in the development process - a Captain, ready to lead the team to adventure&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;remove the head from the captain minifig&lt;/em&gt;) Or maybe this is how you feel, a headless captain, given all the responsibility but none of the answers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The model I want you to build is a metaphor for your role in the software development lifecycle. Let’s take five minutes and then we’ll discuss.&lt;/p&gt;

&lt;p&gt;There’s a timer onscreen. When it reaches zero, I’ll ask a few folks to share their creations. Again, we’re not going for photo-realism and five minutes is not a whole lot of time. We need to work quickly. Go with you first idea. Trust your instincts and let’s get going.&lt;/p&gt;

&lt;p&gt;Ready? Set. Build!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide9.PNG&quot; /&gt;&lt;figcaption&gt;Introducing Planning Tetris&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Let’s get into our antipatterns. In my experience, before we can correct a phenomenon, we first have to identify and name it. Without a name, we can’t address it.&lt;/p&gt;

&lt;p&gt;What follows are the description of three agile anti-patterns. There are certainly more, but there’s only so much time that we have this evening.&lt;/p&gt;

&lt;p&gt;Agile anti-patterns typically manifest themselves as commonly applied solutions. A solution becomes an anti-pattern when it ceases to provide an effective fix, or when the cumulative effect of repeatedly applying that fix has an ongoing negative impact.&lt;/p&gt;

&lt;p&gt;The first of those anti-patterns is &lt;strong&gt;Planning Tetris&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide10.PNG&quot; /&gt;&lt;figcaption&gt;Tetris&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Hopefully everyone here is familiar with the game Tetris but, in case you aren’t here’s a quick summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The shapes of various configurations enter a player’s screen from the top, and the shape begins to descend to the bottom&lt;/li&gt;
  &lt;li&gt;The player can move the shape side to side, as well as rotate it&lt;/li&gt;
  &lt;li&gt;The player’s goal is to complete horizontal lines with the provided shapes. Completed horizontal lines will disappear from the gameboard&lt;/li&gt;
  &lt;li&gt;The game is over when shapes can no longer descend from the top of the board&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to avoid gaps in the board by cramming as much together in as tight of space as possible as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/planning-tetris.gif&quot; /&gt;&lt;figcaption&gt;Illustration of Tetris Playing.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;What does this have to do with product management?&lt;/p&gt;

&lt;p&gt;How many people here use story points in their planning rituals? T-shirt sizes? Time-buckets? Am I forgetting any other sizing method?&lt;/p&gt;

&lt;p&gt;Well, regardless of which method used for planning, each of these assume that not all work is sized the same. There are “big” tasks and “small” rocks. When prioritizing a backlog, a common approach is to weigh the size of a task with its importance. Balancing across many, potentially competing, backlogs (like tech debt, UX updates, and business imperatives) are a challenge.&lt;/p&gt;

&lt;p&gt;The first problem is getting the master queue prioritized for the business. Typically, there are rules for how to do this. Putting together the ‘master list’ isn’t the problem, however.&lt;/p&gt;

&lt;p&gt;The second part, and where people get into trouble, is assigning that work. These are two separate problems, but people begin playing Tetris (optimizing for the peak number of items “done”) rather than maximizing the flow of business values.&lt;/p&gt;

&lt;p&gt;In this animation, there are several parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, the business creates the “master queue” of priorities across many competing concerns.&lt;/li&gt;
  &lt;li&gt;Next, teams are assigned, with the highest priority (or ‘Priority 1’) items assigned, then ‘Priority 2’, and so on. In this case, we have a UX “shared team” that will work with Team 2 on Priority 3.&lt;/li&gt;
  &lt;li&gt;However, ‘Priority 2’ is a big item that requires two teams. Team 2 can’t start work without Team 1. Despite the fact that ‘Priority 1’ is the highest priority, it is shuffled so that teams 1 and 2 can start at the same time.&lt;/li&gt;
  &lt;li&gt;Meanwhile, the UX team is encouraged to “work ahead” or “get a jump on” their work, despite being dependent on Team 2’s input.&lt;/li&gt;
  &lt;li&gt;And then executive leadership comes along with their own work-to-be-done, immediately rending the previous prioritization irrelevant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide12.PNG&quot; /&gt;&lt;figcaption&gt;Properties of Planning Tetris&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;What are common properties of planning Tetris? Let’s run through some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pulling “small stories” into a sprint to hit some illusory “velocity” target (even when the stories have nothing to do with a meaningful goal).&lt;/li&gt;
  &lt;li&gt;Encouraging high individual utilization rates. Optimizing for “looking busy” instead of optimizing for efficacy, outcomes, and flow.&lt;/li&gt;
  &lt;li&gt;Big-batch quarterly/annual planning whereby some group of managers/planners attempt to “put the puzzle pieces together” and “get all of this done in the quarter” (even if priorities vary drastically).&lt;/li&gt;
  &lt;li&gt;Asking functional disciplines like UX to “get ahead” of the work, in an effort to work more “efficiently”. This results in an impossible-to-navigate set of dependencies and handoffs (and a lack of information exchange).&lt;/li&gt;
  &lt;li&gt;Making assumptions about the size/shape of planned work (and the flow of future work) that end up being false. For example, a team will be asked to “move on” from a promising initiative because of layers of dependent plans.&lt;/li&gt;
  &lt;li&gt;Rapidly reshuffling/rotating teams to tackle an onslaught of projects.&lt;/li&gt;
  &lt;li&gt;Parallelizing dependent work in the hope that a “horizontal slice” of multiple projects can be completed simultaneously (instead of treating the work as a single project).&lt;/li&gt;
  &lt;li&gt;Never going back to fix things. The “debt” remains, eating into the collective psyche of the organization.&lt;/li&gt;
  &lt;li&gt;Ever-increasing pressure on “the teams”. Pushing teams until they crack. Instead of fixing the gaps, management layers on more and more work until the system experiences a spectacular collapse. Teams, inevitably, have to clean up
the mess (and are blamed for not “pushing back”).&lt;/li&gt;
  &lt;li&gt;Banking on that “one piece” to fall into place and save the day. Until then, making no forward progress. When the silver-bullet piece fails to appear…you find the next silver bullet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide13.PNG&quot; /&gt;&lt;figcaption&gt;Alternatives to Planning Tetris&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;How do you deal with planning tetris?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Do not decompose a unit of value into tasks, and then place the tasks on other teams’ queues.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In other words, what counts is the mission: the engaging outcome you hope to generate for your customers and business.&lt;/li&gt;
  &lt;li&gt;Try to deeply &lt;strong&gt;ingrain the idea of “pull”&lt;/strong&gt; in your organization. It is a huge mindset shift. Pull means that starting something will ALWAYS mean finishing something else. You don’t load people/teams up. You don’t “push” work on teams. Rather, you wait for teams to reach out when they’re ready, and you respect that. You have to trust your teams to do their best without asking them to pre-commit to big batches of work and “stretch goals”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stop fetishizing busyness and output&lt;/strong&gt;. Place a premium on doing more with less. Make craft, thriftiness, and frugality a part of the culture. “Above and beyond” is fine, but it often inadvertently swamps the system. It also incentivizes local heroism over global flow. Focus less on output/busyness, and more on benefits and outcomes. (this can be challenging when metrics are set up in such a way to promote “business”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Leverage work in progress/process constraints&lt;/strong&gt;. WIP constraints serve as a forcing function for continuous improvement, a catalyst for pull, and a signal that the system is straining and needs some TLC. Think of every piece/level on a Tetris board as WIP. Unfortunately, WIP constraints are counterintuitive: we look to estimates/guesses to “size up” the work and “fill up” the system. This is a recipe for dangerously high utilization rates and long, long lead times.&lt;/li&gt;
  &lt;li&gt;Visualize dependencies / visualize the whole. When we split things up, we tend to lose the thread. By visualizing things “as a whole”, we tend to make wiser decisions. Instead of six “projects”, we have a single mission.&lt;/li&gt;
  &lt;li&gt;Do something about the “debt”. Cutting corners creates gaps. We rationalize cutting corners to learn earlier, deliver earlier, and make money earlier. The problem is that the debt add up and add psychic drag on teams and, eventually, overwhelm them.&lt;/li&gt;
  &lt;li&gt;Map your assumptions. We tend to act based on a web of assumptions (some conscious, some unconscious, some fragile, others robust). Building shared understanding around our assumptions can expose “tangled webs” early, and encourage us to simplify, solidify plans at the last responsible moment, and leave more slack in the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide14.PNG&quot; /&gt;&lt;figcaption&gt;Modeling You in Relation to Your Backlog&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This brings us back to our models. We previously created a model of our roles in our product development. We’re going to continue to build on that. Take the model of yourself and create the relationship between you and your backlog (or backlogs).&lt;/p&gt;

&lt;p&gt;Is that relationship:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a treasure of untapped potential&lt;/li&gt;
  &lt;li&gt;a dumpster fire&lt;/li&gt;
  &lt;li&gt;a pipeline of great ideas&lt;/li&gt;
  &lt;li&gt;an overstuffed stuffed closet?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While creating that model, take what we’ve learned about planning Tetris. Is there an aspect to that in your sprint grooming? Are you optimizing for a high rate of Work-in-Progress (WIP)? Do you metrics celebrate busyness or velocity? How does that manifest in your model?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide16.PNG&quot; /&gt;&lt;figcaption&gt;Introducing Feature Factories&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Planning Tetris, if left unchecked, results in teams producing things for the sake of producing things.&lt;/p&gt;

&lt;p&gt;In this situation, development has been come a factory, pumping out features, and the team are just line workers. They’ve become disconnected from the business value derived from their work. They finish a feature, or close a ticket, only to get another immediately afterward with little sense of continuity or importance.&lt;/p&gt;

&lt;p&gt;Feature factories (also called feature pumps) are incredibly corrosive to morale and, despite the pressure to create an ongoing stream of work, &lt;strong&gt;decreases&lt;/strong&gt; the alignment with the missions of the company. Outputting things is more important than the outcomes those things cause.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide17.PNG&quot; /&gt;&lt;figcaption&gt;Feature Factories Illustrated.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Thus, we have the agile antipattern of feature factories.&lt;/p&gt;

&lt;p&gt;What does it feel like to work in a feature factory? &lt;a href=&quot;https://medium.com/@johnpcutler/beat-the-feature-factory-runpre-cap-design-studios-725d1c83ecd7&quot;&gt;This quote sums up the experience&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You know… when this is “done”, we will have moved on to the next thing. Sure we will have shipped something, but it will be anyone’s guess whether this actually worked. When do we answer that question? It just never seems to happen.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide18.PNG&quot; /&gt;&lt;figcaption&gt;Properties of the Feature Factory&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;How can you tell that you might be working in a feature factory?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Rapid shuffling&lt;/strong&gt; of teams and projects.&lt;/li&gt;
  &lt;li&gt;Instead of compelling missions or initiatives, teams deal in feature and project assignments. Chronic multitasking and over-utilization&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Infrequently acknowledged failures&lt;/strong&gt; and scrapped work. No removed features. Primary measure of success is delivered features, not delivered outcomes. Work is rarely discarded in light of data and learning. Often the team lacks the prerequisite safety to admit misfires&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No connection to core metrics&lt;/strong&gt;. Infrequent discussions about desired customer and business outcomes. Team cannot connect work to key business and customer satisfaction metrics. Impossible to connect iterations to “what matters most”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No PM retrospectives&lt;/strong&gt;. Product managers do not conduct regular retrospectives on the quality of their product decisions and compare expected benefits to actual benefits. Developers have “passing tests”, but product managers do not. Product managers view velocity and output as their key performance indicator.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Obsessing about prioritization&lt;/strong&gt;. Mismatch between prioritization rigor (deciding what gets worked on) and validation rigor (deciding if it was, in fact, the right thing to work on). Prioritization rigor is designed exclusively to temper internal agendas so that people “feel confident”. Lots of work goes into determining which ideas to work on, leaving little leeway for adjustments and improvisation based on data. Roadmaps show a list of features, not areas of focus and/or outcomes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No tweaking&lt;/strong&gt;. Once work is “done”, the team moves immediately on to the next “project”, leaving no time to iterate based on qualitative and quantitative data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Culture of hand-offs&lt;/strong&gt;. Front-loaded process in place to “get ahead of the work” so that items are “ready for engineering”. Team is not directly involved in research, problem exploration, or experimentation and validation. Once work is shipped, team has little contact with support, customer success, and sales&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Large batches&lt;/strong&gt;. Without the mandate to experiment, features are delivered in single large batches instead of delivering incrementally. You might still work in sprints (yay, we’re “Agile”), but nothing new is reaching customers at the conclusion of each sprint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chasing upfront revenue&lt;/strong&gt;. Features are implemented to close new deals. While not inherently wrong, the economic justifications are often flimsy (at best), and fail to account for the non-linear increase in product complexity (you make the quarter, but you pay for it many times over later). Again, this reinforces the idea that features are the unit of value measurement. Product decisions lack a sound economic grounding&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shiny objects&lt;/strong&gt;. Low visibility for refactoring work and debt work-down. Low visibility for overall value delivery capabilities. As mentioned, primary measure of success is new feature output. Little appreciation for the health of the whole product as opposed to shiny new objects. Little awareness around impact of new features on usability (and maintainability and extensibility) of existing product&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Success theater around “shipping” with little discussion about impact&lt;/strong&gt;. You can tell a great deal about an organization by what it celebrates (more on that in a moment).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide19.PNG&quot; /&gt;&lt;figcaption&gt;Approaches to Dealing with Feature Factories&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Correcting a situation in which a feature factory exists means mending the gap that has occurred between what is worked on and the value that is delivered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrange a meeting with your company’s CFO.&lt;/strong&gt; Have them explain the moving parts in the business model, and the assumptions that underpin forecasts and growth targets. How do you really make money, and what must remain true for you to continue to make money? What costs matter now? Why are sales goals what they are? Where does product performance fit into the big picture?&lt;/p&gt;

&lt;p&gt;To defeat the feature factory, the line-workers (that’s you) must learn to speak the language of the business as well as the language of their craft. It’s the game you’re playing. Be wary when told that the team “just needs to execute”.&lt;/p&gt;

&lt;p&gt;What does the ‘language of business’ sound like? Some examples include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“If we continue to iterate on this existing feature we can achieve that goal without having to fork the product. It’s worth our focus.”&lt;/li&gt;
  &lt;li&gt;“The work we’re doing is barely making a dent in the key metric.”&lt;/li&gt;
  &lt;li&gt;“If we accumulate this technical debt, we wont be able to meet those goals for new product development.”&lt;/li&gt;
  &lt;li&gt;“Churn will increase beyond your threshold if we don’t double-down on nipping this expectation mismatch in the bud.”&lt;/li&gt;
  &lt;li&gt;“We can still meet these sales goals if we choose to be more selective. Building feature on demand is a distraction, and I’ll show you why ….”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a reframing of one’s job. It means you’re not just there to deliver work. But by speaking the language of business you can break out of the factory model by explaining how peak optimization is hurting the bottom line.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide20.PNG&quot; /&gt;&lt;figcaption&gt;Modeling the Delivery of Business Value&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Illustrate the value of your work in terms of business output - the value created by your teams is not the number of features delivered, and be wary of any metric that only looks at features delivered, tickets closed, etc. Emphasize the outcomes created in terms of business value - what does that look like?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide22.PNG&quot; /&gt;&lt;figcaption&gt;Introduction to Success Theater&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The continued production a features, now unmoored from real value creation, cause an interesting dynamic. Lots is getting done, but there’s questions about whether it is the right thing. Those that are creating the work now have a stake in selling the work as valuable. In that respect, they become complicit in marketing the work. They are performers in what is known as “success theater”.&lt;/p&gt;

&lt;p&gt;At its base, “success theater” is an projected optimism and celebration of delivery that doesn’t match the reality of customer reaction. It’s that the burndown chart must go to zero, or features delivered quarter after quarter go up and to the right, although there were corners that needed to be cut. It’s vanity metrics - the ones that celebrate more for the sake of more, but have little to do with value delivered. It’s optics and smoke and spin and the more levelheaded you are about honest summaries, the more likely you’ll be cut out of the loop for not being a “team player”, or “being a critic”.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide23.PNG&quot; /&gt;&lt;figcaption&gt;Properties of Success Theater&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Some tell-tale signs of ‘Success Theater’ include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“pervasive good news culture”, including creation of a particular language. For example, you are not allowed to point out problems, or discuss weaknesses. Instead, anything that isn’t great today is “an opportunity”. (Story about color coding an item in a spreadsheet as ‘light green’ instead of green when it is behind schedule, because coding the row as yellow would raise alarms.)&lt;/li&gt;
  &lt;li&gt;Every plan is a hockey stick; in order to justify the hiring and spending wanted now, significant ROI has to be shown the day after tomorrow. Or, there’s always the story that next year is the year it all comes together&lt;/li&gt;
  &lt;li&gt;Messengers are shot - people who raise concerns keep disappearing - either moving on of their own accord, or have odd reasons&lt;/li&gt;
  &lt;li&gt;Do you do a product showcase? Warts and all? Is it scary to share anything less than the final product to product owners? Stakeholders?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide24.PNG&quot; /&gt;&lt;figcaption&gt;Approaches to Dealing with Success Theater&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Success Theater is the last resort of teams that have done the tetris planning, toiled in feature factory, resulting in little-to-no meaningful impact; as a resort, the team is forced to trumpet hollow talking points to justify all their activity.&lt;/p&gt;

&lt;p&gt;Success theater has its own language. Like combatting feature factories, it is vital to recognize the prevalent storytelling and frame the discussion accordingly. This won’t be undone easily, either. If you work in one of these places you won’t be able to walk to your manager’s office door tomorrow and be celebrated for the list of grievances you nail to it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ask people to highlight issues or concerns - if the culture is averse to admitting weakness, you can soft pedal by asking “if a risk were to develop, where would it be?”&lt;/li&gt;
  &lt;li&gt;Lead by example - find those in leadership that are passionate pragmatists, concerned about the craft more than the ladder climbing. This leadership needs to reinforce the message, swarming on the things that matter.&lt;/li&gt;
  &lt;li&gt;Share challenging news, but beware of tone - this isn’t to wallow or curry sympathy. This is an open conversation with an emphasis on learning; despite the fact there might have been a setback, use it to engage and energize people that there is a way forward.&lt;/li&gt;
  &lt;li&gt;Celebrate those who share an issue or concern, reinforcing their courage and willingness to be vulnerable. It is a way you signal it’s ok to share concerns.&lt;/li&gt;
  &lt;li&gt;When you have “real” wins, celebrate them like crazy! Shout from the rooftops - put a spotlight on the things that really matter. Have avenues for telling your story and make sure the message isn’t ignored from “celebration fatigue” by only using them for the big things.&lt;/li&gt;
  &lt;li&gt;Promote people who have bounced back. - celebrate those who have demonstrated resilience, rather than those who have never tasted failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide25.PNG&quot; /&gt;&lt;figcaption&gt;Celebrate Real Wins&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Creating a culture where true impact is valued is vital. How do you celebrate the ‘real’ wins? What does that look like in your company? Add to your model how you’ll overcome superficial superlatives, and elevate those things that create real positive customer impact.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide27.PNG&quot; /&gt;&lt;figcaption&gt;Wrapping Up&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The challenges of successfully implementing an agile development process are numerous. We’ve only just scratched the surface. However, it is my hope, that by providing an introduction to planning tetris, feature factories, and success theater you’re better able to identify these problems before they grow.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide28.PNG&quot; /&gt;&lt;figcaption&gt;Additional Resources&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in reading more about these items, please refer to the links below:&lt;/p&gt;

&lt;h3 id=&quot;lego-serious-play&quot;&gt;Lego Serious Play&lt;/h3&gt;
&lt;p&gt;In general, why there are some interesting bits here, I have yet to find a Lego Serious Play reference I can recommend without reservation. Your mileage may vary.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/business/free/files/build-to-lead.pdf&quot;&gt;Build to Lead (Free ebook from O’Reilly)&lt;/a&gt;, Donna Denio &amp;amp; Dieter Reuther&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Building-Better-Business-Serious-Method/dp/1118832450&quot;&gt;Building a Better Business Using the Lego Serious Play Method&lt;/a&gt;, Per kristiansen and Robert Rasmussen&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://markorillo.com/lego-serious-play/serious-work-how-to-facilitate-meetings-and-workshops-using-lego-serious-play-method/&quot;&gt;Serious Work - How to Facilitate Meetings and Workshops Using the Lego Serious Play Method&lt;/a&gt;, Sean Blair, Marko Rillo &amp;amp; Partners&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;planning-tetris&quot;&gt;Planning Tetris&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@johnpcutler/stop-playing-tetris-with-teams-sprints-projects-and-individuals-b1e4ed6d8bc0&quot;&gt;John Cutler - Stop Playing Tetris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@johnpcutler/quit-planning-ahead-and-keeping-people-busy-937e74d5a1fb&quot;&gt;John Cutler - Quit Planning Ahead and Keeping People Busy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/255212439&quot;&gt;John Cutler - Tetris, Queues, Dependencies, and Flow of Value (especially starting at the 6 minute mark)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@manuelgomes/full-utilisation-and-whitespace-91e440af682d&quot;&gt;Manuel Gomes - Full Utilization and Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;feature-factories&quot;&gt;Feature Factories&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/12-signs-youre-working-in-a-feature-factory-44a5b938d6a2&quot;&gt;John Cutler - 12 Signs You’re Working in a Feature Factory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@johnpcutler/beat-the-feature-factory-with-biz-chops-dfc7cf6309ae&quot;&gt;John Cutler - Beat the Feature Factory with Biz Chops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@johnpcutler/beat-the-feature-factory-run-pre-cap-design-studios-725d1c83ecd7&quot;&gt;John Cutler - Beat the Feature Factory: Run Pre-Cap Design Studios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;success-theater&quot;&gt;Success Theater&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@lianedavey/is-success-theater-masking-rot-in-your-organization-88c2dea66fb3&quot;&gt;Liane Davey - Is ‘Success Theater’ Masking Rot in Your Organization?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wsj.com/articles/how-jeffrey-immelts-success-theater-masked-the-rot-at-ge-1519231067&quot;&gt;How Success Theater Derailed GE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you are on Twitter, I would strongly recommending following &lt;a href=&quot;https://twitter.com/johncutlefish&quot;&gt;John Cutler&lt;/a&gt;, the origin for a number of these links. A self-described “product management nut”, he regularly provides thought-provoking examinations of modern product development facets.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/08/Slide29.PNG&quot; /&gt;&lt;figcaption&gt;Contact Information&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;My name is Matthew Reinbold. If you are interested in my thoughts on the evolving API industry, &lt;a href=&quot;https://tinyletter.com/netapinotes/archive&quot;&gt;I write an email newsletter called ‘Net API Notes’&lt;/a&gt;. I am Twitter’s &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;libel_vox&lt;/a&gt; and write at &lt;a href=&quot;https://matthewreinbold.com&quot;&gt;MatthewReinbold.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you and good night.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/08/02/AgileAntipatterns/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/08/02/AgileAntipatterns/</guid>
        
        <category>presos</category>
        
        <category>Lego</category>
        
        <category>agile</category>
        
        <category>management</category>
        
        
      </item>
    
      <item>
        <title>Overcoming Complexity through the Principle of Least Power</title>
        <description>&lt;p&gt;Here are the slides and script for the presentation I made on July 17th at the San Francisco APIDays Conference. The theme for the event was ‘The New API Stack’.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This presentation is part of my goal to produce six original works in six months. For more information see &lt;a href=&quot;https://matthewreinbold.com/2019/06/21/On-Travel/&quot;&gt;the post about my conversion of travel time to productive time in 2019&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Without further ado, here is the talk.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update 2019-08-13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The video recording for the talk has been released. If you’d prefer to watch rather than read, &lt;a href=&quot;#video&quot;&gt;I’ve embedded it below&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide1.PNG&quot; /&gt;&lt;figcaption&gt;An innocuous introduction slide.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Welcome, everyone. My name is Matthew Reinbold, and my talk this morning is how to overcome &lt;em&gt;complexity&lt;/em&gt; with the &lt;em&gt;principle of least power&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@shemul?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Shahadat Shemul&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/complexity?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide2.PNG&quot; /&gt;&lt;figcaption&gt;Defining software complexity.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Modern software architecture &lt;em&gt;is &lt;strong&gt;complex&lt;/strong&gt;&lt;/em&gt;. John Ousterhout, in his book “A Philosophy of Software Design”, defines complexity
as:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“anything related to the structure of a software system that makes it hard to
understand and modify the system.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, a barrier to the kind of business agility that we crave, that is desired to win in competitive marketplaces, is how hard our architectures are to grok.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide3.PNG&quot; /&gt;&lt;figcaption&gt;Complexity grows. For everyone.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Complexity is a problem that we all share. Clear back in the innocent, carefree days of 2011 Marc Andreessen quipped that “software was eating the world”. That same year &lt;a href=&quot;https://www.forbes.com/sites/techonomy/2011/11/30/now-everycompany-is-a-software-company/#42438fbdf3b1&quot;&gt;Forbes declared that “every company is a software company&lt;/a&gt;”. Sometime around the middle of this decade, our community began talking about how “&lt;a href=&quot;https://techcrunch.com/2015/05/06/apis-fuel-the-software-thats-eatingthe-world/&quot;&gt;APIs were eating software&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;As the Director for the Capital One Center of Excellence, I lead the team that sets the API and event streaming standards for 9,000 geographically disbursed developers. A vast majority contribute to the thousands of in-production, internal APIs that our company uses to deliver new products and experiences. My team and I oversee an internal ecosystem that delivers 3.5 billion API requests a day.&lt;/p&gt;

&lt;p&gt;In addition to that “day job”, I also write an email newsletter called “&lt;a href=&quot;https://tinyletter.com/netapinotes/archive&quot;&gt;Net API Notes&lt;/a&gt;”. There, I love to highlight stories of how other companies are managing their API journeys. While many are at different points along the road, all of us eventually run into same problem: complexity.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide4.PNG&quot; /&gt;&lt;figcaption&gt;APIs offer the greatest leverage point in a dynamic system.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Why APIs? Because the API is the greatest leverage point in a complex system. An API is a means of abstracting complexity and hiding it behind an interface.&lt;/p&gt;

&lt;p&gt;That abstraction allows programmers to work on a system without being exposed to all a system’s complexity at once. An API is a simplified view which omits unimportant details. It makes it easier for us to think about and manipulate complex things.&lt;/p&gt;

&lt;p&gt;It’s why APIs have exploded, both internally and externally. In our organization, we might have started with APIs - either our own or 3rd parties - for critical functionality. However, in time, patterns emerged to deal with the &lt;em&gt;complexity&lt;/em&gt; of the environment. If you’re Netflix’s Daniel Jacobson, you call these “&lt;a href=&quot;http://www.danieljacobson.com/blog/306&quot;&gt;experience APIs&lt;/a&gt;” (2014). If you’re Phil Calçado, director at Meetup, &lt;a href=&quot;https://philcalcado.com/2015/09/18/the_back_end_for_front_end_pattern_bff.html&quot;&gt;this is the Backend-for-Frontend (or BFF) pattern&lt;/a&gt; (2015).&lt;/p&gt;

&lt;p&gt;At the same time that this orchestration API layering was taking place, &lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot;&gt;James Lewis and Martin Fowler were talking about an abstraction they saw called &lt;em&gt;microservices&lt;/em&gt;&lt;/a&gt; (2014).&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide5.PNG&quot; /&gt;&lt;figcaption&gt;Even these abstractions meant to hide complexity birth their own complexity when done in mass.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Thing is, complexity is neither creator or destroyed, is just changes shape. Not only are there more services, resulting in the infamous “microservice death star” style graphs, but the complexity introduced to try and manage these services – deployment pipelines, service meshes, monitoring tools, auditing, dependency managements also introduce their own emergent behavior.&lt;/p&gt;

&lt;p&gt;In fact, over the past several years, through the writing on Net API Notes, I’ve seen a number of pieces where companies retreat back to a monolith exactly because they were more comfortable with the complexity that they had known rather than the new form it had taken.&lt;/p&gt;

&lt;p&gt;With enough abstractions, we begin to see that layers change at different rates.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Images from “&lt;a href=&quot;https://blog.acolyer.org/2019/05/13/an-open-source-benchmark-suite-formicroservices-and-their-hardware-software-implications-for-cloud-edge-systems/&quot;&gt;An Open Source Benchmark Suite for Microservices&lt;/a&gt;”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide6.PNG&quot; /&gt;&lt;figcaption&gt;Layering of abstractions move at different rates.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Abstractions changing at different rates doesn’t just happen in software. Wherever there are people, we see a stratification among abstractions.&lt;/p&gt;

&lt;p&gt;In his book, “The Clock of the Long Now”, Stewart Brand described “Pace Layers”. He identified layers with each layer building upon slower-moving layers beneath it.&lt;/p&gt;

&lt;p&gt;At the bottom are those things that are the slowest to change. These are things of &lt;strong&gt;nature&lt;/strong&gt;. As far as we know, the laws of physics haven’t changed. For example, the speed of light is constant.&lt;/p&gt;

&lt;p&gt;Next up is the &lt;strong&gt;cultural&lt;/strong&gt; layer. People are people. It’s why the stories of the Greeks and Romans still resonate with us today.&lt;/p&gt;

&lt;p&gt;Above that is &lt;strong&gt;governance&lt;/strong&gt;. Note that this is not &lt;em&gt;governments&lt;/em&gt; (think democracy or populism).&lt;/p&gt;

&lt;p&gt;Above that, moving at a faster clip, is &lt;strong&gt;infrastructure&lt;/strong&gt;. These are things like our road systems, or the electrical or plumbing networks in this building.&lt;/p&gt;

&lt;p&gt;Moving even faster that that is &lt;strong&gt;commerce&lt;/strong&gt; or the rate at which new products, services, and experiences can be brought to a market.&lt;/p&gt;

&lt;p&gt;Finally, at the top and moving with the greatest speed, is fashion.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide7.PNG&quot; /&gt;&lt;figcaption&gt;Fast layers innovate, slow layers stabilize.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;One layer isn’t more important than another. It turns out that &lt;em&gt;all&lt;/em&gt; layers are important for a well-functioning system. Each has its place. Imagine if something as important as foreign policy was being run on a whim? Or if innovation was only allowed to happen at the speed of bureaucratic consensus.&lt;/p&gt;

&lt;p&gt;As Stewart says in his book:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Fast learns, slow remembers. Fast proposes. Slow disposes. Fast is discontinuous and slow is continuous. Fast and slow informs slow and big by accrued innovation and occasional revolution and slow and big control slow and fast by constraint and constancy. Fast gets all our attention but slow has all the power.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide8.PNG&quot; /&gt;&lt;figcaption&gt;An API Pace Layer begins with unchanging natural laws.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;When it comes to web, or ‘net’, APIs I see similar stack that changes at different rates. I’ll insert my usual model disclaimer here: “all models are wrong, but some are useful”. I acknowledge this is incomplete, but this API Pace Layering model we’re about to walk through is useful for raising topics for discussion and illustrating insights about complexity (and where we attempt to hide it).&lt;/p&gt;

&lt;p&gt;At the bottom, again, are the laws of &lt;strong&gt;nature&lt;/strong&gt;. The speed of light sent between distributed systems is constant. Not a whole lot there likely to change soon.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide9.PNG&quot; /&gt;&lt;figcaption&gt;TCP is foundational, constant and unchanging.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The next is the TCP layer. That protocol has been around since the 70s. That’s probably a good thing, as something as necessary as packet transmission needs to be stable; considering the amount of physical hardware, languages, and frameworks that have it “baked in”, you wouldn’t want it changing often.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide10.PNG&quot; /&gt;&lt;figcaption&gt;HTTP is the next layer.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;As we go up, remember that we’re beginning to pick up the rate of change. There are lots of protocols, like FTP or email. However, most of us in this room are probably familiar with HTTP. HTTP 1.1, which a guy named Roy Fielding worked on, &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;was ratified in 1999&lt;/a&gt;. HTTP/2, which many haven’t implemented yet, was approved in 2015. It’s not whipsawing speed, by any stretch of the imagination. However, compared to TCP, it’s changing faster.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide11.PNG&quot; /&gt;&lt;figcaption&gt;HTTP can be thought of as additional, addative layers.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Here’s where I purposely made it interesting. HTTP, &lt;em&gt;itself&lt;/em&gt;, is layered. There’s the verbs or methods. Everybody is familiar with “GET”, “PUT”, “POST”, and “DELETE”. Some might even use “PATCH”. There are others, like “OPTIONS” and “HEAD”, which are useful in other circumstances. There’s a couple more, but that’s mostly it; under ten items to recall that have been stable since the last millennium.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;status codes&lt;/em&gt;; while, officially, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;there are 50-60 status codes&lt;/a&gt; the ones we care about can be broken into three broad groups. Any 2xx responses tell me, as a client, my request succeeded. Any 4xx tells me, as a client, that I need to modify my request before doing it again. Also, 5xx tells client me that the API provider is having a very bad moment. Again, stable, consistent, and doesn’t require me to introspect the payload for the high-level gist of what is going on.&lt;/p&gt;

&lt;p&gt;The last layer of the HTTP protocol worth highlighting is &lt;em&gt;headers&lt;/em&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;There are about a hundred of these&lt;/a&gt;. Some of them get into a fair amount of subtlety and nuance. Not all are that useful. However, this is where we get a wonderful set of tools to shape requests. The fastest request is the one you never have to make. If an API provides thoughtful clues through caching headers to a client, it is a beautiful, highly-performant, thing. Headers also where we can perform content negotiation, allowing the same API to return the JSON representation, a CVS file, a PDF, a binary image, or &lt;em&gt;more&lt;/em&gt; all from the same resource.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide12.PNG&quot; /&gt;&lt;figcaption&gt;RFCs offer lots of opportunities for experimentation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Above HTTP, evolving at a greater clip, are the IETF’s &lt;em&gt;Requests for Comment&lt;/em&gt;, or RFCs. There are &lt;strong&gt;thousands&lt;/strong&gt; of these notes which capture proposed ways communication on the internet might work. That’s a lot and there are new ones all the time.&lt;/p&gt;

&lt;p&gt;There is some excellent work here that can powerfully aid comprehension and intuitiveness of a design. When things go wrong, &lt;a href=&quot;https://tools.ietf.org/html/rfc7807&quot;&gt;RFC7807 defines a common error object&lt;/a&gt;. By using a standard, clients aren’t left having to figure out where in the payload to look for information to help solve their issues. A standard might also suggest information, or representations of information, that you might not otherwise have considered.&lt;/p&gt;

&lt;p&gt;There’s also &lt;a href=&quot;https://tools.ietf.org/html/rfc8594&quot;&gt;RFC 8594, the sunset HTTP header&lt;/a&gt;. It is a way of telling someone that requests a URI that it may become unresponsive in the future. This one was fun to watch being born, on Twitter and through email, by this extended community. A common need for better lifecycle management was identified folks online and they swarmed together to discuss merits of different approaches. From their efforts, we now have a abstraction: the complexity of having to come up with how to do this was handled by someone else.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide13.PNG&quot; /&gt;&lt;figcaption&gt;Patterns are numerous, and quick to evolve.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Finally, at the top of this layering, are patterns. There are some patterns, like the backend-for-frontend or experience API pattern, that become popular - possibly even so popular that they end up generating dedicated RFCs to support them. Remote Procedure Call (or RPC) is a pattern. Webhooks are a pattern. Hypermedia is also a pattern. These can are multitudinous, and a new one can be introduced as quickly as the Netflix engineering or Hacker News forums publish a new post. These are constantly changing. Some become quite fashionable.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide14.PNG&quot; /&gt;&lt;figcaption&gt;A layered architectural approach gracefully degrades.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The wonderful thing about how these layers perform in a complex system is how they gracefully degrade. Suppose, for example, that I provide an API that implements an RFC, like the common error object. What if the client isn’t expecting, or doesn’t care that I’m following a prescribed standard. Do we fail to exchange meaningful information?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Of course not&lt;/em&gt;. A client unaware of RFC 7807 would only see a JSON response returned to them, and they would parse it anyway, the same as they would if my response was something that I came up with off the top of my head. The advantage are those complex ecosystems featured in the microservice death stars – when all services express information in the same way, it opens opportunities for tooling; tooling which takes the cognitive burden from developers, freeing them to focus on the business problem.&lt;/p&gt;

&lt;p&gt;Let’s take another example and go a layer deeper. As an API provider, I have the best understanding of when the underlying data changes. As a result, I provide cachecontrol and ETag headers to the client, allowing them to make smart decisions about when to request an object. After all, the fastest API call is the one that didn’t have to happen in the first place. If a client is savvy and picks up on it, great! If not, &lt;strong&gt;things still work&lt;/strong&gt;; maybe not as efficiently, maybe not as elegantly. However, building in layers that can gracefully degrade means that communication is still possible.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide15.PNG&quot; /&gt;&lt;figcaption&gt;GraphQL cuts across layers, connecting an interaction pattern to TCP.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Now, for a brief moment, let’s talk about GraphQL (going through a similar exercise for gRPC is left to the reader). GraphQL is a query language for data retrieval and updating via HTTP. I put it in the “pattern” layer, as it is a different API interaction pattern between client and server.&lt;/p&gt;

&lt;p&gt;Unlike the other patterns that I had previously mentioned, however, GraphQL is &lt;em&gt;not&lt;/em&gt; built upon the same layered approach. All requests, be it data retrieval or mutations to update, are submitted via POST. The only status code ever returned is a 200, requiring introspection of the payload &lt;em&gt;of every response&lt;/em&gt; in case there is an error embedded in it. Headers aren’t encouraged, as they’re not displayed in tooling like the explorer from GraphQLHub.com. There’s no equivalent RFC-like error response for GraphQL, although vendors like Apollo are promoting their approach.&lt;/p&gt;

&lt;p&gt;There’s a paradox here. I can hear it. “Matthew,” you might say, “by freeing us from having to think about verbs or codes or headers or RFCs – by getting rid of the layers, aren’t we abstracting complexity behind a single abstraction?”&lt;/p&gt;

&lt;p&gt;Remember, &lt;strong&gt;complexity is neither creator or destroyed&lt;/strong&gt;, is just changes shape.&lt;/p&gt;

&lt;p&gt;GraphQL is not a layered approach; everything from the pattern to the TCP/IP layer is either strictly specified by GraphQL or left for developers to recreate in their own, bespoke way. Eschewing layers, as GraphQL gives developers tremendous power to solve problems exactly how they imagine a problem to be solved; both from the consumer’s point of view, where they can tailor the response to their needs. The API provider also can implement their own approaches to common distributed systems problems. But that power comes with &lt;em&gt;great&lt;/em&gt; &lt;strong&gt;complexity&lt;/strong&gt;. The layers that abstracted the complexity of things like caching, of error handling, content negotiation are all left to the developer. And having each GraphQL solve those things in their own fashion will increase the complexity of comprehension on the part of clients and tool makers.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide16.PNG&quot; /&gt;&lt;figcaption&gt;To combat complexity, the principle of least power suggests keeping things simple and within layers.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3.org/2001/tag/doc/leastPower.html&quot;&gt;The principle, or rule, of least power states that one should&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Choose the least powerful language suitable for a given purpose.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That seems incredibly counter-intuitive. Don’t we want &lt;strong&gt;more&lt;/strong&gt; power to solve problems? Shouldn’t we deserve the newest tools? The most flexible frameworks? Who in their right mind is a fan of the least among us?&lt;/p&gt;

&lt;p&gt;We can apply this to our layers. When I call an API, I can include instructions as to whether I’m reading or updating information in the payload; that is a payload the server will have to introspect and act on. Or I can use the humble verb at the lowest layer, and signal the same thing via a GET or PATCH. It seems like a simple thing but it drastically affects where the complexity of our tracing, monitoring, entitling, securing, rate-limiting, framework-ing, and supporting goes.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide17.PNG&quot; /&gt;&lt;figcaption&gt;Ultimately, there is nothing wrong with fasion. Just make choice based on principle. &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;So do I hate GraphQL? Am I advocating that we should only use “boring” technology? That the old stuff is better?&lt;/p&gt;

&lt;p&gt;While I am a fan of &lt;a href=&quot;http://boringtechnology.club&quot;&gt;The Boring Technology Club&lt;/a&gt;, that is not the message. I’ve grown to appreciate what happens within the fashionable layers. The chaotic experimentation is exciting. The vigor for overturning assumptions and pursuing new avenues is how we discover new, potentially powerful ideas. In a healthy stack, the best ideas go from being fashionable, to products sold via commerce, to essential pieces of infrastructure eventually requiring governance and important pieces of business culture.&lt;/p&gt;

&lt;p&gt;What I do advocate for, however, is conscious, decision being made when pursuing new patterns. Eschewing layers comes with trade-offs. Enter into those decisions with eyes wide open.&lt;/p&gt;

&lt;p&gt;As Mythical Man Month author Fred Brooks said:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“There are no silver bullets.””&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@mariyageorgieva?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Mariya Georgieva&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/fashion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide18.PNG&quot; /&gt;&lt;figcaption&gt;An innocuous conclusion slide.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, every company is a software company which means every company is wrestling with growing complexity.&lt;/p&gt;

&lt;p&gt;One approach to dealing with complexity to create abstractions. The abstractions at the different layers in any system evolve at different rates, which is a good thing. Fast layers accrue innovation and occasionally incite a revolution while the slow provide stability and filtering.&lt;/p&gt;

&lt;p&gt;Net APIs have evolved into different layers. Each layer provides a host of solutions to common problems that gracefully degrade if not used. The principle of least power suggests choosing simple, layered solutions to layer-spanning solutions.&lt;/p&gt;

&lt;p&gt;Only by making more informed decisions, fully aware of the trade-offs at hand, will those responsible for API governance be able to overcome the complexity of our current API stacks.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/07/Slide19.PNG&quot; /&gt;&lt;figcaption&gt;Thank you for your attention.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I’ll have the slides, along with some additional color and links to sources, at my website, &lt;a href=&quot;https://matthewreinbold.com&quot;&gt;matthewreinbold.com&lt;/a&gt;. I’ll announce when its ready on my Twitter stream and in my newsletter, ‘Net API Notes’.&lt;/p&gt;

&lt;p&gt;I am &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;Twitter’s @libel_vox&lt;/a&gt;, and you can follow me and continue the conversation there. Thank you for the precious gift of your attention. Enjoy the rest of the conference!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;video&quot;&gt;Video recorded on July 17, 2019&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Q4wUmKX8ZQU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/07/17/OvercomingComplexity/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/07/17/OvercomingComplexity/</guid>
        
        <category>presos</category>
        
        <category>conferences</category>
        
        <category>APIDays</category>
        
        <category>GraphQL</category>
        
        <category>Pace Layers</category>
        
        <category>APIs</category>
        
        
      </item>
    
      <item>
        <title>On Travel</title>
        <description>&lt;p&gt;For a variety of reasons, I’ve been rethinking my approach to physical travel - particularly for conferences. Don’t get me wrong; there are few things in life more thrilling for me &lt;a href=&quot;https://matthewreinbold.com/2014/05/20/magiccircle/&quot;&gt;than discovering a magic circle&lt;/a&gt;, particularly when reconnecting with online friends. However, the unrecoverable time there and back, &lt;a href=&quot;https://www.sciencemag.org/careers/2019/05/why-some-climate-scientists-are-saying-no-flying&quot;&gt;the carbon footprint accrued&lt;/a&gt;, and the time away from my family looms ever larger.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/gretathunberg/status/1119308213722275840?lang=en&quot;&gt;To paraphrase climate activist Greta Thunberg&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“What we need are role models who practice what they preach and live within sustainable planetary norms. Otherwise we just normalize the high carbon lifestyles of jet-setting ‘thinkfluencers’.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/06/plane.png&quot; /&gt;&lt;figcaption&gt;High above the clouds the problems all look so small.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Before going further, I emphatically recognize that choice for me to change my behavior is a privileged decision. For new professionals, the networking opportunities created by regular travel may be exactly what is needed to propel them forward. Others may not enjoy their company’s support and encouragement to attend events, thus making the rare opportunities that much more precious. I get it and hold no judgment.&lt;/p&gt;

&lt;p&gt;I get a lot out of attending conferences. Just &lt;em&gt;stopping&lt;/em&gt; means replacing those imagination catalysts and peer feedback loops with something else. Here’s what I’m trying.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Expose your mental models to the open air… Get your model out there where it can be shot at. Invite others to challenge your assumptions and add their own. Instead of becoming a champion for one possible explanation or hypothesis or model, collect as many as possible.” - Donella Meadows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-local-communities-of-practice&quot;&gt;&lt;a name=&quot;community&quot;&gt;Building Local Communities of Practice&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If running &lt;a href=&quot;https://netapi.events&quot;&gt;NetAPI.events&lt;/a&gt;, a list of worldwide, in-person API events has taught me anything, it’s that there’s always lots of local meetups and gatherings happening every week for most metropolitan areas. In the past, these events were something I would drop-by if there was nothing else going on (an increasingly rare occurrence these days).&lt;/p&gt;

&lt;p&gt;This year I’m making local events like the &lt;a href=&quot;https://www.meetup.com/DC-Web-API-User-Group/&quot;&gt;DC Web API&lt;/a&gt; and &lt;a href=&quot;https://www.meetup.com/Technical-Product-Management-Community-of-Greater-DC&quot;&gt;Technical Product Manager&lt;/a&gt; meetups more of a priority. There’s also a host of other noteworthy things happening just up and down the I-95 corridor. Often these events are free, have interesting things to say, and need the participating from folks like you and me to make them successful.&lt;/p&gt;

&lt;h2 id=&quot;reapplying-travel-time-to-connecting-with-new-audiences&quot;&gt;&lt;a name=&quot;travel&quot;&gt;Reapplying Travel Time to Connecting with New Audiences&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Speaking of participating, the time I put into a user group presentation is about the same as the preparation I do for a conference talk. And yet, as has happened in the past, that investment has little return beyond a single delivery.&lt;/p&gt;

&lt;p&gt;I’ve tried to be more diligent about blogging talks in detail (like about ‘&lt;a href=&quot;https://matthewreinbold.com/2018/10/31/Gardeners-Approach/&quot;&gt;Growing Software Culture&lt;/a&gt;’, ‘&lt;a href=&quot;https://matthewreinbold.com/2017/10/03/API-Governance-Blueprint/&quot;&gt;API Governance&lt;/a&gt;’, or ‘&lt;a href=&quot;https://matthewreinbold.com/2017/12/07/ConwayAndAPIDesign/&quot;&gt;noodling on Conway’s Law&lt;/a&gt;’). However, this is a golden age of web-enabled audio and video. I want to put out more mixed media for those that don’t cherish chunks of text.&lt;/p&gt;

&lt;p&gt;And rather than create a single deck for the year and try and reuse it at a handful of events, what I’d instead do is use the time saved not traveling and create &lt;em&gt;more&lt;/em&gt; conversation starters. For 2019, I have a goal to create &lt;strong&gt;six &lt;em&gt;different&lt;/em&gt; presentations in six months&lt;/strong&gt;. Thus far I have:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;May - ‘Getting Started with API Governance’&lt;/li&gt;
  &lt;li&gt;June - ‘&lt;a href=&quot;https://matthewreinbold.com/2019/08/02/AgileAntipatterns/&quot;&gt;Planning Tetris, Feature Factories, and Success Theater - Agile Anti-Patterns and How to Avoid Them’ (illustrated using techniques taken from the Lego Serious Play method&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;July - &lt;a href=&quot;https://matthewreinbold.com/2019/07/17/OvercomingComplexity/&quot;&gt;Overcoming Complexity through the Principle of Least Power&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;August - WIP - Successful Storytelling with Executive Leadership&lt;/li&gt;
  &lt;li&gt;September - Unnamed Preso on Creating and Sustaining Resilient Knowledge Communities&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;October - ??&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(I’ll add links to the presentations as I get them posted online) *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further, there are all sorts of online outlets that I could be writing for. I wrestle with this. I am a big believer in not only owning one’s words, but publishing them on one’s own site. There are lots of places happy to abscond with one’s thought juice in exchange for “exposure”. However, there are still good people out there who, through hard work and passion to craft, have attracted audiences where I would feel at home. It is a matter of finding the right outlet.&lt;/p&gt;

&lt;h2 id=&quot;salon-cohort&quot;&gt;&lt;a name=&quot;salon&quot;&gt;Salon Cohort&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I admire &lt;a href=&quot;https://www.annmarie-thomas.com/&quot;&gt;AnnMarie Thomas&lt;/a&gt;. She is a STEM educator and author of the Making Makers. For the past several years, &lt;a href=&quot;https://annmariethomas.typepad.com/annmarie-thomas/2016/06/salon.html&quot;&gt;she has curated a monthly “Play Date” across time zones called the “Salon”&lt;/a&gt;. It is a way, using video conferencing technology, of regularly connecting exciting people for lively conversation, regardless of where they are.&lt;/p&gt;

&lt;p&gt;I hoped to emulate the pattern and approached several folks to do something similar for the latter half of 2019. However, my initial call ran into issues; a number of people (justifiably) were unavailable, confused by my pitch, or didn’t respond.&lt;/p&gt;

&lt;p&gt;I think there’s still an opportunity to create a regular online hangout that folks look forward to with the same enthusiasm and joy as they do meeting in physical space. Given everything else going on, I’ll rethink on how better to present this and try again in 2020.&lt;/p&gt;

&lt;h2 id=&quot;when-i-do-have-to-travel&quot;&gt;&lt;a name=&quot;offset&quot;&gt;When I do Have to Travel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I’m quick to point out, the point isn’t a draconian ban on &lt;em&gt;all&lt;/em&gt; travel; it’s to make smarter decisions when I &lt;em&gt;do&lt;/em&gt;. And sometimes there isn’t a choice, like when I am required to travel for work-related reasons.&lt;/p&gt;

&lt;p&gt;In those cases, there are sites like &lt;a href=&quot;https://co2.myclimate.org/en/flight_calculators/new&quot;&gt;the carbon footprint calculator&lt;/a&gt;. It helps visualize the impact of air travel. More importantly, it provides options to support numerous programs for offsetting the impact of those trips. &lt;a href=&quot;https://www.youtube.com/watch?v=I-HCMbTDWVo&quot;&gt;I don’t have the carbon footprint of Elon Musk&lt;/a&gt;. However, every little bit helps and, when I &lt;em&gt;do&lt;/em&gt; travel in the future I will be sure to contribute to activities that mitigate the impact.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: 2019-08-05&lt;/em&gt;
To date, I have set up monthly, recurring donations to each of the following organizations to offset my travel footprint (and then some):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectwren.com/&quot;&gt;Project Wren&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://offset.earth/&quot;&gt;Offset Earth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://edenprojects.org/&quot;&gt;Eden Reforestation Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phil Sturgeon and his &lt;a href=&quot;https://phil.bike/trees/&quot;&gt;campaign to raise awareness for carbon offsets by cycling across Europe&lt;/a&gt; remains an inspriation.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;&lt;a name=&quot;wrapup&quot;&gt;Wrapping Up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last several years (or the last decade, tbh) have been a strange time, filled with all sorts of grim portends. However, I think its important to remember the power of our agency among the uncertainty. No one person is going to solve everything. However, people feeling empowered to make purposeful, informed actions can be aggregated into profound change. We are not bound to the status quo until a change is forced on us; this is precisely the time to be running millions of little experiments, all incrementing toward something better.&lt;/p&gt;

&lt;p&gt;Are you trying something different? Got something that isn’t on the list? I’d love to hear about it.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jun 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/06/21/On-Travel/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/06/21/On-Travel/</guid>
        
        <category>travel</category>
        
        <category>conferences</category>
        
        <category>Donella Meadows</category>
        
        <category>Greta Thunberg</category>
        
        <category>climate</category>
        
        <category>carbon footprint</category>
        
        
      </item>
    
      <item>
        <title>APIs and Digital Transformation</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/05/digital-midi-controller.png&quot; /&gt;&lt;figcaption&gt;&quot;Digital Midi Controller&quot;, Photo by &lt;a href=&quot;https://unsplash.com/photos/jUwvjOmCTWc&quot;&gt;Luca Bravo on Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Recently, Bill Doerrfeld interviewed me for a piece that appeared on the Adobe CMO blog entitled “&lt;a href=&quot;https://www.cmo.com/features/articles/2019/5/13/entering-the-platform-economy-why-apis-and-integrations-are-crucial.html&quot;&gt;The Platform Economy: Why APIs And Integrations Are Crucial&lt;/a&gt;”. As usual, I ended up preparing &lt;em&gt;way&lt;/em&gt; more than what eneded up on the final piece. An sampling of my expanded responses is below.&lt;/p&gt;

&lt;p&gt;In my Net API Notes email newsletter, &lt;a href=&quot;https://tinyletter.com/NetAPINotes/letters/api-academy-and-new-beginnings-net-api-notes-for-2019-01-31&quot;&gt;I talked about the changing API space&lt;/a&gt; earlier this year. Hopefully that, as well as the answers below, provide some clarity for executive leadership on how the landscape is evolving.&lt;/p&gt;

&lt;h3 id=&quot;what-the-current-state-of-the-api-economy&quot;&gt;What the current state of the API economy?&lt;/h3&gt;
&lt;p&gt;The API economy, however it is defined, is in a state of transition. For the last several years companies have limited, or even shuttered, their “open” developer in favor of explicit partner-to-partner relationships. From, most recently, Lyft, to Venmo, Facebook, and Twitter, companies that aren’t perusing an explicit platform strategy have significantly changed how they think about the strategic potential for APIs.&lt;/p&gt;

&lt;p&gt;A number of factors have driven this. On the one hand, I see an end to companies who released public APIs with a “build it, and they will come” philosophy. Without a vision of how corralling 3rd party developers would bolster a company’s strategic execution, these developer portals were cost centers primed for elimination as soon as the platform fervor passed. (For some comprehensive thinking on the role of software platforms, I’ve been enjoying “&lt;a href=&quot;https://www.amazon.com/Platform-Ecosystems-Aligning-Architecture-Governance/dp/0124080669/ref=sr_1_3&quot;&gt;Platform Ecosystems: Aligning Architecture, Governance, and Strategy&lt;/a&gt;” by Amrit Tiwana.)&lt;/p&gt;

&lt;p&gt;More recently, I see companies increasingly aware of their expanded risk profile due to public API access. Even with robust security, and the API is behaving as intended, &lt;a href=&quot;https://tinyletter.com/NetAPINotes/letters/rest-api-notes-for-2018-04-11&quot;&gt;the Cambridge-Analytica scandal awakened many&lt;/a&gt;. We now see how the seemingly benign exchange and aggregation of information can have huge ramifications. Simply “putting something out there” not only can be expensive, but it has consequences.&lt;/p&gt;

&lt;p&gt;However, that’s a footnote in the larger story. The more significant economic impact of APIs is how companies are using them to achieve greater marketplace agility. It’s the internal decomposition - the reduction coupling and coordination overhead - where the real digital transformation lies. The economic benefit from Netflix’s API approach is not from the developer program (something they ended in 2014). Highly modular architecture allows experiences, powered by APIs, everywhere on everything.&lt;/p&gt;

&lt;h3 id=&quot;how-have-apis-historically-disrupted-digital-business-how-will-platform-platform-integrations-continue-to-evolve&quot;&gt;How have APIs historically disrupted digital business? How will platform-platform integrations continue to evolve?&lt;/h3&gt;

&lt;p&gt;APIs have had, and will continue to have, an out-sized effect on reshaping the cultures of the companies that truly adopt them. Whether it is adoption of the “infrastructure as code” and CI/CD pipelines necessary to efficiently deploy them, or the rearrangement of teams to support bounded context modularity (the “reverse Conway maneuver”), APIs challenge existing organizational and operational structures. (For more information exploring the cultural implecations of APIs, please see the writeup of my conference talk, “&lt;a href=&quot;https://matthewreinbold.com/2018/10/31/Gardeners-Approach/&quot;&gt;A Gardner’s Approach to Growing an API Culture&lt;/a&gt;”).&lt;/p&gt;

&lt;p&gt;What we’ll see is a continued diversification of useful interactions patterns beyond HTTP’s traditional request/response model. The need for real-time workflows will necessitate investment in, and understanding of things like webhooks (also referred to as callbacks or subscriptions), websockets, and more. The interest in machine learning, along with a greater emphasis on storing and leveraging data, will necessitate more ‘algorithms-as-a-service’ APIs.&lt;/p&gt;

&lt;h3 id=&quot;how-can-apis-be-used-in-b2b-partner-strategies&quot;&gt;How can APIs be used in B2B partner strategies?&lt;/h3&gt;

&lt;p&gt;More businesses realize the impact data, not only theirs but others, can have on their operations. The responsible exchange of this data is critical. APIs make organizing and managing these partnerships more easily possible due to the wide variety of proven technologies. Everything “speaks” HTTP, securing and monitoring API gateways have vetted playbooks and standards (like OAuth), and there’s a mature talent pool available.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-major-takeaways-for-cmos--ctos&quot;&gt;What are the major takeaways for CMOs &amp;amp; CTOs?&lt;/h3&gt;

&lt;p&gt;Technical leadership is experiencing pressure from all directions. To one side, they are expected to deliver impactful digital transformation to compete in the future marketplace. Simultaneously, they have to meet new (and growing) data governance expectations. APIs, with their standardization of message exchange and centralized points of control, can play an essential role in both objectives.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/05/06/APIs-and-Digital-Transformation/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/05/06/APIs-and-Digital-Transformation/</guid>
        
        <category>digital transformation</category>
        
        <category>APIs</category>
        
        <category>OpenAPI</category>
        
        <category>AsyncAPI</category>
        
        <category>OAuth</category>
        
        
      </item>
    
      <item>
        <title>A Plan for Continuous Learning and Win Sharing</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/05/open-notebook.png&quot; /&gt;&lt;figcaption&gt;&quot;Laptop and notepad&quot; by Nick Morrison on &lt;a href=&quot;https://unsplash.com/photos/FHnnjk1Yj7Y&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Like most at Capital One, my team is currently busy with &lt;em&gt;talent management&lt;/em&gt; activities. Rather than being a backward-looking review of work previous done, talent management is forward looking. When done correctly, it produces honest conversations about each’s professional ambitions. Those ambitions, subsequently, are then &lt;a href=&quot;https://matthewreinbold.com/2014/01/23/SystemsNotGoals/&quot;&gt;deconstructed into the repeatable systems necessary to produce accumulating wins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A significant component of &lt;em&gt;any&lt;/em&gt; talent management plan is &lt;strong&gt;continuous learning&lt;/strong&gt;. That learning could be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Online coursework&lt;/li&gt;
  &lt;li&gt;Grokking Books&lt;/li&gt;
  &lt;li&gt;Professional Organization Participation&lt;/li&gt;
  &lt;li&gt;Experimenting with new technologies and techniques&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there’s no shortage of resources, what is in short supply is time to make it happen. A challenge, for all too many managers, is supporting ongoing learning goals not just in lip service, but with meaningful scheduling. It’s great to say you’re investing in team development. It is another thing to foist the raised expectations on an employee’s outside-of-work time.&lt;/p&gt;

&lt;p&gt;With that in mind, I instituted a new, dedicated “continuous learning’ plan with my team. Every &lt;em&gt;other&lt;/em&gt; Friday is reserved for team members to focus on their learning objectives. (I created two cohorts, each of which is staggered with each other’s Fridays so that there’s still a subset engaged with our stakeholder communities.)&lt;/p&gt;

&lt;p&gt;Members track their progress via a card in our Trello system stating how their work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Contributes to the company’s mission&lt;/li&gt;
  &lt;li&gt;Progresses them toward their talent management objective&lt;/li&gt;
  &lt;li&gt;Will be shared with a larger group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;“Win sharing” is a critical component of continuous learning&lt;/strong&gt;. Once a month, the team will get together to discuss what worked and what didn’t. I expect there to be surprises. There will be those pursuits that don’t pan out as expected. However, it remains a “win” if the team member not only discovers that new insight but shares it for the benefit of the larger group.&lt;/p&gt;

&lt;p&gt;We’re all busy. I anticipate the biggest criticism of this proposal is whether the Center of Excellence can take 10% of our time and devote it to something other than processing team submissions for review. In my perspective, however, I don’t know how we can afford &lt;em&gt;not to&lt;/em&gt;. Technology moves fast. Things that were prudent even only a year ago may be persnickety today. One of the core pillars of the CoE activity is to &lt;em&gt;&lt;a href=&quot;https://matthewreinbold.com/2017/10/03/API-Governance-Blueprint/&quot;&gt;define healthy ecosystems&lt;/a&gt;&lt;/em&gt;. Understanding the technology landscape to guide others across it requires a continuous investment in ourselves.&lt;/p&gt;

&lt;p&gt;Rather than being a tax on our time, I view this as a calculated investment our talent growth, relevance, and retention. In setting this continuous learning plan, we’ve also created a forcing function. We create the habit by reserving the space and observing the ritual. If that means we need to be more efficient in our other work to meet current expectations, then so be it.&lt;/p&gt;

&lt;p&gt;Finally, this is subject to change. We may try this for a few months and, with some initial learning, reformat our whole approach. Much like the individual experiments, using the experience to inform refinement our approach is a win. The only way we lose is if we never bother to try.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/05/06/ContinuousLearningAndWinSharing/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/05/06/ContinuousLearningAndWinSharing/</guid>
        
        <category>continuous learning</category>
        
        <category>win sharing</category>
        
        <category>management</category>
        
        <category>talent management</category>
        
        <category>Capital One</category>
        
        
      </item>
    
      <item>
        <title>Diffusion of Innovation, Digital Transformation, and Dynamic Systems Theory</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/04/foggy-bridge.png&quot; /&gt;&lt;figcaption&gt;A bridge through the fog.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Despite the crudeness of the phrase, I consume a &lt;em&gt;lot&lt;/em&gt; of online content. The internet is awash in things to pass the time. Most of it is crap, the mental equivalent of cotton candy. However, there are a handful of talks that I continue to return to. They are the ones that, even after years, I highlight in presentations and compare and contrast with new information.&lt;/p&gt;

&lt;p&gt;Here is a selection of some of my foundational references. Hopefully, you’ll find them as influential as I have.&lt;/p&gt;

&lt;h2 id=&quot;how-to-design-a-good-api-and-why-it-matters-by-joshua-bloch-google-tech-talks-2007&quot;&gt;&lt;em&gt;How to Design a Good API and Why it Matters&lt;/em&gt;, by Joshua Bloch, Google Tech Talks (2007)&lt;/h2&gt;

&lt;p&gt;I’ve written some form of the &lt;a href=&quot;https://tinyletter.com/netapinotes/&quot;&gt;Net API Notes Email Newsletter&lt;/a&gt; for the past several years. In that time, I’ve reviewed &lt;em&gt;gobs&lt;/em&gt; of API-related content. However, &lt;strong&gt;I have yet to come across another piece which as powerfully states the importance of great API design, and what it is, like this video&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Joshua rightly argues that good API Design is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easy to Learn&lt;/li&gt;
  &lt;li&gt;Easy to Use, Even Without Supplemental Documentation&lt;/li&gt;
  &lt;li&gt;Hard to Misuse&lt;/li&gt;
  &lt;li&gt;Easy to Read and Maintain Code that Uses It&lt;/li&gt;
  &lt;li&gt;Sufficiently Powerful to Satisfy Requirements&lt;/li&gt;
  &lt;li&gt;Easy to Evolve&lt;/li&gt;
  &lt;li&gt;Appropriate to the Audience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The kicker here is that Joshua isn’t even talking about web, or net, APIs. The APIs he is talking about are lower-level, intra-language interfaces. However, the fact that these things continue to apply to other contexts is a testament to the universality of the message.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=heh4OeB9A-c&quot;&gt;How to Design a Good API and Why it Matters&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;meeting-resistance-and-moving-forward-by-linda-rising-goto-conference-2017&quot;&gt;&lt;em&gt;Meeting Resistance and Moving Forward&lt;/em&gt;, by Linda Rising, GOTO Conference (2017)&lt;/h2&gt;

&lt;p&gt;Having lived (survived?) through several digital transformation efforts, each with various degrees of success, I have an appreciation for &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Diffusion_of_innovations&quot;&gt;diffusion of innovation theory&lt;/a&gt;&lt;/strong&gt;. The theory outlines “the process by which an innovation is communicated over time among the participants in a social system”.&lt;/p&gt;

&lt;p&gt;Said another way, a disruptive change, like those brought about by digital transformation, is adopted by different audiences at different rates. Subsequent research has shown that &lt;em&gt;any&lt;/em&gt; changing population breaks down into the same percentages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Innovators (2.5%): Will something for no other reason than it is new&lt;/li&gt;
  &lt;li&gt;Early Adopters (13.5%): More discrete in their selections than innovators, adopters use status as early pioneers to maintain social credibility with their peer group while taking on less risk (cutting verses bleeding edge)&lt;/li&gt;
  &lt;li&gt;Early Majority (34%): Willing to adopt innovations, but only after seeing what success with the innovation looks like among their peers&lt;/li&gt;
  &lt;li&gt;Late Majority (34%): Are loath to adopt the innovation unless specifically told they have to, after which they require higher levels of support and encouragement&lt;/li&gt;
  &lt;li&gt;Laggards (16%): Those who actively resist change, and will actively work to thwart an innovation for no other reason that it is new&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be warned: the opening five-ten minutes to Linda Rising’s talk is rambling and referential to the events at the time; &lt;a href=&quot;https://matthewreinbold.com/2016/12/27/EmpathyForAll/&quot;&gt;many were still attempting to process the results of the 2016 presidential election&lt;/a&gt;. However, when you scrub past that, you get a wonderful insight into people’s relationship with technology. Any change agent attempting big things, &lt;em&gt;at scale&lt;/em&gt;, needs this foundational awareness before developing their strategy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DrCD1wmK9oM&quot;&gt;Meeting Resistance and Moving Forward&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;seeing-whole-systems-by-nicky-case-the-long-now-foundation-2017&quot;&gt;&lt;em&gt;Seeing Whole Systems&lt;/em&gt;, by Nicky Case, The Long Now Foundation (2017)&lt;/h2&gt;

&lt;p&gt;Software governance at enterprise scale is tricky. To explain reoccurring phenomenon, I had to expand my research beyond typical software fare. Donella H. Meadows &lt;em&gt;“Thinking in Systems”&lt;/em&gt;, and related systems dynamics education, has been incredibly relevant.&lt;/p&gt;

&lt;p&gt;The software environment in most companies is a complex, dynamic system. A defining characteristic of a complex system is that the behavior cannot be understood by knowing about the individual components. There is not a linear relationship between a top-down mandate and the desired outcome. A complex system will exhibit &lt;strong&gt;emergent behavior&lt;/strong&gt; when nudged; behavior that is always unexpected, and sometimes undesirable.&lt;/p&gt;

&lt;p&gt;It is one thing to realize you’re a participant in (or victim of?) a complex system. A logical next step is identifying what to do about it. Nicky Case’s video on &lt;em&gt;Seeing Whole Systems&lt;/em&gt; goes into that detail. Nicky, correctly, articulates how too much of governance thinking presumes clear causality between actions and outcomes. This is the mentality of “something bad happened, so we’ll create a rule to prevent the bad thing from happening”. Instead of edicts or directives, Nicky demonstrates how virtuous feedback loops (either positive or negative) can work on a dynamic system over time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://longnow.org/seminars/02017/aug/07/seeing-whole-systems/&quot;&gt;Seeing Whole Systems&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That’s a brief, first list of references that I return to regularly. If folks find this useful or know of related material I should check out, let me know.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2019/04/18/OtherLessonsToLearnFrom01/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/04/18/OtherLessonsToLearnFrom01/</guid>
        
        <category>API Governance</category>
        
        <category>Nicky Case</category>
        
        <category>system dynamics</category>
        
        <category>Linda Rising</category>
        
        <category>diffusion of innovation</category>
        
        <category>video</category>
        
        <category>Joshua Block</category>
        
        <category>API Design</category>
        
        <category>digital transformation</category>
        
        
      </item>
    
      <item>
        <title>APIs, Specifications, and Pedantry</title>
        <description>&lt;p&gt;In a recent edition of my newsletter, &lt;a href=&quot;http://tinyletter.com/NetAPINotes/letters/net-api-notes-for-2019-02-25-1&quot;&gt;Net API Notes&lt;/a&gt;, I finished with an off-the-cuff remark about hating how one term was used interchangeably for another. If I said chaos ensued, I would be making a gross overstatement. However, it was, despite the numerous pointed and carefully crafted statements that I make on an ongoing basis, the thing that people responded to the most to in a long time.&lt;/p&gt;

&lt;p&gt;Ludwig Wittgenstein was an Austrian-British philosopher. His is, perhaps, most famous for inspiring the phrase “&lt;strong&gt;language is use&lt;/strong&gt;”. To explain what that means, &lt;a href=&quot;http://existentialcomics.com/comic/268&quot;&gt;here is a snippet from everyone’s favorite technical companion, &lt;em&gt;Existential Comics&lt;/em&gt;, explaining why a hot dog is not a sandwich&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/02/hotdog.png&quot; /&gt;&lt;figcaption&gt;Finally, an answer to whether a hotdog is a sandwich (&lt;a href=&quot;http://existentialcomics.com/comic/268&quot;&gt;be sure to read the whole thing, too&lt;/a&gt;).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;As the comic explains, we can pick apart the semantics of a term any of a thousand ways. We can debate the taxonomy, history, and context. We can make inferences and wring our hands over future outcomes, both seen and unseen. And, as Wittgenstein argued, all of that is irrelevant if it isn’t how &lt;em&gt;people use the language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In my time doing API governance, I’ve seen thousands of what I’ve come to call “&lt;em&gt;API descriptions&lt;/em&gt;”. I use this term to disambiguate between many things that get mushed together. If a team says they “need help with &lt;strong&gt;their API&lt;/strong&gt;,” they could be referring to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the code that implements some business functionality, exposed through a standardized interface (usually over HTTP)&lt;/li&gt;
  &lt;li&gt;an endpoint (the unique combination of URI and method [as wrong as it is to refer to a single endpoint as an API, it does happen])&lt;/li&gt;
  &lt;li&gt;the collection of endpoints that comprise the bounded context as defined by the team&lt;/li&gt;
  &lt;li&gt;the affordances made possible by their work, and the work itself&lt;/li&gt;
  &lt;li&gt;the file or artifact that articulates the business intent provided by that interface (written to a specified standard like OpenAPI, AsyncAPI, etc.)&lt;/li&gt;
  &lt;li&gt;the documentation of all of the above, and source code, mock data, CI/CD pipeline, and key registration shenanigans necessary to create a pleasurable Time-to-Hello-World (or TTHW) experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the right terminology for all this stuff? Unfortunately, Wittgenstein can’t help us settle this debate. The way people use language is all over the place. The way they use ‘API’ (and related terms) is not the way we talk about hotdogs. There isn’t one, singular cultural understanding that we could point to and say “this is the one way”.&lt;/p&gt;

&lt;p&gt;To aid comprehension, I’ve adopted the following language model. It doesn’t mean that this is the right way. As the famous George Box quote goes, “all models are wrong, but some are useful”. When somebody says they have a problem with their API, I ask questions to clarify which of the following things, in my mental model, they are referring to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;API Specification&lt;/strong&gt; - A technical standard, like OpenAPI 3.0, that defines how to describe an API’s interface in a general, broadly applicable way that is both a machine-parsable and human-readable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Description&lt;/strong&gt; - A file articulating a single API’s interface that fulfills the requirements and expectations of an API specification.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Interface&lt;/strong&gt; - The obvious or described (and, according to &lt;a href=&quot;http://www.hyrumslaw.com/&quot;&gt;Hyrum’s law&lt;/a&gt;, not so obvious) means to communicate with a set of functionality within a system.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Implementation/Code&lt;/strong&gt; - The gobbledygook created by software developers necessary to accomplish a business function to be exposed via an interface.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Executable/Deployable&lt;/strong&gt; - The version of code that is promoted to a live environment and responding to production requests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Documentation&lt;/strong&gt; - The collection of things necessary to convey sufficient meaning so that clients can successfully use the deployed API through the interface. This includes, but is not limited to, the API Description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my model. It works for me but if you’re comfortable with a different set of terms, great! As long as those that interact with you regularly share the same model, communication is happening with the least amount of cognitive overhead as possible.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/02/thug-life.jpg&quot; /&gt;&lt;figcaption&gt;I wake up every day with a mission to be this baller.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After reading that, I know what you’re thinking.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If this is your model, and people having different models is ok, why did you say ‘it drives me &lt;em&gt;crazy&lt;/em&gt; that they refer to these documents as “specifications”’?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My problem, particularly with vendors, is when the language is imprecise. I chafe when words are used interchangeably, often without disregard. Sometimes it is even on purpose, a targeted erosion of discourse in order to make a sale. I hate when words become less about clear communication and more about memetic highjacking, attempting to associate, expand, and/or co-opt organic phenomena in the pursuit of shipping product. That’s how a useful term is rendered all but meaningless (see ‘AJAX’, circa 2005 to 2008, or what is happening to ‘microservices’ now).&lt;/p&gt;

&lt;p&gt;Having a model, and using it consistently, implies there is a certain amount of thought and rigor put into coexisting with your fellow folks. Words mean things, dammit, and the time you invest in your words is time invested in helping communicate meaning to other people.&lt;/p&gt;

&lt;p&gt;The other way, best case, is lazy. Worst case, its calculated obfuscation.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2019/02/27/APIsandPedantry/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/02/27/APIsandPedantry/</guid>
        
        <category>Ludwig Wittgenstein</category>
        
        <category>language</category>
        
        <category>hotdogs</category>
        
        <category>Hyrum's law</category>
        
        <category>ajax</category>
        
        <category>microservices</category>
        
        
      </item>
    
      <item>
        <title>A Manager README for Me</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2019/02/jigsaw.png&quot; /&gt;&lt;figcaption&gt;Management is, to some degree, figuring out how all the pieces fit.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://www.screaminginthecloud.com/episodes/2019/1/2/episode-43-heres-a-document-on-how-to-best-deal-with-my-foibles&quot;&gt;a recent episode of the Screaming in the Cloud podcast&lt;/a&gt;, host Cory Quinn interviewed Etsy’s Matt Newkirk. They discussed the value of a &lt;strong&gt;‘Manager README’&lt;/strong&gt; document. There has been a long tradition of README documents in software development. However, typically those files contain information about a program. This podcast was the first time I had ever heard about one for &lt;em&gt;managers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The longer they discussed the usefulness, the more I realized that I needed to create one for my team. Since becoming a people manager at Capital One (and having gone through several rounds of hiring folks), I know valuable information isn’t always shared during on-boarding. I also know that just commenting on these things in passing, during the fire-hose of other new-hire information, only adds to the stress and anxiety of a delicate period.&lt;/p&gt;

&lt;p&gt;Done well, a Manager README can be a helpful and proactive piece of content. It prompts conversations, sets the context, and serves as a “living reference” for team cultural norms. Here’s what I put together for my first attempt. Did I miss anything? Is there something that is unclear?&lt;/p&gt;

&lt;p&gt;Also, is this something that you do within your organization? Let me know.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;hello-and-welcome-to-my-team&quot;&gt;Hello, and Welcome to My Team&lt;/h2&gt;

&lt;p&gt;Howdy! My name is Matthew, and I’m thrilled to have you on the team!&lt;/p&gt;

&lt;p&gt;You’ll get a tremendous amount of information in the coming months. This is a big place, with a lot going on &lt;em&gt;at tremendous speed&lt;/em&gt;. It may feel overwhelming. Know that (1) that is entirely normal, (2) it may take several months (or more!) to feel on top of things, and (3) your newness can be a superpower!&lt;/p&gt;

&lt;h3 id=&quot;what-is-this-a-manager-readme&quot;&gt;What is this? A ‘Manager README’?&lt;/h3&gt;
&lt;p&gt;This Manager README is a way to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Introduce Me&lt;/li&gt;
  &lt;li&gt;Describe My Approach to Managing You&lt;/li&gt;
  &lt;li&gt;Answer Some Questions (and Raise Some You May Not Have Previously Thought Of)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t expect you to memorize this document. I don’t even expect you to read it given the vast amount of other onboarding things currently happening. But it is here when you need it.&lt;/p&gt;

&lt;h3 id=&quot;what-this-document-isnt&quot;&gt;What this document &lt;em&gt;isn’t&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;This document isn’t a list of my personality quirks. Or the cliff notes guide to getting a promotion. Or where to find the free food. There is a time and a place for each of those things. But not here.&lt;/p&gt;

&lt;h2 id=&quot;who-am-i&quot;&gt;Who Am I?&lt;/h2&gt;
&lt;p&gt;My name is Matthew Reinbold. I have a &lt;a href=&quot;https://matthewreinbold.com&quot;&gt;website&lt;/a&gt;, &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter stream&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/matthewreinbold&quot;&gt;LinkedIn profile&lt;/a&gt;, and &lt;a href=&quot;https://tinyletter.com/netapinotes/archive&quot;&gt;API newsletter&lt;/a&gt;, among other things. Since starting my professional career in 1999, I’ve worked as a software developer, tester, architect, community builder, and product manager. That work has included everything from small startups to companies including IBM, Microsoft, and Adobe.&lt;/p&gt;

&lt;p&gt;I love well-crafted storytelling and have a passion for business strategy. I am a visual learner. I do not drink but don’t mind hanging out with those that do. While I can be comfortable in social situations, I may prefer to be alone when I need to re-energize.&lt;/p&gt;

&lt;h2 id=&quot;my-approach-to-managing-you&quot;&gt;My Approach to Managing You&lt;/h2&gt;

&lt;h3 id=&quot;what-being-your-manager-means-to-me&quot;&gt;What Being Your Manager Means to Me&lt;/h3&gt;
&lt;p&gt;My &lt;strong&gt;job&lt;/strong&gt;, at a minimum, is to attract, retain, and grow world-class talent for the organization.&lt;/p&gt;

&lt;p&gt;If I do something that negatively impacts my ability to retain you, you would be doing me a huge favor if you let me know about it, as soon as possible. Likewise, if I do something that feels more like telling you how to do your job than setting context, also let me know.&lt;/p&gt;

&lt;p&gt;I believe everyone has things they can get better at. We hired you because of your positive traits. I’m excited to work with you to continue to grow those traits, as well as help you discover and refine new ones in the course of working together. In the process, I hope to become your biggest advocate to the rest of the company!&lt;/p&gt;

&lt;h3 id=&quot;how-we-communicate&quot;&gt;How We Communicate&lt;/h3&gt;
&lt;p&gt;There are numerous conversation channels at our disposal: Skype, Slack, Hangouts, Trello, etc. However, I treat those as ephemeral; because of the volume of commentary, I don’t tend to go back and read any missed history. If you send an email, it will be seen (&lt;em&gt;eventually&lt;/em&gt;). If you want to ensure that I see what you have to say, send it to me in an email.&lt;/p&gt;

&lt;p&gt;If you have an issue which requires my immediate attention and I’m not immediately available, the best channel to reach me is via text message. I will do my best to respond promptly.&lt;/p&gt;

&lt;p&gt;I promise to do my best to avoid emailing or texting over the weekend or in the evenings. If I do contact you, it is either to convey breaking, important information or a pressing thought has just occurred to me. I &lt;strong&gt;do not expect that you should work outside of regular work hours&lt;/strong&gt;. Unless I say that things are URGENT, it can always wait until we’re back in the office on Monday.&lt;/p&gt;

&lt;h3 id=&quot;my-availability&quot;&gt;My Availability&lt;/h3&gt;
&lt;p&gt;Meetings can seem like a way of life. My calendar is no exception. It may seem intimidating to schedule something with me. However, my direct reports come first. If there is an urgent need and there doesn’t appear to be an available upcoming time, send me a text message (see above). I do my best to accommodate you at the first available moment.&lt;/p&gt;

&lt;h3 id=&quot;how-i-follow-up&quot;&gt;How I Follow Up&lt;/h3&gt;
&lt;p&gt;Working in software governance, we are called on to make difficult calls on regularly. I have 100% faith and confidence that you will make the best decision given your professional experience, your expectations, and the information available at that moment. That is why I hired you.&lt;/p&gt;

&lt;p&gt;There may be times when I will contact you to revisit that decision. I may have questions. I may ask for additional nuance. When this happens, it isn’t because I am second guessing your judgment. Rather, what is much more likely happening is that I am attempting to gather the necessary context to explain the action to others.&lt;/p&gt;

&lt;p&gt;Reviewing past work and ensuring that it holds up under inspection is a healthy thing. It is how I learn from you. Do not mistake this as looking to assign blame.&lt;/p&gt;

&lt;h3 id=&quot;11s&quot;&gt;1:1s&lt;/h3&gt;
&lt;p&gt;I will schedule a dedicated, bi-monthly meeting for a half hour between us. This is &lt;em&gt;your&lt;/em&gt; time to ask questions about what you’ve seen/heard/read and talk about your concerns. &lt;strong&gt;You set the agenda&lt;/strong&gt;. It is &lt;em&gt;not&lt;/em&gt; to deliver a status update to me unless you want to update status.&lt;/p&gt;

&lt;p&gt;The point of these meetings is to give you a chance to be heard. I am a big believer in &lt;a href=&quot;http://randsinrepose.com/archives/the-update-the-vent-and-the-disaster/&quot;&gt;Michael Lopp’s approach to this time&lt;/a&gt;. When I ask “How are you?” you can take that whichever direction you feel is appropriate. I’m still learning how to be better at this and thank you in advance for your patience.&lt;/p&gt;

&lt;p&gt;I will, to the best of my ability, try to maintain the same time for this meeting so that it becomes habitual. However, there may be times when there’s a conflict that can’t be avoided. When those situations arise, I (or my admin) will do our best to reschedule within the same week.&lt;/p&gt;

&lt;h2 id=&quot;important-things-about-how-we-work&quot;&gt;Important things About How We Work&lt;/h2&gt;
&lt;h3 id=&quot;worklife-balance&quot;&gt;Work/Life Balance&lt;/h3&gt;
&lt;p&gt;I do not track hours in the office. I, also, do not believe that “clocking-in” at a specific hour is the key to productivity. I don’t hand out kudos just because you are in before I am. Likewise, I don’t keep points on who is still in the office when I leave. I trust you will put in the necessary time to do a good job. I also believe you are an adult capable of balancing your professional and private obligations. If you have an outside commitment during the workday, however, I ask that you let the team, including me, know.&lt;/p&gt;

&lt;p&gt;Likewise, if you take time off (illness, vacation, etc.), I ask that you give the entire team as much heads-up as possible. We do this by sending a calendar to the team inviting them to your ‘OOO’ (out of office) event. The first few times it may feel odd inviting your teammates to your time off. However, I’ve found, it is a lightweight way of keeping folks in the loop.&lt;/p&gt;

&lt;p&gt;There may be cases, like associates in California, where time off needs to be accurately tracked. In those cases, I expect that you accurately record your hours worked.&lt;/p&gt;

&lt;p&gt;Fridays are work-from-home days. You are free to come into the office these days. However, most on my team take advantage of this perk to avoid lengthy commutes and concentrate their “deep focus” work. On these days I maintain a weekly team meeting where we discuss common challenges and share information.&lt;/p&gt;

&lt;p&gt;If I feel that this approach is being abused and is negatively impacting the team’s ability to deliver, I will talk to you about it. Together, we’ll figure out how to arrive at the appropriate balance.&lt;/p&gt;

&lt;h3 id=&quot;disagreements-are-valuable-arguments-are-not&quot;&gt;Disagreements are Valuable. Arguments are Not&lt;/h3&gt;
&lt;p&gt;I’ve hired you, in part, because you are a different person than I am. You have your own values, experience, education, and ambition that is different than mine. Your uniqueness reinforces in some spots, and supplement gaps in others. When combined together, our productive sum can be greater than the sum of the parts.&lt;/p&gt;

&lt;p&gt;Just because I am your manager &lt;strong&gt;does not&lt;/strong&gt; mean that you should defer to me without question. I ask for your input, not your fealty.&lt;/p&gt;

&lt;p&gt;Because of those differences, there may be times when we disagree. Some even might be substantive and ongoing. That is completely normal. What can’t happen is for an argument to occur. This is when discussions get emotional, even heated and feelings can be hurt. When that happens, either one of us can ask for each other to take a step back, with a promise to circle back.&lt;/p&gt;

&lt;p&gt;There may be times when consensus is not possible at the moment. Despite the lack of alignment, a way forward is needed. In those times I will rely on my best judgment given all available information. If I make a call counter to your recommended guidance, it is not personal.&lt;/p&gt;

&lt;h3 id=&quot;putting-your-feedback-to-work&quot;&gt;Putting Your Feedback to Work&lt;/h3&gt;
&lt;p&gt;Feedback is critical for anyone to get better. If you provide feedback for me during our time together, I do my best to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide a safe environment&lt;/li&gt;
  &lt;li&gt;Make sharing easy&lt;/li&gt;
  &lt;li&gt;Create a positive outcome from what is shared&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could do any of these things better, let me know.&lt;/p&gt;

&lt;h3 id=&quot;transparency-candor-and-discretion&quot;&gt;Transparency, Candor, and Discretion&lt;/h3&gt;

&lt;p&gt;I have a high bias toward authenticity and candor.  However, there may be situations (for example, an ongoing strategic discussion or pending external opportunity) that I may not be able to discuss. I may be limited in what I can share in situations where you are not in a position to influence the outcome. If things have not yet been decided, I may defer the conversation rather than conjecturing. I may say that I can’t talk about something at the moment.&lt;/p&gt;

&lt;p&gt;There will be times when I say “I don’t know.” I guarantee that I don’t have all the answers. But if it matters to you, I promise to work with you to find one.&lt;/p&gt;

&lt;h3 id=&quot;what-i-value&quot;&gt;What I Value&lt;/h3&gt;
&lt;p&gt;Minding the details can be the difference between incredible success and &lt;a href=&quot;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter&quot;&gt;a 327 million dollar failure&lt;/a&gt;. Solving the immediate problem is the most important thing, whether that is putting together a persuasive presentation, responding to an email question, or consulting with a team. However, &lt;em&gt;how&lt;/em&gt; the problem is solved is where the attention to detail can pay dividends.&lt;/p&gt;

&lt;h4 id=&quot;aggregation-of-marginal-gains&quot;&gt;Aggregation of Marginal Gains&lt;/h4&gt;
&lt;p&gt;I believe in the compounding benefit of continually fixing small things; if you say something more than once, write it down, share it, and point to it later. Over time, those references add up to a significant amount of saved time. Furthermore, at the end of the year, you’ll have a body of work to point to.&lt;/p&gt;

&lt;p&gt;Likewise, your job security is not dependent on how busy we are (or appear to be). We should continuously be looking for ways (processes, tools, collaborations with other groups) that make us more efficient. Reducing the tedium from our activities without harming outcomes means we free ourselves for more professionally rewarding opportunities.&lt;/p&gt;

&lt;p&gt;For more on this, read the &lt;a href=&quot;https://hbr.org/2015/10/how-1-performance-improvements-led-to-olympic-gold&quot;&gt;Aggregation of Marginal Gains Theory&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;meeting-acumen&quot;&gt;Meeting Acumen&lt;/h4&gt;
&lt;p&gt;Be courteous to your fellow associates. Show respect by being on time for meetings. If possible, schedule meetings so that they end five minutes before the top (or bottom) of the hour to allow people to start their following sessions on time. Figure out the best configuration for your remote meeting software and practice it. State what the specific outcome is for any meeting scheduled. &lt;a href=&quot;https://www.mindtools.com/CommSkll/RunningMeetings.htm&quot;&gt;There are lots more useful tips for running successful meetings&lt;/a&gt;; while applying every tool every single time is a bit much, being adept with the basics will carry you far.&lt;/p&gt;

&lt;h4 id=&quot;presentation-skills&quot;&gt;Presentation Skills&lt;/h4&gt;
&lt;p&gt;Slide presentations (or “decks”) are a critical part of Capital One culture. They are the primary means of socializing ideas. Some assume that slides are inferior to other ways of sharing information. Creating powerful and persuasive arguments is possible. The problem is that many reach a basic level of proficiency and never advance beyond it.&lt;/p&gt;

&lt;p&gt;You may feel as though you’ve got this talking thing down cold; you were hired, in part, for your communication skills. In the same way a skilled craftsman selects and applies the specific tool to a job, however, you should also see this as an opportunity to attune your skill set for this particular audience.&lt;/p&gt;

&lt;p&gt;The creation of a successful deck, particularly accounting for ‘Capital One style’, is beyond the scope of this document.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And it just kind of stops… so far. I envision this being a work in process. If you were working for me, what kinds of things about having me as your manager would you want to know? What things are missing? I’d love to get your opinions.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2019/02/14/AManagerREADME/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2019/02/14/AManagerREADME/</guid>
        
        <category>management</category>
        
        <category>etsy</category>
        
        <category>Matt NewKirk</category>
        
        <category>Cory Quinn</category>
        
        <category>Capital One</category>
        
        
      </item>
    
      <item>
        <title>Soft and Hard Power in Software Governance</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2018/11/lights.png&quot; /&gt;&lt;figcaption&gt;An complex image of power at play across a ceiling.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the privilege (or curse, depending on your predilection) of working in a software governance role for the last several years. What started as a simple API design advisory job has scaled into something that is equal parts technical acumen, developer empathy, business strategy, process psychology, and cultural anthropology. In growing, I’ve had to learn some new things.&lt;/p&gt;

&lt;p&gt;One of those things is the power within systems, and how it is wielded.  I’ve seen top-down, “do as your told”, initiatives flounder, despite the impressive titles of those declaring the mandate. This is because applying linear thinking in blunt ways to dynamic systems often fails.&lt;/p&gt;

&lt;p&gt;But it doesn’t have to be that way. If you have a technical leadership position within your organization, &lt;em&gt;you have more at your disposal than ‘my way or the highway’&lt;/em&gt;. Success in a non-linear system requires an appreciation of different governance power: soft power and hard power.&lt;/p&gt;

&lt;h2 id=&quot;soft-power&quot;&gt;SOFT POWER&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_power&quot;&gt;Soft power&lt;/a&gt; is a political concept developed by Harvard University’s Joseph Nye. Nye defined soft power as the ability to achieve objectives through appeal and attraction, rather than force or coercion. He clarified that it is in opposition to “command power”, or a nation “ordering others to do what it wants.”&lt;/p&gt;

&lt;p&gt;Soft power applies to change agents within a company who may have the &lt;em&gt;responsibility&lt;/em&gt; of achieving technology initiative outcomes, but lack the authority over all the participants. They cannot command people to comply. Instead, they have to rely on a different set of actions: &lt;strong&gt;diplomacy&lt;/strong&gt;, &lt;strong&gt;strategic communication&lt;/strong&gt;, &lt;strong&gt;assistance&lt;/strong&gt;, &lt;strong&gt;negotiation&lt;/strong&gt;, and &lt;strong&gt;community building&lt;/strong&gt;. These actions share an inclusive vision for the future that others embrace without being told.&lt;/p&gt;

&lt;p&gt;Creating standards or processes with a soft power approach may be as simple as stating a new expectation for teams to aspire to in a public forum. Or it might be a mutual agreement between parties on how to move forward on a particular issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soft power excels when the situation is new and/or evolving rapidly.&lt;/strong&gt; During this phase of an initiative, it is beneficial to adapt to new information while experience is gathered. Needs, some of which could not have been anticipated ahead of time, can be rapidly responded to. In cases where governance does not know what the final outcome should be, where flexibility and experimentation are most important, soft power should be the preferred approach until a desirable tenable solution is discovered.&lt;/p&gt;

&lt;h2 id=&quot;hard-power&quot;&gt;Hard Power&lt;/h2&gt;
&lt;p&gt;Hard power is the ability to command (or restrict) a person or group to a specific set of behaviors. &lt;em&gt;Usually&lt;/em&gt;, it describes the recognized authority for one individual (or organization) to direct another. But &lt;strong&gt;hard power can also be described as the set of allowances that a software system exposes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lawrence Lessig, in his books &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_and_Other_Laws_of_Cyberspace&quot;&gt;Code and Other Laws of Cyberspace&lt;/a&gt; (1999), and &lt;a href=&quot;https://en.wikipedia.org/wiki/Code:_Version_2.0&quot;&gt;Code v2&lt;/a&gt; (2006) proposed that software regulates behavior the same way laws do, albeit within the confines of a program. Software commands (or restricts) the user’s actions in a way that coercive, soft power methods do not.&lt;/p&gt;

&lt;p&gt;Soft power may be a suggestion to do something a particular way via a persuasive argument. Hard power, as delivered via software tooling, is the encoded set of things a user is allowed to do. There is less malleability to a specific context. But the outcomes are stable and predictable. Also, because it is delivered via software, hard power can scale more efficiently than soft power.&lt;/p&gt;

&lt;p&gt;A change to hard power, however, &lt;em&gt;means changing code&lt;/em&gt;. Hard power’s capability to react and adapt is only as fast as a team’s deployment cycle. That cycle may include creation of a backlog item, gathering of stories, prioritization in a sprint, coding, functional testing, integration testing, user-acceptance testing, and final deployment. For stable, mature environments that don’t change often, that round-tripping may be an acceptible trade off for hard-power’s benefits.&lt;/p&gt;

&lt;h2 id=&quot;two-recent-examples&quot;&gt;Two Recent Examples&lt;/h2&gt;
&lt;p&gt;Two recent work examples illustrate how I employ soft and hard power to support developers delivering business value.&lt;/p&gt;

&lt;p&gt;In one case, we were tasked with creating a collaboration process on a newly launched technology platform. It was so new, in fact, that what success looked like was tbd. With so many things like developer maturity, throughput, expectations, etc., yet to be determined, we needed to have the flexibility to experiment and change over time. Few things warranted dedicated tooling, or a ‘hard’ power approach, in this situation. Ignore the delivery lag; nothing kills developer moral like telling them to throw out what they just proudly delivered because “the situation is fluid”.&lt;/p&gt;

&lt;p&gt;In the second situation, we recognized an opportunity to express hard power through our lifecycle tooling. The process flow was mature, with clear parameters and desired outcomes. However, we had an immediate problem that stalled a team. In that case, we defined a soft power agreement (“we will proceed with things in this way, and manually track what comes through during this intermediate phase”) until the hard power updated could be applied. It allowed us to solve issues today while we waited for backlog priority could align.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being a change agent managing a software process across thousands of developers is no simple task. Moving from a simple linear system to a complex ecosystem requires a different set of approaches. I came from a development background; “applying power” talk still makes me  uncomfortable. But, in order to be effective in my role, it is essential understand the nuance and how it can be applied.&lt;/p&gt;

&lt;p&gt;This framework for how I classify approaches has been helpful to me, and hopefully it will be helpful for you, too.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Nov 2018 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2018/11/13/SoftPowerVHardPower/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2018/11/13/SoftPowerVHardPower/</guid>
        
        <category>API Governance</category>
        
        <category>soft power</category>
        
        <category>hard power</category>
        
        <category>Joseph Nye</category>
        
        <category>management</category>
        
        <category>Lawrence Lessig</category>
        
        
      </item>
    
      <item>
        <title>A Gardener's Approach to Growing an API Culture</title>
        <description>&lt;p&gt;My work on pragmatic software governance has evolved. It started with a focus scaling good API design across a modern enterprise company. Increasingly, I'm interested in how culture impacts technology adoption. Why are do some approaches become deeply embedded within an org, while others disappear after a hot minute? &lt;/p&gt;

&lt;p&gt;I gave this talk several times this past fall - most notably at APIStrat (Nashville) and API City (Bremerton, outside Seattle). For many, the content may have been unrelatable; what's all this talk about ecosystems when one is only submitting pull requests to a single branch? For a select subset of enterprise folks, however, these issues of scale and co-habitation loom large. There's also few resources available. Hopefully, this post will provide some insight into what they're seeing based on my own experiences.&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/01.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Hello everyone. My name is Matthew Reinbold and the title for this talk is &quot;A Gardener's Approach to Growing an API Culture&quot;. If that topic sounds a bit different, that's because I hope it is. And I'm guessing that it might have attracted an audience in search of something a bit different. &lt;/p&gt;

&lt;p&gt;What this talk is about is APIs at scale. What considerations occur when you go from managing &quot;a few APIs&quot; to being a gardener of an ecosystem?&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/02.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I don't know how big your organizations are but, no doubt, you've seen an increase in the level of software complexity. Also,  our collective industry  has adopted some very nasty habits; everything from move fast and break things to resume-driven development. How do we cultivate software design that, as Fielding described, has a &quot;scale of decades&quot; when &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;the average developer tenure at a company is a year and a half&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;What I hope to do in this talk is share some of what I have found to be resilient about an API culture, make it relatable through the use of a garden analogy, and share some techniques for those grappling with ongoing technological change within their own organizations. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/03.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;For the last several years I've been the Director of the Capital One Platform Services Center of Excellence.&lt;/p&gt;

&lt;p&gt;My team and I are responsible for gardening a complex, distributed-systems ecosystem. Capital One has around 9000 developers that we work with on API and event streaming designs, standards, and lifecycle management. These developers are spread across numerous North American locations and multiple lines of business. They've produced thousands of APIs that we manage with our own infrastructure, resulting in more than two billion request/responses a day. And our messaging infrastructure is on pace to surpass the historical adoption trends we experienced for internal APIs. &lt;/p&gt;

&lt;p&gt;My team and I are responsible for software process management. We build shared communities of practice and federated responsibility.  We've used centralized design management to cross-pollinate the best ideas and multiply infrastructure impact across the organization. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/04.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;In addition to powerful internal functionality, our investments into distributed architectures have allowed us to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be &lt;a href=&quot;https://developer.amazon.com/blogs/alexa/post/c70e3a9b-405c-4fe1-bc20-bc0519d48c97/the-story-of-the-capital-one-alexa-skill&quot;&gt;the first company to offer Amazon Echo access to their financial accounts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Win multiple &lt;a href=&quot;https://www.jdpower.com/business/press-releases/jd-power-2018-us-banking-and-credit-card-app-satisfaction-studies&quot;&gt;JD Power Awards&lt;/a&gt; for our mobile experience&lt;/li&gt;
&lt;li&gt;Sign &lt;a href=&quot;https://www.wsj.com/articles/walmart-taps-capital-one-for-store-cards-dealing-major-blow-to-synchrony-1532626208&quot;&gt;partnership portfolios worth tens-of-billions-of-dollars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hover just outside &lt;a href=&quot;http://fortune.com/fortune500/capital-one-financial/&quot;&gt;the top Fortune 100 companies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems aren't a theoretical gamble for us. It's who we've become as a culture. It's how we win in the competitive marketplace.&lt;/p&gt;

&lt;p&gt;We are reaping the fruits of our labor. And increasingly, I'm not just interested in the harvest that we have, but how we keep it healthy and prosperous going forward. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/05.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I like this image – it takes many of the components of a healthy garden and breaks them up into their individual components. We can have a greater appreciation for all interplay that occurs within one of these systems.&lt;/p&gt;

&lt;p&gt;I'm guessing most people here would be familiar with a garden ecosystem. There's the ground, which includes the mineral composition, the producer plant life, and the consumers - both the animals attracted by the plants - the worms, the bees - and the second order consumers - the snakes, the spiders, etc. I glossing over a tremendous amount, and probably doing a disservice in the process, but an ecosystem can be complex. &lt;/p&gt;

&lt;p&gt;But ecosystems don't just happen. Throwing seeds on the ground and coming back months later expecting something to harvest isn't statistically likely. And micro-managing the interplay between the numerous participants in such a complex environment doesn't scale.&lt;/p&gt;

&lt;p&gt;[Image taken from &lt;a href=&quot;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&quot;&gt;https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/06.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Likewise, technology ecosystems have numerous components. Attempting to address only one of them, while ignoring all the other factors, is like attempting to make a garden flourish while only being able control the flow of water. What is adequate during times of drought or flooding does little to deal with insect infestation, or an invasive species.&lt;/p&gt;

&lt;p&gt;[Breakdown of elements taken from Matt McLarty's presentation, &quot;&lt;a href=&quot;https://www.slideshare.net/MattMcLarty/designbased-microservices-aka-planes-trains-automobiles&quot;&gt;Design-based Microservices, AKA Planes, Trains, and Automobiles&lt;/a&gt;&quot;, slide 42]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/07.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Kudzu is a Chinese vine introduced by way of Japan to the United States. It was a perfect match for the climate of the southeastern United States. In the right conditions, a Kudzu vine can grow almost a foot a day (or between 19 to 30 centimeters). During the dust bowl of the 1930's, planting Kudzu was encouraged as a way of preventing soil erosion; it's addition to the ecosystem was a desirable thing. &lt;/p&gt;

&lt;p&gt;And then the ecosystem changed. Rain returned and the places where Kudzu had taken root suddenly had themselves a problem. It grows so fast it smothers native plants and trees, drastically reducing their access to sunlight and water. Left unchecked, Kudzu will devastate ecosystems that are dependent on native plant and wildlife. In the US it does not have any natural predators.&lt;/p&gt;

&lt;p&gt;[Photo by Eli Christman and shared under a Creative Commons 2.0 license. Original photo here: &lt;a href=&quot;https://flic.kr/p/abgksv&quot;&gt;https://flic.kr/p/abgksv&lt;/a&gt;]&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/08.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;The modern software development environment has also been one of increasing complexity. On this page are a variety of processes, techniques, frameworks, technologies, and styles.&lt;/p&gt; 

&lt;p&gt;The last decade has been marked by creating incrementally smaller deployable units. The tradeoff of increasingly granular executables is a non-linear increase in configuration and communication management. Today's modern development environment includes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Microservices, functions, SaaS-all-the-things&lt;/li&gt;
&lt;li&gt;Polyglot languages (at least in theory)&lt;/li&gt;
&lt;li&gt;Cloud and Containers&lt;/li&gt;
&lt;li&gt;Software-Defined Everything&lt;/li&gt;
&lt;li&gt;Everything Optimized for Replacement&lt;/li&gt;
&lt;li&gt;Existence of Platform Teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This trend results in complexity, and complexity leads to emergent behaviors, or behaviors that may not be easily addressed with linear thinking. It is an &lt;em&gt;ecosystem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How does one go about determining the right fit? Which of these things will be around two years from now? Five? Is there a way of identifying those things, like Kudzu, which seem to have short term benefits and long term ramifications? How do we identify complimentary species to our ecosystems and those that will unbalance it?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/09.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;A forest is a complex ecosystem. Think about how it handles change. There is a size hierarchy: pine needle, tree crown, patch, stand, forest, and biome. Those differences in scale also form a time hierarchy; said differently, as we increase in scope, we also increase in time frames of reference:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The needle changes within a year -&lt;/li&gt;
&lt;li&gt;the tree crown over several years -&lt;/li&gt;
&lt;li&gt;the patch over many decades -&lt;/li&gt;
&lt;li&gt;the stand over a couple centuries -&lt;/li&gt;
&lt;li&gt;the forest over a thousand years -&lt;/li&gt;
&lt;li&gt;and the biome over ten thousand years&lt;/li&gt; 
&lt;/ul&gt;

&lt;p&gt;What can happen in the short term is &lt;em&gt;constrained&lt;/em&gt; by the larger, slower moving concepts. The range of what the needle may do is constrained by the tree crown, which is constrained by the patch and stand, which are controlled by the forest, which is controlled by the biome.&lt;/p&gt;

&lt;p&gt;It is a complex ecosystem. &lt;strong&gt;But it is not static&lt;/strong&gt;. Innovation happens throughout the system via evolutionary competition among individual trees. Each tree survives or dies dealing with the stresses of crowding, parasites, predators, and weather.&lt;/p&gt;


&lt;p&gt;[Photo by Julien R on Unsplash]&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/10.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;&lt;strong&gt;Stewart Brand's Pace Layer model is an attempt to capture this layering&lt;/strong&gt;. &quot;Pace Layers&quot; appeared in Stewart's 1999 book, The Clock of the Long Now, and was an extension of the architectural concept of &quot;shearing layers&quot;. Shearing Layers, a concept coined by architect Frank Duffy, was elaborated on by Stewart in his 1995 book, How Buildings Learn. It describes how buildings are a set of components that evolve in different timescales. The book was, subsequently, &lt;a href=&quot;https://www.youtube.com/user/brandst/videos&quot;&gt;turned into a BBC television series that can be viewed online&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different parts of a society, or industry, move at different rates. Concepts at the top of the graph change at a rapid clip. The further down one goes, the slower change occurs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take, for example, a conference center.  It is a complex ecosystem necessary to produce a given outcome: an event. The chairs are reconfigured as need dictates. They'll be swapped out according to fashion. They have rates of change much greater than the carpet or the visual facade, which changes faster than the street ordinances or hospitality laws. All of which changes faster than our cultural tendency of getting together face to face. &lt;/p&gt;

&lt;p&gt;It is the combination of fast and slow moving parts that gives a system its resiliency. The layers are not independent. As each moves at its own speed, there is tension at the edges where they layers touch, something called &quot;slip zones&quot;.&lt;/p&gt; 

&lt;p&gt;Consider any recent emerging technology. Those electric scooters you've probably seen around are in a slip zone. Will they decend beyond a fad, becoming part of a city's transportation &lt;strong&gt;infrastructure&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://www.theverge.com/platform/amp/2018/10/24/18016486/oakland-scooter-meeting-skip-lime-bird-helmet-safety-responsibility&quot;&gt;perhaps even requiring governance&lt;/a&gt;&lt;/strong&gt;, on the way to becoming a cultural touchstone? Or is it a fad, resulting in some commerce but disappearing after the VC money runs out? &lt;/p&gt;

&lt;p&gt;Fidget spinners were a fad. They decended to the commerace layer as everyone sought to sell some product. But they never became part of people's routines (their habitual infrastructure). There was no need for governance, and they never embedded themselves in cultural identity. As a result, the ubiquitous thing one summer is easily disposed of and replaced by the next. 
&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/11.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;This is such a beautiful summary, it is worth repeating.&lt;/p&gt;

&lt;p&gt;&quot;The fast parts learn. The slow parts remember. The fast parts propose things, the slow parts dispose things. The fast and small instruct the slow and big with accrued innovations and occasional revolutions. At the same time, and we don't respect this as much as we should, the big and the slow control the fast and the small with constraints and with constancy. All the attention is paid to the fast parts. But all the power is in the slow parts.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Each layer needs to respect each other's pace. If commerce is too dominate in a society, it can jerk governance around harmfully. Or it can reach down and disrupt culture and nature by going too fast while not having the patience to deal with infrastructure problems. The flip side is where the Soviet Union tried to run everything at governance pace (five year plans, for example) and they destroyed other layers.&quot;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/12.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;So let's start to bring this together. &lt;/p&gt;

&lt;p&gt;The web as a platform is a result of its architectural simplicity, the use of a widely implemented and agreed-upon protocol (HTTP), and the pervasiveness of common representation formats (JSON). Fashion (gRPC, GraphQL, RPC, SOA, etc.) will come and go. However, creating distributed systems with web-based APIs in the same manner of the web will continue because of foundation in something deeper, more substantial. This is because of web principles like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Independent Deployment and Evolution&lt;/li&gt;
&lt;li&gt;Independent Scalability&lt;/li&gt;
&lt;li&gt;Resiliency/Isolation &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key for distributed systems success is &lt;strong&gt;a few well-known actions and the application-specific interpretation of resource representations.&lt;/strong&gt;&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/13.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;According to the book, ‘&lt;a href=&quot;https://global.oup.com/academic/product/the-modern-firm-9780198293750?cc=us&amp;amp;lang=en&amp;amp;&quot;&gt;The Modern Firm&lt;/a&gt;', by John Roberts, culture is three things: &lt;strong&gt;people, architectures,&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A software development culture is not ping pong tables and keg stand Fridays. Culture is not open floor plans or the glowing adjectives used in press releases. Culture is how a company behaves when stressed.&lt;/p&gt;

&lt;p&gt;By mimicking the web, and embracing people, architectures, and routines that promote &lt;strong&gt;loose coupling&lt;/strong&gt;, &lt;strong&gt;individual scaling&lt;/strong&gt;, and &lt;strong&gt;resiliency&lt;/strong&gt; between individual elements, the company I work for has embraced an API culture for sustaining innovation. How successful would a garden be if every plant had to grow at the same rate? If the entire ecosystem was comprised of a single flower? We nurture an ecosystem that is diverse, has a degree of independence, but is &lt;strong&gt;mutually responsible to the whole&lt;/strong&gt;. More importantly, knock on wood, that firmament will remain stable while we evaluate new technology fashions that arise.&lt;/p&gt;

&lt;p&gt;The faster layers propose things. But we're not beholden to try everything. The slower-moving, cultural layer &lt;em&gt;constrains&lt;/em&gt; the faster moving layers for the stability of the entire system. That said, how do we use this when evaluating change? &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/14.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Let's look at two comparable, but different, API-related items.&lt;/p&gt; 

&lt;p&gt;On the surface, we might lump things like hypermedia and microservices together. They are both popular topics on the API speaking circuit over the last half decade and, in a rush, we can hand-wave at them as &quot;web-API&quot; things. &lt;/p&gt;

&lt;p&gt;I've written my email newsletter, &lt;a href=&quot;https://tinyletter.com/NetAPINotes/archive&quot;&gt;REST API Notes&lt;/a&gt;, for the last several years. I consume numerous blog posts, slide decks, and video recordings every week in an attempt to share only the best, most salient information with my busy audience. In parsing all that material, it has become clear that microservices has taken root across software development shops in a way that hypermedia hasn't. It doesn't mean that hypermedia is a bad idea - far from it. And yet, time and time again, these hypermedia seeds cast don't seem to flourish. &lt;/p&gt;

&lt;p&gt;The Pace Layer model provides a theory.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/15.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Microservices are implementation details. They are supposed to be the smallest possible cohesive unit in a system.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;http://shop.oreilly.com/product/0636920050308.do&quot;&gt;Irakli Nadareishvili&lt;/a&gt; likes to say, &quot;microservices are not about reuse!&quot; They are about reducing the coordination overhead costs among teams. They are not &quot;little APIs&quot;, although they use all of the API infrastructure (the protocols, networking frameworks, etc.) that already exists within a company. They lack exposure (remember, they're not about reuse) in order to maximize their ephemeraility.&lt;/p&gt;

&lt;p&gt;They are like the chairs in this building. Or the pine needles in the forest. The rate of change is within the infrastructure layer.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/16.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Hypermedia is more than just providing links to related information, although it might be pitched that way.&lt;/p&gt;

&lt;p&gt;At a previous e-commerce job, I was an backend developer and architect for a product &lt;em&gt;perfect&lt;/em&gt; for hypermedia. On checkout, the business wanted to dynamically A/B test various upsell offers based on the contents of the cart. Because of the rate at which they wanted to test offers, combined with the dynamic nature of the cart contents, trying to bake every possible upsell paramutation into an executable that went through an app store approval process (itself which might take two weeks) was impossible.&lt;/p&gt;

&lt;p&gt;Hypermedia is a great solution for &quot;workflow&quot; like events, which the checkout flow primarily was. Each state returned by the server would provide links to the next step. That next step may change, depending on what is being tested. The mobile application would navigate the path presented it, and the business case would be fulfilled.&lt;/p&gt;

&lt;p&gt;Despite the natural fit, however, the work floundered. Hypermedia is more than just links. Its an inversion of communication flow. Rather than the mobile developer being able to look at the totality of exposed functionality and call their shot, they where now expected to respond to a bread trail they were given. It was a different &lt;em&gt;architecture&lt;/em&gt; resulting in a different calling &lt;em&gt;routine&lt;/em&gt; for the &lt;em&gt;people&lt;/em&gt; involved. As we mentioned from John Robert's definition, people, routines, and architecture are aspects of &lt;strong&gt;culture&lt;/strong&gt;.&lt;/p&gt; 

&lt;p&gt;Hypermedia, done correctly, challenges conventional development paradigms. It requires the appropriate supporting culture, something that moves more slowly to support new forms. It doesn't mean that hypermedia will never happen. What it does mean, however, is that adoption is on the order of a &lt;strong&gt;culture&lt;/strong&gt; change, not &lt;strong&gt;infrastructure&lt;/strong&gt;. Not only does it take longer, but successful culture change also requires a different set of approaches.&lt;/p&gt;

&lt;p&gt;Note: this is a model. Anyone using a model should be quick to share the George Box quote, &quot;all models are wrong, but some are useful&quot;. But despite the fact they are an oversimplified version of reality, a good model let's us see a situation in a new light, and makes us ask different questions in the pursuit of new and/or different insights.&lt;/p&gt;

&lt;p&gt;Using Stewart Brand's Pace Layering model, I conclude that there haven't been many compelling cases of hypermedia because the layer that needs to change, an organization's culture, moves at a much slower rate in adopting new things. Changing culture is more challenging than changing infrastructure. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/17.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I'll leave the exercise of walking through GraphQL, what change layer it is most likely to be, and the future ramifications to the reader. However, if you do that, keep the following questions in mind:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Of the problems that GraphQL claims to solve, out of which layers in the pace layer did those problems emerge?&lt;/li&gt;
&lt;li&gt;In which layer are those problems most felt?&lt;/li&gt;
&lt;li&gt;From which layer is a solution most likely to merge?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, consider a company where GraphQL is being considered. Perhaps previously created REST-ish APIs have had poor bounded contexts, ill fitting with desired business experiences. But if the culture of a company (the people, routines, and architectures) can't accruately articulate well isolated, composed pieces of business functionality, what happens if the culture stays the same and we swap infrastructure, instead?&lt;/p&gt;

&lt;p&gt;Your mileage may vary. But I'd argue that, in the above example, you've conceded defeat and pushed the hard work of creating well-understood business interactions onto the integrating client. Is that a sustainable decision for your ecosystem? Or, over time, will we look back on this as a moment where Kudzu was encouraged?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/18.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;We work in an industry proficient in eating its young, of chasing the dragon of the ‘next big thing', of disposing perfectly workable solutions in the pursuit of the next silver bullet. &lt;/p&gt;

&lt;p&gt;We can't (or want to) stop the growth of our ecosystems. Excellence within our software development circles will remain an ongoing, evolving conversation with constant change. But we also don't have to accept a binge-purge cycle of architectural violence as a given. We can break that pattern. We can stand on the shoulders of giants, rather than repeatedly attempting to chop them off at the knees. &lt;/p&gt;

&lt;p&gt;Like attentive gardeners, we can carefully cultivate dynamic, complex environments where innovation can happen, while being wary to threats that might jeopardize the balance. &lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2018/10/gardeners-slides/19.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Thank you for your attention.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://matthewreinbold.com/2018/10/31/Gardeners-Approach/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2018/10/31/Gardeners-Approach/</guid>
        
        <category>REST API</category>
        
        <category>presos</category>
        
        <category>APIStrat</category>
        
        <category>Capital One</category>
        
        <category>API Governance</category>
        
        <category>conferences</category>
        
        
      </item>
    
  </channel>
</rss>
