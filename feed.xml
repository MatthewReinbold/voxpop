<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold, the Lead for the Capital One API  Center of Excellence. Much of what appears here dated prior to 2017 was  previously published at VoxPop.co and VoxPopDesign.com. There's also a bit  of legacy detritus from older experiments like mutednoise.com,  miltiantgeek.com, codeaway.org, etc. Yes, I am the adult male that still plays with Lego. You should too.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 10 Feb 2018 15:38:34 -0500</pubDate>
    <lastBuildDate>Sat, 10 Feb 2018 15:38:34 -0500</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>RIP John Perry Barlow</title>
        <description>&lt;p&gt;John Perry Barlow did many amazing things. He was a Grateful Dead lyricist. He was a Wyoming rancher for more than a decade and a half, itself no small feat. Much too late in my professional career I contributed to the Electronic Frontier Foundation (EFF), an organization he founded to fight for a free and open internet. However, JPB will be most notable, for me, as the author of the “&lt;a href=&quot;https://www.eff.org/cyberspace-independence&quot;&gt;Declaration of Independence of Cyberspace&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;It starts:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Governments of the Industrial World, you weary giants of flesh and steel, I come from Cyberspace, the new home of Mind. On behalf of the future, I ask you of the past to leave us alone. You are not welcome among us. You have no sovereignty where we gather.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have no elected government, nor are we likely to have one, so I address you with no greater authority than that with which liberty itself always speaks. I declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. You have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JPB wrote the manifesto as an email in 1996. Even in the wide-eye days of the web’s infancy, it was controversial. Arrogant. Eye-roll inducing. In light of everything today - from &lt;a href=&quot;https://spectrum.ieee.org/telecom/security/the-real-story-of-stuxnet&quot;&gt;nation state cyber-warfare&lt;/a&gt; to &lt;a href=&quot;https://mashable.com/2014/06/05/edward-snowden-revelations/&quot;&gt;the Snowden revelations&lt;/a&gt;, from &lt;a href=&quot;https://www.axios.com/here-are-the-election-facebook-ads-russia-bought-1513306606-f8d07e39-085f-44e7-9958-975d35d3b4f0.html&quot;&gt;Facebook manipulating elections&lt;/a&gt; to &lt;a href=&quot;https://www.cnn.com/2018/01/03/us/kansas-police-shooting-swatting/index.html&quot;&gt;people dying from swatting&lt;/a&gt; - it is hard not to choke on the naivety.&lt;/p&gt;

&lt;p&gt;And yet, the loss of that innocence, and the visionary who articulated what the web &lt;em&gt;could&lt;/em&gt; be, &lt;strong&gt;hurts so much&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The same year that JPB declared cyberspace’s independence, I started my freshman year at college. His web became the web I aspired to. In addition to the manifesto, I was also quickly introduced to the works of William Gibson, Bruce Sterling, Neal Stephenson, 90’s British Rave Culture, Hacking, Phreaking, IRC, Napster, Icecasting, Pseudo, and so much, much more. Instead of fiddling with index cards, report research was just an AltaVista search away. I learned HTML on a Geocities site so that I could share the same miserable poetry as others from exotic locations like Europe, or Australia, or Des Moine. And music; there was so much music. Music to study to, music to make-out to, and music to ring in a new millenium where anyone with an ounce of ambition and a newly minted degree in computers could save the world (while getting fabulously rich in the process).&lt;/p&gt;

&lt;p&gt;The dot-com bust turned out to be a speed bump. In 2004-2005, I was a regular listener of podcasts and ran a web forum for an MMORPG guild. By 2007, I was all in on ‘Web 2.0’, or ‘The Social Web’. Friends attending SXSW that year invited me to try something called ‘Twitter’. By the end of that year, I was producing (poorly attended) conferences extolling the virtues of blogging for businesses. &lt;em&gt;Brands would be conversational, not unidirectional&lt;/em&gt;! Businesses could harness the &lt;em&gt;wisdom of the crowds&lt;/em&gt;! &lt;a href=&quot;http://www.cluetrain.com/&quot;&gt;All aboard the Cluetrain&lt;/a&gt;! “&lt;strong&gt;If only&lt;/strong&gt;,” I would argue without irony, “&lt;strong&gt;everyone would blog, we’d see we aren’t really that different!&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;Sitting here, writing on a private VPN network, in a browser meticulously stripped of as much ad tracking as I can manage, with a sticker slapped over the webcam, I’m humbled. This isn’t the web &lt;em&gt;I&lt;/em&gt; want. &lt;em&gt;This isn’t the web he wanted&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;JBP saw physical space’s &lt;a href=&quot;https://en.wikipedia.org/wiki/City_upon_a_Hill&quot;&gt;city on the hill&lt;/a&gt; for what it was - a gated community of power and privilege that looked down on those different or unwanted. He called for something new. However, it is important to point out that JPB’s dream for cyberspace wasn’t an appeal for lawlessness; his streak of libertarianism wasn’t ‘do whatever you want’. It was an appeal to be something better than we’ve been. The blackest backwaters of Reddit, or the white power movement, or malware opportunists were inevitable, but unwelcome. He was in a race to sow the seeds of something wonderful before the weeds of our worst nature could take root and choke it out. In JBP’s “new home of Mind”, we’d see a vision of a virtual place beyond the violence beget of physical judgement and maybe, just maybe, we’d finally treat each other like human beings.&lt;/p&gt;

&lt;p&gt;And now John Perry Barlow is dead. A mantle has been laid down and its owner put to rest. Cyberspace is dead. Long live cyberspace.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/111576518?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/111576518&quot;&gt;A Declaration of the Independence of Cyberspace by John Perry Barlow.&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/idealogue&quot;&gt;IDEALOGUE&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2018/02/08/RIPJohnPerryBarlow/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/08/RIPJohnPerryBarlow/</guid>
        
        <category>cyberspace</category>
        
        <category>john perry barlow</category>
        
        <category>twitter</category>
        
        <category>EFF</category>
        
        <category>college</category>
        
        <category>Edward Snowden</category>
        
        <category>privacy</category>
        
        <category>William Gibson</category>
        
        <category>Bruce Sterling</category>
        
        <category>Neal Stephenson</category>
        
        <category>raves</category>
        
        <category>Hacking</category>
        
        <category>Phreaking</category>
        
        <category>IRC</category>
        
        <category>Napster</category>
        
        <category>Icecasting</category>
        
        <category>Pseudo</category>
        
        <category>AltaVista</category>
        
        <category>SXSW</category>
        
        <category>social web</category>
        
        <category>Enclosure</category>
        
        
      </item>
    
      <item>
        <title>Three Ways Conways Law Affects API Governance</title>
        <description>&lt;p&gt;When I presented ‘3 Ways Conway’s Law Affects API Governance’ at the 2016 API Strategy Conference, I had no idea that it would become my most requested talk. Even now, a year later, I still get the occasional email asking if the talk has been posted anywhere. What had started as a handful of observations in how organizational structure was showing up in API designs had struck a cord with those in other areas.&lt;/p&gt;

&lt;p&gt;So why haven’t I shared the deck before now? No good reason; there just always seemed to be some other more pressing need (or want). However, people persisted and made me realize that the content wasn’t just a blip in the conference milieu; rather, it was something that needed to be shared.&lt;/p&gt;

&lt;p&gt;So, without further ado, here’s “3 Ways Conway’s Law Affects API Governance”.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide1.PNG&quot; /&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide2.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Before I start my slides, I'd like to start with someone else's presentation. Recently, Elon Musk presented his plan for how to make humans an &lt;em&gt;interplanetary species&lt;/em&gt;. &lt;a href=&quot;https://www.youtube.com/watch?v=H7Uyfqi_TE8&quot; target=&quot;_blank&quot;&gt;It is available online&lt;/a&gt; and has a number of interesting ideas. What intrigued me most, however, was how Musk illustrated why going to Mars remains prohibitively expensive. 
&lt;/p&gt;
&lt;p&gt;Musk argued that “full reusability” was vital to reducing the cost, thus making a trip to Mars viable. 
&lt;/p&gt;
&lt;p&gt;
How many of you flew on a plane to get to this conference? 
&lt;/p&gt;
&lt;p&gt;
Elon’s argument that if we built a 737 for one time use, a seat from LA to Las Vegas would cost $500,000. Of course, a plane is reused, lowering the price which makes air travel much more accessible for everyone. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide3.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Why is that? 
&lt;/p&gt;
&lt;p&gt;
Because the plane is used, day after day, year after year. The cost, prohibitively expensive when used once, is distributed over the life of the vehicle. Reusability is why a ticket from LA to Los Vegas can cost as little as $43 dollars. Reusability is a key cornerstone in Musk's plan to reduce costs to the point that going to Mars becomes viable. And reusability is a compelling feature for internal APIs.
&lt;/p&gt;
&lt;p&gt;
Building a plane for one use is crazy. &lt;strong&gt;And yet&lt;/strong&gt; enterprise organizations are filled with point-to-point software, one time use API interfaces that the organization pays for. Then they do that again, again, and again. 
&lt;/p&gt;
&lt;p&gt;
Instead of creating consistent service architecture and demonstrating service re-use, teams inadvertently produce Just a Bunch of REST Services (JBORS): a spaghetti web of One-to-One connections between providers and consumers. As a result, an enterprise may find the REST effort &lt;strong&gt;doesn’t&lt;/strong&gt; improve technical or business agility, but, instead, end ups in only swapping out IT toolsets, message formats, and protocols.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;The job of API governance is to identify and mitigate these problems.&lt;/strong&gt; 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide4.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Web APIs promise better business agility while, simultaneously, achieving better ROI on developer time. This is why I've seen an increasing number of APIs created within our organization. With sufficient volume, patterns begin to emerge. 
&lt;/p&gt;
&lt;p&gt;
Capital One, broadly speaking, has five lines of business. In the card business alone we have hundreds of sprint teams developing and deploying APIs.
&lt;/p&gt;
&lt;p&gt;
Our teams are API-First. They describe their API intent in an Swagger/OpenAPI description. They then submit this for collaboration. The graph shown here are API submissions for review to my area, the API Center of Excellence, grouped by week. In the first year there were over 2600 submissions for more than 650 unique APIs. 
&lt;/p&gt;
&lt;p&gt;
Sure, there’s a fair amount of poor resource design or misapplication of a status code in those designs. For those API design problems, the fix is straightforward. However, when you look at this many APIs, deeper, more challenging design issues begin to emerge. 
&lt;/p&gt;
&lt;p&gt;
At enterprise scale, reusability can be blocked by something deeper, something more institutional, than what can be handled simply by &quot;lexicon police&quot;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide5.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Harvard Business Review may not be where you'd expect to seek out your software architecture insight. However, they published &lt;a href=&quot;http://www.hbs.edu/faculty/Publication%20Files/08-039_1861e507-1dc1-4602-85b8-90d71559d85b.pdf&quot; target=&quot;_blank&quot;&gt;a fantastic study attempting to measure the duality between product and organization architectures&lt;/a&gt;. The conclusion was:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt; &quot;[software] products tend to 'mirror' the architectures of the organizations in which they are developed. This dynamic occurs because the organization’s governance structures, problem solving routines and communication patterns constrain the space in which it searches for new solutions&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide6.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Of course, anyone that has seen a microservices presentation will have heard of this phenomenon by a different name: &lt;em&gt;Conway's Law&lt;/em&gt;. 
&lt;/p&gt;
&lt;p&gt;
Informally, &lt;a href=&quot;http://www.design.caltech.edu/erik/Misc/Conway.html&quot; target=&quot;_blank&quot;&gt;Conway's law&lt;/a&gt; has come to be known as:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;&quot;Any organization that designs a system will produce a design whose structure is a copy of the organization's communication structure.&quot;&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
This isn't new, revelatory linkbait dominating social media at the moment. Conway made these observations about software development &lt;em&gt;in 1968&lt;/em&gt;. The reason we're still talking about it today is because it continues to illustrate a fundamental piece of human behavior. 
&lt;/p&gt;
&lt;p&gt;
As Conway, more formally, stated:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt; &quot;Consider a large system S that the government wants to build. The government hires company X to build system S. Say company X has three engineering groups, E1, E2, and E3 that participate in the project. Conway's law suggests that it is likely that the resultant system will consist of 3 major subsystems (S1, S2, S3), each built by one of the engineering groups. More importantly, the resultant interfaces between the subsystems (S1-S2, S1-S3, etc) will reflect the quality and nature of the real-world interpersonal communications between the respective engineering groups (E1-E2, E1-E3, etc).&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Let's discuss how this behavior affects API design.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide7.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Fred Brooks, in his seminal work, &lt;em&gt;The Mythical Man Month&lt;/em&gt; observed that the more people that were added to the project, the more likely that software project would take &lt;em&gt;longer&lt;/em&gt;. Just adding people to a project doesn't make it go faster. In fact, the increase in the amount of communication overhead is more likely to slow a project even after the initial 'drinking from the fire hose' phase has past. Simply put, the more people, the more communication that needs to occur. 
&lt;/p&gt;
&lt;p&gt;
That also applies to design. The more people contributing to a design, the more diverse the number of approaches, experiences, and desired outcomes a group is likely to have. The lack of cohesion result in an API design that is difficult to use. 
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://dzone.com/articles/conways-law-v-software&quot; target=&quot;_blank&quot;&gt;From Conway’s Paper&lt;/a&gt;: 
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&quot;Ways must be found to reward design managers for keeping their organizations lean and flexible. There is need for a philosophy of system design management which is not based on the assumption that adding manpower simply adds to productivity.&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Businesses need to incentivize correct bounded context creations first, then apply manpower; not the other way around.  
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide8.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
But what does the really mean? How does a company's communication patterns inadvertently affect API production? An advantage of adopting the microservice architecture is that small capsules of functionality are independently deployable. Work can be partitioned out to separate teams.  
&lt;/p&gt;
&lt;p&gt;
When beginning an API interface design, the correct identification of logical bounded contexts is essential. When done incorrectly, the resource association, or lack thereof, are a signal of the communication patterns of the organization behind the scenes. 
&lt;/p&gt;
&lt;p&gt;
Let's start with a simple example. Suppose we need to create an API that does something with a company's users. We identify that we'll need two resources - the collection (&quot;/users&quot;) and the instances within that collection (&quot;/users/{userId}&quot;). Given that we want this done ASAP, a natural mistake might be to divide the labor across two different development teams; Team A will be responsible for the endpoints against &quot;/users&quot;, and Team B will create the design for the userId instance. Adding two development teams means that we'll have the work delivered in half the time, right? Isn't this 'division of labor' in action?
&lt;/p&gt;
&lt;p&gt;
Any time you have a collections and instance resource, they strongly imply that they should be in a single API. However, I see these separated into different work units all the time. The teams are assigned to produce code by resource. Subsequently, when a you, a potential consumer of these APIs, goes to the portal site for discovery, you find multiple APIs related to a single concept - &quot;user stuff&quot;. Moreover, if the key provisioning requires separate keys in order to access each item, you've just doubled the problem on the part of the user.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide9.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's suppose that the teams &lt;em&gt;did&lt;/em&gt; deliver their contributions in the expected amount of time. Chances are, if you have two teams, you're going to get two different approaches. Take the user object on the left; this is a simple set of fields to POST to the &quot;/users&quot; resource to create a new instance. We have things like &quot;name&quot;, &quot;street&quot;, &quot;city&quot;, etc. Simple and straightforward; no room for misunderstanding, right?
&lt;/p&gt;
&lt;p&gt;
Actually, even with this simple example, there's plenty of places for discrepancies to appear. Look at the output by Team B on the left. They've taken the single &quot;name&quot; field and, instead, decided to represent it as two fields, &quot;firstname&quot; and &quot;lastname&quot;. Rather than having a number of address elements as siblings of the other user fields, they've created an array structure. They start with &quot;home&quot;, but the structure leaves room for alternative values, like &quot;office&quot; and &quot;shipping&quot;. Even the &quot;zip&quot; has been modified to be &quot;postal-code&quot;, assuming that they intend to support both US &lt;em&gt;and&lt;/em&gt; Canadian customers. 
&lt;/p&gt;
&lt;p&gt;
This is a fairly trivial example. After quickly scanning the two objects, a consumer would be able to map values from one item to the other. However, imagine the kinds of internal jargon, abbreviations, and assumptions that may exist within one group that may not be obvious to another. By separating the design across multiple teams, the API consumer is forced to bridge these discrepancies, increasing their pain and sapping their productiveness. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide10.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;	
The solution for this is to define the bounded context first. Let it determine the units of work, and then assign a single team to own that. Don't start with the number of teams available and let that drive the division of labor. Otherwise, there are guaranteed to be inconsistencies in the API nuances that are invisible to teams, but friction to integrators.
&lt;/p&gt;
&lt;p&gt;
Having a single team working on a common concept means that objects used in both the creation and retrieval are guaranteed to look the same, because the team has clear communication among itself (or &lt;em&gt;should&lt;/em&gt;). Further, when consumers go looking, what they find maps to their expected model, rather than APIs designs via division-of-labor convenience.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide11.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The second observation is a bit of a mouthful. However, how many have dealt with &quot;not invented here&quot; thinking? If so, you've seen this effect in action.
&lt;/p&gt;
&lt;p&gt;
If you're within the same line of business, or even same geographical location your development teams will be much more inclined to reach out, build a bridge, and ask a question. The faces are familiar. Those folks are &quot;one of us&quot;. 
&lt;/p&gt;
&lt;p&gt;
Different line of business? Hell, different floor in the same building? The attitude is much more likely to default to &quot;those people speak a different language - it would be easier to just do it ourselves&quot;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide12.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's return to our 'users' resource example, only now the model has been included to include an instance of a user's &lt;em&gt;preferences&lt;/em&gt;. &lt;strong&gt;Team A&lt;/strong&gt; is put in charge of the code for this feature, including the API to retrieve and update these properties. These are common things that you would find on most accounts: &lt;em&gt;language preference&lt;/em&gt;, &lt;em&gt;avatar image&lt;/em&gt;, and so on. That works well and is used to populate a 'settings' UI in an app or on the web. Everyone is happy when the 1.0 ships. 
&lt;/p&gt;
&lt;p&gt;
A little while later, Team B is working on a new feature that allows users to customize the sort orders for their search pages. They've got the ordering down to a science, but it is now time to save the user's preference somewhere. Conceptually, it &lt;em&gt;should&lt;/em&gt; be part of the 'preferences' resource. However, nobody on &lt;strong&gt;Team B&lt;/strong&gt; knows anyone from &lt;strong&gt;Team A&lt;/strong&gt;. In fact, &lt;strong&gt;Team A&lt;/strong&gt; is in a different location. &lt;strong&gt;Team B&lt;/strong&gt; &lt;em&gt;could&lt;/em&gt; pick up the phone, make the introductions, relate the use case for the zillionth time, and argue with &lt;strong&gt;Team A&lt;/strong&gt; over their existing backlog prioritization.
&lt;/p&gt;
&lt;p&gt;
Or &lt;strong&gt;Team B&lt;/strong&gt; could create a new one-off resource: &quot;/users/{userId}/preferences/sort&quot;, and avoid all that. After all, &lt;strong&gt;Team B&lt;/strong&gt; knows how to create APIs - they don't need help there. And &quot;preferences&quot; already kinda implies a collection, of which &quot;sort&quot; or &quot;sortOrder&quot; would be one. So what's the problem? 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide13.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The problem is that the lack of communication on the part of the teams will manifest as additional &quot;chattiness&quot; on the part of the consumers. Yes, adding &quot;just one more&quot; resource doesn't seem, in the moment, like that bad of thing. However, it is a slippery slope, as illustrated in this mockup on the left. 
&lt;/p&gt;
&lt;p&gt;
In this sample we see things like &quot;out-of-office&quot;, manager, time zone, etc. If the previous strategy employed by &lt;strong&gt;Team B&lt;/strong&gt; is allowed to proliferate, one could see how the resources would also explode into a host of one-off, fine-grained items. Imagine a consumer, like a mobile device, not only having to call each of these to populate a display, but track their dependencies on each of these. 
&lt;/p&gt;
&lt;p&gt;
Yuck.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide14.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The solution to this second item is identifying, and enforcing, that teams own a &lt;strong&gt;context&lt;/strong&gt;, not a &lt;strong&gt;codebase&lt;/strong&gt;. In our example, &lt;strong&gt;Team A&lt;/strong&gt; &lt;em&gt;owns&lt;/em&gt; the user preferences context (if not the user context itself). Any additions, updates, or removals from that context should be performed by the owning team. 
&lt;/p&gt;
&lt;p&gt;
If not, the conceptual debt incurred in order to convenience the API producers will be, subsequently, paid on every integration.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide15.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
The 3rd Conway's Law Effect is that one's internal organization may not align to external perceptions. This can be extremely problematic when attempting to convert internal APIs to external products - things simply don’t map. Conversations are impeded and business value can't be derived, because the APIs on offer are from the perspective of internal hierarchy, rather than externally presumed functionality.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide16.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Suppose we are responsible for the APIs in a global consumer goods business called &quot;Veridian Dynamics&quot;. There's the shampoo division and, somewhere upstate, the razors folks. Across the country lies the newly acquired &quot;Big Pumpkin&quot; division, responsible for the glut of seasonal products that one sees each fall- things like pumpkin spice candy, toothpaste, toilet paper, etc. They are the &lt;em&gt;weaponized pumpkin division&lt;/em&gt;. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide17.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
Let's look at our first attempt to articulate what our conglomerate does. This first mapping results in a resource design organized around the various divisions. We create three high level path concepts to begin grouping those things that are similar. Under an &quot;api.veridian.com&quot; domain, we put an identifier for &quot;/shampoo&quot;, &quot;/razor&quot;, and &quot;/pumpkin&quot;. 
&lt;/p&gt;
&lt;p&gt;
Each line of business has its own set of needs, which they exposed as APIs in the appropriate area. These take the form of collection and instance resources under the appropriate areas. Shampoo has its formulas. Razors have their own innovative product strategies. So, too, does the weaponized pumpkin division. 
&lt;/p&gt;
&lt;p&gt;
While it might make the utmost sense in the moment, this first API resource attempt that Veridian made is problematic. Development teams have been organized around specific product divisions, and the resource produced reflect those organizational structures. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide18.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
That may not be a problem if the codification of internal structure only remains available internally. But let's introduce another fictional conglomerate, &lt;em&gt;Buy 'n Large&lt;/em&gt;, or BnL. They are a national big-box store and they are looking to carry Veridian Dynamics' products in their hundreds of stores. In order to do so, they want to integrate their purchasing and fulfillment systems with Veridian Dynamics' inventory levels. 
&lt;/p&gt;
&lt;p&gt;
Veridian Dynamics is ecstatic; they have APIs! The integration will be easy! The executives head off to the golf course while the developers send over the documentation for how to get their inventory levels. It takes awhile, as it has to be collected from each of the units and compiled into documentation for BnL.
&lt;/p&gt;
&lt;p&gt;
Shortly after that, BnL begins to grumble. They want inventories, they should be able to just call for Veridian Dynamics inventories. However, because Veridian has organized its resources by organization division, BnL has to make multiple calls. 
&lt;/p&gt;
&lt;p&gt;
Further, because each division was allowed to define its own approach, none of the calls behave the same. If one wants to retrieve inventories from the shampoo division, one would call the shampoo inventory collection. That seems straightforward until BnL's engineers try to do the same thing for razors and find (surprise!) that they need a product identifier before being able to get the stock; they're now in the business of keeping lists of razor productIds, or polling other APIs to make sure they have the latest information. And the pumpkin division? The division across the country that was recently acquired? That API is more than a little different: a caller not only needs to know the 'stock keeping unit' (or sku) but have an understanding of that division's regional warehousing. What should have been a simple task for an external entity becomes a prolonged and ongoing conversation about Veridian's internal organization.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide19.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
And that is only the immediate problem. With an API resource design aligned to the organization, what happens when new initiatives &lt;strong&gt;cross&lt;/strong&gt; those boundaries? For example, what if the shampoo and pumpkin divisions join forces to create pumpkin-spiced shampoo? Under the previous model, does that go under the 'pumpkin' or 'shampoo' top-level paths? How are external entities going to know where to find the self-lubricating razor product that comes out of a shampoo and razor team-up? Where do we send the congressional inquiry when Veridian announces its razor pumpkin home defense product? 
&lt;/p&gt;
&lt;p&gt;
Ultimately, if there is an external perception of a central concept, then the APIs - at least the external facing ones - should express that concept. In our BnL example, if they perceive Veridian's products as a single entity, then the resource design should reflect that. If being able to call for the inventories of individual products is important, we could create an API endpoint of a GET to '/products/{productId}/inventories'. If BnL still wanted all inventories, we could maintain path hierarchy by pass a wildcard, in this case the tilde ('~'), for the productId. There are several options. The point is, there API design would be aligned to the external expectation of the business function, not the internal organizational chart. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/farley.gif&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;em&gt;#TFW Devs Realize These Problems Can't be Fixed with Tools, but by Changing People&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
If we continue to treat API design is something that is just for developers, then developers will attempt to fix the problems with the developer tools on hand. But, as Conway’s Law implies, no amount of automation or framework selection will solve this problem.
&lt;/p&gt;
&lt;p&gt;
I've demonstrated three ways in which API Design is effected by the communication patterns in a company. But how do you change those patterns? 
&lt;/p&gt;
&lt;p&gt;Ultimately, changing the communication patterns means changing the culture. That may sound daunting. But there are common sense, incremental ways of getting started.&lt;/p&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide21.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The first step is recognizing that there may be a problem. Viewing API design through the lens of Conway's law allows us to find spots where an API's design may be suboptimal due to organizational factors. But once we've identified that there is a problem, what do we do about it? 
&lt;/p&gt;
&lt;p&gt;
Blue Ocean Strategy was written by W. Chan Kim and Renee Mauborgne in 2005. In it the authors articulated the challenges and possible approaches for creating meaningful organizational change. Much of the latter portion of the book includes impactful guidance for making culture change possible. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide22.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The book identifies for challenges to cultural change. The first is &lt;strong&gt;cognitive&lt;/strong&gt; challenges. Going back to our Veridian and BnL example, the engineers that designed the first set of resources may not realize how difficult those APIs are for an external entity. 
&lt;/p&gt;
&lt;p&gt;
The second challenge is &lt;strong&gt;motivation&lt;/strong&gt;. Once the inconsistencies is brought to the Veridian engineers' attention, they may &lt;em&gt;understand&lt;/em&gt; why their initial design is suboptimal, but have very little financial or intellectual motivation for making a change. There may be a lack of urgency:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&quot;It's a pain, sure. But that is job security for their guys, am I right?&quot;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
The incentives here may be intrinsic (why aren't we the API Twilio or SendGrid of retail giants?) or extrinsic (we have quantified the amount of lost sales the integration headaches are costing our business). Either way &lt;em&gt;understanding&lt;/em&gt; there is a problem and wanting to &lt;em&gt;take action&lt;/em&gt; are two different things. 
&lt;/p&gt;
&lt;p&gt;
The next challenge to cultural change are resources (or the lack thereof). Suppose that we've shown Veridian's engineers the problem. And they are motivated to solve it because they see how the current design is limiting new initiatives. However, they may question where the budget for this new centralized, product API comes from. Or state that redesigning the API needs to be put on a backlog, the prioritization to be fought over at the next planning iteration. 
&lt;/p&gt;
&lt;p&gt;
The final challenge may be the most difficult: the &lt;strong&gt;institutional politics&lt;/strong&gt;. Teams within each one of Veridian's divisions may acknowledge there is a problem (but it is someone else's problem). They are motivated to change (if that change supports their already existing initiatives). They might be committed to helping the company get more business (as long as it doesn't come at the expense to what the divisions are doing). 
&lt;/p&gt;
&lt;p&gt;
The politics don't go away because we're talking about technology. If anything, they get &lt;em&gt;more complex&lt;/em&gt;.  
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide23.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
That sounds daunting, because it is. Positive culture change within a company can be one of the most difficult professional things to do. However, not all is lost. There are ways of seeding change that don't involve wheelbarrows full of money or a vice president title. 
&lt;/p&gt;
&lt;p&gt;
To begin, start with disproportionate influencers. You know these people - the ones who are incredibly plugged in, always seem to get the regular raises, and who leadership turns to in meetings. Every company has these stars. Once these people are identified, determine how your agenda compliments, or even furthers theirs. Appealing to their better nature or a sense of duty will only get you so far. But if it can be demonstrated how your course of action actually gets them what they want, and things will begin to happen. 
&lt;/p&gt;
&lt;p&gt;
Once the disproportionate influencers are onboard, &lt;em&gt;shine a light&lt;/em&gt; on their accomplishments. To change a culture, you have to paint a picture of what the destination will look like. Not only does that reward the influencer for their alliance, but it communicates to the rest of the org what behavior gets rewarded.
&lt;/p&gt;
&lt;p&gt;
One mistake that wordy people, like myself, make is assuming that a single presentation, or a well-reasoned argument, is all it takes. This may appeal to people's logic. However, action rarely takes root until the audience &lt;em&gt;feels the pain&lt;/em&gt; of a certain situation. The realities of business-as-usual (BAU) don't become real until individuals are living it.
&lt;/p&gt;
&lt;p&gt;
Finally, resources should be redistributed from &quot;coldspots&quot; (high need but little impact) to &quot;hotspots&quot; (big impact for little investment). Can ongoing, in-person training be recorded and provided in self-service fashion? Constantly evaluating where time is being spent, and the impacts of that time, is critical for any effort. 
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/12/Slide24.PNG&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;
At this point, I've hopefully made the argument that an organization's structure can adversely affect API design. Any API design culture needs to:
&lt;/p&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt; Incentivize correct bounded context creation first, then apply manpower&lt;/li&gt;
&lt;li&gt; Overcome resistance to reuse inherent in the org chart&lt;/li&gt;
&lt;li&gt; Align bounded context for external APIs with external expectations&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Thank you for your attention.
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/12/07/ConwayAndAPIDesign/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/07/ConwayAndAPIDesign/</guid>
        
        <category>REST API</category>
        
        <category>Melvin Conway</category>
        
        <category>presos</category>
        
        <category>Elon Musk</category>
        
        <category>Harvard Business Review</category>
        
        <category>Fred Brooks</category>
        
        <category>Blue Ocean Strategy</category>
        
        <category>conferences</category>
        
        
      </item>
    
      <item>
        <title>Making IT Culture Change Work</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/apiworld.png&quot; /&gt;
&lt;figcaption&gt;
The main stage at the 2017 API World Conference.
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;/2017/10/03/API-Governance-Blueprint/&quot;&gt;recently posted the talk I presented at API World 2017&lt;/a&gt;. I estimate that there were maybe sixty or seventy people in the audience and a fair number stuck around afterward to ask questions and share their experiences.&lt;/p&gt;

&lt;p&gt;I’ve gone ahead and grouped the most commonly asked questions together here for other’s benefit. Also, if API Governance is your sort of thing, check out &lt;a href=&quot;https://apievangelist.com/2017/10/09/api-governance-in-the-capital-one-devexchange/&quot;&gt;the nice write up that Kin Lane, the API Evangelist, did on the process and approach that we’re trying at Capital One&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“While talking with Matt about their approach at Capital One, he asked if it was comparable to what else I’ve seen out there. I had to be honest. I’ve never come across someone who had established API design, deployment, and management practices. Were actively educating and training their staff. Then actually measuring the impact and performance of APIs, and the teams behind them. I know there are companies who are doing this, but since I tend to talk to more companies who are just getting started on their API journey, I’m not seeing anyone organization who is this advanced. Most companies I know do not even have an API design guide, let alone measuring the success of their API governance program. It is something I know a handful of companies would like to strive towards, but at the moment API governance is more talk than it is ever a reality.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We try - but I know we don’t have all the answers. If you’re working through these issues in your own org, please reach out; I’d love to compare notes. Studies show &lt;a href=&quot;https://hbr.org/2000/05/cracking-the-code-of-change&quot;&gt;&lt;strong&gt;70% of IT culture change efforts (DevOps, Cloud, Microservices, etc.) end in failure&lt;/strong&gt;&lt;/a&gt;. That’s a pretty depressing statistic. &lt;em&gt;Let’s work together to make things better.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now onto the questions.&lt;/p&gt;

&lt;h2 id=&quot;why-share-this-if-it-is-beneficial-isnt-it-in-your-companys-best-interest-in-keeping-it-all-bottled-up-for-yourselves&quot;&gt;Why share this? If it is beneficial, isn’t it in your company’s best interest in keeping it all bottled up for yourselves?&lt;/h2&gt;

&lt;p&gt;No, for the same reason Netflix doesn’t worry that sharing its expertise on microservice design in infrastructure management will lead to a rival streaming service. As Adrian Cockcroft, former grand poobah for Netflix architecture, &lt;a href=&quot;https://twitter.com/adrianco/status/648541527078100993&quot;&gt;once said&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“People copy the process they see but that is an artifact of a system that is evolving fast.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That, subsequently, has been colloquialized as “People try and copy Netflix, but they can only copy what they see, which is copying the results, not the process”.&lt;/p&gt;

&lt;p&gt;To explain it with a sports metaphor, the New England Patriots have been one of the most consistently dominant franchises for the past &lt;em&gt;fifteen years&lt;/em&gt;. If you gave any other team their playbook, is the same success guaranteed? Given the number of times assistants have left for other teams, &lt;a href=&quot;https://www.bostonglobe.com/sports/patriots/2017/09/20/bill-belichick-coaching-tree-remains-fruitless/e0QPZ8QouFIRLkoMmTdH8O/story.html&quot;&gt;the answer is no&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As, I hope, my presentation points out, employees’ sophistication, available infrastructure, company culture, and desired outcomes all play a part in defining the right path forward. What I showed is a guide, not a destination. Attempting to apply, whole cloth, without consideration for any of these factors is likely to result in an ill fit.&lt;/p&gt;

&lt;h2 id=&quot;the-tool-that-you-showed-for-lifecycle-management---is-it-open-source&quot;&gt;The tool that you showed for lifecycle management - is it open source?&lt;/h2&gt;

&lt;p&gt;No, unfortunately not at the time of this writing. For teams looking to try using OpenAPI documents as artifacts that proceed through a governance process, I would recommend giving &lt;a href=&quot;https://swaggerhub.com&quot;&gt;Swaggerhub&lt;/a&gt; a look. Or possibly &lt;a href=&quot;http://stoplight.io&quot;&gt;Stoplight.io&lt;/a&gt;. Neither appears to support configuration of editorial and approval workflows. However, many of the other features (issue tracking, source control, style validation) are present.&lt;/p&gt;

&lt;p&gt;I may be missing some alternatives. So many of the search results for “API lifecycle management” are about client credential issuance and request throttling. Or, if the tool does address design time considerations, the goal is for a single user, or team, to generate a mocks.&lt;/p&gt;

&lt;p&gt;When ‘reality checking’ our lifecycle approach, I repeatedly referenced commercial web publishing workflows. In that space, an item from any number of creators (usually an article, but sometimes a video essay or listicle) proceeds through a series of checks. Along the way, revisions occur which may send the item back for re-evaluation. That model resonated strongly with our need to involve numerous stakeholder groups (product, security, risk, architecture, etc.) on a design.&lt;/p&gt;

&lt;h2 id=&quot;much-of-your-talk-particularly-the-part-about-metrics-was-about-communication-to-executives-but-what-if-im-just-a-developer-what-if-my-software-governance-is-brokenhorriblepainfulno-good-how-do-i-change-that&quot;&gt;Much of your talk, particularly the part about metrics, was about communication to executives. But what if I’m just a developer? What if my software governance is broken/horrible/painful/no-good? How do I change that?&lt;/h2&gt;

&lt;p&gt;Being on the receiving end of a bad (or badly executed) process can be demoralizing. The first step is to understand why; often the effects may be well known (we have to wait a full two weeks after making a request before we get production credentials on our VPC!) without the reason (round tripping to get finance’s approval for licensing requires sign off from, eventually, an accountable executive at the VP level, or whatever). In my experience, even the most egregious pain points in most companies started with the best of intentions (let’s make sure our costs don’t spiral out of control because of a unchecked, erroneous deployment script).&lt;/p&gt;

&lt;p&gt;Next, identify those with the power to change the situation. Referring to techniques in &lt;a href=&quot;https://en.wikipedia.org/wiki/Blue_Ocean_Strategy&quot;&gt;Blue Ocean Strategy&lt;/a&gt;, it is not enough to articulate the problem (“It takes two weeks to get into production!”). Those with the power to change may, cognitively, understand why a change would be desirable. But they won’t be &lt;em&gt;motivated&lt;/em&gt; to change unless they have felt the pain themselves.&lt;/p&gt;

&lt;p&gt;“Feeling the pain” is much easier when explaining questionable technical decisions to technical stakeholders. It is more challenging, though not impossible, if those with the power to change the situation are non-technical. When this challenge was posed to my peers, &lt;a href=&quot;https://medium.com/@harmophone&quot;&gt;Tyler Singletary,  SVP of Product at Tagboard&lt;/a&gt; stated the importance of quantifying what the &lt;em&gt;material effect&lt;/em&gt; was, either in cost or lost revenue.&lt;/p&gt;

&lt;p&gt;Does the pain inherent in the process:
* Cause a significant time increase (and cost-overrun) of implementation?
* Hinder getting an integration with [target company X that has benefit Y that the company wants]?
* Lose Sales?
* Impede progress on Strategic Goal X?
* Cost more to support?&lt;/p&gt;

&lt;p&gt;Quantifying the pain makes it go from a geeky abstraction to a business reality. The similarly named (but totally different) &lt;a href=&quot;https://www.linkedin.com/in/taylorsingletary/&quot;&gt;Taylor Singletary, who does Slack Developer Relations&lt;/a&gt;, had this insight to share:
&amp;gt; “I think if I wanted a &lt;em&gt;technical&lt;/em&gt; executive to feel the pain, ask them to document something you know has barby edges. To make the &lt;em&gt;non-technical executive&lt;/em&gt; feel some version of that pain, ask them to read that same document out loud.”&lt;/p&gt;

&lt;h2 id=&quot;i-am-someone-now-in-charge-of-a-governance-program-what-do-i-do-to-get-started&quot;&gt;I am someone now in charge of a governance program. What do I do to get started?&lt;/h2&gt;

&lt;p&gt;First, congratulations! Second, condolences!&lt;/p&gt;

&lt;p&gt;IT governance is a challenging intersection of technical understanding, people management, business strategy, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Servant_leadership&quot;&gt;servant leadership&lt;/a&gt;. The first step is to recognize which one of those was the strength that resulted in your appointment to the position. In my experience, many that have been put in charge of their company’s API quality were picked because of their technical acumen; they have accrued a history of APIs that delivered meaningful business value and they’ve now been given authority to “fix” other APIs in the company. Having that, you’ll be in a better position to know what you’ll need to supplement, either with personal study or extra resources.&lt;/p&gt;

&lt;p&gt;Next, &lt;em&gt;define the desired outcomes&lt;/em&gt;. It is tempting to immediately begin defining rules to counter any tiny annoyance that might be at the top of mind. However, jumping to define rules is rushing to employ &lt;em&gt;tactics&lt;/em&gt; when what you need is to define is a &lt;em&gt;strategy&lt;/em&gt;. If the business objective is to grow paying clients to your API product by 2x over the next year, &lt;em&gt;does it matter that a contractor insists his compound word enumerated values are represented with underscores, rather than camelcase&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The purpose of a governance program is to &lt;em&gt;deliver business value&lt;/em&gt;, whether that is avoiding risk, creating efficiency, and/or maximizing return on investment. Make sure to have the long (and sometimes uncomfortable) conversations about expectations in order to define the desired outcomes. Then, work backwards to select the tactics necessary to support it.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/26/API-Blueprint-Followup/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/26/API-Blueprint-Followup/</guid>
        
        <category>REST API</category>
        
        <category>culture change</category>
        
        <category>API Governance</category>
        
        <category>API World</category>
        
        <category>Kin Lane</category>
        
        <category>Capital One</category>
        
        <category>Adrian Cockcroft</category>
        
        <category>Netflix</category>
        
        <category>OpenAPI</category>
        
        <category>SwaggerHub</category>
        
        <category>Spotlight.io</category>
        
        <category>metrics</category>
        
        <category>Blue Ocean Strategy</category>
        
        <category>Tyler Singletary</category>
        
        <category>Taylor Singletary</category>
        
        <category>servant leadership</category>
        
        <category>Blue Ocean Strategy</category>
        
        <category>conferences</category>
        
        
      </item>
    
      <item>
        <title>REST's 'Original Sin', and Other Things  &amp;#x2709;</title>
        <description>&lt;p&gt;It can be easy, after doing something for many years, to forget the original one's original constraints. We continue to accrue processes and practices, spackling over the cracks in our thinking. In this newsletter, Phil Sturgeon drops a reality check. Just how much of our API design is an outgrowth of HTTP/1.1's limitations? And what streamlining is at our disposal with HTTP/2? &lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-24&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-24&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/24/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/24/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Roger Jin</category>
        
        <category>microservices</category>
        
        <category>Péter Márton</category>
        
        <category>Bruno Pedro</category>
        
        <category>James Higginbotham</category>
        
        <category>Phil Sturgeon</category>
        
        <category>HTTP2</category>
        
        
      </item>
    
      <item>
        <title>Recapping Nordic API and RESTfest Confs  &amp;#x2709;</title>
        <description>&lt;p&gt;We're thick into conference season. [As I've written before](/2014/05/20/magiccircle/), events still retain power in an age of teleconferencing. However, second to being there is being able to catch up with the host of fine material made available afterwards. Front and center in this newsletter are recaps for Nordic APIs and RESTfest conferences. &lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-16&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/16/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/16/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>RESTfest</category>
        
        <category>Nordic APIs</category>
        
        <category>Bill Doerrfeld</category>
        
        <category>Oldrich Novak</category>
        
        <category>Zdenek Nemec</category>
        
        <category>Kin Lane</category>
        
        <category>Mark Boyd</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Reactive Microservices and Service Meshes  &amp;#x2709;</title>
        <description>&lt;p&gt;If there was a theme to much of 2017's RESTful API news, it has been strategies for dealing with microservice complexity. In this latest newsletter I, briefly, touch on two approaches: *reactive microservices* and *service meshes*. In addition to a handful of slide shows and a link to download a free book, I also cover **event storming**. Event storming is a promising technique for decomposing a problem space in a more approachable manner than domain driven design. Check it out!&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-10-reactive-microservices-and-service-meshes&quot;&gt;https://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-10-reactive-microservices-and-service-meshes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/10/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/10/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Jonas Bonér</category>
        
        <category>Event Storming</category>
        
        <category>Reactive Microservices</category>
        
        <category>Domain Driven Design</category>
        
        <category>Service Meshes</category>
        
        <category>Phil Calcado</category>
        
        <category>Christian Posta</category>
        
        <category>Kasun Indrasiri</category>
        
        <category>Daniel Bryant</category>
        
        <category>Toby Clemson</category>
        
        <category>Mehdi Medjaoui</category>
        
        <category>Oauth.io</category>
        
        <category>API Academy</category>
        
        <category>David Biesack</category>
        
        <category>Apiture</category>
        
        <category>Nordic API</category>
        
        <category>Kin Lane</category>
        
        
      </item>
    
      <item>
        <title>API Governance for IT Culture Change</title>
        <description>&lt;p&gt;Here is a copy of the presentation that I gave at API World 2017. I've had the fortune (or misfortune, as the case may be) to work on API platform governance programs for the past several years. This is a culmination of my lessons learned during this time.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide01.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
Hello everyone, my name is Matthew Reinbold and I work for Capital One. My team, the API Center of Excellence, helps developers create great API experiences. We are big advocates for the power of &lt;a href=&quot;/2016/06/02/ConsistencyAndCohesion/&quot;&gt;consistency and cohesion&lt;/a&gt; in API design. To be clear, my team doesn't write the APIs but we collaborate with the people that do.
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide02.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;I am curious - how do people learn about API practices? Where do you go for new tips and techniques?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many people (willingly) subscribe to two or more email newsletters? I happen to write one called &lt;a href=&quot;https://tinyletter.com/RESTAPINotes&quot;&gt;REST API Notes&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;How many people (willingly) follow industry people on Twitter? I'm Twitter's &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;@libel_vox&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;How many people use an RSS reader to keep up with blogs? Occasionally I post long form stuff on &lt;a href=&quot;https://matthewreinbold.com&quot;&gt;https://matthewreinbold.com&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I happen to be engaged on many fronts. As we go along, you'll see my contact info at the bottom of almost every slide. Please, if anything in this preso here raises questions or you have different insights let's talk about it. Let's have the kind of dialog that should be happening within your companies. Why do we need to help each other figure things out?&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide03.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
	
&lt;p&gt;&lt;strong&gt;Because change is constant&lt;/strong&gt;. And, in other news, the sky is blue and water is wet, right? We all accept this as being obvious. And yet, when it comes to managing software complexity, API or otherwise, within our organizations, we create rules, processes, and punishments for those things that deviate from our understanding of the world &lt;em&gt;today&lt;/em&gt;. We readily acknowlege change and yet build governance as if things won't.&lt;/p&gt;

&lt;p&gt;We can change the narrative. Governance doesn't have have to be restrictive. Instead, I'm here to paint a different picture, one where governance is an enabler of positive change.&lt;/p&gt;

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide04.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
We have to. The toolsets that developers would &lt;em&gt;like&lt;/em&gt; to use to solve their problems in the most efficient manner are expanding at an incredible rate. This is just a snapshot of things that my team has had to evaluate in some capacity in the past year.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide05.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;And pick your physical metaphor, be it a radar, or a cycle, but these new approaches are going to continue to come. &lt;/p&gt;

&lt;p&gt;That's why we're here and why APIs have been so incredibly successful. APIs are a strategy for dealing with change, whether they are web-based, RESTful, or otherwise. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide06.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
	
&lt;p&gt;Modularity of systems is a successful approach to dealing with change. Writing to the interface, rather than the implementation, means that when a better persistent data store comes along, or when a better framework presents itself, we can take advantage of that with a minimum amount of disruption to the rest of the company. &lt;/p&gt;

&lt;p&gt;That said, this isn't about technology. Or at least that is not why it is valuable. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide07.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Swapping out a data store under the covers is just intellectual noodling unless it delivers a tangible business value. At Capital One, the modularity that our API program delivers has allowed us to create &lt;strong&gt;value&lt;/strong&gt; on platforms that didn't even exist three years ago.&lt;/p&gt;

&lt;p&gt;Here we have three very different customer experiences: a mobile native application, a voice assistant, and a chatbot. When we started our API journey several years ago, did we know that we needed APIs to be a launch day partner for the Amazon Echo Show, or that we needed to translate an emoji to a financial transaction? No, of course not.&lt;/p&gt;

&lt;p&gt;However, being able to execute on an API Strategy has meant being able to deliver the kind of customer experiences that &lt;a href=&quot;https://www.consumeraffairs.com/news/capital-one-discover-win-honors-for-best-mobile-financial-apps-061917.html&quot;&gt;we won a JD Power award&lt;/a&gt; for a few months ago.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide08.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
	
However, one can't just say that you're adapting an API strategy to accommodate change and everything will magically work. The culture has to be has to be wired for change. Any strategic initiative that isn't aligned with the culture will, eventually, fail. 

&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide09.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
	
&lt;p&gt;What does culture change look like? Well, if you're Jeff Bezos, &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;it looks like this&lt;/a&gt;. The story goes that sometime around 2002, 2003, he sent out an internal memo to the Amazon staff dictating that all functionality should be exposed via standard interfaces. Anyone that &lt;em&gt;didn't&lt;/em&gt; do that would be fired. That &lt;strong&gt;culture change&lt;/strong&gt; to support a &lt;strong&gt;strategic API plan&lt;/strong&gt; is what lead to the eventual success of not only Amazon, but of Amazon Web Services.&lt;/p&gt;

&lt;p&gt;Now, you all seem like very lovely people. Even though we've just met, I can tell. But, I'm willing to bet you don't have the kind of executive authority to make these kinds of decrees in your own organizations.&lt;/p&gt;

&lt;p&gt;And that's how we end up with governance, or, &lt;em&gt;all too often&lt;/em&gt; &lt;strong&gt;bad&lt;/strong&gt; governance.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide10.png&quot; /&gt;

&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Culture is those things that are important to the organization. It defines the personality of the company and how that company response in times of stress. It is the shared belief in how things are done, and what things are important. It is how a company responds to change.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;bad&lt;/strong&gt; governance attempts to eliminate, or at least restrict, the amount of change that can occur at any given time. This is why companies have &quot;approved tech stacks&quot; that everybody must build to. Developers can only use certain frameworks. Or write in specific languages. Or use only one brand of laptop. Governance, in these situations, is not about the enablement of strategic delivery. Or about positive cultural change. Governance, here, becomes about risk management in the face of change. It says &quot;somebody screwed up, let's make sure they don't screw up again&quot;. Governance becomes a list of allowances that made sense in the moment in which they were drafted, and not easily changed for future considerations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When all you have is a hammer, every problem to be solved becomes a nail&lt;/strong&gt;. If you have standards that allow for web APIs, then all problems must be solved by APIs. If you're infrastructure requires protobufs, then a solution that gRPC is optimized for is off the table. &lt;/p&gt;

&lt;p&gt;Governance, rather than enabling, restricts the solution space. The culture either complies to this governance (thus lacking the capacity to innovate) &lt;strong&gt;or&lt;/strong&gt;, more commonly, &lt;em&gt;circumvents&lt;/em&gt; it. That's shadow IT and, by its very unaccounted-for nature, re-introduces the kind of risk this governance was meant to address in the first place.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide11.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;At Capital One, we had an opportunity. This is a small snapshot of our API footprint but it hints the challenges we faced in 2016. We had created a culture that incentivized the creation of APIs. But, as the CoE watched, we became increasingly concerned about whether teams were creating the &lt;em&gt;right&lt;/em&gt; APIs. Were these good APIs? Easy to use? Readily available to be combined into new products and services to deliver business value? Or had we created a culture which prized poorly written, unintuitive point-to-point integrations, because that added to the overall count? Had our culture optimized for the quantity of APIs, rather than the quality of APIs?&lt;/p&gt; 

&lt;p&gt;More importantly, if that proved to be the case, how would we change the culture? &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide12.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;As the CoE began to wrestle with the problem, a common question that I heard several times was &quot;Why aren't the teams following the rules?&quot; Among many in our leadership, the assumption was that if we just crafted the &quot;write good APIs&quot; rule, then our problems would be solved. &lt;/p&gt;

&lt;p&gt;That wasn't going to happen. What we needed, instead, was a systematic approach that incentivized desired outcomes and dynamically, holistically reacted to changes in the landscape.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide13.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
	
&lt;p&gt;The first part was defining a healthy ecosystem. Applying policy on an API-by-API basis meant we risked &lt;em&gt;not seeing the forest for the trees&lt;/em&gt;. Stepping back, we recognized that we were entrusted with a complex ecosystem. And like a complex ecosystem, there were some actions that would help it flourish. There were also things that, like invasive species, could jeopardize the health.&lt;/p&gt;

&lt;p&gt;Once we felt we adequately understood the terrain, the second part was determining how to guide teams from where we were to where we needed to be. There are many ways to cross a chasms. To do so successfully means acknowledging the existing culture. At Capital One, we have a very heavy preference on powerpoint decks, for better or for worse. Engaging with people means meeting people where they are, on their terms, to start a dialog.&lt;/p&gt;

&lt;p&gt;The third piece is ensuring that we're measuring our performance. I'm excited to meet my governance peers from other industries. I'll ask them how they quantify success and they'll all too often refer to their published API Style Guide. And I'll ask them how they know that it is positively working. Unfortunately, many don't have a good answer.&lt;/p&gt; 

&lt;p&gt;Without some measurement of performance, a governance effort won't be able to determine progress toward a target state, the effectiveness of initiatives, or illustrate the journey for executive leadership. That is not an effective way to run a program or ensure business value is being created. &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide14.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Let's dig deeper into each of these parts. Having a healthy, reactive ecosystem does not mean that there are no rules. Reverting to the wild west, where freewheeling console cowboys fire off whenever (and whatever) they want is no more a guarantee of delivering on business value than bureaucratic, dictatorial, and centrally planned systems. &lt;/p&gt;

&lt;p&gt;Certain things still needed to be defined and enforced. But it isn't &lt;em&gt;all&lt;/em&gt; the things. This is the principle of &quot;&lt;strong&gt;selective standardization&lt;/strong&gt;&quot;.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide15.png&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;

&lt;p&gt;Picking sides is necessary because REST APIs follow an architectural style, not pattern. It's not a specification and that's a big reason you'll find all manner of religious flame wars over &lt;em&gt;this&lt;/em&gt; approach verses &lt;em&gt;that&lt;/em&gt;. However, for the sake of getting work done, there's a need to identify those things that are important for efficient operations and ensure that their adopted uniformly across an organization.&lt;/p&gt;

&lt;p&gt;Take API versioning. I have two approaches presented here, but there are more. In this case, we want to ensure that a developer with API experience in Plano can leverage their experience and utilize their learned patterns when they attempt to use an API created by teams in northern Virginia. In this case, it is less about being &quot;right&quot;, but selectively standardizing those things that add value in being consistently implemented across the organization.&lt;/p&gt;

&lt;p&gt;And then, of course, you also want to ensure that standards are protecting the long term health from detrimental practices. Like the pictured cough syrup, there's a lot of approaches that, in the short term, &lt;em&gt;appear&lt;/em&gt; to get the job done. Alcohol, cannabis, chloroform, and morphine probably solve the problem in the short term (I'm guessing). But do that on a regular basis and a body will have some serious, long-term ramifications.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide16.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;I illustrate the fallacy of best practices by talking about a different interface that we're all familiar with, the electrical outlet. Which one of these is the &quot;best&quot; way of conducting electrical current? Hopefully, you'll agree with me that it is contextual; where you are has a lot to do with the interface you're likely to see.&lt;/p&gt; 

&lt;p&gt;But imagine the pain it would be if every outlet in a house had a slightly different outlet. How difficult would it be just to plug something in and get on with work if every interface was seemingly at random? How cumbersome would having to manage all those adapters be?&lt;/p&gt;

&lt;p&gt;I try to refrain from using the phase &quot;best practice&quot; when it comes to the undefined, or subtle, nuance around API design. To say something is &quot;best practice&quot; strongly implies that everything else is &quot;worst practice&quot;. Reality is that it may just be different, but - for the sake of consistency - we haven't adopted it in our house. Instead, I refer to &quot;common practice&quot;. The documentation of this &quot;common practice&quot;, or selective standardization isn't a bad thing.&lt;/p&gt;

&lt;p&gt;However, this is where I see many organizations stop. They write an API style guide, publish it, and then wonder why the haphazard adoption by well-meaning volunteers seems to have created more problems than it solved.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide17.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;At minimum, the standards must be a journey, not a destination. A key component to &quot;selective standardization&quot; is knowing what to select. It is one thing for us in our ivory tower to throw darts at market forces and team needs. It is entirely another to repeatedly engage with those doing the work.&lt;/p&gt;

&lt;p&gt;Our coaching effort identifies those passionate practitioners throughout our lines of business who have raised their hands and said, &quot;getting this right is important to my teams and me&quot;. Coaches not only receive additional training that they then apply to their teams. They also earn access to evolving our standards.&lt;/p&gt;

&lt;p&gt;In this way, standards aren't something that are dictated to teams. Teams drive the standards. These aren't alien requirements from another planet. They see their own needs and concerns reflected back at them. That is an incredibly powerful motivator toward acceptance and buy-in.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide18.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;After identifying some aspects of a healthy ecosystem we now need to help teams traverse it. Each team is at a different point in their journey, and different points of an API lifecycle require different interactions. &lt;/p&gt;

&lt;p&gt;At Capital One, we have a four-phase lifecycle for API development: &lt;em&gt;planning&lt;/em&gt;, &lt;em&gt;design&lt;/em&gt;, &lt;em&gt;development&lt;/em&gt;, and &lt;em&gt;deployment&lt;/em&gt;. An OpenAPI description is the artifact that progresses through the process. Not only is it used to capture the team's intent, but approved, machine-readable descriptions are what enable automatic publishing to a service discovery portal and provisioning to our API gateway.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide19.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
A piece of our lifecycle tooling may look familiar. After a team has provided some metadata during their planning stage, they proceed to design their API in a modified version of the Swagger Editor. 	
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide20.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;When they click on the 'eyeball', in the upper right, teams get a preview of what their documentation will look like in the service discovery portal. We had different needs in how we wanted our content organized so we provided a different rendering to the default Swagger UI. &lt;/p&gt;

&lt;p&gt;It is during this preview that any violations to those &quot;selective standards&quot; are called out. These are presented to teams so that they can fix the errors &lt;em&gt;prior&lt;/em&gt; to engaging my team in design discussions. This is incredibly powerful. Rather than spending time pointing out that teams can't submit a body as part of an HTTP GET request, for example, reviewers are freed up to address higher level concerns (more on that in a moment).&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide21.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Those discussions are captured and maintained alongside the API description. The history of how the API design evolved to be the way that it is can be seen by clicking on the word balloon. Previously, conversation would get lost in email threads or chat channels. Not only was that incredibly hard for people to track down if they had questions later, but that history became a black box for new team members. Without the history, they had no insight into what were highly contested aspects that made the API what it was, and which pieces were fair game to be changed.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide22.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The lifecycle tool uses an enterprise instance of Github as the system of record. So, in addition to saving the conversational discussion, we can also easily do diffs between versions of an approved API design.&lt;/p&gt;

&lt;p&gt;Having an API design artifact that moves through a lifecycle, with transparent and maintained history, enables collaboration. But what is the direction we're moving teams toward?&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide23.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;When I need to illustrate web API design maturity, I've started to use a pyramid. At the bottom are those APIs that provide some functionality over HTTP and little else.&lt;/p&gt;

&lt;p&gt;The next level are those APIs which don't just expose functionality, but are also reliable. An APIs that is down Thursday nights from 3-5am because of backend batch processing may be functional, but not as reliable as we'd like. Likewise, if an API can't (or won't) scale to meet demand, it also isn't reliable.&lt;/p&gt;

&lt;p&gt;Intuitive APIs are where we begin to see thought put into the developer experience (or DX). At this level we're thinking outside-in, rather from the data record-out. Key traits are behaving in a predictable manner, and exhibiting the selective standardization that we previously defined. &lt;/p&gt;

&lt;p&gt;Moving a tier above that are empowering APIs. Beyond just having a good developer experience, these APIs also contribute direct, or nearly direct business value. In the case of our Bank Account Starter and Credit Offer external APIs, we can trace significant new revenue and accounts booked through affiliate usage. These APIs have grown the funnel, or empowered, our existing lines of business in meaningful ways.&lt;/p&gt;

&lt;p&gt;At the top of the pyramid are transformative APIs. These are rare, but powerful. These are APIs that don't just expand existing lines of business, but open up brand new opportunities. We're currently working on some ideas but, as I said, these are some of the hardest APIs to create successfully. &lt;/p&gt;

&lt;p&gt;Should all APIs that we product be transformative? No. That's why the pyramid is shaped the way it is, with more reliable APIs than intuitive, more intuitive than empowering, etc. What is important is that, during collaboration, we look for opportunities to advance the work; if a team only has a functional API, can we make it reliable? If it is functional and reliable, can we also make it intuitive?&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide24.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The last point I'll make about helping teams navigate this landscape is that simply posting an API style guide, or sending out a firmly worded email is a poor substitute for rolling up one's sleeves and engaging directly with developers. Whether it is San Francisco, in the top picture, northern Virginia on the left, or in Plano, TX on the right building trust is still something done best face to face; trust that the API CoE has the developer's best interests at our heart, and trust in our developers to do the right thing. Believing that API stands for &quot;assume positive intent&quot; is much easier when you've seen eye to eye with someone. &lt;/p&gt; 

&lt;p&gt;After we've left, it is the responsibility of the coaches to continue being the approachable, friendly face devs work with on their questions and concerns. They are what turn a one-off training into an ongoing, living discussion in their respective areas.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide25.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
	&lt;p&gt;Enough of this Kumbaya crap. It may sound like a great story. But how do we know it's working?&lt;/p&gt;

	&lt;p&gt;Whether it is because it is hard or because it is an afterthought, meaningful metrics at the API program level are hard to find. And that is unfortunate. Business leaders have invested years, and sometimes tens of millions of dollars, towards service development. When asked if these technology initiatives have been successful, these same leaders have little to point to other than statements like: &quot;I've deployed 47 APIs this year, and my peer on the west coast has 30 in production, so my API folks must be better&quot;. Hearing it out loud, hopefully that sounds as ridiculous as it is. But, in the absence of any other KPI, they go with what they have. &lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide26.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
	&lt;p&gt;As this quote by Tom Peters implies, metrics don't exist in a sterile clean room. They actually drive behavior. Metrics can drive culture change in an organization but they must be carefully monitored for unintended first (and second) order effects. &lt;/p&gt;

	&lt;p&gt;I want emphasize that the following metrics I'm about to cover are meant to address specific concerns that existed as we surveyed our landscape. Your company will be different. Attempting to implement these without consideration of your specific situation is likely to lead to disappointing results. &lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide27.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;As we stepped back and attempted to answer what makes a good API, we saw three categories of numbers emerge: &lt;em&gt;conformance&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt;, and &lt;em&gt;transformative&lt;/em&gt; metrics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conformance&lt;/strong&gt; is the adherence of an API design to our standards. These are the rules and usage patterns that can be checked for, automatically, in our lifecycle tooling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; is how responsive an API is when called. These are easily quantifiable metrics and often the first numbers that people think of when reaching for numbers.&lt;/p&gt;

&lt;p&gt;Together, however, conformance and performance are not enough. Just meeting performance expectations without deviation from the rules doesn't make a great API. It is like typing away at a word processor with an expected words-per-minute without creating a spelling or grammatical mistake; while you might not have any squiggly lines anywhere on the page, it doesn't mean that you've written a compelling story. &lt;/p&gt;

&lt;p&gt;That is where the &lt;strong&gt;transformative&lt;/strong&gt; metric comes in. This component, which I'll talk about in a moment, allows us to capture the &lt;em&gt;subjective&lt;/em&gt; nature of the APIs in a way that can be tracked and acted upon.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide28.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;In this first slide, the number of APIs submitted to review without any deviations from our standards are broken out by LOB. For much of 2016, many of our producing devs were submitting things to collaboration that only were free from policy deviations only 15-20% of the time. My team, subsequently, had to spend precious consultation time pointing out discrepancies rather than on moving to transformative experiences. Given our desire to move teams up the quality pyramid, this was a problem.&lt;/p&gt;

&lt;p&gt;In January of this year, we introduced self-service validation into the tool that could be done &lt;em&gt;prior&lt;/em&gt; to submitting for review. With this capability, development teams are able to correct their mistakes on their own time, and the CoE can devote more of the review to higher order tasks.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide29.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;A vast majority of the APIs that Capital One produces are for internal use only. And while our external work has clearly defined service level agreements (SLAs), in a weird quirk, many of our internal APIs do not. This concerned my team for awhile but when we'd ask for someone to define them, we'd never hear back.&lt;/p&gt;

&lt;p&gt;So we took the opportunity to define our own in order to create a culture change. We defined a three-pronged SLA: 99.95% of the responses should not have a status code in the five-hundreds, the mean response time needed to be under 500 milliseconds, and 95% of the calls served needed to be less than two seconds. &lt;/p&gt;

&lt;p&gt;We spent time deriving these values but, ultimately, they were a guess on our part. &lt;em&gt;But their very existence&lt;/em&gt; means teams now have to begin considering whether their APIs meet this behavior. And, for teams that &lt;em&gt;have&lt;/em&gt; considered their performance and published their own SLAs, we happily apply those numbers to the performance that we can see. &lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide30.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Another example where we're using metrics to drive cultural change is with what we call &quot;stalled&quot; APIs. These are API descriptions that development teams begin but, six months after the design has been approved, still haven't made it to production.&lt;/p&gt;

&lt;p&gt;While we had a story here or there guessing what might be happening, this metric allowed us to capture the effects of this behavior at a LOB level, as well as identify whether it is getting better or worse. &lt;/p&gt;

&lt;p&gt;Is this the result in shifting product strategy? Frequent team disbandment and reorganization? Before we could start addressing those problems, we first had to identify that we had one.&lt;/p&gt; 	
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide31.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;NPS stands for &lt;em&gt;net promoter score&lt;/em&gt;. It encapsulates a variety of the subjective nuances comprising an experience. It is very handy in capturing the &quot;goodness&quot; of an API design.&lt;/p&gt;

&lt;p&gt;There was a couple of ways we could have approached this scoring. However, executive leadership was already well versed in what NPS is. We've used it forever to gauge the customer experience on a variety of our services and products. &lt;/p&gt;

&lt;p&gt;It is not enough to just ask a person scoring an API &quot;is this good?&quot;. One of the subtly clever aspects of NPS is that it reframes the question to put a reviewer's professional reputation at stake. Rather than asking &quot;Do you like this API?&quot;, NPS asks &quot;Would &lt;strong&gt;you&lt;/strong&gt; recommend this API to &lt;strong&gt;your peers&lt;/strong&gt;?&quot;. Everyone likes to think the are arbiters of style and distinction. As such, they take great pains to not recommend sub-par experiences.&lt;/p&gt;

&lt;p&gt;The lowest possible score for NPS is -100 and our sample scores show we can do better. However, those scores aren't surprising given that we've been producing little more than functional and reliable APIs for years. The lack of higher-order, &lt;em&gt;transformative&lt;/em&gt; APIs shows up in these scores. But now that we're measuring, we can track whether ongoing initiatives are making it better or whether we need to do something else.&lt;/p&gt; 
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide34.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;There are some additional metrics that I won't mention here. The point is that these are an ongoing conversation. When a metric outlives its usefulness, or we find it is incentivizing the wrong behavior, we change.&lt;/p&gt; 

&lt;p&gt;We take all of that data and boil it into the single visualization you see here. These radar plots allow leadership to, at a glance, see their organization's API quality relative to their peers. As quality along an axis increases, the shape grows outward, like a balloon.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide35.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;The CoE packages these insights together once a month and sends them to the accountable executive over each line of business. Usually this report includes not only observations, but tactical items that can be done to positively impact a metric or metrics. The executive directs coaches within their area to implement those changes, if they deem them necessary. Finally, the coaches then work with their development teams.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide36.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
	&lt;p&gt;That is a brief overview of how we've attempted to create a governance program that is change enablement while incentivizing culture change. We define healthy ecosystems, help teams navigate that terrain, and then measure our effectiveness along the way.&lt;/p&gt;

	&lt;p&gt;A common comment that I hear, at this point, is that &quot;This sounds great, but we don't have the budget for this&quot;. Or &quot;we need a bigger team&quot;. I'd agree; if we assume that making a massive change can only happen with a massive amount of resources, then we're likely to end up on the unpleasant end of a political tug-of-war.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide37.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;In regards to doing more with less, and seeding the cultures to make that approach viable, I highly recommend the book, Blue Ocean Strategy The &lt;em&gt;majority&lt;/em&gt; of the book is about identifying new business markets and, while interesting, that's probably not what most people in this room do. However, the last third talks about creating successful culture change in order to compete in those markets. It is amazingly relevant to discussions on software governance. &lt;/p&gt;

&lt;p&gt;One of the techniques it discusses is the relationship of &lt;em&gt;kingpens&lt;/em&gt;, &lt;em&gt;fishbowls&lt;/em&gt;, and &lt;em&gt;horse-trading&lt;/em&gt;. Going back to our API quality report work, we don't keep those numbers to ourselves. From the beginning, the distribution was about getting the report to the people, the kingpens, with the authority (and the responsibility) to act on the findings.&lt;/p&gt;

&lt;p&gt;Next, the report acts as a fishbowl where each of the kingpens can see how the other is doing. In my experience, executives didn't get to where they are without being a tad competitive. Publishing results and easing comparative analysis creates a natural driver for action; each of the leaders wants to be number one among their peers.&lt;/p&gt;

&lt;p&gt;The final element is horse-trading. Over time, sometimes by sheer inertia, certain areas accrue an abundance of resources despite requiring different resources. And my CoE doesn't have all the time or energy to produce everything that we feel would be impactful. In these cases, we can approach a LOB that is doing great work in a specific area and offer to share their story as an example for the wider org. In return, we ask for help producing those insights we may not have been able to do otherwise. We have an audience. They have manpower. A careful audit of what one has and the judicious application of horse trading can result in the kind of effects one might only associate with a &quot;bigger budget&quot;.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide38.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;In conclusion, change is constant. If the role of governance is to arrive at the &lt;strong&gt;perfectly optimized system&lt;/strong&gt; for &lt;em&gt;today&lt;/em&gt;, we will find ourselves perpetually frustrated &lt;em&gt;tomorrow&lt;/em&gt;. Day after day, year after year, that theoretical perfection will seem more and more distant.&lt;/p&gt;

&lt;p&gt;Instead, if we look to governance not as a destination, but a journey we are on, then change is just part of the landscape.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide39.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;I'll end on one final Tom Peters quote: &quot;Excellent firms don't believe in excellence - only in constant improvement and constant change.&quot;&lt;/p&gt;

&lt;p&gt;Build a culture whose governance processes are optimized for change.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2017/10/api-governance-blueprint/Slide40.png&quot; /&gt;&lt;figcaption class=&quot;slide&quot;&gt;
&lt;p&gt;Thank you for your attention. My name is Matthew Reinbold. I am the Lead for the Capital One API Center of Excellence and, if you'd like to continue this discussion my contact information is listed here.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;That's it for the presentation. But, if you're interested in more, check out &lt;a href=&quot;/2017/10/26/API-Blueprint-Followup/&quot;&gt;the most commonly asked questions (and answers)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/03/API-Governance-Blueprint/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/03/API-Governance-Blueprint/</guid>
        
        <category>REST API</category>
        
        <category>presos</category>
        
        <category>API World</category>
        
        <category>Capital One</category>
        
        <category>API Governance</category>
        
        <category>Jeff Bezos</category>
        
        <category>metrics</category>
        
        <category>NPS</category>
        
        <category>conferences</category>
        
        
      </item>
    
      <item>
        <title>New Frontier Same as the Old Frontier  &amp;#x2709;</title>
        <description>&lt;p&gt;Runscope acquired by CA, GraphQL has been re-licensed, and making an API... escape room? All this and more in the latest edition of the REST API Notes email newsletter.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-10-02&quot;&gt;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-09-18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/10/02/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/02/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>API World</category>
        
        <category>Matt McLarty</category>
        
        <category>microservices</category>
        
        <category>Erik Wilde</category>
        
        <category>API Days</category>
        
        <category>Nicolas Grenie</category>
        
        <category>Runscope</category>
        
        <category>CA</category>
        
        <category>John Sheehan</category>
        
        <category>Facebook</category>
        
        <category>GraphQL</category>
        
        <category>Bruce Perens</category>
        
        <category>Irakli Nadareishvili</category>
        
        
      </item>
    
      <item>
        <title>API Style, Versioning, and Adoption  &amp;#x2709;</title>
        <description>&lt;p&gt;It is with more than a little nostalgia that I'm speaking in San Jose, this week, for the API World Conference. I'm hear to gauge where the community is in their API journeys. Meanwhile, in the newsletter, I cover a great update to the PayPal API style guide, cover Darrel Miller's approach to versioning, and point to a great microservices rant by Gary Olliffe.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-09-25&quot;&gt;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-09-18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/09/25/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/25/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Gary Olliffe</category>
        
        <category>Darrel Miller</category>
        
        <category>Nikhil Kolekar</category>
        
        <category>API World</category>
        
        <category>San Jose</category>
        
        <category>Adobe</category>
        
        <category>PayPal</category>
        
        <category>Azure</category>
        
        <category>Dan Ciruli</category>
        
        
      </item>
    
      <item>
        <title>Recapping RESTfest  &amp;#x2709;</title>
        <description>&lt;p&gt;RESTfest happens every year in Greenville, SC. Despite its small size, it always is a source notable REST events. In this edition of REST API notes, I cover a handful of announcements, including Erik Wilde's &lt;em&gt;linksets&lt;/em&gt; proposal. This, and more, in the newsletter.&lt;/p&gt;

&lt;p&gt;You can find the web version of the newsletter email here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-09-18&quot;&gt;http://tinyletter.com/RESTAPINotes/letters/rest-api-notes-for-2017-09-18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past editions of the newsletter can be found here: &lt;a href=&quot;http://tinyletter.com/RESTAPINotes/archive﻿&quot;&gt;http://tinyletter.com/RESTAPINotes/archive﻿&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A comprehensive list of upcoming web events that I maintain can be found at &lt;a href=&quot;http://webapi.events&quot;&gt;webapi.events&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2017/09/18/RESTAPINotes/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/18/RESTAPINotes/</guid>
        
        <category>REST API Notes</category>
        
        <category>Erik Wilde</category>
        
        <category>RESTfest</category>
        
        <category>linksets</category>
        
        <category>hypermedia</category>
        
        <category>Stephen Mizell</category>
        
        <category>Mark Foster</category>
        
        <category>microservices</category>
        
        <category>GraphQL</category>
        
        <category>Dennis Walsh</category>
        
        
      </item>
    
  </channel>
</rss>
