<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Reinbold</title>
    <description>This is the website for Matthew Reinbold (that's me!). I am the Director for API Platform Ecosystems and Digital Transformation for Postman. I also write the 'Net API Notes' email  newsletter and curate NetAPI.events. 
</description>
    <link>https://matthewreinbold.com/</link>
    <atom:link href="https://matthewreinbold.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Aug 2021 08:50:07 -0500</pubDate>
    <lastBuildDate>Fri, 27 Aug 2021 08:50:07 -0500</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>'Power-Over' Strategies And How Reporting Can Backfire</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/08/fish.png&quot; alt=&quot;A picture of gold and white fishes swimming in water.&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
Photo of gold and white fishes &lt;a href=&quot;https://unsplash.com/@sigmund&quot;&gt;Sigmund&lt;/a&gt; on Unsplash.
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;A problematic aspect of being a change agent is the lack of proven, frequently discussed techniques for making change happen. For example, in the API space there’s no end to people putting forth “best practices”. But getting teams to agree which practices are best, let alone adopt them? That advice is much harder to come by.&lt;/p&gt;

&lt;p&gt;Several years ago, &lt;a href=&quot;https://matthewreinbold.com/2017/10/03/API-Governance-Blueprint/&quot;&gt;I briefly touched on some approaches I was trying as head of an API Center of Excellence&lt;/a&gt;. In that role, one of my responsibilities was to improve API quality and practice throughout the organization. However, like so many change agents, I didn’t have formal authority over the people who needed to change their practices. With hindsight, I want to share my experience with one influence approach, intriguingly called &lt;em&gt;Kingpins and the Fishbowl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I read about kingpins and fishbowls in the book &lt;a href=&quot;https://www.amazon.com/Blue-Ocean-Strategy-Uncontested-Competition/dp/1591396190&quot;&gt;Blue Ocean Strategy&lt;/a&gt;. The book is mostly about finding new markets (the “blue ocean”) for product dominance. However, the latter third included practical advice for getting people engaged in something new; something that any change maker deals with.&lt;/p&gt;

&lt;p&gt;The first part of the strategy is to identify the key individuals, or “kingpins”. These people are not just impacted by the change you’re proposing but have the authority to act on it. &lt;a href=&quot;https://matthewreinbold.com/2021/08/19/Three-Systems-Theory-Approaches-To-Governance/&quot;&gt;In a D1 organization&lt;/a&gt;, these could be, but are not limited to, executives with hierarchal power. The high-flyer with the ear of leader (but without formal authority) is also a candidate.&lt;/p&gt;

&lt;p&gt;With the kingpins identified, the next step is creating the fishbowl. The fishbowl is a means by which the kingpins’ performance (or those they are responsible for) is easily compared and contrasted. This review may manifest as an internal dashboard or regular report to executives. Colloquially, people might also know this approach as “naming and shaming”. &lt;a href=&quot;https://apimetrics.io/category/monthly-report/&quot;&gt;APIMetrics does this publicly&lt;/a&gt;. &lt;a href=&quot;https://apimetrics.io/api-outages/&quot;&gt;A lot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The kingpins and fishbowls technique &lt;em&gt;sounds&lt;/em&gt; plausible: identify those that have authority to make the designed change, put them in a dashboard showing how deficient they are compared to their peers, watch those trend lines change for the positive! As &lt;a href=&quot;https://matthewreinbold.com/2017/10/03/API-Governance-Blueprint/&quot;&gt;I said in my introduction of the topic&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In my experience, executives didn’t get to where they are without being a tad competitive. Publishing results and easing comparative analysis creates a natural driver for action; each of the leaders want to be number one among their peers.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The approach is not without merit. I did see some success in limited areas. However, looking back, any success was vastly dwarfed by the antagonistic relationships that such reporting. To understand why it is crucial to discuss Mary Parker Follet’s concepts of &lt;em&gt;power-over&lt;/em&gt; and &lt;em&gt;power-with&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mary Parker Follet was a contemporary of Frederick Taylor, the “father” of management theory. But while Taylor believed “the boss knows best”,  Mary’s ideas on power and authority were very different. She defined &lt;strong&gt;power-over&lt;/strong&gt; as a situation where one person has power over
another person. This manifests as dominance and coercion. One side vies for power over another, at best trying to influence the other to concede its
position.&lt;/p&gt;

&lt;p&gt;A kingpin may not oppose the idea of API design improvement. However, design may differ in their priority compared to someone, like the Center of Excellence head, whose sole job is design improvement. Kingpins have no shortage of things vying for their time and energy. Those people create systems for triaging what is worth entertaining &lt;em&gt;and what threatens those limited resources&lt;/em&gt; to remain successful.&lt;/p&gt;

&lt;p&gt;A metric originating from outside their preview, attempting to coerce their priorities list and consume oxygen will not be enthusiastically embraced. While they may not frame it in terms of a “power-over” play, they will resent the attempt all the same and treat the effort with suspicion, if not as a threat. Having sat in those conversations, I can confirm that there are better ways of spending one’s time.&lt;/p&gt;

&lt;p&gt;Put in a similar position today, I would instead attempt what Follet referred to as &lt;em&gt;power-with&lt;/em&gt;. Power-with is collaborative, establishing common ground from which both sides identify and discuss important desires. She called these discussions &lt;em&gt;integration&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thepowerofcollectivewisdom.com/pdfs/power-over.pdf&quot;&gt;From the power of collective wisdom website discussing Follet&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“She [Follet] understood that true leaders do not command obedience through force or manipulation but rather by giving expression to external realities and the interior aspirations of others.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I talked about the priority mismatch. &lt;em&gt;What I should have done&lt;/em&gt; is better understood the constraints and challenges these leaders faced. Rather than assuming that design quality improvement job #1, I should learn what their actual stack ranking, and then integrated how better design could deliver on that. I should have had regular, ongoing conversations, independent of whatever reporting cadence existed, to co-evolve the agendas and make us partners in each others’ success. The metrics needed to be in service of our ends, not their activities being a means to achieving mine.&lt;/p&gt;

&lt;p&gt;The Kingpin in the Fishbowl technique may seem like change is only a dashboard away. However, based on my experience, it is an example of &lt;em&gt;power-over&lt;/em&gt; rather than &lt;em&gt;power-with&lt;/em&gt;. Before attempting to coerce an influential leader’s priorities, carefully consider how that message may antagonize rather than compliment. If possible, pursue a &lt;em&gt;power-with&lt;/em&gt; strategy instead.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Aug 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/08/27/PowerOverStrategiesAndHowReportingCanBackfire/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/08/27/PowerOverStrategiesAndHowReportingCanBackfire/</guid>
        
        <category>API governance</category>
        
        <category>organizations</category>
        
        <category>Blue Ocean Strategy</category>
        
        <category>metrics</category>
        
        <category>Mary Parker Follet</category>
        
        <category>Frederick Taylor</category>
        
        <category>dashboards</category>
        
        
      </item>
    
      <item>
        <title>Three Systems Theory Approaches to API Governance</title>
        <description>&lt;p&gt;When there is more than one team in an organization, things need to be coordinated. This is especially true when it comes to organizations seeking consistent API design despite have those designs having different authors. Developers, designers, architects, and product managers &lt;em&gt;intuit&lt;/em&gt; that consistent design helps them achieve greater speed and scale. Further, a common approach makes integration more intuitive and can reduce ongoing support costs. But getting teams aligned is a whole separate, more significant challenge when compared to just creating the API.&lt;/p&gt;

&lt;p&gt;The social scientist couple, Fred and Merrelyn Emery, identified two basic patterns for coordinating activities across multiple teams. They named them “&lt;em&gt;first design principle&lt;/em&gt;” and “&lt;em&gt;second design principle&lt;/em&gt;”, or &lt;em&gt;DP1&lt;/em&gt; and &lt;em&gt;DP2&lt;/em&gt;, respectively. Later, they added the concept of the &lt;em&gt;laissez-faire&lt;/em&gt; organization.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/08/dp1-and-dp2.png&quot; alt=&quot;The Emery's depecition of DP1 and DP2 organizations.&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;The Emerys' depecition of DP1 and DP2 organizations.&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;laissez-fair-governance&quot;&gt;Laissez-fair Governance&lt;/h2&gt;
&lt;p&gt;Laissez-faire is defined as the absence of design principles. Nearly all API ecosystems start as laissez-faire. API design is not a coordinated activity in the beginning but rather a technical means-to-an-end. Laissez-faire is understandable, even desirable at this point in an organization’s journey. An organization’s culture and context define a significant amount of the unique pain points that emerge from inconsistent approaches; these can be difficult to predict. Further, if the API ecosystem does not require further scaling or evolution beyond fragmented, random one-off efforts, a laissez-faire approach to consistency may be appropriate.&lt;/p&gt;

&lt;h2 id=&quot;dp1-governance&quot;&gt;DP1 Governance&lt;/h2&gt;
&lt;p&gt;However, given the necessity of APIs to value delivery in digital transformation efforts, &lt;em&gt;most&lt;/em&gt; businesses &lt;strong&gt;can’t stop with just laissez-faire design approaches&lt;/strong&gt;. In these cases, leadership will establish a DP1 organizational structure; they’ll introduce a manager or supervisor whose explicit job is to coordinate parts to achieve an outcome. In API design, the role of this “API reviewer” or “Center of Excellence” group is to achieve greater consistency for the interfaces produced.&lt;/p&gt;

&lt;p&gt;On the one hand, responsibility for achieving a quality outcome is straightforward. A single, highly-trained individual (or group) could apply to an entire domain. Ownership of the improvement activities is clear; activities like problem assessment, activity creation, oversite, progress reporting, and feedback gathering.&lt;/p&gt;

&lt;p&gt;On the other, DP1 implementations of governance also have notable downsides. For one thing, it can be difficult for any person from a single discipline (architecture, engineering, etc.) to also excel in the  myriad of additional skills this type of oversite requires. These skills include diplomacy, consensus-building, project management, and influencing with minimal formal authority, in addition to having a rich and deep understanding of API nuance. Career progression for these diamonds-in-the-rough people is also unclear.&lt;/p&gt;

&lt;p&gt;For development teams, especially for those used to a laissez-faire design approach, the introduction of this new supervisor or group can be met with hesitation, even suspicion. They may feel a loss of autonomy or lowered morale over what they perceive as a condemnation of their past work. When the relationship is strained and feedback loops poor, the introduction of this design leadership comes across as “ivory tower architecture”.&lt;/p&gt;

&lt;p&gt;It is these DP1 organizational environments that spring to mind when we hear the word “governance”: bureaucratic, dictatorial, and process-heavy hierarchies. These &lt;em&gt;worst-case&lt;/em&gt; scenarios cause individuals to feel robbed of agency without the opportunity of recourse. Not everything is worse-case, of course. The most common case is ineffectual, flaccid governance: governance that is tolerated during the production of a token wins. However, the overall API program/platform cannot deliver on the grand transformation promised at the onset.&lt;/p&gt;

&lt;h2 id=&quot;dp2-governance&quot;&gt;DP2 Governance&lt;/h2&gt;
&lt;p&gt;In a DP2 approach, regulation of design standards (and subsequent quality outcomes) is built into the teams themselves. Individuals are expected to manage the coordination across their boundaries. For example, when designing an error object, Ramesh would consult with his peer on another team, Tara. Tara would have experience creating something similar from her work with Maria and Jose who, likewise, are assigned to other teams. And so on and so forth.&lt;/p&gt;

&lt;p&gt;Those familiar with Brooks’ Law might notice their Spider-sense tingling. Putting the onus to “carry water” on individuals creates significant communication overhead, particularly as the number of people required to coordinate increases.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/08/brooks-law.jpg&quot; alt=&quot;A picture depicting the increasing lines of communication described by Brooks' Law.&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;A picture depicting the increasing lines of communication described by Brooks' Law.&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Training is one approach to lessen the amount of communication required.   “If everyone just &lt;em&gt;knows&lt;/em&gt; what to do,” the thinking goes, “they’ll have more time to just do it”. With ongoing effort, this approach can work. However, “upskilling” every individual across all the organization’s development teams is also not trivial. A business pursuing this course of action is also likely to appoint someone or some group to oversee this upskilling, which puts us back into the DP1 design camp. The “&lt;a href=&quot;https://rayli.net/posts/information-action-fallacy/&quot;&gt;information action fallacy&lt;/a&gt;” also looms large.&lt;/p&gt;

&lt;p&gt;Changing the environment to make desired outcomes more likely is also an approach. I’ll talk more about this in a future post.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;As the number and complexity of API ecosystems increase, we also need to increase the sophistication of our scaling approaches. Thankfully, a tremendous body of sociotechnical and systems theory over the decades addresses exactly that. As stewards of those ecosystems, our challenge is to step outside of our previous professional callings and engage with this new (to us) wisdom. The sooner we can do that, the sooner we can deliver on the promise of distributed systems.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Aug 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/08/19/Three-Systems-Theory-Approaches-To-Governance/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/08/19/Three-Systems-Theory-Approaches-To-Governance/</guid>
        
        <category>Fred Emery</category>
        
        <category>Merrelyn Emery</category>
        
        <category>API Governance</category>
        
        <category>management</category>
        
        <category>organizations</category>
        
        <category>Brooks' Law</category>
        
        
      </item>
    
      <item>
        <title>One Way to Improve API Guidance</title>
        <description>&lt;p&gt;I’ve seen my share of API Design guidelines. I’ve even contributed to a few. Consistent across those style guides, standards documents, and requirements pages is that we crafted them without the benefit of technical writing or information architecture professionals. Despite having the best of intentions, we left opportunities for conveying our design expectations in better and more useful ways.&lt;/p&gt;

&lt;p&gt;One simple yet powerful addition to any design requirements page is the inclusion of examples &lt;em&gt;formatting in the company’s schema of choice&lt;/em&gt;. These examples can be easily copied/pasted and modified in the editor of choice, removing the ambiguity of personal interpretation or possible typos.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/08/on-examples.png&quot; alt=&quot;A picture of a slide from 2018 commenting on the importance of examples from Jasmine Mithani.&quot; /&gt;
&lt;figcaption class=&quot;slide&quot;&gt;
A picture of a slide from 2018 commenting on the importance of examples from &lt;a href=&quot;https://twitter.com/jazzmyth&quot;&gt;Jasmine Mithani&lt;/a&gt;.
&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at what I mean. Here is a hypothetical example of an API rule a business might adopt for interface consistency:&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Pagination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;When retrieving a collection of similar items, a caller may desire only to retrieve a subset. The caller may also need the ability to progress through subsets. To paginate through a collection, an API SHOULD provide a pair of query parameters: &lt;strong&gt;limit&lt;/strong&gt; and &lt;strong&gt;offset&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;That is solid guidance and a step toward encouraging APIs that behave more consistently within a domain. However, even within that tiny snippet, several nuanced elements need to be translated correctly to an OpenAPI’s YAML. We also assume that developers are well versed in YAML conventions. In my experience, OpenAPI is a means to an end, not a topic of voluntary study and application. As a result, whoever is writing the API description writes just enough to get their description to validate against the OpenAPI schema and moves on. This &lt;em&gt;minimum viable description&lt;/em&gt; checks a box but falls short of &lt;em&gt;being good enough for integrators&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;paths:
    /users:
        get:
            responses:
                '200':
                description: success
            parameters:
                - $ref: &quot;#components/limit&quot;
                - $ref: &quot;#components/offset&quot;
components:
    schemas:
        limit:
            description: the limit
        offset:
            description: the offset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Publishing an API describing pagination this way meets the &lt;em&gt;letter&lt;/em&gt; of the rule, it fails to demonstrate the &lt;em&gt;spirit&lt;/em&gt;: &lt;strong&gt;lowering comprehension overhead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Part of doing the right thing lies with the API designer. But the guidelines, by providing examples that can be copy/pasted, can do a tremendous amount to make that job more manageable. If it was the dev team creating APIs, the benefit is limited. Ten? Now we see some benefit. Dozens of teams across a company? At that scale, the consistency and speed possible by copy/pasting fully realized guidance directly into a design begins to add up.&lt;/p&gt;

&lt;p&gt;So after the description of the pagination guidelines above, include an example that they can easily copy, paste, and customize into their own work, like below. Then continue for each and every other API design feature that would benefit from a more consistent approach. &lt;em&gt;Those writing API descriptions will thank you for it&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;paths:
    /users:
        get:
            responses:
                '200':
                description: success
            parameters:
                - name: offset
                    in: query
                    required: false
                    description: The index of the first item to retrieve. Indices are zero-based
                    schema: 
                        type: integer
                        format: int32
                        minimum: 0
                        default: 0
                - name: limit
                    in: query
                    required: false
                    description: The number of items to retrieve at once. &amp;lt;&amp;lt;insert API-specific default here, including if there is a maximum value&amp;gt;&amp;gt;
                    schema: 
                        type: integer
                        format: int32
                        minimum: 1
                        maximum: 1000
                        default: 20

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 18 Aug 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/08/18/OneWayToImproveAPIGuidance/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/08/18/OneWayToImproveAPIGuidance/</guid>
        
        <category>API governance</category>
        
        <category>OpenAPI</category>
        
        <category>styleguide</category>
        
        <category>documentation</category>
        
        
      </item>
    
      <item>
        <title>Machine Learning Prompts Within IDEs</title>
        <description>&lt;p&gt;In previous posts, I’ve discussed &lt;a href=&quot;https://matthewreinbold.com/2021/06/25/ArchitectureIsLaw/&quot;&gt;how one’s environment impacts behavior&lt;/a&gt;, &lt;a href=&quot;https://matthewreinbold.com/2021/06/30/TemplatesAsPrompts/&quot;&gt;how defaults and templates are part of a software development environment&lt;/a&gt;, and &lt;a href=&quot;https://matthewreinbold.com/2021/07/14/WhatShouldBeInATemplate/&quot;&gt;possible behavioral prompts to consider in an OpenAPI template&lt;/a&gt;. But what do irresponsible or counter-productive environmental prompts look like? The recent kerfuffle over &lt;strong&gt;&lt;a href=&quot;https://copilot.github.com/&quot;&gt;Github’s Copilot AI&lt;/a&gt;&lt;/strong&gt; is a great example.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/07/ide.jpg&quot; alt=&quot;A picture showing code on a computer screen.&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@andreiamza2000&quot;&gt;Amza Andrei&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/ide&quot;&gt;Unsplash&lt;/a&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tinyletter.com/NetAPINotes/letters/net-api-notes-for-2021-07-07-issue-168-github-s-copilot&quot;&gt;I discussed Copilot in a recent edition of my API email newsletter, Net API Notes #168&lt;/a&gt;. In short, Copilot is an assistant for writing code. As a developer types in their Integrated Development Environment (IDE), Copilot suggests “whole lines or entire functions” learned from similar found across Github.&lt;/p&gt;

&lt;p&gt;On the surface, this seems like an example of &lt;a href=&quot;https://matthewreinbold.com/2021/06/25/ArchitectureIsLaw/&quot;&gt;using the environment to prompt behavior&lt;/a&gt;. When it recognizes what the developer is attempting, Copilot prompts a solution similar to what others have done previously. Being the path of least resistance, the developer (particularly a junior one) is likely to accept the default provided and move on to their next task.&lt;/p&gt;

&lt;p&gt;In that scenario, however, what &lt;em&gt;outcome&lt;/em&gt; is the environment optimizing for? Quality or convenience? If we consider how Copilot was trained, we begin to get an answer.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://arxiv.org/abs/2107.03374&quot;&gt;a published paper&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/NoraDotCodes/status/1412741339771461635&quot;&gt;subsequent tweets&lt;/a&gt;, it appears Copilot trained on all publicly available Github code. As someone who has contributed their share of broken, test, and experimental code to Github, I can guarantee that not everything publicly available follows best practices. Further, &lt;a href=&quot;https://matthewreinbold.com/2021/01/08/WhyAISuccessIsAPIBuilt/&quot;&gt;as I discussed in my overview on machine learning’s API future&lt;/a&gt;, Copilot’s algorithm can’t discern which common programmatic approaches are &lt;em&gt;good&lt;/em&gt;, only those that have occurred historically. It then, subsequently, propagates those with its promptings.&lt;/p&gt;

&lt;p&gt;What does that mean in practice? As an industry (and with APIs specifically), software developers are still wrestling with comprehensive, security-minded practices. It should come as no surprise, then, that Copilot ends up prompting the same kinds of security flaws that have bedeviled the industry throughout the past. &lt;a href=&quot;https://portswigger.net/daily-swig/devsecai-github-copilot-prone-to-writing-security-flaws&quot;&gt;A security researcher studying the issue says Copilot suggests&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“-bad code that looks reasonable at first glance, something that might slip by a programmer in a hurry, or seem correct to a less experienced coder.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a more API-specific example, from the same article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The AI tool also ‘blundered right into the most classic security flaw of the early 2000s: a PHP script taking a raw GET variable and interpolating it into a string to be used as an SQL query, causing SQL injection’”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is easy to optimize a system for &lt;em&gt;speed&lt;/em&gt;. However, using machine-learning to create environmental prompts isn’t automatically value-adding activity. Designed poorly, it becomes the equivalent of throwing more spagehetti at the wall. When considering what behaviors an environment creates, don’t lose sight of the quality outcomes.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jul 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/07/16/GithubCopilot/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/07/16/GithubCopilot/</guid>
        
        <category>API governance</category>
        
        <category>environment</category>
        
        <category>behavior</category>
        
        <category>github</category>
        
        <category>copilot</category>
        
        <category>machine learning</category>
        
        <category>ai</category>
        
        <category>ide</category>
        
        <category>sql injection</category>
        
        
      </item>
    
      <item>
        <title>What Prompts Should Be In an OpenAPI Tempate?</title>
        <description>&lt;p&gt;In my last piece, &lt;a href=&quot;https://matthewreinbold.com/2021/06/30/TemplatesAsPrompts/&quot;&gt;I talked about the importance of not overlooking the behavioral influence of software templates&lt;/a&gt;. The conclusion was that our output is influenced by our tools whether we consciously are aware of it or not. Therefore, we &lt;em&gt;could&lt;/em&gt; continue to trudge on in ignorance and wonder why things aren’t working out as intended. &lt;strong&gt;OR&lt;/strong&gt; we can design our environments to more easily achieve our governance outcomes.&lt;/p&gt;

&lt;p&gt;An OpenAPI description has become the most common way to express RESTful and RESTish API designs. As a result, a wide variety of API tooling presents an OpenAPI default to a developer beginning a new design. Unfortunately, this default is usually a lowest-common-denominator, stripped-down suggestion that does little to encourage company-common practices.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/prompt03.png&quot; alt=&quot;A picture of the default OpenAPI template provided by Postman.&quot; /&gt;&lt;figcaption&gt;A picture of the default OpenAPI template provided by Postman.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;What kinds of prompts could an API Center of Excellence/Enablement, API Governance, or enterprise architecture group consider putting in their default template?&lt;/p&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gartner.com/en/documents/4002570-how-to-deliver-sustainable-apis&quot;&gt;In its research (paywalled, unfortunately)&lt;/a&gt;, Gartner identifies not one, not two, but &lt;em&gt;five&lt;/em&gt; different ways an API could be versioned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Evolution, or only allowing for additions to an API&lt;/li&gt;
  &lt;li&gt;Root namespace URI versioning (&lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.example.com/v1/resource&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Resource-level URL versioning (&lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.example.com/resource/v1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;HTTP content header versioning (&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -H &quot;Accepts-version:1.0&quot; https://api.example.com/resource&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;HTTP query parameter versioning (&lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.example.com/resource?version=1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Believe it or not, there are even more ways to version an API than that!  And one way isn’t superior to another method. Yet, to manage the cognitive overhead of working with many APIs, it is important to create designs with consistent versioning behavior within a common domain, like an organization. A new member to that domain, when presented with a template, shouldn’t have to guess which approach is desired in their new context.&lt;/p&gt;

&lt;p&gt;The OpenAPI template should demonstrate the versioning method preferred by the organization. It should not be up to the designer to recall best practices from a separate correspondence in order to do the right thing.&lt;/p&gt;

&lt;h2 id=&quot;better-descriptions&quot;&gt;Better Descriptions&lt;/h2&gt;
&lt;p&gt;Similarly, how many times have you been reading documentation, like that generated from an OpenAPI description, and you’ve come across something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: userId
description: the Id of the user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While that might be &lt;em&gt;technically&lt;/em&gt; correct, it is also the bare minimum way to describe an important piece of information. The writer might have not bothered with a description since it doesn’t convey much more than what could be gleaned from the name.&lt;/p&gt;

&lt;p&gt;In a previous role, we defined a series of characteristics that makes a compelling, worthwhile description.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Characteristic&lt;/th&gt;
      &lt;th&gt;Details&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Context&lt;/td&gt;
      &lt;td&gt;Context Detailed business context explaining what the data stands for and its expected usage&lt;/td&gt;
      &lt;td&gt;“A userId represents individuals and business entities that either (1) have active accounts or (2) are in the pre-sales pipeline.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Disambiguation&lt;/td&gt;
      &lt;td&gt;Explains terms not commonly used&lt;/td&gt;
      &lt;td&gt;“Field refers to the number of seconds after launch when MECO occurred. MECO stands for “Main Engine Cut-Off”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Interrelationship&lt;/td&gt;
      &lt;td&gt;Defines if there is an important interrelationship with other available data in the same structure&lt;/td&gt;
      &lt;td&gt;“User account status code and user reactivation indicator are referenced together for obtaining the correct status of the account.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Values, Range, or Examples&lt;/td&gt;
      &lt;td&gt;Proves insight into the range or bounded set of values possible.&lt;/td&gt;
      &lt;td&gt;“Valid FICO scores are between 300 and 850. A FICO score less than 300 or greater than 850 is invalid. Negative numbers should never be used.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Sourcing&lt;/td&gt;
      &lt;td&gt;Where the data comes from or how it is generated.&lt;/td&gt;
      &lt;td&gt;“This FICO score is provided by Equifax.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reference/Notes&lt;/td&gt;
      &lt;td&gt;Provides links to training documents&lt;/td&gt;
      &lt;td&gt;“For more information on satellite launch thresholds and valid values, please see https://example.org/reference/DOC-12345.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Proper Grammar &amp;amp; Complete Sentences&lt;/td&gt;
      &lt;td&gt;Definitions should start with the term being defined.&lt;/td&gt;
      &lt;td&gt;“Currency Code is the ISO three-character code indicating the currency for the transaction.”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update Frequency/Retention&lt;/td&gt;
      &lt;td&gt;Information on source application, frequency of upload, and/or retention policy, if applicable.&lt;/td&gt;
      &lt;td&gt;“Data is updated monthly for the entire customer population.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not every field will require every characteristic. However, when it comes to the template presented to an API designer, we should provide examples that illustrate better, more complete information. If we give a designer a bare-bones, minimally worded OpenAPI description, they’re likely to continue that same approach in their work.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As your API landscape grows, perhaps versioning or better field descriptions aren’t a primary concern. However, hopefully, these examples have sparked some ideas on how you might lean in on the issues that concern you.&lt;/p&gt;

&lt;p&gt;And it doesn’t have to end with just the templates. At the recently completed APIDays conference, &lt;a href=&quot;https://youtu.be/D1vPdX2TdRI?t=901&quot;&gt;ADP’s Boris Vernoff demonstrated how their customized environments promote consistency within their design environments (screens begin around the 15-minute mark)&lt;/a&gt;. Rather than starting the design process with a blank page, a designer can select from a series of prompts. This ‘wizard’ approach does constrain the possibility space. However, in doing so, it directs energy to solve the unique business problem and away from introducing variance on non-value-adding API mechanics.&lt;/p&gt;

&lt;p&gt;There is a lot that goes into creating APIs with &lt;a href=&quot;https://matthewreinbold.com/2016/06/02/ConsistencyAndCohesion/&quot;&gt;greater consistency and cohesion&lt;/a&gt;. What is your environment doing to make that easier?&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jul 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/07/14/WhatShouldBeInATemplate/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/07/14/WhatShouldBeInATemplate/</guid>
        
        <category>motivation</category>
        
        <category>API governance</category>
        
        <category>environment</category>
        
        <category>behavior</category>
        
        <category>Boris Vernoff</category>
        
        <category>dashboards</category>
        
        
      </item>
    
      <item>
        <title>Rethinking the Humble Template</title>
        <description>&lt;p&gt;In my last post, &lt;a href=&quot;https://matthewreinbold.com/2021/06/25/ArchitectureIsLaw/&quot;&gt;I discussed how changing the environment could change people’s behavior&lt;/a&gt;. Further, I proposed that software tools are as much the environment as a developer’s office. Careful prompt design within those environments can create &lt;strong&gt;better behavioral outcomes&lt;/strong&gt; with &lt;strong&gt;less effort&lt;/strong&gt; and &lt;strong&gt;more buy-in&lt;/strong&gt;. But what does that look like in practice?&lt;/p&gt;

&lt;h3 id=&quot;the-stack-overflow-example&quot;&gt;The Stack Overflow Example&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; is a website where people ask questions for other people to answer. To remain viable, Stack Overflow desires certain behaviors from its audience. First of all, they aren’t interested in &lt;em&gt;quantity&lt;/em&gt; but quality; poorly worded, vague, or duplicate questions aren’t welcome. You don’t go to Stack Overflow to idly chat. Further, they aren’t interested in lots of answers, only the &lt;em&gt;right&lt;/em&gt; answer.&lt;/p&gt;

&lt;p&gt;The website’s environment goes to great lengths to prompt these sorts of behaviors. Before one is allowed to ask a question, a modal pop-up reminds the asker to search to see if their question has already been asked and how to ask if they can’t find a prior version.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/prompt01.png&quot; alt=&quot;A picture of the Stack Overflow modal prompt before posting a question.&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;If I, subsequently begin a question, the interface immediately provides feedback as to whether it is worth posting, and any already existing questions. The process continues through the post body, with a host of prompts for specificity, uniqueness, and completeness. By exhibiting these behaviors, I’m more likely to get my question answered, and the site gets a valuable reference for the next person.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/prompt02.png&quot; alt=&quot;A picture of the Stack Overflow question interface.&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack Overflow still has moderators&lt;/strong&gt;. They do step in when necessary. But the amount of manual intervention they undertake is significantly less than if there were no environmental nudges toward behaviors beneficial for the community.&lt;/p&gt;

&lt;h3 id=&quot;the-openapi-example&quot;&gt;The OpenAPI Example&lt;/h3&gt;
&lt;p&gt;Likewise, we should think of templates also as a prompt. When capturing business intent in an API specification, like OpenAPI, many tools present a bare-bones template. This template exists to help a new designer get started but often it is the most minimal valid version.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/prompt03.png&quot; alt=&quot;A picture of the default OpenAPI template provided by Postman..&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;There is so much potential here! Most companies I’m familiar with have some form of an &lt;a href=&quot;http://apistylebook.com/design/guidelines/&quot;&gt;API style guide&lt;/a&gt;. Imagine if I, as a new developer, had those desired API behaviors around naming, descriptions, and responses &lt;em&gt;embedded in my tooling&lt;/em&gt;? How much easier would it be to design “the right way” if I just had to customize a relevant example rather than invent YAML whole cloth? How much more likely am I to adopt a particular error object structure if it is prompted at the beginning of every new design, as opposed to having to track it down in documentation somewhere else?&lt;/p&gt;

&lt;p&gt;We’re not there yet with organization-level templates. And, even then, more meaningful templates for their toolchains are only the beginning. As Stack Overflow shows, there are numerous types and times for prompts in a software environment. As people trying to create better outcomes, we need to add environmental design to our available approaches.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/06/30/TemplatesAsPrompts/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/06/30/TemplatesAsPrompts/</guid>
        
        <category>motivation</category>
        
        <category>API governance</category>
        
        <category>environment</category>
        
        <category>behavior</category>
        
        
      </item>
    
      <item>
        <title>To Change Behavior, Change The Environment</title>
        <description>&lt;p&gt;A school’s corridor can be a problem. Children run from their rooms on one end to the exit on the other. In the stampede, someone could trip. Kids could get hurt. In even the best-case scenario, the hallway chaos riles kids up, cutting into productive classroom time.&lt;/p&gt;

&lt;p&gt;One approach would be to insert an authority figure. Policing the hallway, they could shush and wag their finger. Alternatively, &lt;a href=&quot;https://twitter.com/Rainmaker1973/status/1384439194727104513&quot;&gt;a school could install a floor like this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/hallway.png&quot; alt=&quot;A picture of a hallway with a floor tiled in such a way that it looks like it is melting out from underneath.&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The floor is still perfectly level. However, the illusion produced by the tile design demonstrates the power of architecture. People don’t run across this. We have a change to the environment that creates a change to behavior.&lt;/p&gt;

&lt;p&gt;In his book, &lt;em&gt;&lt;a href=&quot;https://tinyhabits.com/book/&quot;&gt;Tiny Habits&lt;/a&gt;&lt;/em&gt;, BJ Fogg, PhD  describes how a behavior occurs when the following three things converge in the exact moment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Motivation&lt;/strong&gt; - The desire to do a behavior&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ability&lt;/strong&gt; - The ability to do the behavior&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prompt&lt;/strong&gt; - The prompt to do the behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the bell rings at the end of class, it is a &lt;strong&gt;prompt&lt;/strong&gt; for the students to exhibit a behavior: moving from one place to another. They could walk. However, they have a low &lt;strong&gt;motivation&lt;/strong&gt; to do so; if they run they can get the best pick of seats, have more time to talk, etc.&lt;/p&gt;

&lt;p&gt;Inserting a hallway monitor is an attempt to change the motivation and, thus, the behavior. By putting an authority figure in the space, students’ willingness to “get in trouble by running” must be taken into account. It works, but the introduction of policing and enforcement creates an antagonistic relationship.&lt;/p&gt;

&lt;p&gt;So much of the software governance literature starts with an apology. Then the author jumps to their particular riff of “sticks and carrots”. As you might guess, sticks represent punishment for not performing certain behaviors. Carrots are rewards for playing along. Most people can intuitively grok extrinsic “sticks and carrots”. However, despite being one of the easiest to understand methods of changing behavior, &lt;em&gt;both address only one part of the behavior equation,&lt;/em&gt; &lt;strong&gt;motivation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As the floor illustrates, there are other ways to change behaviors. In software, our environments are composed of numerous tools. Conscientious systems thinkers &lt;strong&gt;must&lt;/strong&gt; consider how tooling &lt;em&gt;prompts&lt;/em&gt; and empowers (or disempowers) &lt;em&gt;ability&lt;/em&gt;. Without purposeful design, the behaviors created by these everyday touchpoints are left up to chance.&lt;/p&gt;

&lt;p&gt;Modify an environment to make the right thing easy to do, and the need for someone to police behavior goes down significantly.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/06/25/ArchitectureIsLaw/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/06/25/ArchitectureIsLaw/</guid>
        
        <category>motivation</category>
        
        <category>API governance</category>
        
        <category>BJ Fogg</category>
        
        <category>environment</category>
        
        <category>behavior</category>
        
        
      </item>
    
      <item>
        <title>How Versus Why Questions</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/06/questions.png&quot; alt=&quot;A picture of a card with the caption 'Absurd Questions' above a stylized question mark.&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;In my API governance experience, I interviewed &lt;em&gt;a lot&lt;/em&gt; of teams. The purpose of those chats was always to reach a better understanding of the problem. A better understanding leads to better design. &lt;strong&gt;Most&lt;/strong&gt; of the time, these conversations were amicable, easy-going affairs. One contributing factor that kept these affairs from becoming confrontations was when I switched from asking “Why” to asking “How” questions.&lt;/p&gt;

&lt;p&gt;When you ask someone “Why” they do or don’t do something, you’ll inevitably provoke a defensive response. For example, when trying to learn more about somebody’s API practice, I could ask:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Why don’t you have 100% contract test coverage?”&lt;/li&gt;
  &lt;li&gt;“Why aren’t your API descriptions captured in a single, discoverable place?”&lt;/li&gt;
  &lt;li&gt;“Why did you produce so many microservices?”&lt;/li&gt;
  &lt;li&gt;“Why is your domain terminology inconsistent?”&lt;/li&gt;
  &lt;li&gt;And the classic catch-all, &lt;em&gt;“Why did you do it this way?”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of those may be a legitimate question. However, the nature of the question comes across as a request for justification. Worse, answers to a why question immediately entrenches the person in a list, of their own making, of confirmation bias. What was supposed to be a positive discourse has turned exhausting, as each side attempts to prove that their approach is superior.&lt;/p&gt;

&lt;p&gt;Asking “how” is much more productive. Reframing our points from earlier changes the questions to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“How do you detect breaking changes in production?”&lt;/li&gt;
  &lt;li&gt;“How do developers discover and learn how to use APIs in your area?”&lt;/li&gt;
  &lt;li&gt;“How do you manage the greater complexity with your number of microservices?”&lt;/li&gt;
  &lt;li&gt;“How do you describe this concept within your domain?”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“How did you work through the difficult decisions in this design?”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the ‘how’ and ‘why’ examples address, roughly, the same areas of concern. However, the ‘how’ questions are more likely to result in people talking in greater length, detail, and thoughtfulness. They assist us in going further in exploration.&lt;/p&gt;

&lt;p&gt;Asking quality, open-ended questions creates a better rapport and a clearer idea of how to help. And the faster we get to help, the sooner our customers will find success.&lt;/p&gt;

&lt;p&gt;The next time you feel the urge to ask “why”, try reaching for “how” instead.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/06/23/HowVersusWhyWhyQuestions/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/06/23/HowVersusWhyWhyQuestions/</guid>
        
        <category>API Design</category>
        
        <category>collaboration</category>
        
        <category>management</category>
        
        <category>API Governance</category>
        
        
      </item>
    
      <item>
        <title>Blasting Off For New Adventures</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/03/postman-logo.png&quot; alt=&quot;Postman Logo&quot; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I’m excited to share that, this April, I’ll be joining Postman as the &lt;strong&gt;Director for API Platforms and Digital Transformation&lt;/strong&gt;.  I’ll be reporting to Kin Lane, Chief API Evangelist. I’m the latest addition to Postman’s Open Technologies group, an incredible, assembled group of industry-leading professionals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman, as many developers already know, sets the bar for API collaboration excellence&lt;/a&gt;. I’ll get to help companies build their API lifecycle management and governance programs on that incredible bedrock.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’m excited to get started and look forward to meeting all my future fellow &lt;em&gt;Postmanauts&lt;/em&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While I’m eager to look forward, I would be remiss to not say a few words about the past. Thank you to those at Capital One for an incredibly educational five and a half years. I’m proud of so much of that early, ecosystem-enabling work. That effort has scaled to thousands of schema-defined, affordance-consistent microservices that perform &lt;em&gt;half a billion requests a day&lt;/em&gt;. From training to the collaborations, from tool development to analysis, every day was an opportunity to grow as a professional.&lt;/p&gt;

&lt;p&gt;A half-decade is also long enough to see initial assumptions grow, change, and take on a life of their own. Relationships form and strongly held ideals evolve beyond the first contact with production. I have a different level of professional maturity now that I didn’t have at the start, even if the past year has mostly been unkempt hair and sweatshirts.&lt;/p&gt;

&lt;p&gt;There remain a vast number of folks there continuing to create positive change. I see you, salute you, and want you to know I will continue to root for you. I also wish my former team the best of luck; you have taught me a tremendous amount. Now the wheel is yours. You’re driving where things go next. You’ve got this. I believe in you!&lt;/p&gt;

&lt;p&gt;It will be a busy next few months. In 2015, my family moved to the East Coast for the Capital One job. The pandemic and limited travel options impressed just how removed the northern Virginia region is from our extended families. So we’ll be taking advantage of Postman’s 100% remote allowance and moving our circus to the Midwest.&lt;/p&gt;

&lt;p&gt;That’s a lot of &lt;strong&gt;uff-da&lt;/strong&gt; for now, but we’ll break &lt;strong&gt;lefse&lt;/strong&gt; soon enough. &lt;strong&gt;Skol&lt;/strong&gt; and boldness to you, friends!&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Mar 2021 00:00:00 -0500</pubDate>
        <link>https://matthewreinbold.com/2021/03/29/Postman/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/03/29/Postman/</guid>
        
        <category>Postman</category>
        
        <category>career</category>
        
        <category>Minneapolis</category>
        
        
      </item>
    
      <item>
        <title>WandaVision and This American Moment</title>
        <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/images/2021/02/wandavision.jpg&quot; /&gt;&lt;figcaption&gt;WandaVision, now streaming on Disney+&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;need&lt;/em&gt; to talk about WandaVision, the Disney+ series, and the first entry into the Marvel Cinematic Universe’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe:_Phase_Four&quot;&gt;Phase Four&lt;/a&gt;. After more than a year and a half, the team behind the series could have easily coasted on pent-up fan demand and character nostalgia. Yet, through some meticulous design decisions and serendipitous timing, WandaVision is uniquely commenting on this moment.&lt;/p&gt;

&lt;p&gt;Social and class unrest, political skullduggery, disrupted workplaces, chaotic education situations, and economic uncertainty are all playing out amid a global pandemic. We’re at home; a move that began as a preventative measure but, increasingly, feels like a prison. Since there’s little else to do or little else we have the cognitive and emotional energy for, I’ve been watching more television than usual. Like many, I’ve binged past comfort shows while doomscrolling through insomnia.&lt;/p&gt;

&lt;p&gt;Time moves strangely in the pandemic’s unreality. One day drags along in repetitive tedium like any other. Yet the months rapidly disappear with little memory to account that they were there. Without personal touchstones - the trips, reviews, concerts, and even new media releases- I’ve become a character stuck in my own show’s reruns, repeating the routine but unable to progress the character arc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;light spoilers to follow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In WandaVision, the residents of Westview, NJ, also find themselves trapped in an unnatural reality. They are compelled, sometimes at great pain, to maintain a facade of the American dream: the suburb, the marriage, the homeownership, the stupefying white-collar job, etc. Even the town name, ‘Westview’ is a nod to western, or American, perception of success. The aspirational normalcy is an attempt to cope. And, at the end of the episode, the characters avoid the strangeness unpinning it all by watching TV.&lt;/p&gt;

&lt;p&gt;When I watch WandaVision, I see a reflection of ourselves; protagonists struggling with grief. We are unsure of how this started or when it will end. We’re in control but, not? We are grieving for those we lost. We grieve for the time we won’t get back and the plans deferred. We grieve for the myths we told ourselves about a just nation and a logical, ordered world. Wanda’s story is one of grief. Despite the superpowers, her story is eminently relatable to our own.&lt;/p&gt;

&lt;p&gt;That &lt;em&gt;is a lot&lt;/em&gt;. Some of us have yet to acknowledge what has happened. Some of us continue to cling, even violently, to the narratives we once had. Processing the world as it is and what has changed will continue for us for some time to come.&lt;/p&gt;

&lt;p&gt;Would WandaVision resonate so strongly if we weren’t in a pandemic? Perhaps. I could write another post on how the show uses TV tropes and audience expectations to accentuate the storytelling. That “meta-ness” would be entertaining in any time.&lt;/p&gt;

&lt;p&gt;However, WandaVision becomes transcendent at this moment in which we’re all trapped in our own Westview.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Feb 2021 00:00:00 -0600</pubDate>
        <link>https://matthewreinbold.com/2021/02/08/WandaVision/</link>
        <guid isPermaLink="true">https://matthewreinbold.com/2021/02/08/WandaVision/</guid>
        
        <category>WandaVision</category>
        
        <category>storytelling</category>
        
        <category>Marvel</category>
        
        <category>MCU</category>
        
        <category>reviews</category>
        
        <category>superheroes</category>
        
        <category>Disney</category>
        
        <category>Disney+</category>
        
        <category>scifi</category>
        
        
      </item>
    
  </channel>
</rss>
