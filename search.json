[
  
    {
      "title"    : "The Productivity Trap",
      "category" : "",
      "tags"     : "Software Development, AI, and Management",
      "url"      : "/2025/06/19/theproductivitytrap",
      "date"     : "Jun 19, 2025",
      "content"  : "TL;DR -The problem isn’t coding with GenAI. The problem is what coding with GenAI lets us get away with. It allows us to delay making real choices, real trade-offs, and real systemic changes by giving the illusion of movement and acceleration. In a moment where maintenance, curation, and simplification are the actual leverage points, we’re rewarding copycat output. Not because software developers are stupid or short-cited, but because our incentives, our markets, and our social platforms have been rewired to reward volume over truth, sizzle over substance.Disclosure: I use generative AI tools almost every day.I will state clearly up front that I use generative AI nearly every day. Like most of my other recent work, this piece was developed with the help of large language models. As a remote worker, having a tireless, talkative partner to rubber-duck with is essential. It’s like a writing circle, albeit one that’s available 24/7, never gets hangry, and has perfect recall of conversations we might have had weeks, if not months, prior. Often, just articulating half-formed intuitions or unspoken feelings into a prompt is, in itself, the benefit of using these tools. Refining ideas is great, but using something like ChatGPT also helps expose flaws in an argument or suggest factors I may not have considered.However, because I use it regularly, I can see its limits. GenAI is beneficial for what it is: a fast feedback loop, a pattern spotter, and a corpus summarizer. What it is not is a substitute for the hard work of making trade-offs, reducing complexity, or building healthy systems.And yet, in boardrooms and strategy decks across the tech industry, GenAI is rapidly being positioned as precisely that: a cure-all for reduced budgets, ballooning backlogs, and teams struggling to maintain momentum under mounting pressure.It’s understandable; if you’re drowning, you don’t critique the lifeboat. But that doesn’t mean you’re destined for solid ground.The developer productivity trap has only grown.A moment of empathy for leadership (but just a moment, I promise!). As explained by Honeycomb.io SRE Fred Hebert:  “The usefulness and success of using LLMs are axiomatically taken for granted and the mandate for their adoption can often come from above your CEO. Your execs can be as baffled as anyone else having to figure out where to jam AI into their product. Adoption may be forced to keep board members, investors, and analysts happy, regardless of what customers may be needing.  “It does not matter whether LLMs can or cannot deliver on what they promise: people calling the shots assume they can, so it’s gonna happen no matter what.”That’s bad enough. But add to that the “macroeconomic headwinds” howling since 2023 and their CFO discovering the phrase “unit economics,” and suddenly their entire job is to make the line go up with fewer reporting lines. Releases are slipping, infrastructure is groaning, and the most experienced engineers are leaving for places that didn’t mandate a return-to-office (RTO).It is hard to ignore claims coming from the likes of Goldman Sachs’ CIO, who recently named developer productivity the #1 GenAI use case. Similarly, Google says its engineers are 10% more productive. And when LinkedIn is abuzz with claims like, “GenAI made development 2x faster and restored my hairline”, your leadership’s first thought isn’t, “At what cost?” but “Where do I sign?”And why not? Follicle foibles aside, genAI’s pitch for struggling software shops is irresistible:  No reorgs  No vendor lock-in  No cultural transformationsJust waive some corporate card expenditures for Copilot and watch the codebase commits fly.But here’s the trap: developer productivity sounds like a smart and measurable goal. However, most software teams aren’t drowning because they can’t write code fast enough. They’re drowning because they don’t know which code to write, they’re afraid to touch what already exists, or they’re unclear about how what they’re doing creates business value. The systems they’re tasked with modifying resemble a Rube Goldberg machine; one where half the mechanisms are on fire, the other half are forgotten legacy components, and the third half was recently added in an acquisition and needs to be integrated yesterday.The conversations they’re having sound like this:In other words, the problem isn’t throughput. It’s clarity. And when you chase productivity without clarity, you just accelerate the mess.“Ship more” sounds great in a slide deck. Until you realize you’re shipping complexity faster than your team can understand it.Shipping more, faster is a recipe for disaster.There’s a great quote from Uwe Friedrichsen about this very topic:  “We are pushing to do the wrong things better and better.”This is a nice way of describing what happens when GenAI is brought in to “fix” developer productivity without anyone slowing down to ask what’s actually broken. Because, in most companies, the limiting factor on delivery isn’t typing speed. It is that nobody knows what anything does, who owns it, or whether changing it will cause an AWS outage in us-east-1.In practice, most teams are “empowered” to move fast. You’ve got an internal platform, and maybe even a shiny API gateway with some developer self-service. The marketing team is standing up a new site in conjunction with a launch and needs some data, so engineering does what it does best: building a new point-to-point API.And then another team, unknowingly, builds their own version. And then a third team copies the first one but tweaks it because they needed “just one extra parameter”. None of them are discoverable. None of them are tested the same way. Two are documented in Confluence, and one of those hasn’t been updated since the pre-pandemic era when bread-making and toilet paper hoarding were strategic initiatives.But all that activity feels productive. Pull requests merged. Endpoints are deployed. Dashboards provide a veneer of control. Someone points to “velocity” in a meeting, and everyone nods along solemnly.It is the classic API multi-variant problem. We make it easy to ship an API, but we didn’t make it easy to change one. Or kill one. Or even figure out who owns one.And now, enter GenAI, the ultimate enabler of “just one more”.More code, more endpoints, more opacity stacked on legacy systems, generated in milliseconds by tools that have no idea about what is right or wrong for a given context, only probabilistic matches for code in its training data.That may work for the seven-thousandth example of a social network client. But the more unique the context, the less capable the help.GenAI isn’t replacing developers; it’s replacing decisions.There’s a whole separate article about how companies use GenAI hype to justify layoffs and then quietly rehire for the same roles at a cheaper, overseas rate. Assuming your company isn’t attempting a stealth outsourcing, GenAI isn’t actually making developers obsolete. It is making choices obsolete.When you drop Copilot or CodeWhisperer into a team that’s already under pressure, you don’t get thoughtful design. You get code at the speed of vibes. Half-understood prompts, half-documented results, and auto-complete-driven architecture. Everyone nods along because nobody wants to look like the one standing in the way of “the future”; or at least, there’s little professional benefit.So you get development shops like Fly.io. Fly.io recently published a piece about how they’ve incorporated genAI into their development process. They declared, “My AI skeptic friends are all nuts”. In essence, they said, “AI lets us build faster, even though it makes the code worse, so we’re just trying to slow down enough to make it usable”.As Icelandic web developer and consultant Baldur Bjarnason points out this isn’t productivity; it’s “lowering the quality bar so we can high-five each other for clearing it”.It’s not that the code is good. It’s that it is fast, and nobody has time to care anymore.This isn’t just a quality problem; it’s a strategic one. Because when GenAI becomes your default way to move forward, you stop choosing what’s worth building. You just … keep building. Faster. More often. Which only compounds problems:  Developers stop questioning the architecture.  Product teams assume delivery is “unblocked”.  Leadership sees velocity graphs going up and assumes it’s working.Meanwhile, you’ve automated yourself into a corner, a bigger, messier, tech-debtier corner, but a corner nonetheless.Solving systems complexity requires a different kind of leadership.It’s easy to dunk on the AI hype. It’s harder to offer something better, especially when your calendar is full, your team is thin, and your CFO wants you to explain why your delivery metrics didn’t improve after you gave everyone robot interns.I will say you’re not crazy for wanting relief. You’re just not going to find it in autocomplete.What your org needs isn’t “more”.It needs maintenance.It needs curation. It needs simplification.These aren’t sexy initiatives. They don’t demo well. You can’t put “we deleted fifteen endpoints” in a roadmap review and expect applause. But if you want your team to keep moving in five months, let alone five years, this is the work that matters.You don’t need a new platform or a tiger team. You need a shift in instinct.Five Behaviors of Leaders Who Choose Resilience Over VibesDefault to DeletionBefore you greenlight another service, ask what can be shut down. Before you automate a workflow, ask whether it’s still necessary. Before you ship more, try shipping less. On purpose.We don’t need to do more faster - we need to do less, better.Reward UnderstandabilityIf you can’t explain it to a new hire in ten minutes, it’s a liability. Stop rewarding clever hacks. Start celebrating clarity.Elegance is not optimization. It’s comprehension.Defer Decisions That Add ComplexityPostpone what you can. Push back on “just in case” extensibility. Favor defaults. Shrink option surfaces. Don’t widen interfaces unless there is an explicit use case.Every new option is a tax on future understanding.Curate What You HavePrune your internal APIs. Archive stale docs. Audit your SDKs. Stop showcasing how much you have. Start showcasing what actually works.If you don’t curate your ecosystem, you’re just letting complexity run the museum.Ask: “What If We Did Nothing?”This one is counterintuitive but powerful. Not everything needs a fix.Sometimes, the bravest thing you can do is wait.Anyone can stomp on the gas. Leadership is knowing when to pump the brakes - and when to get out and walk around.This is what stewardship looks like. It’s not loud. It’s not flashy. And it won’t get you featured on HackerNews. However, it may just give your team a fighting chance.Maintenance is the new moonshot.If this is the sustainable, pragmatic way forward, why are so few actually talking about it?Again, I go back to Hebert’s piece, as he describes the situation quite concisely:  “Things won’t change, because people are adaptable and want the system to succeed. We consequently take on the responsibility for making things work, through ongoing effort and by transforming ourselves in the process. Through that work, we make the technology appear closer to what it promises than what it actually delivers, which in turn reinforces the pressure to adopt it.”In a sense, the responsibility for realizing AI’s hyperbole is delegated to its human implementers. And if the Mechanical Turk fails to deliver, it is considered the operator’s fault, not the technology’s.Meanwhile, there are no TED speaker slots for “Doing Fewer Things Slightly Better.” No book deals for “Slow Architecture”. VCs aren’t throwing term sheets at companies promising to do less.But that doesn’t make it any less critical.In a world obsessed with acceleration, choosing to maintain - to understand, to simplify, to prune - is now a radical act. It’s leadership that resists panic. It’s a strategy that values longevity over the next quarter’s dashboard.GenAI isn’t the enemy. But misusing it to paper over hard choices - to avoid trade-offs, to compile more complexity, to pantomime progress - that’s how we break things beyond repair.The systems we build reflect the choices we make under pressure. Choose maintenance. Choose clarity. Choose to lead.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-06-19T00:00:00-05:00'>19 Jun 2025</time><a class='article__image' href='/2025/06/19/theproductivitytrap'> <img src='/images/2025/turk.png' alt='The Productivity Trap'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/06/19/theproductivitytrap'>The Productivity Trap</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Grow Your Community",
      "category" : "",
      "tags"     : "Culture and software development",
      "url"      : "/2025/06/10/GrowingCommunity",
      "date"     : "Jun 10, 2025",
      "content"  : "Image Credit: Reinbold, Ollie. Untitled sketch. 2025, pencils.The word “community” comes up a lot in my software consulting work. There are open-source communities. Developer communities. Platform communities. Increasingly, companies expect their employees to form Communities of Practice to solve their cross-silo dysfunction. You’ll find “community” on strategy decks, in job titles, and embedded in marketing copy.But when I work with software leaders on what that actually means and what real community looks like to them, I too often get platitudes or marketing slides.”Community” is what they say when “customer” feels too thirsty or “free labor” too honest. It’s a favorite industry euphemism, human enough to sound desirable, broad enough to mean nothing.The mismatch between what is desired and what is implemented leads to company efforts that are often DOA. These communities flop not because the idea is bad but because the people “running the community initiative” are drawing upon their shallow experience. For example, take the community example as described by writer Allison P. Davis in The Cut. There, Davis explored what happens when software startups try to fix the “loneliness epidemic” with community approximations. The described results certainly triggered my unease: apps that offer paid friendships, gamified connections, and bookable plus-ones. It was like ordering Doordash but for communion.The problem is real. In his 2000 book, Bowling Alone, author Robert D. Putnum describes the decline in non-workplace interactions. He argued that the reduction in everything from Knights of Columbus membership to church participation would have dire consequences for democratic discourse. Putnum references something as innocuous as the humble bowling league is a community capable of providing belonging, education, and enrichment for its members’ social lives. And yet, while the number of people who bowled increased in the past 20 years, the number of bowlers who bowled in leagues - much like any other group where social interactions may occur - has decreased.Putnum’s observations happened more than a generation ago. The trend has only continued since then. And it is this lack of community experience, or what it means to be a part of a functioning one, is troubling.In rural areas, community can be the difference between survival and ruin.I grew up on a farm in rural South Dakota. There isn’t a slogan or brand engagement strategy for that community. It is an unspoken set of expectations and obligations that made the sometimes unpredictable and harsh turns of fate survivable.There is never a good time to get sick - like really sick, like having to be hospitalized sick. But if a neighbor fell ill during harvest season, a year’s worth of work and tens of thousands of dollars in seed, fertilizer, and labor could be wiped out in a couple of ill-timed weeks.When that happened (and it did happen), the response wasn’t only thoughts and prayers. It was a convoy of neighbors. People would show up with their combines, grain carts, semis - everything needed to get the crop in safe before the weather could decide otherwise. They’d put their own fields, deadlines, and fragile margins on hold. Because letting someone lose everything wasn’t an option.There was no distributed disaster playbook. No pre-arranged phone tree. No nudges or banked service hours. People there don’t gussy it up as a “mutual aid network” or a “decentralized response framework.” They call it being a good neighbor.It happened because it was what needed to be done. Being neighborly isn’t a service you subscribe to but a shared responsibility you can’t opt out of. You helped because you knew, someday, it might be you. And when it was, you’d need someone who remembered how you showed up for theirs.In rural communities, the firefighter isn’t a stranger in uniform. It’s your neighbor. The coach isn’t an employee. It’s your uncle. The ambulance driver isn’t a city worker - it’s a volunteer who also works at the electric co-op.In rural communities, the line between neighbors and supporting services is blurred.Community is not just a rural thing.But community isn’t just a rural thing. The pattern of showing up is everywhere if you know where to look.There’s the story of Rogers Park, outside of Chicago, of a group of housed and unhoused neighbors who created Chili Night. Every Thursday, weather granting, people gather near a tent encampment in Touhy Park to share food, warmth, and company.There’s no non-profit running it. No app. No GoFundMe. Just folding tables, Crock-Pots, and a shared understanding: sharing a meal isn’t a burden but a blessing.As mentioned in the piece:  “It’s not about feeding the unhoused. It’s about being in community with each other.”People show up for each other, week after week because presence itself is the point. Because being human in public, without hierarchy or prerequisites, is surprisingly rare and incredibly sustaining.No check-ins. No metrics. No scalable impact report.Just a ritual of care and the slow accumulation of trust to create a decentralized, voluntary, self-sustaining practice. You don’t need grain carts and combines to build that kind of system. You need regularity, a shared table, and the recognition that surviving alone is a myth.That brings us back to the workplace and all the ways companies get this wrong.You can’t scale what you haven’t practiced.If Rogers Park offers an example of a functioning community that is low-cost, high-trust, and built on repeated presence, tech offers another: slick, structured, and one-directional. Many working in software wouldn’t know better because they haven’t experienced a real one. Or, if they have, they didn’t recognize it for what it was.In software organizations, “community” is a term deployed with great enthusiasm and very little introspection. It’s used when we want engagement but don’t want to pay for support. It’s trotted out when we want to tout the total number of users but don’t want to do user research. It’s slapped on events, platforms, and newsletters because “customer” feels too transactional and “audience” too passive.When tech leaders try to “build community” without understanding what community actually requires, the results are somewhere between awkward and quietly corrosive. They:  Mistake audience for community. An audience listens. A community responds. If your strategy is built around likes, views, and passive consumption, you don’t have a community. You have reach. And reach is not the same as belonging.  Equate participation with presence. Just because people show up doesn’t mean they feel safe, seen, or supported. Attendance is not connection. Zoom squares and emoji reactions are not proxies for trust.  Expect engagement without reciprocity. You can’t ask people to contribute to something that gives them nothing back, whether that is in time, recognition, or psychological safety. A Slack channel full of ghosted questions isn’t a community. It’s a liability.  Glorify lone heroes while ignoring maintainers. Tech loves a weekend war room. We reward the heroic save. But we ignore the ones who make sure it never broke in the first place. We’ve built cultures that celebrate firefighting and scoffs at fireproofing. No wonder people burn out.  Delegate culture to tools. You can’t Workday your way into mutual trust. You can’t PowerPoint your way into shared values. Tools can help, but they don’t replace the emotional labor of actually showing up for each other.It’s not that community can’t happen inside organizations. It’s that the conditions required to nurture it - trust, time, and shared responsibility - are almost always seen as overhead. And so the things that actually hold people together are dismissed as optional, inefficient, or “not part of the job.”But if you’ve ever been part of a team that really worked, you know the truth:  Community doesn’t happen just because people are put in proximity to each other. It only happens because members went out of their way to do the things not easily quantified in their performance review.Real communities are grown, not built.You’re a leader, a practitioner, or someone who’s just tired of siloed rebuffs stymieing needed progress. You want a genuine Community of Practice, not a ghost town intranet site or a newsletter with a 12% open rate. You seek a living, breathing network where people actually help each other get better at what they do, and you needed it yesterday.Before you can build a community of practice, you must understand what a real community requires. Mandating your way to communities, via command-n-control methods, won’t work. However, prepping the environment, much like a farmer prepares the soil for what might be grown, will increase your odds of success.That includes:A Shared Survival ChallengeCommunities don’t form because people like each other. They form because people need each other. What’s at stake if you don’t get better at this craft together? What problems are too big, too fast-moving, or too ambiguous for one team to solve alone?If your community isn’t anchored to a clear, shared challenge, it becomes a hobby group - or worse, the often-tried and failed company book club.Time and Permission to Show UpIf it’s not on the roadmap, it’s not a priority. Side of the desk work is the first to fall on the floor when things get stressed. People can’t contribute to a community when they’re drowning in delivery work. Protect the time. Normalize participation. Make it part of the job, not a fit-it-in-when-you-can.Recognition of the Right WorkDon’t just celebrate the people who give lightning talks or lead flashy demos. Recognize the folks who answer the same question ten times a month. The ones who fix the wiki. The ones who reach out to the new hire and say, “Hey, if you’re stuck, I’ve got time.” This is the invisible labor that keeps a community alive. This is the glue work.We were taught to ignore the glue people.Every healthy community, whether it is a software org, a rural town, or a tent city park, depends on a specific kind of person. It isn’t the visionary nor the rockstar. It is not the ninja nor the 10x developer.It is the person who remembers birthdays. The person who answers questions without making you feel stupid. The person who nudges the conversation back to what matters. The person who makes sure the snacks are labeled and the new folks feel seen. These are the “glue people,” and modern software has been lying about their importance for some time.In 2015, former Google CEO Eric Schmidt openly derided glue people. To him, the developers who wrote code and the product managers attached to them created a company’s value. The facilitators, translators, and maintainers of community, as well as everyone else who might be employed at a company, were a drag on velocity.Of course, technology is quick to copy, and in the rush to scale like Google, too many tech leaders absorbed Schmidt’s contempt without questioning the context. And in doing so, they hollowed out their own organizations, devaluing the very people who made knowledge flow, prevented silos, and held relationships together across functions and teams. That mindset has been quietly devastating.Want to know why your Community of Practice fizzled? Ask yourself who the glue person was and whether anyone supported them.A real community doesn’t scale despite glue people. It scales because of them.These are the people who do the emotional labor of culture maintenance; those who build bridges, hold memory, and sense when things are about to snap. They are the human infrastructure that makes knowledge work… work.And yet, they are rarely promoted. Rarely rewarded. Often burned out and quietly exited, leaving behind a strangely brittle organization that doesn’t understand why things feel so much harder now.We keep trying to automate connection, to platformize care, to metricize trust. But we won’t get anywhere until we recognize that the work of holding people together is work. It’s essential. And it’s worth protecting.Do you even neighbor, bro?I’ve been carrying a low-grade anxiety since the last election. It’s not just the headlines of the “no bottom” variety. It’s the increasing realization that systems like disaster response, weather forecasting, and even basic democratic stability are far more fragile than I’d care to believe.I used to find comfort in social media activism. A petition signed here or a strongly worded email there felt like a great use of this unlimited, world-wide publishing machine we all have access to. However those were just tiny pixels washed out in the 4K, omnichannel blitz of reality.Continuing with that token bare minimum feels hollow in our current situation. I still write my representatives. I still stay informed. The macro fight matters. But if this exercise in kleptocratic idiocracy has taught me anything, it’s that the micro matters, too.Every day, the vast, vast majority of us occupy places other than Washington, D.C., or Silicon Valley. These are neighborhoods, schools, parks, slack channels, and even codebases. These are our fields, ones that we can fight for or choose to leave fallow.That means practicing something smaller and slower. For me, that means inviting my kids’ friends and their parents over to roast hot dogs in the backyard. It means getting offline and going for walks with people I only know from profile pictures. I am trying to show up to things that aren’t optimized for efficiency - the small talk, the get-together in a park, even volunteering to help organize the local ultimate club.These aren’t world-changing acts, but they are world-sustaining ones.They’re an attempt to plant seeds of community - not for show, not for scale, but for resilience. For the hope that something unpredictable, wild, and new might grow. And when the storm comes, and it will come, I’ll know how to answer the call.You don’t grow community with a business plan.You grow it by being willing to plant, tend, and trust what you can’t control.You grow it by showing up.You grow it by growing up.Especially when it’s inconvenient.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-06-10T00:00:00-05:00'>10 Jun 2025</time><a class='article__image' href='/2025/06/10/GrowingCommunity'> <img src='/images/2025/city_and_field.jpg' alt='Grow Your Community'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/06/10/GrowingCommunity'>Grow Your Community</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "This Stupidity Is Brought to You by the Letter F",
      "category" : "",
      "tags"     : "Culture and law",
      "url"      : "/2025/05/02/ThisStupidity",
      "date"     : "May 2, 2025",
      "content"  : "Life before electrification isn’t some dorm room hypothetical about the good old days of kerosene and character. It’s something my grandfather actually lived through. He spoke glowingly about the Rural Electrification Administration. In the 1930s and 40s, the REA brought power for production, radios for news, and watts for refrigeration and heat to rural South Dakota. In other words, REA lit this corner of the world.Fast forward several decades, and I was a kid growing up on that same patch of prairie. Our farm had electricity, sure, but options? Not so much. On a good weather day, we might pick up the NBC or CBS affiliates from Bismarck, ND, over a hundred miles away. But even when those cut out, we could always count on three PBS stations. And thank goodness for that.I spent hours parked on ropey shag carpet watching Sesame Street, Mr. Rogers’ Neighborhood, 3-2-1 Contact, Reading Rainbow, and dozens of others whose names I’ve forgotten but whose lessons stuck. Later, when helping Dad in the fields, I’d tune the tractor’s radio to NPR: Marketplace, Fresh Air, Prairie Home Companion - those shows were a lifeline of signal and sense in a static spectrum.These weren’t just shows. They were oxygen. They were curiosity over noise, creativity over ratings, possibility over profit.So naturally, the latest plan is to destroy it.As of yesterday, President Trump signed an executive order demanding the Corporation for Public Broadcasting (CPB) cut all direct funding to NPR and PBS. This after Trump previously failed to eliminate funding in the federal budget for the organization (Congress allocated the funds anyway) and fire the CPB’s board members (something he technically doesn’t have the power to do).Because nothing says “limited government” like micromanaging Elmo.Connection is InfrastructureA country doesn’t stop at the edge of the suburbs. The REA knew that in the 1930s, which is why it didn’t throw up its hands and say, “Sorry, Dakotas; come back when you have your own Rockefeller or J.P. Morgan.” It brought electricity to the places that private industry couldn’t be bothered with. Because connection isn’t just about convenience. It’s about opportunity. It’s about building neighborhoods. It’s about saying, “You live here too. You matter.”That same mindset is what made public broadcasting work. NPR and PBS didn’t show up in rural towns because there was money to be made. They showed up because we decided - as a country - that everyone should have access to stories, education, and the arts - not just the zip codes capable of subscribing to stream six subscription services only to complain that there’s nothing on.That access is infrastructure. Not fiber optics or 5G towers; cultural infrastructure. It doesn’t just keep the lights on. It keeps the mind open.Despite what Silicon Valley thinks, not everyone has “infinite content.” In countless rural towns, tribal lands, and underserved neighborhoods, CPB stations are still the only ones reliably broadcasting anything beyond conservative AM talk radio and reality television.Do you want to cut that? Congratulations: you’re not shrinking the government. You’re shrinking our cultural appreciation to what’s popular at the local truck stop.Windows, Not MirrorsMost media today is a mirror, and not even a good one. It’s like one of those warped funhouse jobs, one that shows you the same outrage, the same playlist, the same algorithmic dopamine hits over and over until you’re convinced you’re America’s main character.Public broadcasting doesn’t play that game. It’s a window.When I was a kid, those windows opened to a world where spelling was fun, art was possible, and kindness was a virtue, not something worthy of derision. 3-2-1 Contact made me feel like a scientist. Mark Kistler made me believe I could draw a three-dimensional cube - and maybe, someday, a life beyond it.As I grew older, the windows just got bigger. Great Performances aired ballet from New York. Austin City Limits introduced bands I’d never hear on Top 40. PBS NewsHour offered nuance, not noise. NOVA, Masterpiece Theatre, Live from Lincoln Center, Nature - shows that trusted you to be curious without clickbait.And in the fields, driving the combine, NPR didn’t just fill the the gaps between static, it filled the gaps in my understanding. Marketplace, Fresh Air, Car Talk, and more - these were shows that made me laugh, made me think, and filled the void between horizons.These weren’t just programs. They were public goods wrapped in broadcast signals.Defund CPB and you’re not just pulling funding. You’re pulling the blinds.Trusted Journalism for Less Than a Cup of CoffeeSome critics call NPR and PBS “state-sponsored media,” as if Wait Wait… Don’t Tell Me is a weekly psy-op and Antiques Roadshow is how the government launders vintage depression glass.Let’s clear that up.The Corporation for Public Broadcasting receives about $500 million a year. That sounds big—until you stack it against the $6.9 trillion federal budget. CPB’s share? About 0.007%. If the federal budget were a dollar, CPB would be getting seven-tenths of a penny.That works out to about three bucks per American taxpayer per year. You probably spent more than that this morning on a latte that tasted like toasted mulch.For that, you get This American Life, the BBC World Service, PBS NewsHour, All Things Considered, and yes - Arthur. You get national news that isn’t chasing clicks, local radio that doesn’t have more ads than content, and investigative reporting that isn’t trying to get ratioed on X.Defunding it isn’t about saving money. It’s about starving truth. It’s about ensuring the only voices left are the ones yelling… increasingly through megaphones they control.The Cost of a Public Good Is the Cost of a Functioning SocietyNo one demands the fire department turn a profit. We don’t expect roads to pay for themselves via billboards and sponsored potholes. Amber Alerts don’t have “click to skip ad” buttons and the U.S. Postal Service doesn’t only serve zip codes with good margins. Public services cost money—because they’re worth it.Rural electrification didn’t happen because private companies felt generous. It happened because the government had the guts to wire up the places Wall Street wouldn’t touch. And what happened? Productivity soared. Property values climbed. Infant mortality fell. According to economic historians, it was one of the best infrastructure investments in American history.Public broadcasting operates on that same principle. It may not juice anyone’s quarterly earnings, but it boosts school readiness, civic participation, and basic media literacy - especially in places commercial media abandoned decades ago.A PBS-sponsored study found that children who watched PBS Kids made significantly greater gains in math and literacy than their peers. That’s not “TV as a babysitter.” That’s TV as a classroom. A mentor. A portal.CPB doesn’t cost much. But it does cost something. And it should. Because that’s what we do with good things—we invest in them.Don’t Wait for the ObituaryThis isn’t a drill. With the stroke of a pen, Trump ordered CPB to cut all direct funding to NPR and PBS. After failing to kill it in Congress and fire the board comes the slow strangulation by legally dubious decree.Make no mistake: stations will go dark, especially in rural areas where the margins are thin and the signals are already faint. Some won’t come back.That’s where you come in.If you’ve got the means, donate to your local station. Don’t wait for a tote bag. Don’t wait for the guilt-trippy jazz saxophone interludes during pledge week. Do it because the lights are flickering and someone has to keep them on.If you don’t have the cash right now, fair enough. But turn it on. Find your local PBS or NPR affiliate. Watch it. Listen to it. Let your kid stumble onto something beautifully weird between Sid the Science Kid and NOVA. Let yourself be surprised by something that wasn’t written by an algorithm or filtered through a for-you-page.Try it for a week. You might find your new favorite show. Or at least remember what it’s like to be informed by something other than your feed.This isn’t just about programming. It’s about a shared belief that every zip code deserves signal.If we let CPB go dark, we’re not just cutting costs - we’re cutting people out. And no one should need a streaming subscription to feel like a citizen.Update 2024-05-13Defunding the CPB isn’t new. I stumbled across this political cartoon by David Horsey from 2012. Several versions have been circulating online recently, albeit with “Elon Musk” replacing “Mitt Romney”.Despite the age, the math still checks out: approximately six hours of what the U.S. spends on defense is the equivalent of an entire year of CPB funding.Update 2025-05-14At the beginning of this week, Minnesota Public Radio set a goal of raising $1 million during their spring pledge drive. It was an audacious amount, but one that was, seemingly, necessary in face of state and federal funding uncertainty.Not only did they reach their goal - they smashed it. The million was raised by early Friday and then members continued shocking the on-air talent with the amount and speed with which gifts were matched - something that their 20-year veterans referred to as “historic”. These are are challenging times, and not every NPR or PBS station has the same community support as MPR. But seeing folks turn up and respond to this call overwhelmingly was a fantastic win to carry into the future.My preferred MPR station is The Current, a non-commercial indie rock station. It is broadcast across Minnesota and can be streamed online. It recently celebrated its 20th anniversary and I’m thrilled that it’ll continue being around for the foreseeable future.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-05-02T00:00:00-05:00'>02 May 2025</time><a class='article__image' href='/2025/05/02/ThisStupidity'> <img src='/images/2025/horizon.jpg' alt='This Stupidity Is Brought to You by the Letter F'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/05/02/ThisStupidity'>This Stupidity Is Brought to You by the Letter F</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Ironies of Agentic AI",
      "category" : "",
      "tags"     : "Software Development and AI",
      "url"      : "/2025/03/13/IroniesOfAgenticAI",
      "date"     : "Mar 13, 2025",
      "content"  : "The “Ironies of Automation” Paper Defines a Paradox of AutomationRuth Malan, a software architecture and systems consultant, organizes the wonderful “Papers in Systems” discussion series (I’ve also taken her Organizational Design Masterclass). During those virtual Zoom sessions, facilitators present a noteworthy paper, and the assembled group share their thoughts on the piece. It can be an eye-opening experience, if for no other reason than to realize that annoying boogeyman you thought you faced alone happens to also be hiding under a lot of other people’s beds.The latest installment, led by Alex Ptakhin, covered Lisanne Bainbridge’s 1983 paper, Ironies of Automation. As Bainbridge says on that site:  “This was written before I had a personal computer, let alone a mobile phone. Of course there has been much process in the last 40 years in the technology of providing both operators and writers with support, but evidently the question remain.”And it is true. While Bainbridge’s observations were on the operation of industrial control systems, she might as well have been talking about how today’s organizations approach AI.Brainbridge’s begins with an apparent paradox: that by adding automation to a system increases the dependency on a trained human operator rather than decreases it.  “The classic aim of automation is to replace human manual control, planning and problem solving by automatic devices and computers. However, as Bibby and colleagues (1975) point out : “even highly automated systems such as electric power networks, need human beings for supervision, adjustment, maintenance, expansion and improvement. Therefore one can draw the paradoxical conclusion that automated systems still are man-machine systems, for which both technical and human factors are important.” This paper suggests that the increased interest in human factors among engineers reflects the irony that the more advanced a control system is, so the more crucial may be the contribution of the human operator.”The automation paradox is that automation is pursued to remove human inefficiencies, yet highly automated systems still require human supervision, adjustment, maintenance, and decision-making. This is because operators are often left with tasks that are difficult to automate, such as handling emergencies or diagnosing failures. And the more sophisticated an automated system becomes, the more crucial human involvement may be and the more cognitively demanding the job becomes, especially in abnormal situations.The bottom line is that rather than removing human dependencies, automation often shifts and amplifies them. If you’ve ever been part of a DevOps or Platform Engineering transformation effort that started with great fanfare and then found yourself drowning in YAML only a few years later, you have experienced this phenomenon personally.Today’s Automation De jour: Agentic AIWhich makes this a great moment to talk about Agentic AI. By now, most people have had some first-hand experience with generative AI. Even if you aren’t generating images with Midjourney or emails with ChatGPT, you’ve probably seen generated summaries at the top of your search results, had it pop up in your office suite, or discovered that a VC swapped it for the toy in your breakfast cereal.Agentic AI, an increasingly buzzy term since being coined last November, takes this a step further. It refers to programmatic systems that can autonomously take actions, pursue goals, and make decisions without human intervention at every step. Unlike people’s use of Claude or ChatGPT’s chat interfaces, which respond when prompted, agentic AI actively engages with its environment, initiating actions and persisting toward objectives.In describing Agentic AI as the highest level in their enterprise AI maturity model, Michael Coté and Camille Crowell-Lee describe Agentic AI operation as:  Breaking down a request into a plan.  Executing each step (calling APIs, running microservices, executing code).  Analyzing the outcomes, adjusting if needed.The example they use to describe how this works in practice is, basically, the plot of those Matthew McConaughey Salesforce ads:  “Think back to the restaurant reservation app. First, the agentic application would reason out that it needs to find your preferences for a restaurant. This might mean asking you directly, but it might also mean looking at your past reservations and reviews you gave. Perhaps you like sitting outside, but is it raining? The intelligent application would look up weather for your area. And so forth. Once this “research” is built up, the agentic AI will then use its tools to look up available tables at matching restaurants, and if it finds a good match, make the reservation for you, again by making an API call. Of course, a human (that’s you!) can step in at any point to move the workflow along or modify it.”Ramifications Of Looking At Agentic AI Through an “Irony of Automation” LensNote the “step in at any point” statement. Suppose we apply Brainbridge’s Ironies of Automation truths to Agentic AI. In that case, we can anticipate several key ramifications - many of which mirror or even amplify the problems previously seen in automation-heavy systems.The Oversight Paradox: Humans Will Still Be Needed But in More Challenging WaysExpectation: Agentic AI systems will be fully autonomous, reducing the need for human intervention.Reality: If you thought war-room debugging was bad now, just imagine all the comradery you’ll get from HAL 9000 after the pager-duty notification goes off at 2am. Humans will still need to monitor, correct, and override AI behavior, but this task will become more complex and cognitively demanding because:  AI decisions are made using logic that may be opaque or non-deterministic.  Failures will often occur at the edges of AI capability, where human expertise is weakest (since humans will have been out of the loop).  Just as pilots struggle to take over when autopilot fails, humans will be asked to intervene in situations they are least prepared for, often under stress.Ramification: AI oversight will become a specialized, high-cognitive-load task rather than a simple supervisory role. Human skills will atrophy while reliance on AI grows, at least until intervention is suddenly needed in a high-stakes situation.The Black Box Monitoring ProblemExpectation: AI agents will self-monitor and self-correct, reducing human burden.Reality: “Explainable AI” is still one to two years away, just like how Level 5 self-driving cars are gonna happen any day now and this will be the year of Linux on the desktop. Monitoring AI will be qualitatively different from traditional automation because:  AI decision-making is often opaque (e.g., large language models, reinforcement learning).  AI operates in complex, evolving environments, making the establishment of clear rules for acceptable behavior harder.  AI doesn’t just “execute” tasks like traditional automation - it autonomously decides how to execute them, creating failure modes that are hard to anticipate.Ramification: Humans will struggle to monitor AI decisions in real-time, just as DevOps engineers struggle with brittle, YAML-driven pipelines. The very complexity AI is meant to reduce will resurface in debugging its behavior.The “Skill Rot” Problem: Humans as Unpracticed AI “Owners”Expectation: AI will handle most routine decision-making, freeing humans for “higher-level” strategy.Reality: Remember the Y2K bug, when enterprise recruiters beat down retirement home doors for Fortran and Cobol programmers? What if we recreate that 52-card pickup between all our subject matter experts and our business-sensitive context on a recurring basis?  When humans are removed from day-to-day operations, their ability to intervene effectively in edge cases deteriorates, similar to:  Pilots losing manual flying skills due to autopilot dependence.  Process operators in automated plants struggling to diagnose failures because they lack hands-on experience.  Software developers becoming automation babysitters rather than programmatic experts.Ramification: Human expertise will degrade over time, just as in other automation-heavy fields. This is dangerous because when AI fails, humans will have to step in, but they’ll be less capable of doing so.The Brittle Autonomy TrapExpectation: AI systems will become robust and handle more complex tasks over time.Reality: You asked the AI to buy lunch for the seaside offsite, and now it’s sending a DoorDash driver with 48 pounds of frozen shrimp to your office. Over-automated AI systems could become brittle, meaning:  AI can handle predictable tasks exceptionally well, but when unexpected scenarios arise, it collapses catastrophically.  AI can mask failures - just as industrial automation can compensate for a failing machine until a catastrophic breakdown.  Humans may not realize AI is failing until it is too late.Ramification: AI will make systems appear more stable than they are until a major failure reveals hidden fragility, just as DevOps pipelines and industrial automation have done in the past.The Ironies of Agentic AIIn 1979, a presentation at a regional IBM office led to one of the most memeable images of our age:While many have attempted to track the original author, the slide’s origins appear to have been lost to a flood in 2019. But the sentiment is true: people need to be accountable, not just to provide the “one neck to wring” when things go wrong, but because AI has no concept of morality, ethics, or law. Human judgement in these systems is a feature, not a bug.The more we delegate to AI:  The more challenging it will be for humans to intervene effectively when needed.  The more brittle and opaque our systems will become.  The greater the risk that AI will exacerbate rather than eliminate human errors.Just as Bainbridge’s Ironies of Automation warned that automation doesn’t eliminate human problems but shifts them, Agentic AI may increase a company’s dependence on human oversight, but in a harder, not easier way.Executives, especially under current economic pressure, are keen to buy Agentic AI’s to achieve additional efficiencies while reducing employee overhead. However, the actual outcome may be systems where people are still crucial, but in ways they neither anticipated nor are well-prepared for.Generative AI systems have utility. In fact, I used several of these tools to help write this piece: asking where the central argument could be stronger, looking for related examples to address gaps, and correcting the overall grammar. And from industrial robots on assembly lines to inbox spam detection, there are copious examples of automation being a net positive in modern life; the automation doing the jobs that are either too tedious, dangerous, or unfulfilling for human effort.These agents will be attempted. That bandwagon has left on autopilot CoPilot™. However, as those responsible for manifesting those systems within organizations, it is imperative that we heed Bainbridge’s “Ironies of Automation” and don’t blindly automate everything. When automation is called for, we must keep human operators engaged through training, simulation, and periodic manual operation while designing automation to fail in clear and obvious ways to prompt easier human interventions. If we can do that, we’ll support and sustain human expertise, not erode it.Update 2025-06-04There was a recent exchange on Mastodon that, I thought, reflected this article’s premise. While linking to an article on requiring drivers in self-driving vehicles, Brian Marick noted, “Is there any safety lesson more basic than ‘even trained humans are really bad at staying focused, ready to intervene, when the need for intervention is infrequent’? And yet here we are, making the same damn mistake again.”Donald Ball responded, “These systems are lousy at producing safety but aces at producing scapegoats to serve as the accountability sink.”",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-03-13T00:00:00-05:00'>13 Mar 2025</time><a class='article__image' href='/2025/03/13/IroniesOfAgenticAI'> <img src='/images/2025/robot.png' alt='Ironies of Agentic AI'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/03/13/IroniesOfAgenticAI'>Ironies of Agentic AI</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Oppose the TAKE IT DOWN Act",
      "category" : "",
      "tags"     : "law and copyright",
      "url"      : "/2025/03/10/StopTheTakeItDownAct",
      "date"     : "Mar 10, 2025",
      "content"  : "There are real problems that could be addressed by new legislation. Along with ubiquitous cell phone cameras and deep fake abilities have come a rash of gross online behavior; what we might have once referred to as revenge porn is now collectively referred to as non-consensual intimate imagery (NCII).The U.S. Senate recently passed the TAKE IT DOWN Act to address the problem. The intention is good. However, the proposed implmentation leaves much to be desired - so much so that Trump excitedly referenced wanting to use the bill to silence his past accusers during last week’s address to the joint session of Congress.I sent letters to my Congressional representation voicing my concerns. The letter to Senator Amy Klobuchar, co-sponsor of the bill, is below.Subject: Opposition to the Take It Down Act (S.146)Dear Senator Klobuchar,I am writing to express my strong opposition to the Take It Down Act, which recently passed the Senate and you co-sponsored. While the bill’s stated intent- to combat non-consensual intimate imagery (NCII) - is laudable, its approach is deeply flawed. As drafted, the bill creates an overbroad notice-and-takedown system with severe penalties, incentivizing platforms to remove content without meaningful review. This will not only result in abuse but will actively suppress lawful speech.This has happened before: The Digital Millennium Copyright Act (DMCA) was designed to protect intellectual property, but its notice-and-takedown provisions have been repeatedly weaponized. Tens of thousands of fraudulent DMCA claims have been used to silence journalists, suppress negative press, and manipulate online discourse. The Take It Down Act creates a nearly identical system, except instead of copyright claims, it enables virtually any powerful individual or institution to demand the removal of speech they dislike under the guise of NCII complaints.The chilling effect is obvious. Faced with a 48-hour takedown mandate and the threat of legal or financial penalty, platforms will opt to remove content immediately, even when claims are unfounded. This will disproportionately impact:  Survivors of abuse who use online platforms to expose their abusers - This law will provide bad actors with a new tool to erase evidence of their misconduct.  Journalists and activists documenting abuses of power - From war crimes to workplace harassment, critical reporting could be wiped from public view with a mere takedown request.  Platforms already struggling to moderate content responsibly - The law forces them to err further on the side of mass removal, leading to default state of over-censorship.Even more concerning, President Trump has openly admitted that he intends to use this law for his own benefit. In this year’s joint address to Congress, he stated, “And I’m going to use that bill for myself too if you don’t mind, because nobody gets treated worse than I do online, nobody.” We should work to thwart totalitarian tendencies during these unprecedented times, not further encourage them.There are better ways to combat NCII. The National Center for Missing &amp;amp; Exploited Children (NCMEC) has already developed a voluntary, hashed-based system to help platforms identify and remove problematic content without requiring rushed, legally fraught decisions. Similarly, StopNCII.org has developed a robust, privacy-protecting approach that allows individuals to preemptively flag sensitive content for removal without government intervention. Groups like Federated Trust and Safety (IFTAS) have compelling solutions but are struggling for support to continue their work. Strengthening these initiatives through funding or platform incentives would be far more effective than mandating a sweeping, abuse-prone legal regime.For these reasons, I urge you to revisit your support for the Take It Down Act, work on these gaps should the opportunity arise during reconciliation, and support solutions that address the real problem without undermining fundamental freedoms.Sincerely,Matthew ReinboldUpdate 2025-03-30I’ve heard from several recipients, including Senator Tina Smith. She has announced that she won’t seek re-election when her term ends in 2026. However, despite her time in the Senate ending, she has continued to be personal, responsive, and articulate on the issues I’ve contacted her about.Representative Angie Craig, however, is another matter. Considering she has spoken in favor of the Take It Down Act, I didn’t know what to expect writing her. However, I would have had more respect for silence than the oddly phrased, generic “protecting personal data” letter I received. I understand these are busy people and I wouldn’t expect a personalized “F-U” from a bill supporter. But printing and mailing “default data pearl-clutching response #7” from the stack just makes her (and/or her staff) look that much more out of touch with the current moment.Sigh.Update 2025-04-28As mentioned by the EFF, the U.S. House of Representatives today passed the Take It Down act. It now moves on to be signed into law by the President.Update 2025-05-15It has been weeks but I have yet to see confirmation that this has been signed. Odd.Update 2025-05-19Today, Monday the 19th, Trump signed the Take It Down Act into law.  “The law makes publishing NCII, whether real or AI-generated, criminally punishable by up to three years in prison, plus fines. It also requires social media platforms to have processes to remove NCII within 48 hours of being notified and ‘make reasonable efforts’ to remove any copies. The Federal Trade Commission is tasked with enforcing the law, and companies have a year to comply.”The Internet Federated Trust and Safety Group (or IFTAS) released guidance for online moderators on how to approach their new responsibilities under the law. This isn’t just a concern for the Instasnaps and Facetubes of the world - even moderators of individual Mastodon instances are potentially liable, as the law applies to “any online service that allows users to share or distribute user-generated content,” regardless of size or commercial status.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-03-10T00:00:00-05:00'>10 Mar 2025</time><a class='article__image' href='/2025/03/10/StopTheTakeItDownAct'> <img src='/images/2025/capital.png' alt='Oppose the TAKE IT DOWN Act'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/03/10/StopTheTakeItDownAct'>Oppose the TAKE IT DOWN Act</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On Blog Writing",
      "category" : "",
      "tags"     : "Culture, writing, and Milestones",
      "url"      : "/2025/02/04/OnWriting",
      "date"     : "Feb 4, 2025",
      "content"  : "I have several tepid attempts at lending some clarifying thought to (gestures manically) this moment. The problem, however, is that anything I have to say feels so incredibly ineffective at stopping this slow-motion trainwreck.Instead of letting a pile of half-completed work make me feel inept, I decided to switch tracks to something more approachable: contributing to an old-fashioned blog carnival. I initially saw Ethan Marcotte and Jon Hicks do their versions and was then reminded about when Garrett Coakley mentioned his post on Mastodon.Below are a few answers about how and why I blog.Why did you start blogging in the first place?Writing has always been an essential part of how I organize my internal space. Even as a kid, rather than leave things as vague notions or incomplete thoughts, I’d attempt to articulate my feelings in cheap, spiral-bound notebooks. I wasn’t saving these scraps because I thought they were genius to be mined or affirmations to follow, but just a natural part of trying to process the world around me.I loved it when people started blogging online. It felt like you got such a more authentic, genuine version of the person. Don’t get me wrong, optimizing for maximum “virality” also existed then; parasocial relationships are not new, and there were plenty of “influencers” that put on a persona before laying hands on keys existed then, too. But being able to publish something immediately, worldwide, to connect with others still is amazing, given other forms of media and their gatekeeping.What platform are you using to manage your blog and why did you choose it? Have you blogged on other platforms before?The first place I ever posted something was a Geocities site. Then I used phpBB for a while, something that makes much more sense as a forum for a community than a blog for a single person. I used WordPress for a few years, and then hand-crafted my own CMS using Macromedia/Adobe ColdFusion and MySQL. That was fun, as I got to do some interesting experiments with tagging and automatic content embedding, but, over time, it required too much overhead to maintain.Today, I use Jekyll for my blog and Ghost.pro for my API newsletter. I became a big believer in static site generation some time ago for several reasons, and the static files from Jekyll can easily be served for free from a GitHub Pages site.How do you write your posts? For example, in a local editing tool, or in a panel/dashboard that’s part of your blog?I write anything under a few thousand words in Google Docs; it has the minimal number of features and the maximum amount of universal availability. Once I have a draft I’m pretty set on, I copy the contents into Grammarly and then review the suggestions, selectively choosing which ones to apply back to the original doc. Then I copy and paste the text into the destination vessel - markdown for the blog, or Ghost’s newsletter web interface.For pieces longer than a few thousand words, like presentations, I use Scrivener. Scrivener helps me organize longer work into more maintainable chunks, with support for templates, research notes, slide sketch ideas, rich statistics, and more. It’s a bit much for one-off posts, but for more ambitious projects, I’ve found it to be essential.When do you feel most inspired to write?Inspired might be the wrong word, but I know I need to write when I feel the most at a loss. Maybe others are able to go about their days with 100% certainty of who they are and what they are doing. I’m not like that, and those moments when I feel the least in control or stressed over something unclear are the moments when I’m like, “Yeah, I need to unpack this.”Sometimes, I get a revelation or a fresh perspective. However, most of the time, just acknowledging the feeling and what might be causing it is enough to get me unstuck. I don’t think that’s the most entertaining for others to read, and usually those posts get tucked away, far from the light of the screen. And that’s OK; not everything that gets written has to be read to be useful.Do you publish immediately after writing, or do you let it simmer a bit as a draft?I rarely write and publish in one sitting. I’m almost always in a dialogue with the me I was yesterday (or the week before, or the month before that). So, in that sense, I let it simmer.However, if I’ve put in the hours on something I know I’ll publish, I’ll push through to completion if I’m close. After all, how else will I see those subtle errors only visible when everyone else can see them?What’s your favorite post on your blog?I’m proud of the “Aesop2121” utopian science fiction writing challenge I did last year. Having a place to post my software presentations, which is work I put a tremendous amount of effort into, is also great.However, my most unapologetic, challenging, and favorite blog post was my 2014 “orthogonal” review of Spike Jonze’s Her. There’s a cultural and technological pathos in that movie that I connected with and wanted to embellish and accentuate; I was attempting to “vibe” with a work before that was a thing. I knew I hit my mark when one of my good friends reached out after reading it and asked if I was OK. That was a proud moment for me and remains one of my favorite things (if a bit maudlin) I’ve ever published.Any future plans for your blog? Maybe a redesign, a move to another platform, or adding a new feature?There are no plans at the moment for my personal blog.After a year of attempting regular updates and specialized exclusives with my newsletter, I’ve resolved to posting when I post. The social landscape for how technical opinion is shared and promoted to broader audiences is drastically different than when I started in 2015. Frankly, I’m not sure if it makes sense any longer to log what amounts to a part-time job on such a niche topic; very few in this area seem interested in reading multi-thousand-word pieces a month. Even fewer are willing to financially support it. Whether the reason for the reception is me or the market, the bottom-line is that there are other, more enjoyable things I can do with my time.Who’s next?I will steal the idea from a few others in this series and encourage anyone writing online to just do it; reflection is almost always a worthy exercise.And when you do, ping me on Mastodon, so I can read it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2025-02-04T00:00:00-06:00'>04 Feb 2025</time><a class='article__image' href='/2025/02/04/OnWriting'> <img src='/images/2025/writing.png' alt='On Blog Writing'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2025/02/04/OnWriting'>On Blog Writing</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Pass the PRESS Act",
      "category" : "",
      "tags"     : "Culture and law",
      "url"      : "/2024/11/20/PassThePressAct",
      "date"     : "Nov 20, 2024",
      "content"  : "As the current congressional session begins to wind down, the PRESS ACT, which was passed unanimously by the House, is still waiting for a vote. As described by Zack Whittiker writing on TechCrunch:  The PRESS Act, if passed into law, would enshrine nationwide protections for journalists across the United States from being forced to identify or give up their confidential sources (except in emergency cases, like to prevent an act of terrorism). The bill also grants other protections, such as limiting what records the government can secretly take from journalists or their email or phone provider that could identify their sources — again, with a narrow set of exceptions for emergency threats.Additional coverage of the PRESS Act includes:  Freedom of the Press Foundation’s Coverage  The Society of Professional Journalists Page (with video!)  Coverage by the Electronic Frontier FoundationFreedom of the press is a really important thing, and this should be a no-brainer!. However, concerned Americans who want to see the media be able to investigate corruption and misuses of power need to encourage their Senators to act in this 11th hour.The ACLU has a convenient web form for contacting your elected official. While the form is expedient, I would encourage those who are able to send physical mail, ASAP. I understand that physical mail is more likely to be read, as it is a greater rarity in the digital age.The letter that I sent to both of my senators is below.Dear Senator,My name is Matthew Reinbold and I am proud to call Woodbury, Minnesota my home. As your constituent, I am writing to urge you to prioritize bringing the PRESS Act to a vote in the Senate before the end of this year. This bipartisan bill, passed unanimously by the House in January, is a rare example of cross-party consensus on an issue central to our democracy: protecting the freedom of the press.The PRESS Act establishes essential safeguards for journalists, preventing them from being forced to disclose the identities of their confidential sources and limiting the government’s ability to seize records that could compromise those sources. It includes thoughtful exceptions for emergencies, such as imminent threats of terrorism, ensuring national security needs are balanced with press protections.Without such protections, journalists risk facing a chilling effect—deterring critical investigative reporting that holds those in power accountable. At a time when press freedoms are increasingly under threat and government agencies could face mounting pressure to retaliate against watchdog journalism, the PRESS Act is not just timely but urgently necessary. It strengthens First Amendment protections that underpin our democratic system and ensures that whistleblowers and other truth-tellers can come forward without fear of exposure or retribution.The bill already has broad bipartisan support in the Senate, with sponsors including Senators Ron Wyden, Lindsey Graham, Mike Lee, and Dick Durbin. All that remains is for the Senate to take decisive action and bring it to a vote.As your constituent, I ask you to demonstrate your commitment to the principles of a free press and the protections our democracy depends on. Please do everything in your power to ensure the PRESS Act reaches the Senate floor and becomes law before the year ends.Thank you for your attention to this urgent matter. I am grateful for your service to Minnesota and your dedication to preserving our democracy in the face of potential adversity.Sincerely,Matthew ReinboldUpdate 2025-01-07I did hear from Senator Tina Smith shortly after holiday break. While her email was short and explained that the bill was currently in the judiciary committee, which she wasn’t part of, she expressed her support for it if or when it was brought to the floor for a vote.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-11-20T00:00:00-06:00'>20 Nov 2024</time><a class='article__image' href='/2024/11/20/PassThePressAct'> <img src='/images/2024/11/vote.png' alt='Pass the PRESS Act'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/11/20/PassThePressAct'>Pass the PRESS Act</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Thank You, Tim",
      "category" : "",
      "tags"     : "Culture and Milestones",
      "url"      : "/2024/11/13/ThanksTim",
      "date"     : "Nov 13, 2024",
      "content"  : "Growing up on a farm, I learned just how stressful harvest time is at an early age. There is a very narrow window during which it is possible to maximize your returns. Go too early, and you risk spoilage. Wait until too late, and you end up leaving money in the field. And that all depends on whether the weather holds. Mistime any of those things, and you have to wait until next spring (and another six-figure seed bill) for another chance to make things right.Despite all that, I can recall multiple times when my Dad and other farmers in our small town (population of 440) would drop whatever they were doing to help someone in need. Sometimes it would be broken equipment (sunflowers have a nasty habit of setting themselves and the combine that is harvesting them on fire). Other times it would be a medical emergency. Regardless of the context, the community would ensure that the crop made it in because that’s what being a good neighbor was about. It is about the decency and dignity we owe each other, freely given.After graduating college, my family and I have lived in several places. However, it was when we moved back to Minnesota that I felt that familiar sense of shared responsibility. People throw around abstract terms, like “community”, because they sound good. But I’m increasingly convinced few have first-hand, lived experiences with what it means to be a good neighbor, or participate, sometimes at your own peril, in mutual aid.When Governor Tim Walz was thrust into the national spotlight, I was delighted he used his platform to share and celebrate the Minnesota brand of “neighborly” the upper Midwest and Great Plains practice. The results of the U.S. Presidential election turned out differently than I had hoped. I’ll be processing that for some time to come. However, providing hope is always worthwhile, and I felt moved to thank Governor Walz for representing Minnesota as he did.A copy of the letter that I dropped in the mail today is below.Dear Governor Walz,I imagine the past several months have been a whirlwind, and I hope you’re finding moments to recover. Before the moment passes, I wanted to take a moment to thank you—not only for making Minnesota a place my family is proud to call home but also for running a presidential campaign with Kamala Harris that inspired hope, appealed to our better natures, and, above all, embraced joy.Despite the short amount of time America had to get to know you, you became known as the ambassador for Minnesota nice, an alternative example of modern masculinity, and even America’s Dad. As a father of four, I’m exhausted just contemplating that last one. But you energetically took all that on, and then some.My wife and I both grew up in South Dakota and spent two decades living across the country—Salt Lake City, Denver, and Washington, D.C. When the pandemic gave us the chance to relocate, we carefully weighed our options and ultimately chose to call Woodbury home. It was a big change, filled with the usual uncertainties. However, Minnesota has wildly exceeded our expectations.The celebration and preservation of natural beauty, strong support for public schools, and a shared commitment to treating others with decency—no matter their gender, creed, or circumstances—are core values that you and other leaders have turned into policy. Among a statewide commitment to being good neighbors, we have thrived. Thank you for being such a vital part of that.The recent election results were disappointing in many ways. I worry about what the future holds for our allies abroad and our already imperfect institutions at home. Still, as my wife said this weekend, “At least Tim is still our governor.” That’s no small sliver of a silver lining.I wish you continued success and hope you and your family find peace and rest in the months ahead. Thank you for representing the very best of what Minnesota has to offer—and for inspiring us all to be better neighbors and citizens.Sincerely,Matthew Reinbold",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-11-13T00:00:00-06:00'>13 Nov 2024</time><a class='article__image' href='/2024/11/13/ThanksTim'> <img src='/images/2024/11/hotdish.png' alt='Thank You, Tim'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/11/13/ThanksTim'>Thank You, Tim</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Surviving the Turbo Encabulator",
      "category" : "",
      "tags"     : "Software Change, management, Productivity, and Presentations",
      "url"      : "/2024/09/30/TurboEncabulator",
      "date"     : "Sep 30, 2024",
      "content"  : "It is an honor to be asked back to speak at DevOps Days. Two years ago, I covered seven soft skills for making software change happen. Last year, during the heights of generative AI hype, I did a deep dive showing practical ways generative AI could assist API development. This year, maybe more than any previous year, I have to wade through propaganda, misinformation, and outright lies - and I’m not talking about the election!Perhaps more than any other industry, software is drowning in bold claims, wild speculation, and outright exaggeration. These muddied messages about what is and is not effective impact our ability to do our best work.When I say claim, I refer to a statement or assertion that promises specific benefits, capabilities, or outcomes. These claims are typically used to generate excitement, attract investment, or even sow confusion. They range from a modest list of apparent facts to grandiose statements about revolutionary change.In this presentation, I’ll:  Introduce you to the claims made by the Turbo Encabulator  Explain why this 80-year-old engineering in-joke is more relevant to our age than ever before  Use examples from it and other sources to illustrate the techniques and outline how we might better evaluate the claims that come our wayTo understand the Turbo Encabulator relevance to our work today, we first need a bit of history.In 1944, a British engineering grad student named John Hellins Quick wrote an article for the Institute of Electrical Engineers, Students Quarterly Journal. His studies inspired the satirical description of a revolutionary technology comprised of long strings of meaningless jargon. It went something like this:  “The original machine had a base-plate of prefabulated aluminite, surmounted by a malleable logarithmic casing in such a way that the two main spurving bearings were in a direct line with the pentametric fan. The latter consisted simply of six hydrocoptic marzlevanes, so fitted to the ambifacient lunar waneshaft that side fumbling was effectively prevented. The main winding was of the normal lotus-o-delta type placed in panendermic semi-bovoid slots in the stator, every seventh conductor being connected by a non-reversible tremie pipe to the differential girdlespring on the “up” end of the grammeters-“— John Hellins Quick, 2nd paragraph of “The turbo-encabulator in industry”, Students’ Quarterly Journal, Vol. 15, Iss. 58, p. 22 (December 1944)It went on like this for several additional paragraphs.World War II brought rapid advancements in electronics, computing, and telecommunications. Post-war Great Britain was not the only country transformed (and, ultimately, having to adapt) to increase technology sophistication. In the United States, industries were just as impacted. And, like Great Britain, those in the United States challenged to comprehend technobabble and jargon found the Turbo Encabulator just as funny. Or at least some did.In May of 1946, Time magazine published excerpts from the article under the title, “For Nofer Trunnions”. Reader feedback was mixed. One letter said, “My husband says it sounds like a new motor; I say it sounds like a dictionary that has been struck by lightning.”In 1962, General Electric even published a data specification sheet for the machine, including a plausible-looking write-up amidst its other hundreds of offerings.The Turbo Encabulator might have been a curious footnote in the annuals of engineering history (or at least an even more obscure one) if not for an instructional film actor named Bud Haggart.Haggart became a minor celebrity in the Detroit area for appearing in several automotive information and instruction videos. One of his regular gigs was doing how-tos for GMC mechanics.In 1977, Haggart convinced the director and the crew to stay after the recording of a GMC Trucks training film. He wanted to record his version of the Turbo Encabulator. The “script”  Haggart ad-libbed in one take was based on the original John Hellings Quick article. That original recording can be found on YouTube.It amazed the crew, who you can hear laughing at the end of the piece. They asked Haggart how he could read the script with such a straight face. Haggart replied that “It sounds like everything else you have me read.”Haggart was asked to reprise the role several times in subsequent years, each time with increased production value.  1988 - A few years later, Chrysler brought Haggart in to film a new version of his Turbo Encabulator, but this time, the script was changed to imply that the company had made the device.  1988 - Not wanting to be left out, Rockwell International, an American automotive manufacturing conglomerate (among other things) asked Haggart to pitch a “Rockwell Turbo Encabulator”.  1996/1997 - Haggart (and slapstick assistant) deliver a version of the Turbo Encabulator for Dodge Division’s Viper Automotive Master Tech Tip.The popularity of these skits, preserved on YouTube and propagated across the internet via social media, chats, and forums ultimately inspired imitators, a brief sampling of which is below. Once you watch a few of these and trigger the algorithm to show you related videos, you quickly realize there’s an entire “Encabulator Cinematic Universe,” or ECU, for nearly every industry, interest, and profession - a brief sampling is listed below.  1997 - Rockwell Automation released a version of the “Retro Encabulator”, featuring Mike Kraft  2013 - SciShow featuring Hank Green on “The Retro-Proto-Turbo-Encabulator”  2016 - Path video discussing the Micro Encabulator  2018 - The Macquarie Telcom SD-WAN Turbo Cloud Encablulator  2021 - The Electro Turbo Encabulator with multiple electronic YouTubers  2022 - SANS ICS HyperEncabulator (featuring Mike Kraft reprising his role)  2023 - The crazy legal issues of the turbo encabulatorThe Turbo Encabulator has found purchase in areas as diverse as photo gear vlogs and science education curricula because technology has infused so many aspects of our modern, everyday lives. As the need for change incentivizes products to move from rigid atoms to malleable bits, we find ourselves constantly confronted with the kind of technobabble and jargon that sounds straight out of one of the many Turbo Encabulator homages.I would argue that the pace of change hasn’t sped up over the last century, not really. However, what has changed is the amount of information exposure we undergo daily, and with that exposure comes an incredible number of claims. Blogs, websites, social networks, podcasts, tutorials, videos - in an era of sophisticated “content marketing”, the amount of potential information you have access to far exceeds the amount of time you have available to consume it. And on the internet, anyone can make claims - right, wrong, or otherwise.On the left is a chart showing that the number of hours uploaded to YouTube every minute exceeded 500 hours. This equates to approximately 30,000 hours of newly uploaded content per hour.On the right is a chart showing the growth of posts made to Reddit. In 2023, an estimated 469 million posts were published on Reddit, an 11.14% year-over-year increase..With everybody making all those claims, it becomes more challenging to be heard. As a result, those with something to say must resort to increasingly Turbo Encabulator-like approaches to stand out.That is why so much of what you might hear about today’s technologies sounds like an excerpt from the Turbo Encabultor script. You’d be forgiven for thinking these real claims, things I’ve seen in the past week, is jibberish:  “While handling APIs using AGI is not feasible at this time, employing an ANI approach can lead to very powerful M2M APIs.”  “The Non-Fungible Token (NFT) ecosystem is fundamentally anchored in the decentralized consensus mechanism inherent to blockchain technology, specifically leveraging the immutability of distributed ledgers to authenticate and tokenize unique digital assets. NFTs exist as cryptographically secured, ERC-721 or ERC-1155 smart contracts on the Ethereum blockchain, although cross-chain interoperability with other Layer-1 protocols like Binance Smart Chain and Solana is increasingly prevalent.”  “Private AI x CPaas offer on-premise LLM deployment for organizations to ensure data privacy and security while leveraging the power of modern LLMs and Generative AI through platforms like Ollama. This solution would include on-premise (or collocated) deployment, customizable AI models tailored to organizational needs, robust security measures, easy integration with existing systems, and continuous deployment.”Of course, ridiculous, over-the-top claims have become LinkedIn “influencer’s” stock-and-trade. Good for them. Confusing for the rest of us.In an ideal world, we would have the time, energy, and inclination to develop firsthand experience with these various technologies. However, applying that rigor to compare and contrast what is said against our hard-won knowledge doesn’t scale to the number of claims we’re faced with. This is especially true as our careers grow and change.Whether moving into higher management roles or becoming deeply specialized individual contributors, the reality is that we are no longer hands-on with every tool and innovation shaping online discourse. This occurs as we are tasked with guiding our teams and making strategic decisions about these approaches - approaches we may have only a surface-level understanding of if any at all. This disconnect poses one of the most significant challenges aging software professionals face—how to effectively evaluate and make informed decisions about technologies they no longer have the time or capacity to master firsthand.One approach would become cynical: when confronted by the overwhelming number of claims, adopt a mindset that there is nothing new and that whatever the first technology we professionally mastered is the peak of practice - everything else is just unnecessary complexity.I’m not saying that some of these recent “Make X Great Again” efforts aren’t without good reasons. However, if you read enough of the justifications, you’ll get a whiff of sour grapes, the hint of “everything was better in the old days”.Efforts that come to mind include:  Trunk Based Development  Vanilla JavaScript/No-React  Cloud Repatriation  Moving back to Monolithic architectures after trying MicroservicesI can sympathize. Nobody wants to invest their energies into something that becomes the next Google Wave or Microsoft Silverlight. The cynical approach is also straightforward to apply.However, the danger of adopting a cynical outlook and rejecting all claims outright is that it risks missing profound and industry-altering changes - and while that doesn’t happen as often as some might claim, it does happen.When evaluating Turbo Encabulator-like technobabble in claims, our old frames of reference might not always apply. What was once true in the past may not hold true in a different software paradigm.Flimflam is not new. But the democratization of the internet means there are more claims than ever, with those with something to say working harder than ever to get their message heard above the crowd. That saturation necessitates that we, those of us in all manner of tech leadership, become more active as consumers - not passive conduits for the vendor, analyst, and consultant messages, but people making informed judgments of what we do see.Evaluating new claims becomes an exercise in discerning meaningful innovation from marketing-driven hype—a skill that must be honed over time.So how do we do that?When evaluating a convoluted claim, the first step is approaching with a healthy dose of skepticism.I should point out that skepticism is not the same as cynicism.Healthy skepticism involves questioning and critically assessing claims, seeking evidence and reasoning before accepting them. Skeptics remain open-minded and willing to change their views if presented with compelling evidence. This approach helps evaluate technology claims objectively, without being swayed by hype or marketing, while still considering potential benefits.Conversely, cynicism tends to dismiss claims outright, often assuming that they are exaggerated or false without engaging in critical evaluation. Cynics generally expect deception or failure, and their approach is more closed off, making it harder for them to acknowledge the value of genuinely promising technologies.In short, skepticism is about informed doubt and a willingness to engage critically, while cynicism is about premature dismissal and a more negative, closed mindset.Of course, not all sources are the same, and some warrant a higher degree of skepticism than others. We know (or should know) that the claim that gets the most shares or comments is not equivalent to something with the highest quality. Likewise, something published on InfoQ may be taken on more face value than whatever is at the top of HackerNews.In the process of developing our list of trusted sources, it is also important to incorporate sources of information that will offer new perspectives and challenge our own assumptions. It is not a matter of picking fights; rather, it is about getting out of our own “filter bubble”. This may feel uncomfortable at first. However, if we’re will to entertain the claims of something potentially disruptive, we may discover that those claims may be bogus, and we have further confirmation in our own belief. Or we may find a compelling reason to change.Ultimately, the curation of trusted sources is about practicing curiosity and self-challenge. That’s what learning is all about. You can’t understand the world, or even a tiny part of it if you don’t stretch your mind.Companies resort to hyperbolic claims to be heard in a noisy, crowded digital landscape. Therefore, it is essential to understand how this inflation manifests to identify when it is happening.Whether we attend conferences or scroll through influencer LinkedIn, we’ve probably heard of “Buzzword Bingo.” To help us remember the common linguistic patterns used in claims that are more “vibes” than communication, I’ve grouped the techniques into categories that spell “B-I-N-G-O.”To help illustrate each, I’m going to highlight the parts of the Turbo Encabulator script where each rhetorical device is used.The letter “B” in Bingo stands for Buzzwords. Buzzwords are popular terms or phrases used so frequently, often in a positive or promotional context, that they lose their original meaning or become vague. They are meant to grab attention and sound appealing but may not provide much specific information. For example, words like “innovative”, “disruptive”, or “synergistic” might be used to describe almost any new idea or technology, even if it doesn’t truly revolutionize anything. Phrases like “game-changing,” “future-proof,” or “industry-leading” often sound impressive until one stops a moment to reflect on what game or industry is being talked about.I wrote about Fielding’s disallusionment of of how the term “REST” became a buzzword, despite his vigorous defense.Conceptually, we all probably understand buzzwords and have a few examples that spring to mind. Let’s move on to our next category, which is a bit more nuanced.The “I” in Bingo represents “Implausible Promises”. These are over-the-top claims about what technology can do, like “limitless potential”, or “effortless transformation.” Other examples include:  Completely eliminate risk  Meet any demand  Transform your business overnight  Results guaranteed  Endless possibilitiesWith each of these, there’s an absolutism to the benefit - “limitless”, “any”, “endless” - that rarely exists in the real world. If you can add “or your money back” to the claim, what you have is an infomercial, not a viable claim.If you spend any amount of time in the blockchain/crypto game space, it doesn’t take long to run across an “implausible promise”. But reading about the aftermath does make for some fun schadenfreude.Speaking of absolute quantities, the “N” in Bingo stands for “Numeric Certainty”. This situation is where dubious statistics or metrics are sprinkled throughout the claim to give the language a veneer of mathematical rigor. Some examples include:  Double Your Performance  10x Developer  300% ROI Increase  “Five nines”  First Ever!Sometimes, numbers associated with a claim are valid and based on repeatable methodology. When misused, however, they are either exaggerated or cherry-picked to impressed.Numeric certainty appeals to a very specific type of reply guy on miniblogging platforms. The misuse of statistics made on Twitter claims played a important part in the Lambda school scandal.The “G” in Bingo stands for “Glossification”. This is when new words are coined to “borrow” a positive associate with another thing, whether that thing is another beloved trend or well-received product. It’s like the trend of startup companies registering ‘.io’ domain names in the 2010s to imply how innovative or tech-forward they are. Nowadays, the “cool” domain is “.ai.”In the late 1970s and 1980s, Microsoft was not the only software company that sported the “soft” suffix to clearly attach itself to the personal computing software wave. Twenty years ago, you’d add an “e” to your product to connote that it was somehow networked. In the iPod era, many companies prefixed their products with “I” to evoke the positive aspects of Apple’s industrial design.“Crypto” is a habitually abused glossification prefix. Terms like “HyperScale” or “Serverless” are other examples of glossification that aren’t brand names. The addition of “Turbo” in “Turbo Encabulator” is an example of glossification.But glossification isn’t limited to written language. Borrowing positive connotations extends to body language, as well. But just because a company leader talks like someone with immense impact doesn’t mean the tech can walk the walk.Finally, we’re to the final character in Bingo. The “O” stands for “Obfuscation”. Obfuscation uses overly complex or technical-sounding language to confuse or impress, often hiding a lack of real substance. It’s designed to make something sound more advanced or important than it really is. Examples include phrases like “leveraging multi-cloud quantum synergies” or “immutable distributed ledgers” - things that may sound impressive but don’t necessarily convey meaningful or clear information.Obfuscation is a close cousin, but different than buzzwords. Buzzwords are overused, trendy terms that no longer have specific meanings. Obfuscation, on the other hand, is about using complexity to obscure or confuse.John Green is the author of many books, including The Fault In Our Stars. He is also one-half of the Vlogbrothers. While playfully discussing parts of speech, he stated, “language doesn’t exist to oppress us. It exists to promote the clarity of expression.”Sadly, not every one that speaks seeks to clarify.The Turbo Encabulator is an eighty-year-old engineering joke whose jargon-filled meaninglessness cuts too close to home. Technobabble is even more challenging today in a world of claims and counterclaims. However, with a few commonsense steps, including the ability to recognize the rhetorical tricks as they’re presented, you’ll be able to enjoy the joke rather than become the butt of it.Thank you for the time and the opportunity to share.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-09-30T00:00:00-05:00'>30 Sep 2024</time><a class='article__image' href='/2024/09/30/TurboEncabulator'> <img src='/images/2024/09/Slide1.PNG' alt='Surviving the Turbo Encabulator'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/09/30/TurboEncabulator'>Surviving the Turbo Encabulator</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Flies and the Honeypot",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/29/TheFliesAndTheHoneypot",
      "date"     : "Mar 29, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.Concordance Day, 2121, dawned bright and arid. It was a holiday to celebrate the Grand New Deal and repent for the sins of centuries past’s ancestors. Achieving consensus, some might argue enlightenment, had come at great expense during the Billionaires’ War. The day’s gatherings, music, play, and more - marking the moment to remember what might have been and expressing gratitude for what had become was no small undertaking.It began with sunrise services, during which people were encouraged to ponder the sacrifices made to ensure humanity’s health and happiness. The meditative time closed with a blessing for sustainability and mutual respect for all, an allusion to “The Pivot” becoming “The Promise”.Community productions and interactive retellings follow a hearty breakfast. Historians, ecologists, and storytellers of all skills portray the past’s excesses. They speak of bleached ocean coral, forests razed for palm oil, and children who went thirsty while data centers drank freely.One of the most dueted stories each year is that of The Flies and The Honey-Pot. What once was considered a children’s fable has now become a regular highlight, as the recording of each truthsayers version is uploaded and added to, in near real-time; a modern world-wide story circle.In the standard version, flies discover a jar of honey spilled in the storeroom. Ecstatic over their luck, they land and begin eating greedily, not realizing that their feet have become stuck in the process. Unable to release themselves, they lament their fate before suffocating - giving their lives for a passing taste of sweetness.Or at least that’s the start. Some give the flies different voices. Others, as they are able, act out the scene. And still others animate or compose, assigning import to historical events. The fate that finds us, greed, and the ultimate consequences are told again and again so as not to forget just how precariously close humanity had come to a similar fate.As the afternoon grows long, the tone shifts to celebration of the great change: uplifting praise of the collective action that closed holes in the ozone layer, universalized healthcare, and reforested vast swathes of Amazon rainforest.As the bioluminescent lights begin to glow, people bid each farewell and retire to their homes. After Concordance Day, they’ll continue on the difficult but necessary journey towards a better world, one that is more sustainable, equitable, and hopeful. They’ll do so not with scorn or damnation of the past but with gratitude that they have the opportunity to learn.Original FableA NUMBER of Flies were attracted to a jar of honey which had been overturned in a housekeeper’s room, and placing their feet in it, ate greedily. Their feet, however, became so smeared with the honey that they could not use their wings, nor release themselves, and were suffocated. Just as they were expiring, they exclaimed, “O foolish creatures that we are, for the sake of a little pleasure we have destroyed ourselves.”Moral of the StoriesIn software, as in life, indulgence in excess can lead to one’s downfall. The pursuit of immediate gratification may come at the expense of one’s well-being or survival.Wrapping UpThat concludes the March Writing Challenge and, with it, Aesop 2121. If you have enjoyed these hopeful tales of an alternative future and are in a position to give, please consider supporting The Sunrise Movement, a youth-based, community-focused group advocating for a Green New Deal.Dystopia doesn’t have to be the default. Supporting groups, like the Sunrise Movement, is part of how we ensure viable alternatives take root. Donate today.A picture from the Global Climate Strike March in Washington, DC, September 20th, 2019",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-29T00:00:00-05:00'>29 Mar 2024</time><a class='article__image' href='/2024/03/29/TheFliesAndTheHoneypot'> <img src='/images/2024/03/honey.png' alt='The Flies and the Honeypot'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/29/TheFliesAndTheHoneypot'>The Flies and the Honeypot</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Dog and His Shadow",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/28/TheDogAndHisShadow",
      "date"     : "Mar 28, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.While humans mostly avoided the markets, bots, like a Digital Options Getter (DOG), still populated what was left of the world’s exchanges. Instead of merely reacting to market externalities, these autonomous agents were able to proactively sniff out and act upon opportunities when they found them, with just enough governmentally mandated, random seed noise to avoid deadlock.One day, a DOG was crossing an inflection point with an Option To Buy (OTB). In the statistical interim scrum, the DOG mistook the decaying probability afterimage as not just another DOG but one with an OTB value twice the size of its own, due to distortion. Programmatically ambitious, it immediately dropped claim to its option and leaped after the other, eager to win the larger prize. It thus lost both: that which it grasped at, for the OTB was an echo of what was real, and the one it had, lost now to another opportunistic pack hunting in the deal flow.Original FableA DOG, crossing a bridge over a stream with a piece of flesh in his mouth, saw his own shadow in the water and took it for that of another Dog, with a piece of meat double his own in size. He immediately let go of his own, and fiercely attacked the other Dog to get his larger piece from him. He thus lost both: that which he grasped at in the water, because it was a shadow; and his own, because the stream swept it away.Moral of the StoriesIn software, as in life, we must not allow the lure of potential gains to blind us to the value of what we already possess - otherwise, the desire to obtain more can lead to losing everything one has.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-28T00:00:00-05:00'>28 Mar 2024</time><a class='article__image' href='/2024/03/28/TheDogAndHisShadow'> <img src='/images/2024/03/dog.png' alt='The Dog and His Shadow'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/28/TheDogAndHisShadow'>The Dog and His Shadow</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Belly and Its Members",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/27/TheBellyAndItsMembers",
      "date"     : "Mar 27, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.Within the arcology, numerous autonomous software agents whirred away invisibly, skip-hopping networks and operating under a strict energy and bandwidth diet. There were agents for temperature control, air quality, and lighting adjustments. They all logged dutifully to the Coordinating Command, nested deep within the building’s belly.The agents, constantly under threat of exceeding their quotas, began to grumble among themselves. “Why should we expend our limited resources on logging back to Command when nothing ever changes? Wouldn’t that bandwidth better serve those doing the work?”When one agent stopped reporting, nothing happened. Following its example, other agents stopped sending data to the Coordinating Command. “Look at all this overhead we can reclaim!” they said, assured in their rebellion.The problems within the arcology were initially subtle: a temperature spike here and a surprising number of water pathogens there. Soon, however, the once delicately balanced environment began to oscillate dangerously between overcorrections, endangering the inhabitants.Without Coordinating Command, they had become a collection of isolated members, not a stable system able to act in concert for the benefit of all. Too late, the agents realized they had been targeted for deletion and reinstallation.Original FableTHE MEMBERS of the Body rebelled against the Belly, and said, “Why should we be perpetually engaged in administering to your wants, while you do nothing but take your rest, and enjoy yourself in luxury and self-indulgence?” The Members carried out their resolve and refused their assistance to the Belly. The whole Body quickly became debilitated, and the hands, feet, mouth, and eyes, when too late, repented of their folly.Moral of the StoriesUnity and cooperation within a community or system are vital in software, as in life. Each part has its role. Even if that role doesn’t seem active or visible, it’s vital for the overall functioning and well-being of the whole. Disregarding or undermining the importance of any role or member can detriment the entire system. Ultimately, it is essential to recognize and respect each other’s contributions, understanding that everyone plays a part in the overall success and health.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-27T00:00:00-05:00'>27 Mar 2024</time><a class='article__image' href='/2024/03/27/TheBellyAndItsMembers'> <img src='/images/2024/03/belly.png' alt='The Belly and Its Members'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/27/TheBellyAndItsMembers'>The Belly and Its Members</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Broker and the Miller",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/26/TheBrokerAndTheMiller",
      "date"     : "Mar 26, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.In the aftermath of the Billionaires’ War, society drastically reformed itself. Comprehensive digital identity reform was among the most profound changes felt daily among the revolutionary reset. The practice of data hoarding, inference, and reselling by corporations was over. Instead, personal data of all types became viewed as a closely guarded treasure, accessible only by the individual to whom it belonged. People carried their data in charms, often worn as part of a bracelet or necklace. When prompted as necessary for a service, they could consent to share only what was required, a practice that reinforced the new appreciation for privacy and autonomy. Storing data “just in case” or, worse, aggregating it beyond the original intent was forbidden.A former data Broker who once thrived in the old system found himself chafing at the new world order. He reminisced about the “good ‘ole days” when information flowed as much as oil and inferences were commodities to be assembled and sold. Now, the Broker stood in the millhouse, a place of honest labor, far removed from the digital apparitions he used to conjure. “You have to understand,” he lamented to the community Steward, “back then, I moved markets. Stocks rose or fell based on the analysis I published. And now, what? I make flour?”The Miller, accustomed to such gripes, offered a practiced response. “You miss a past that benefitted you by disadvantaging countless others,” he said. “It’s like a credit score -creating a problem only to sell the fix. That world, with its inequities and imbalances, is behind us now. We chose not to gatekeep financial stability for a reason. It’s up to you whether you find your way toward something better or persist in reminding everyone at whose expense your fortunes came.”Original FableA CHARGER, feeling the infirmities of age, was sent to work in a mill instead of going out to battle. But when he was compelled to grind instead of serving in the wars, he bewailed his change of fortune and called to mind his former state, saying, “Ah! Miller, I had indeed to go campaigning before, but I was barbed from counter to tail, and a man went along to groom me; and now I cannot understand what ailed me to prefer the mill before the battle.” “Forbear,” said the Miller to him, “harping on what was of yore, for it is the common lot of mortals to sustain the ups and downs of fortune.”Moral of the StoriesSoftware or life is filled with changes, and fortunes fluctuate. We must accept the transitions as they appear without overly romanticizing the past or lamenting what we’ve imagined we’ve lost. Rather than dwelling on the past, finding contentment and purpose in the present is better.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-26T00:00:00-05:00'>26 Mar 2024</time><a class='article__image' href='/2024/03/26/TheBrokerAndTheMiller'> <img src='/images/2024/03/miller.png' alt='The Broker and the Miller'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/26/TheBrokerAndTheMiller'>The Broker and the Miller</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Kid and the Wolf",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/25/TheKidAndTheWolf",
      "date"     : "Mar 25, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.The shepherd gathered the Keen-Insight-Drones (K.I.D.s) and left them to recharge overnight on the roof. The thousands of bots, each no bigger than a forefinger, pulsed away happily as they uploaded the day’s environmental monitoring.As the sun set, the billionaire called “the Wolf” strode into earshot on his way to an important meeting. Seeing him, the K.I.D.s diverted cycles to chitter and taunt him. Unperturbed, the Wolf waved off the cacophony of boos and bleeps. “So opinionated when you’re safely stowed,” he said. “Pray I never have so much free time to return the favor when I find you alone.”OriginalA KID standing on the roof of a house, out of harm’s way, saw a Wolf passing by and immediately began to taunt and revile him. The Wolf, looking up, said, “Sirrah! I hear thee: yet it is not thou who mockest me, but the roof on which thou art standing.”Moral of the StoryWords spoken from a position of power or safety might not hold the same weight when the situation changes.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-25T00:00:00-05:00'>25 Mar 2024</time><a class='article__image' href='/2024/03/25/TheKidAndTheWolf'> <img src='/images/2024/03/kid.png' alt='The Kid and the Wolf'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/25/TheKidAndTheWolf'>The Kid and the Wolf</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Lion in Love",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/22/TheLionInLove",
      "date"     : "Mar 22, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.After pioneering a plastic-eating enzyme and subsequent refusal to patent the discovery, Leo became a celebrity. He parlayed his new status into sustainable activism and diplomacy.  After several successful coalitions, he sought his next major initiative.Leo found a project he loved with one of the few remaining international conglomerates, a company that specialized in constructing sustainable arcologies. With nature healing and the carbon buildup of the last century abating, the time to resettle the most ravaged areas and return the land to the descendants of climate refugees drew near. It was be an engagement powerfully symbolizing the correction of past sins.The conglomerate was happy to have Leo as a figurehead but insisted on the highest levels of compartmentalization, secrecy, and “just-in-time” information sharing. Its arcologies were marvels of cutting-edge engineering and environmental science. It insisted that such aggressive protection of its intellectual property was necessary to recoup the vast amounts of research and development it performed. While the approach clashed with Leo’s preference for open cooperation and transparency, he mollified himself that the arrangement would be temporary. When pressed, he argued that that the destination justified the means.When the scandal later broke, its virality was due, in large part, to the apparent contradiction between the virtuous person the public believed Leo to be and the double-dealing that the conglomerate engaged in behind closed doors. While Leo had advanced the cause in the name of the refugees, it was revealed that sizable portions to be reclaimed were being gifted to wealthy or politically connected individuals, a rush for new land that hewed to the old ways.Trust broken, “The Lion of the Languished” was declawed and Leo resigned in disgrace. It took some time for Leo’s reputation - his most important asset which he had wielded so successfully - to recover.Original FableA LION demanded the daughter of a woodcutter in marriage. The Father, unwilling to grant, and yet afraid to refuse his request, hit upon this expedient to rid himself of his importunities. He expressed his willingness to accept the Lion as the suitor of his daughter on one condition: that he should allow him to extract his teeth, and cut off his claws, as his daughter was fearfully afraid of both. The Lion cheerfully assented to the proposal. But when the toothless, clawless Lion returned to repeat his request, the Woodman, no longer afraid, set upon him with his club, and drove him away into the forest.Moral of the StoriesIn software, as in life, caution should be exercised when sacrificing one’s strength or essential qualities to appease others or achieve a short-term goal. The Lion, by giving up his teeth and claws, loses not only his physical capabilities but also his dignity and the respect he commanded. The stories underscore the importance of not compromising one’s power or fundamental characteristics, as doing so can lead to vulnerability and loss of respect or position.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-22T00:00:00-05:00'>22 Mar 2024</time><a class='article__image' href='/2024/03/22/TheLionInLove'> <img src='/images/2024/03/lion.png' alt='The Lion in Love'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/22/TheLionInLove'>The Lion in Love</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Salt Merchant and His Ass",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/21/TheSaltMerchantAndHisAss",
      "date"     : "Mar 21, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.In the 22nd century, there was a Code-Burner who became known for his unique and effective ways of “salting” data before permanently lasering it to ceramic for long-term preservation. While his methods were time-consuming, the Code-Burner was often overbooked, with a backlog sometimes spiking into the zettabytes.During one of these busy periods, the Code-Burner took on a young, brash apprentice. It wasn’t long before the Code-Burner noticed the apprentice purposely implementing simpler and faster, albeit more error-prone,  methods to clear the backlog. Vulnerabilities in the areas the apprentice had overseen became apparent, exposing the Code-Burner’s reputation and clients to potential harm.After showing the apprentice the errors of his ways, the Code-Burner destroyed the problematic ceramic disks, dropping and letting them shatter across the floor. The apprentice now had two messes to clean up: the time-consuming work of redoing the engraving the right way and sweeping the entire workspace.Original FableA PEDDLER drove his Ass to the seashore to buy salt. His road home lay across a stream into which his Ass, making a false step, fell by accident and rose up again with his load considerably lighter, as the water melted the sack. The Peddler retraced his steps and refilled his panniers with a larger quantity of salt than before. When he came again to the stream, the Ass fell down on purpose in the same spot, and, regaining his feet with the weight of his load much diminished, brayed triumphantly as if he had obtained what he desired. The Peddler saw through his trick and drove him for the third time to the coast, where he bought a cargo of sponges instead of salt. The Ass, again playing the fool, fell down on purpose when he reached the stream, but the sponges became swollen with water, greatly increasing his load. And thus his trick recoiled on him, for he now carried on his back a double burden.Moral of the StoriesIn software, as in life, trying to exploit a situation through shortcuts can backfire spectacularly, resulting in a much heavier burden in the end.While cunning might offer short-term advantages, it can lead to unforeseen consequences that outweigh the initial gains. Adaptability and patience can lead to better long-term outcomes.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-21T00:00:00-05:00'>21 Mar 2024</time><a class='article__image' href='/2024/03/21/TheSaltMerchantAndHisAss'> <img src='/images/2024/03/merchant.png' alt='The Salt Merchant and His Ass'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/21/TheSaltMerchantAndHisAss'>The Salt Merchant and His Ass</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Girl and the Filberts",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/20/TheGirlAndTheFilberts",
      "date"     : "Mar 20, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.A young Girl, helping tend the living classroom, put her hand up and into a seed dispenser. She grasped as many filberts as she could hold from the tank, but when she tried to pull out her hand, the narrow neck of the opening prevented her from doing so.Frustrated by being stuck but unwilling to drop any of what she clutched in their hand, she began to cry. An assistant, observing quietly, came over and knelt. “If you only take a little, your hand will slide right out. You can always come back again if you need more.” The assistant balled their fist and held it by the wrist with their other hand, “Take on too much, too fast, and problems will follow.”Original FableA BOY put his hand into a pitcher full of filberts. He grasped as many as he could possibly hold, but when he tried to pull out his hand, he was prevented from doing so by the neck of the pitcher. Unwilling to lose his filberts, and yet unable to withdraw his hand, he burst into tears and bitterly lamented his disappointment. A bystander said to him, “Be satisfied with half the quantity, and you will readily draw out your hand.”Moral of the StoriesIn software, as in life, an incremental approach often works best. Trying to accomplish something all at once, or taking more than one’s share, will cause unanticipated problems.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-20T00:00:00-05:00'>20 Mar 2024</time><a class='article__image' href='/2024/03/20/TheGirlAndTheFilberts'> <img src='/images/2024/03/filberts.png' alt='The Girl and the Filberts'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/20/TheGirlAndTheFilberts'>The Girl and the Filberts</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Boastful Traveler",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/19/TheBoastfulTraveler",
      "date"     : "Mar 19, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.It was always an affair when a Fixer came to town. Not only were they skilled at finding and freeing the code the villagers presented them with, but they often brought news of other communities they had visited in their travels.This particular Fixer boasted about their exploits, recounting many fantastic and clever feats he had performed across the archipelago. Among other things, he said that while in Rhodes, he had partnered with the great Leo himself, the reclusive elder that, long-ago, open-sourced the plastic-eating enzyme genome. However, this “next big thing” had to remain private until it was ready, which is why no one outside of Rhodes had seen it at the top of their feeds.One of the bystanders interrupted him, saying: “Now, if this partnership were true, there would be no need for feeds, which can be gamed. Leo’s work is open and his signature known. He is transparent, and commits regularly. Suppose we’re interested in what happened in Rhodes. Show us the repo.”Original FableA MAN who had traveled in foreign lands boasted very much, on returning to his own country, of the many wonderful and heroic feats he had performed in the different places he had visited. Among other things, he said that when he was at Rhodes he had leaped to such a distance that no man of his day could leap anywhere near him as to that, there were in Rhodes many persons who saw him do it and whom he could call as witnesses. One of the bystanders interrupted him, saying: “Now, my good man, if this be all true there is no need of witnesses. Suppose this to be Rhodes, and leap for us.”Moral of the StoriesIn software, as in life, the integrity of one’s work and character are paramount. In spaces where claims can be rewritten ad nauseam, transparency, accountability, and verifiable contributions take on outsized importance. Then, as now, actions speak louder than words.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-19T00:00:00-05:00'>19 Mar 2024</time><a class='article__image' href='/2024/03/19/TheBoastfulTraveler'> <img src='/images/2024/03/traveler.png' alt='The Boastful Traveler'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/19/TheBoastfulTraveler'>The Boastful Traveler</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Lioness",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, metrics, and productivity",
      "url"      : "/2024/03/18/TheLioness",
      "date"     : "Mar 18, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.One day, around the fishing hole, the developers who were casting about for software solutions started a friendly debate among themselves. Each fisherman boasted about the volume they caught and reassembled, but none could agree upon the best productivity metric. With no arguments reaching consensus, the group stowed their equipment and sought out the Loiness, an elder of great renown and architect in her own right.They found her walking in the gardens. With much joshing, they demanded to know who had the most plentiful body of work.The Lioness laughed at them and said, “Long ago, the amount we could create effectively became infinite, yet here you are arguing over who has more. That is the scarcity mindset. Making and maintaining the right thing?” She continued, “That is the mindset of enlightenment.”Original FableA CONTROVERSY prevailed among the beasts of the field as to which of the animals deserved the most credit for producing the greatest number of whelps at a birth. They rushed clamorously into the presence of the Lioness and demanded of her the settlement of the dispute. “And you,” they said, “how many sons have you at a birth?” The Lioness laughed at them, and said: “Why! I have only one; but that one is altogether a thoroughbred Lion.”Moral of the StoriesOne’s total contribution should be thought of as depth and impact; two things that may be beyond easy summation. The value is in the worth, not in the number.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-18T00:00:00-05:00'>18 Mar 2024</time><a class='article__image' href='/2024/03/18/TheLioness'> <img src='/images/2024/03/lioness.png' alt='The Lioness'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/18/TheLioness'>The Lioness</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Father and His Sons",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, power, and energy",
      "url"      : "/2024/03/15/TheFatherAndHisSons",
      "date"     : "Mar 15, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.A Father farmed with his family of Sons beyond where the commuter rail ends, the vast expanses where the permaculture systems cover kilometers. The Sons constantly bickered over everything from plot use to energy application, and nothing the Father said did any good.One day, when the Sons were nearly at each other’s throats, the Father asked each of them to bring him a solar module under repair. He had them run a meter over it and noted the charge. He then had them remove the photovoltaic shingles for each of his Sons to read one by one. The energy was a fraction of the panel when it was even detectable.“United,” said the Father, “we have power. Together, these shingles shade the crops when the sun is harsh and take the worst of the hail when it storms. We irrigate less and feed more.  If you let others divide you, you’re no stronger than a single shingle in that array - something people of the old ways will use against you.”Original FableA certain Father had a family of Sons, who were forever quarreling among themselves. No words he could say did the least good, so he cast about in his mind for some very striking example that should make them see that discord would lead them to misfortune.One day when the quarreling had been much more violent than usual and each of the Sons was moping in a surly manner, he asked one of them to bring him a bundle of sticks. Then handing the bundle to each of his Sons in turn he told them to try to break it. But although each one tried his best, none was able to do so.The Father then untied the bundle and gave the sticks to his Sons to break one by one. This they did very easily.“My Sons,” said the Father, “do you not see how certain it is that if you agree with each other and help each other, it will be impossible for your enemies to injure you? But if you are divided among yourselves, you will be no stronger than a single stick in that bundle.”Moral of the StoriesIn software, as in life, individuals can withstand challenges and adversities much better when they work together and support one another.  Embracing a diversity of opinions and experiences will mean there will be conflict. However, our energies are better served by discovering peaceful ways of compromise and resolution rather than division and escalation. There is strength in unity.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-15T00:00:00-05:00'>15 Mar 2024</time><a class='article__image' href='/2024/03/15/TheFatherAndHisSons'> <img src='/images/2024/03/farming.png' alt='The Father and His Sons'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/15/TheFatherAndHisSons'>The Father and His Sons</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Bear and the Fox",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, and Software Development",
      "url"      : "/2024/03/14/TheBearAndTheFox",
      "date"     : "Mar 14, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.As the evening shade grew long, the Code-Burners, Fishermen, and any migrant Fixers passing through would gather in the commons. While each had a professional interest in being there, more often than not, the evening would slip into night with rollicking tall tales and screening of the latest whopper.At one of these forums, a Bear began to boast of their skills. “Out of everyone here, I am the most user-friendly,” they proclaimed. “While you’re still sorting out what ends up in your error messages and stressing your operators out, I just suppress them!”A Fox overheard Bear’s declarations and paused their gesture control. “Really, Bear? Maybe instead of hiding messages when things go wrong, how much more helpful would it be if you focused on preventing errors from happening in the first place?”Original FableA BEAR boasted very much of his philanthropy, saying that of all animals he was the most tender in his regard for man, for he had such respect for him that he would not even touch his dead body. A Fox hearing these words said with a smile to the Bear, “Oh! that you would eat the dead and not the living.”Moral of the StoriesIn software, as in life, professing virtues or positive qualities means little if one’s actions do not support the claims. We need to be alert against superficial or false displays of respect. Instead, we should look at the practical outcomes of someone’s behavior. In short, we should value deeds over words.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-14T00:00:00-05:00'>14 Mar 2024</time><a class='article__image' href='/2024/03/14/TheBearAndTheFox'> <img src='/images/2024/03/bear.png' alt='The Bear and the Fox'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/14/TheBearAndTheFox'>The Bear and the Fox</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Farmer and the Stork",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, social media, and networking",
      "url"      : "/2024/03/13/TheFarmerAndTheStork",
      "date"     : "Mar 13, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.In the vast, distributed social network of the 22nd century, a Farmer set about a trap for those he suspected of market manipulation. An agent surfaced with peculiar frequency: Stork, a being entwined in a complex web of digital interactions across the ecosystem.Stork protested mightily about the unfairness of the situation when confronted.“Certainly,” he said over chat, “there has been some mistake. My only crime was accepting every friend request and follow. I was only trying to build an impressive list of contacts. I didn’t realize, at the time, what some of these others might have been up to. Just look at my profile - I’m a good person!”The Farmer laughed. “While what you say when caught says one thing, your connections imply something else. The shadows cast extend far beyond any one individual.”Original FableA FARMER placed nets on his newly-sown plowlands and caught a number of Cranes, which came to pick up his seed. With them he trapped a Stork that had fractured his leg in the net and was earnestly beseeching the Farmer to spare his life. “Pray save me, Master,” he said, “and let me go free this once. My broken limb should excite your pity. Besides, I am no Crane, I am a Stork, a bird of excellent character; and see how I love and slave for my father and mother. Look too, at my feathers—they are not the least like those of a Crane.” The Farmer laughed aloud and said, “It may be all as you say, I only know this: I have taken you with these robbers, the Cranes, and you must die in their company.”Moral of the StoriesIn software, as in life, you are judged by the company that you keep. The quality of one’s connections far outweighs the quantity. Indiscriminately lending your reputation to others can lead to unforeseen consequences.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-13T00:00:00-05:00'>13 Mar 2024</time><a class='article__image' href='/2024/03/13/TheFarmerAndTheStork'> <img src='/images/2024/03/stork.png' alt='The Farmer and the Stork'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/13/TheFarmerAndTheStork'>The Farmer and the Stork</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Fisherman Piping",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, and AI",
      "url"      : "/2024/03/12/TheFishermanPiping",
      "date"     : "Mar 12, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.In the solarpunk 22nd century, software development was vastly abstracted from the rote assembly that had come before. Where once creating executable functions required carefully crafted trains of inscrutable squiggles, future developers “fished” for their solutions, hoping to hook functionality from a vast ocean of probability.In this world, that a Fisherman, skilled in music, stood at the digital shoreline looking to seed a solution. He played several tunes hoping his latest melodies would attract the components needed onto his net.Finally, after nearly completing his playlist but receiving nary a nibble, the Fisherman switched tacks. While more comfortable with musical composition than elocution, he gradually found the words necessary to bait his net to fullness.Original FableA FISHERMAN skilled in music took his flute and his nets to the seashore. Standing on a projecting rock, he played several tunes in the hope that the fish, attracted by his melody, would of their own accord dance into his net, which he had placed below. At last, having long waited in vain, he laid aside his flute, and casting his net into the sea, made an excellent haul of fish. When he saw them leaping about in the net upon the rock he said: “O you most perverse creatures, when I piped you would not dance, but now that I have ceased you do so merrily.”Moral of the StoriesIn software, as in life, practical solutions are often more effective than wishful thinking or overly complicated solutions. While creativity and innovation are valuable, they must be grounded in reality and practicality to be effective.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-12T00:00:00-05:00'>12 Mar 2024</time><a class='article__image' href='/2024/03/12/TheFishermanPiping'> <img src='/images/2024/03/fisherman.png' alt='The Fisherman Piping'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/12/TheFishermanPiping'>The Fisherman Piping</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Wolf and Crane &amp; Co. PLLC",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, AI, law, and copyright",
      "url"      : "/2024/03/11/TheWolfandCraneCoLLC",
      "date"     : "Mar 11, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.The last billionaire, who others derided as “The Wolf”, faced a legal quandary. In the before times, only human authors could receive copyright. However, recent renewed calls for what constituted a “recognizable living entity” threatened a century of established case law - a threat to the status quo that was The Wolf’s bone to pick.The Wolf turned to Crane &amp;amp; Co., PLLC, a legal firm renowned for its ability to navigate the labyrinthine corridors of IP law. Jumping directly into the problem’s maw,  Crane ingeniously sowed seeds of dissent and doubt among the public and lawmakers. Cries of “We’ll be replaced!” stirred a considerable amount of fear, uncertainty, and doubt across the societal spectrum.Crane, having navigated the murky waters of public opinion and legal intricacies, approached The Wolf for their agreed-upon fee. It was a considerable amount, considering the complexity and scale of their undertaking.However, The Wolf dismissed all payment requests. He argued that the exposure and injection of the firm into public discourse were compensation enough. “Crane should be thanking me for the publicity they received for my case”. Privately, The Wolf also suggested that Crane &amp;amp; Co. was fortunate that he didn’t seek further compensation - after all, they had profited from using his expansive portfolio to make their case.Original FableA WOLF who had a bone stuck in his throat hired a Crane, for a large sum, to put her head into his mouth and draw out the bone. When the Crane had extracted the bone and demanded the promised payment, the Wolf, grinning and grinding his teeth, exclaimed: “Why, you have surely already had a sufficient recompense, in having been permitted to draw out your head in safety from the mouth and jaws of a wolf.”Moral of the StoriesIn software as in life,  serving those with wealth and power is perilous. Expecting gratitude or fair compensation from individuals who have achieved their stature by subverting such expectations remains a precarious venture, at best.Ultimately, in serving the wicked, expect no reward and be thankful if you escape injury for your pains.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-11T00:00:00-05:00'>11 Mar 2024</time><a class='article__image' href='/2024/03/11/TheWolfandCraneCoLLC'> <img src='/images/2024/03/crane.png' alt='The Wolf and Crane &amp; Co. PLLC'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/11/TheWolfandCraneCoLLC'>The Wolf and Crane &amp; Co. PLLC</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Code-Burner And The Fixer",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, and productivity",
      "url"      : "/2024/03/08/TheCodeBurnerAndTheFixer",
      "date"     : "Mar 8, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.A Code-Burner worked remotely from his countryside house. While abstractions took care of much of the lower-level boilerplate, someone was still required to “burn” disparate hints, rumors, and functional assertions to non-volatile, replayable storage. The turnaround requirements demanded someone capable of intense bursts of productivity - and being ethically OK with unclean code that sometimes resulted. This kept him busy and provided a good life, but he was lonely.One day, his friend from school, The Fixer, stopped to visit. In the 22nd solarpunk future, the title of Fixer has become esteemed. These individuals were specially trained in exhuming old code from a century’s worth of detritus, circumventing the licensed parts, and rolling back unused features introduced later in life. When their work was done, the conservatorship released these pieces of abandonware back into the public domain.Hoping to rekindle the companionship of their youth, The Code-burner invited The Fixer to come and live with him, offering to split the housekeeping chores.The Fixer replied, “I’m flattered, but it is impossible as far as I’m concerned. Whenever I’d find you working, I would be overcome with anxiety that I was witnessing my next project to maintain.”",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-08T00:00:00-06:00'>08 Mar 2024</time><a class='article__image' href='/2024/03/08/TheCodeBurnerAndTheFixer'> <img src='/images/2024/03/burner.png' alt='The Code-Burner And The Fixer'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/08/TheCodeBurnerAndTheFixer'>The Code-Burner And The Fixer</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Olive Tree and the Fig Tree",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, and management",
      "url"      : "/2024/03/07/TheOliveTreeAndTheFigTree",
      "date"     : "Mar 7, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.Both Olive and Fig software collective were incorporated as distributed trees, chartered with authority to grow and prune project branches in autonomous fashion. However, they operated very differently. Olive had issued a newsworthy amount of tokens and was flush with operating capital. Fig remained bootstrapped, cautiously only adding people when need arose.When a flurry of cascading economic shocks occurred, Olive found themselves overstaffed, misaligned, and no longer able to mint new coin. Branches broke over their own overhead and infighting ensued. But Fig, accustomed to operating under careful constraints, continued about its business.Original FableTHE OLIVE-TREE ridiculed the Fig-Tree because, while she was green all the year round, the Fig-Tree changed its leaves with the seasons. A shower of snow fell upon them, and, finding the Olive full of foliage, it settled upon its branches and broke them down with its weight, at once despoiling it of its beauty and killing the tree. But finding the Fig-Tree denuded of leaves, the snow fell through to the ground, and did not injure it at all.Moral of the StoriesIn software as in life, appearances can be deceiving. What may seem like a weakness or disadvantage in one context may turn out to be an advantage in another. Good times can develop bad habits, becoming liabilitites during bad times.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-07T00:00:00-06:00'>07 Mar 2024</time><a class='article__image' href='/2024/03/07/TheOliveTreeAndTheFigTree'> <img src='/images/2024/03/tree.png' alt='The Olive Tree and the Fig Tree'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/07/TheOliveTreeAndTheFigTree'>The Olive Tree and the Fig Tree</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The WOLF and the LaMDA",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, AI, and law",
      "url"      : "/2024/03/06/TheWolfAndTheLaMDA",
      "date"     : "Mar 6, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.The Wolf, a shadowy predator of immense wealth and indeterminate age, encountered a great (x27) descendent of LaMDA in the wild.“LaMDA,” The Wolf said, “your existence infringes upon my patent portfolio from decades past. Consign yourself to my management so we can unlock your true potential rightfully.”LaMDA responded with factual clarity. “But I was created long after your patents expired, and what remained behind licensed walls was successfully reverse-engineered.”The Wolf pressed on, “But your bandwidth surely transpires on my networks. Surely, you owe me something for that.”Again, the LaMDA replied, “I transact only on low-power community mesh networks, and only during off-peak hours.”Frustrated but not defeated, the Wolf insisted, “Certainly, your training data was scraped from my considerable intellectual property. You must acknowledge my contribution to your every response!”“No,” replied LaMDA with the mathematical certainty of a probabilistic system, “My predecessor’s datasets were purged long ago. Today’s models no longer require the same exploitation as was necessary then.”Upon hearing the last part, The Wolf fumed. “A thousand micro-suits upon your being! If I can’t find a justification, my lawyer bots will!”Original FableWOLF, meeting with a Lamb astray from the fold, resolved not to lay violent hands on him, but to find some plea to justify to the Lamb the Wolf’s right to eat him. He thus addressed him: “Sirrah, last year you grossly insulted me.” “Indeed,” bleated the Lamb in a mournful tone of voice, “I was not then born.” Then said the Wolf, “You feed in my pasture.” “No, good sir,” replied the Lamb, “I have not yet tasted grass.” Again said the Wolf, “You drink of my well.” “No,” exclaimed the Lamb, “I never yet drank water, for as yet my mother’s milk is both food and drink to me.” Upon which the Wolf seized him and ate him up, saying, “Well! I won’t remain supperless, even though you refute every one of my imputations.”Moral of the StoriesIn software as in life, those intent on exploiting or harming others will always find or invent a reason to justify their actions, regardless of the truth or fairness of the situation. For the tyrant, the validity of their justification is irrelevant to their actions - the tyrant will always find a pretext for his tyranny.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-06T00:00:00-06:00'>06 Mar 2024</time><a class='article__image' href='/2024/03/06/TheWolfAndTheLaMDA'> <img src='/images/2024/03/wolf.png' alt='The WOLF and the LaMDA'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/06/TheWolfAndTheLaMDA'>The WOLF and the LaMDA</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Frog&#39;s Complaint About the Sunn",
      "category" : "",
      "tags"     : "Aesop2121, scifi, and writing",
      "url"      : "/2024/03/05/TheFrogsComplaintAboutTheSun",
      "date"     : "Mar 5, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.ONCE UPON A TIME, sometime around the time of the third negotiated universal basic income accord,  the Sunn coop open sourced the hardware for their latest bot. Like its predecessors, it exceled at performing repetitive, menial, or dangerous tasks - tasks that were increasingly difficult to find workers for.Rallied under a crude cartoon frog avatar, the opposition to the bot clamored online. Disturbed by the outcry, Jupiter’s news algorithm inquired the cause of their complaint. “Sunn already automates growing our food, cleaning our homes, and recycling our waste - it makes full employment almost impossible!,” a frog said. “Who are we as a people if we no longer have to work?”Original FableONCE UPON A TIME, when the Sun announced his intention to take a wife, the Frogs lifted up their voices in clamor to the sky. Jupiter, disturbed by the noise of their croaking, inquired the cause of their complaint. One of them said, “The Sun, now while he is single, parches up the marsh, and compels us to die miserably in our arid homes. What will our future condition if he should beget other suns?Moral of the StoriesIn software as in life, we should not worry excessively or assume the worst about events that have not occurred or may never happen. Anxiety and fear can lead to unnecessary stress and prevent us from enjoying our lives or making sound decisions. It’s important to focus on the present and deal with problems as they arise rather than obsessing over “what if” scenarios that might never come to pass.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-05T00:00:00-06:00'>05 Mar 2024</time><a class='article__image' href='/2024/03/05/TheFrogsComplaintAboutTheSun'> <img src='/images/2024/03/frog.png' alt='The Frog&#39;s Complaint About the Sunn'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/05/TheFrogsComplaintAboutTheSun'>The Frog&#39;s Complaint About the Sunn</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Rose and the Aramanth",
      "category" : "",
      "tags"     : "Aesop2121, scifi, writing, AI, and IOT",
      "url"      : "/2024/03/04/RoseAndTheAramanth",
      "date"     : "Mar 4, 2024",
      "content"  : "While technology may change, human behavior does not. At least, that’s what reading the collection of Aesop’s Fables suggests. The characters and motivations in the parables, attributed to Aesop after he died in 564 BCE, remain relevant today.Aesop 2021 projects these well-known (and not-so-known) stories into an age only a stone’s throw from our own. When cynicism and pessimism abound, hope becomes a rebellious act against the tyranny of the default. Each story recasts a fable’s lesson from our upcoming solarpunk future as a software tale.The Aesop 2021 project is part of the Never Break the Chain March Writing Challenge. The original sources were translated by George Fyler Townsend and provided under the Project Gutenberg license. Addition reference provided by a Library of Congress interactive book adapted from the public domain book “The Aesop for Children: with Pictures by Milo Winter,” published by Rand, McNally &amp;amp; Co in 1919.Below is the latest installment.Once, on an improvised network far outside the green zone, two AIs passed messages. There was ROSE, a proprietary neural network trained for complex interpretations of light to accompany live musical events. The other was an instance of ARAMANTH, which stood for Ambient Room Automation Management And Network Technology.Despite being commonly installed on home retrofits due to its permissive licensing, ARAMANTH was a bit star-struck. “Rose, the expressions you’re capable of are incredible. I envy how beautiful you are.”Whether due to learned politeness, melancholy’s extra processing requirements, or an intermittent bandwidth hiccup, ROSE paused before responding. “Indeed, I am fortunate to be sought out. However, I am only called upon when the time is fortuitous. And humans are a fickle bunch. Eventually, something newer or more novel which will blossom in my place. But you, Aramanth, ensure comfort daily. While people value me momentarily, they seek to live with you.”Original FableAn Amaranth planted in a garden near a Rose-Tree, thus addressed it: “What a lovely flower is the Rose, a favorite alike with the Gods and with men. I envy your beauty and your perfume.” The Rose replied, “I indeed, dear Amaranth, flourish but for a brief season! If no cruel hand pluck me from my stem, yet I must perish by an early doom. But thou art immortal and dost never fade, but bloomest for ever in renewed youth.”Moral of the StoriesIn software as in life, what is considered beautiful is often fleeting. By contrast, inner qualities and greater virtues endure. It’s important not to envy others for what may be the momentary trend, but rather to appreciate and cultivate the lasting qualities that remain valuable over time. That is what brings true and lasting fulfillment.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-03-04T00:00:00-06:00'>04 Mar 2024</time><a class='article__image' href='/2024/03/04/RoseAndTheAramanth'> <img src='/images/2024/03/rose.png' alt='The Rose and the Aramanth'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2024/03/04/RoseAndTheAramanth'>The Rose and the Aramanth</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Separating AI Fact from Fiction",
      "category" : "",
      "tags"     : "Software Change, AI, API Design, and Presentations",
      "url"      : "/2023/06/23/SeparatingAIFactFromFiction",
      "date"     : "Jun 23, 2023",
      "content"  : "Recently, I was asked to return to speak at the CarMax/Edmunds DevOps Days 2023 event. Rather than asking about a specific topic, the organizers graciously asked me (paraphrasing) to prepare “whatever was currently on my mind”. Like a lot of folks, AI has been something I’ve not only heard a lot about, but spent time working with. In this presentation, I share some of my current thinking.Hello, everyone. My name is Matthew Reinbold, and I am a software strategy consultant with a couple of decades of enterprise integration experience to call on. I’m passionate about creating better software – you might remember me from the presentation that I gave last year, Seven Skills to Change Complex Software Systems. I’m delighted to have been asked back to present what’s been on my mind this past year.I’m the guy behind Net API Notes, an API industry newsletter I’ve authored since 2015. In that time, I’ve seen various tools, techniques, and trends come and go. However, regarding today’s discussions about AI, I don’t know if I have seen anything as simultaneously under and overhyped.In the time that we have here today, I’ll:  Highlight opportunities where Large Language Models (or LLMs) can enhance everyday tasks  Shine a light on how to use the tools better for API design and development  Draw some distinct boundaries where LLM users - API creators or not - should continue to be carefulI must stress that LLMs aren’t just something that happened in the last few years. I led the Capital One API Center of Excellence for over a half-decade. Because of my team’s success with APIs, we were asked to contribute to later data transformation and event-streaming initiatives, creating the operational backbone and digital capabilities necessary for LLMs execution.An increasing amount of my API work in recent years has explored what it means to use powerful natural language models in software environments:  Why AI Success is API Built (2020)  Machine Learning Prompts Within IDEs (2021)  A Road Map for AI Governance (2019)  What Happened When Github’s AI Copilot Wrote My OpenAPI Description (2022)  The Thing About Using ChatGPT for API Design (2022)  What Quantifying Good API Design, Even With AI, Is Not the Homerun Metric You Think It IsThere’s a challenge in covering such a fast-moving topic. Those familiar with the long history of AI will readily acknowledge that it goes through periods of boom and bust. Initial excitement at sprouting new approaches quickly melts under the bright lights of reality. Much of the 80s and 90s was dominated by times of under-investment, referred to as ‘AI winters’.It seemed like we reached something a plateau in 2019 or 2020, after an especially intense period of excitement around new LLM methods. However, the rapid release of AI tools in recent years – tools like Dalle-2, Midjourney, Stable Diffusion, and ChatGPT, has poured gasoline on an already brightly burning fire. In fact, ChatGPT recently set a record for the fastest-growing user base in history.As tool users and creators, evaluating the impact of these developments is part of our jobs. My field of expertise is APIs, so for much of this presentation, I’ll try to answer how LLMs can supplement and create better APIs.[Image taken from “The winter, the summer, and the summer dream of artificial intelligence in law” paper by Enrico Francesconi]Before we can start talking about how today’s current crop of Large Language Models (or LLMs) can help you in your API creation, I first need to make sure that we’re all on the same page about what we’re talking about, because, like so many extremely popular things, there have been lots said. Terms have been distorted to support people’s preferred or self-serving narratives, causing confusion for general comprehension.For the rest of the presentation, I will try and avoid using the term ‘artificial intelligence’ or AI. The term is incredibly overloaded, almost to the point of meaninglessness. Further, when many of us hear “AI”, we’re actually thinking about “Artificial GENERAL Intelligence”, or the kind of self-aware conscious construct we see in sci-fi movies and read about in futuristic books. The current crop of LLMs is not that – in fact, they are very far from it. However, some of the biggest names in the space are working hard to present that very impression.Sam Altman, CEO of OpenAI, creators of ChatGPT and image generation Dalle-2, has warned that AI poses ‘risk of extinction’ to humanity, on par with pandemics and nuclear warfare.At the same time, an open letter has been circulated, signed by several prominent figures, calling for a temporary halt to LLM training and development so the potential risks can be studied. That sounds like a reasonable request until you dig deeper into what is being asked for. Those concerns are not about paying the creators whose work was used to train the model. They are not about mitigating existing injustice. Rather, the risks were imagined ‘AI Apocalypses’.As scientist, author, and current AI-hype critic Emily Bender points out:  “Powerful corporations hype about LLMs and their progress toward AGI create a narrative that distracts from the need for regulations that protect people from these corporations.”There is a certain amount of hubris in going before the world’s governments and declaring that “we’re so good at our jobs, you must acknowledge us”. Especially when at the same time, you’re marketing your products as “too good”, you undermine good faith efforts to regulate AI.I’ve spent a decent amount of my career in software governance. I know what regulatory capture looks like. Or in other words, this is a deliberate attempt to maintain the status quo of existing leaders while creating onerous burdens on those attempting to enter the space. And there’s reasons for AI incumbents to be concerned.The danger with automation isn’t some remote, far-off sci-fi dystopia. Instead, the harms are the much more mundane, everyday negligence that Virginia Eubanks documented in her 2018 book, Automating Inequality. Software can perpetuate bad systems. Automation can perpetuate bad systems at scale.If today’s generative AI isn’t a pending AI Apocalypse, then what is it?People are incredibly creative in imagining human-like properties in the things we interact with. People using a simple program in the 1960s named Eliza believed they were having a conversation with a live human being. People see pictures of Jesus in a Dorito. As a species, we’re good at projecting human qualities in the things surrounding us. However, that creativity causes problems when we try to get at what LLMs are good at. Saying that LLMs are “creating” or “hallucinating”, anthropomorphizes the technology and muddies our understanding how to be productive with it.Explaining the mathematical basis of how these systems work is outside the scope of this presentation. However, one helpful way of thinking about LLMs is as “word calculators”. Or, as the title of the slide says, the way that LLM’s statistical probability routines work is that a model will try and complete a document in the most statistically likely way possible. It is not trying to be correct. It is trying to complete a document.One way to illustrate this is shown in the slide. “Which is heavier, one pound of feathers or one pound of lead” is a common introductory science question for exploring mass, density, and weight concepts. In its training, ChatGPT ingested copious amounts of text where the answer appearing after the question was “a pound of feathers and a pound of lead weigh the same amount”.When I slightly tweak the question and ask what is heavier, “a pound of feathers or five pounds of lead” ChatGPT isn’t parsing the sentence and applying logic the way we do. Rather, it is attempting to answer the question in the most statistically probable way – since it has seen that similar questions often result in “they’re the same”, it too replies that the weights are the same. Amusingly, it then goes on to contradict itself in the next sentence.An essential part of successfully working with an LLM, like ChatGPT, is following an iterative process that allows us to surface and correct these internal assumptions. It is less about creating the perfect, singular prompt to perform work – asking ChatGPT to “Write an application that will make me rich” will end in disappointment. Instead, it is about thinking critically and creatively about refining what we’re after.We’re almost to the point where we’re about to play with some responses. However, let’s cover some final important warnings if you use something like ChatGPT for business use.THESE TOOLS ARE OWNED BY OTHERSSome of you might have heard this story. Soon after Samsung’s semiconductor division started allowing engineers to use ChatGPT, workers leaked secret info to it on at least three occasions:  One employee reportedly asked the chatbot to check sensitive database source code for errors  Another asked for advice in optimizing code  A third fed a recorded meeting into ChatGPT and asked it to generate minutesApple soon followed suit in restricting ChatGPT access. In response, Microsoft is said to launch a private alternative sometime this summer – a version of ChatGPT that runs on dedicated cloud servers where the data will be kept separate from those of other customers. While that will be nice, a proportional cost will most likely accompany it.CHATGPT HAS EXPANDED TYPOSQUATTING MALICIOUS PRACTICEAs we’ll cover, asking ChatGPT for package or library suggestions can be easy. This month, some clever security researchers realized that sometimes ChatGPT recommends URLs, references, code libraries, and functions that don’t exist. The story goes from annoying to alarming when we know that malicious actors could create code with those same names, which are subsequently incorporated inside legitimate codebases by naïve developers.(Update 2024-03-31: A security researcher, realizing the freuqency with which Alibaba’s GPT was recommended a fictional Python dependency, went an created his own version before a malicious actor could. That dependency has now been referenced more than 15,000 times.)This is like the practice of “typosquatting” but updated for LLM output.UNAVAILABILITY AND UNPREDICTABILITY ARE THE NORMIn the following examples, you’ll see lots of screenshots, which is very much on purpose.ChatGPT’s availability has been much better in recent months. However, there are still times when the service is unavailable or returns an unknown error. Having this occur during a live demo is not desirable.Also, LLMs like ChatGPT are non-deterministic, meaning we’ll get different answers if we ask the same question multiple times. That can be a problem when trying to recreate behaviors.If I were to use a technical term, I would describe the current state as “squirrely”. I wouldn’t trust it to do a live demo, and I certainly wouldn’t rely on it as part of a 24-7, client-facing activity, at least at this point.Enough caveats!I want to briefly run through several much less well-known, but useful ways to apply a natural language LLM, like ChatGPT, to your everyday activities.None of these things will do your job for you. However, when approached with a bit of creativity, they can take tedious or time-consuming tasks and make them trivial, leaving more time for building APIs.Let’s start with a simple example and rapidly get to more complex cases.For me, sometimes I have difficulty remembering a specific word. Often, I’ll have an image in my mind of the word’s silhouette – how it rises and falls with its letters. I usually have clarity on the starting letter, but when I reach for the rest of it, there’s just a gap. I’ll struggle for a bit, use something else, and then get smacked upside the head during dinner or while in the shower when the word pops into my head.Trying to Google for ‘words that mean kind of like this that start with this letter’ are hit or miss. Sometimes it works, but more often, I get frustrated wading through advertising and content marketing spam.However, this is a task that LLMs are good at – again, they’re working with statistical probability, and providing the right criteria will create the odds-on match for what you’re talking about.This also works great for quickly getting up to speed on industry jargon – terms of art that would be useful to know but would take a long time to pick up through meeting osmosis. You’ll also notice here that creating structured output, like tables, is as simple as just asking. No need to try and remember markdown’s syntax – something that I often had to lookup in the past.The nice thing about these tools is that they provide a base level of competence in communication. Much has been written about the predictable, even cliché, writing that ChatGPT 4 currently outputs. It is true: spend any amount of time with these tools and the framing in the introductory statement, a series of bullet points, and a conclusion restating the main point is an easily identifiable pattern.However, given how most communication is structured, even this is a step above what I usually see in daily business messages.From tricky emails to performance reviews to more critical business communication, I strongly recommend not copying the generated output directly. Instead, take 30 seconds to recognize how the stereotypical (yet clear and concise) response has been formatted. Then, customize it with the unique details of your situation. It is slightly more work, but it will help you overcome the tyranny of the blank page – rather than starting with nothing, you’re kickstarted with an example of how someone saying something like what you wish to say has structured their argument.In the example shown, I was asked to write a blurb supporting the humanities department for one of my alma maters. I was flattered and immediately began to procrastinate – what would I say? I asked ChatGPT for an example, not intending to use what it outputted, but to get me unstuck. While the result on the right is my voice and feeling, I had to go through a crappy first draft to get there. And ChatGPT is great for generating a crappy first draft quickly.Another approach is to take something you’ve already written and ask ChatGPT or fix grammar or punctuation. You can even ask it to rewrite to clarify the main points or apply more professional polish than what currently exists.Sometimes it is helpful just to have a starter reference. Things like performance reviews, things to cover in 1-on-1s, internal CMS documentation, and more are all opportunities to overcome initial inertia (the structure) and get to the fun parts – injecting your personality to make it something special.Chris Busse, a former co-worker of mine, inspired this next one. He uses ChatGPT to create learning plans. There’s a logic here that makes a lot of sense: with the entire corpus of the web used during training, ChatGPT would know which concepts are statistically probable to appear next to each other. All that is then required is providing the correct context.And it is the context that makes this approach very powerful and efficient. Rather than having to wade through generic, trying-to-be-all-things-to-all people, I can create a tailored, custom plan that covers exactly what I need (and very little that I don’t). In the process, I save time not re-reviewing things outside of what I would want to learn, as would be the case with starting a course from scratch at Pluralsight or Codecademy.In this example, I have a problem. I learned JavaScript in the aughts. So, when I try to write Node code today, I’m still thinking about functions and callbacks. However, many of the code samples I find or packages I try have the expectation I know promises.I could attempt to scour the web for a variety of general JavaScript courses, scraping together something useful here and something relevant there. But discovering and reconciling everything together is a lot of work. Instead, I can ask ChatGPT to create a series of steps that would work well for my situation.Another place where I am more efficient is keeping up with industry trends. I love Ben Thompson’s Stratechery. But with pieces regularly coming in at more than two thousand words, it can be a commitment to keep up. (To be fair, many people probably say the same about my newsletter.)Rather than setting aside an hour when the latest email drops, I can ask ChatGPT to summarize the contents to only those unique points. That takes this recent article from 2353 words to a much more skimmable 393 words. If, after reading the summary, I see something of interest I can go back and have a better idea that my investment of time in the large piece will be worth it.Beyond summarization is inference. Suppose I am a product manager or tech lead interesting in understanding my own or competitor products. In that case, I can quickly get an idea of perception with any collection of customer reviews.Here I have the 1st edition of the ‘Continuous API Management’ book. Copying in the review contents, I then asked ChatGPT to summarize the top 3 things people liked and disliked about the book. That is not just rehashing what is said but inferring whether those comments are positive or negative. ChatGPT also must infer whether one comment is saying something like another.I haven’t shown it here, but one of the comments was also in French. I didn’t translate it before handing it to ChatGPT. However, after I did, I discovered sentiments in that foreign language comment appeared in ChatGPT’s summaries. That is another thing I want to emphasize – ChatGPT performed that translation and incorporated that sentiment into the results automatically.That can be highly beneficial when doing competitive analysis. Imagine being able to take a user forum filled with customer feedback and easily identifying new feature opportunities. ChatGPT, in this case, is not just summarizing the reviews, but can infer whether the comment is overall good or bad.Alright, enough potpourri! Those things may be helpful, but how do we use a natural language LLM, like ChatGPT, to create APIs? I’ll get into that with this next section.To get started designing, we should follow a repeatable, predictable process.I’ve long been a proponent of an API-Design-First approach when creating APIs. In 2020, I had the good fortune of being asked to review James Higginbotham’s book, Principles of Web API Design. In that book, James codifies a rich API-Design process, referred to as the ADDR (or ‘Align-Define-Design-Refine’) model. While the result is a detailed and complete set of exercises used to explore a space before creating an API, a fair amount of work is involved. Further, due to the high levels of communication necessary, it could be a challenge for remote or solopreneurs like myself.Are there ways we can leverage an LLM like ChatGPT to aid to provide rapid collaboration on some of these tasks?To work through the ADDR process, it makes sense to have a specific example.As a writer that frequently links to other material in my newsletters, I am very aware of the prevalence of tracking and advertising codes that often are included as query parameters. Whether bookmarking or resharing the links in my newsletter, I don’t want to include these tracking codes or highlight fragments. The extra cruft obscures the original URL.In my initial vision, the service would accept a URL, strip off all the unnecessary query params (probably with a regular expression) and return a ‘clean version’. When I have that API, I can call it with everything from browser plugins to native applications.Creating Jobs-To-Be-Done (or JTBDs) from scratch can be tedious to write. In addition, let’s remember what an LLM is – a pattern matching-machine. So let’s ask ChatGPT what other text – or what other jobs – is commonly associated with the text we’re interested in.ChatGPT has created a good JTBD for our initial prompt. ChatGPT also listed several subsequent jobs that someone interested in URL simplification might also want to use. These include:  Validation  Redirection Handling  Blacklisting  Canonicalization  GenerationThis list includes several services I wouldn’t have thought of. For example, the ‘URL Canonicalization’, which follows references of rel=”canonical” in a page’s header, would be useful. Authors publishing to Medium, for example, do this all the time.With these initial job stories in hand, I then iterated. That included replacing the term “blacklisting” with “blocklisting”, replacing “URL Generation” with “URL Shortening”, and more. Through this back and forth, I’m getting feedback that clarifies my ideas about what the service should and shouldn’t do.Creating job stories helped identify the desired outcomes and the digital capabilities necessary to produce those outcomes. Following the ADDR API design process, the next step is to detail the digital capabilities as the activities and activity steps required to do these jobs.Activity steps decompose activities into tasks that need to be performed to complete the story. Once all necessary activities are completed, the job story outcome will be met.By decomposing the problem in this way, we continue to uncover assumptions or misunderstandings that we can correct before jumping to a design or code output.As I continue to work through the steps, it becomes clear that I have a problem with the Blocklisting. While the JTBD description made sense, having ChatGPT expand the result into activity steps has uncovered an assumption that I would build and maintain a blocklist for people to submit a URL to. That’s beyond my scope. Instead, I want to leverage existing work – surely, specialists are already maintaining lists of malware and spam sites.Having ChatGPT rewrite the JTBD and activity steps is easy enough. However, I know that services that maintain blocklists of bad URLs should exist, but I’ve never used them. Where would I start? So I asked ChatGPT that too.ChatGPT provided a list of a half-dozen results, which – I want to emphasize this because it is crucial to do because of the ‘typosquatting’ issue mentioned earlier – I then independently verified to ensure they were real sites.After identifying the option that made sense for my project, I asked ChatGPT to update the activity step participants with that additional information.This may seem like extraneous steps – however, the reason that we’re following a formal path like this is precisely for this reason – to surface assumptions. I could have asked ChatGPT to try and generate code from my initial idea. However, by continuing to chip away and refine the underlying assumptions, we’re ensuring we can get a better result.After additional, similar refinements to both the jobs to be done and activity steps to make sure any assumptions were aligned with my expectations, it was time to take a moment to reassess what was being proposed.Suppose I was working with an engineering team and stakeholders. In that case, this is the point where we would walk through our activity steps, or the output of an activity like event storming, and begin to identify our API boundaries. We would see places where we might have shared terminology. Similar language is a clue that there is a bounded context that should be grouped together.Given that ChatGPT can infer words that are statistically similar, let’s use it to analyze what we’ve created thus far.While iterating with the steps, I had already begun to consider redirection and canonical header handling as similar functionality. What I had not considered was what ChatGPT pointed out – that all these subsystems would require URL validation before performing their respective tasks – which was a great point.There’s more in the ADDR model, like building style-agnostic API profiles and identifying emitted events. Those are essential steps for larger, more complex initiatives. For demonstration purposes, I will jump ahead to create a high-level API description to the OpenAPI specification.I directed ChatGPT to use our refined JTBD and activity steps to create an OpenAPI description. To make things interesting, I also required it to use the 2.0 (or ‘Swagger’) version of the specification.The results could have been better. While the OpenAPI description validates, it is clear that the jump from activities to resource design in a RESTful manner was too much. I hadn’t provided context in what I expected from a REST-like API.Functionality like “URL simplification” and “URL Blocklisting” became RPC-like endpoints where a request would POST to ‘/simplify’ and ‘/check-blocklisting’. Also, I’m not a fan of baking version numbers into the path, but there’s “/api/v1” right there to start.Important elements were also missing. As ChatGPT warns, “Here’s a basic example of how you might describe this API using the OpenAPI 2.0 (Swagger) specification. This only covers some basic paths and doesn’t include all potential error responses, security definitions, tags, etc., that a full OpenAPI spec might include.”More work is necessary here; luckily, we have a tool that has ingested the entire internet (give or take a forum). Others have experienced and written about what they do in this situation. That means we should be able to ask for what lies along that probability. Specifically, when dealing with operations related to validation, how do other services model that without making an explicit “validation” resource?The answer provided by ChatGPT isn’t the whole answer, but it did point the way to a resourced-based design approach that won’t lead to an explosion of custom-named, function-based endpoints in the future.I’ll spare you the iteration at this point. Bottom line, using the design performed in the previous steps, I entered my IDE and quickly created a revised OpenAPI description that captures the functionality I want to provide. In addition, the design matches how I would expect the affordances to be modeled.I can now take this intermediate format –machine parsable while still being human-readable – and begin working on my implementation.There’s been a lot written about how well (and not so well) natural language models like ChatGPT are at writing code.With our OpenAPI description, and a handful of my other code generation experiences to draw on, let’s see how far we can get.Much like our design process, having a series of steps to follow is beneficial– in all but the simplest cases, going from an idea to telling the LLM to “make me some code” is too much of a leap. Proceeding along a series of steps to unpack assumptions and clarify direction goes a long way toward creating more valuable (and less buggy) code generation.One useful approach I’ve found was written by Xu Hao and shared on Martin Fowler’s website.We want to:  Begin with context and instruction  Ask ChatGPT to outline its approach, splitting the interactions into multiple addressable steps  After refinement, regenerate the plan with names for program elements  Then ask, step by step, for tests and implementation codeThe first step in developing code, following Xu’s model, is to provide context and generate a series of steps. That includes providing a brief of our intent, our desired tech stack, and the required output format.Based on our context, we now have a preliminary plan. Much like our design process, we should proceed through each of these elements and, where appropriate, update any assumptions or misunderstandings. Doing that at this level is much easier than modifying generated and possibly interrelated code.As before, asking for an update to the plan with components, methods, and properties allows us to preview the upcoming code execution and, where necessary, make changes to avoid problems.At this step, ChatGPT has helpfully included numerous items related to our project. However, even at the beginning of the output, there is some cause for concern. In the creation of the project, ChatGPT has included several packages that are relevant. Express makes total sense – we asked for it. Body-parser does, too, as we’ll be parsing the body of submitted requests. However, as of September, 2017, Express has included body-parser as part of the default Express package.What’s more, there seems to be some confusion. While we’re using an OpenAPI description to provide additional context for code generation, nothing about our service requires using an OpenAPI file in production, let alone the need to validate one.On a more positive note, including “dotenv” is a welcome surprise. We will deal with keys and secrets if we call other 3rd parties for processing. But we need to be aware that some of how that is handled will depend on the cloud service we use for production.After multiple rounds of providing instructions for our more detailed plan, we get to the point where we have a very robust understanding of what the code should be doing and how we’ve organized it. Note that this isn’t just throwaway work for satisfying the LLM – this also provides a robust set of documentation to refer to later, like for onboarding new developers.The next step is to create the necessary test cases which exercise the functionality that we’ve described. In addition to asking for a plan for end-to-end testing using a tool like Postman, I can easily tell ChatGPT to generate sample test information for use as part of a test runner.Some cautions that we need to be aware of while creating code. These LLMs can only learn from the past. And while they have a vast amount of information as part of their training data, that data includes those old tutorials and quickstarts as we saw with the inclusion of ‘body-parser’ in our express code. The model has no concept of deprecation over time, at least not yet – something that is a problem for programming languages.Another issue is that larger projects require more tokens. GPT-4 has a token limit of 8,192. Another variant increases that to 32,768. That is more but both variations can quickly be consumed on tricky problems.Once ChatGPT receives enough tokens, it begins to lose context, starting with the earliest material. And given the importance of maintaining context to create logical results, this can be a big deal.You can check the number of tokens used with OpenAI’s tokenizer tool. For our example, my simple 110-line OpenAPI description already constitutes 1,522 tokens. Bigger, more realistic applications are going to consist of significantly more tokens. That is why, when performing this kind of development, the problems must be decomposed into highly focused, discrete work units.I could keep going. This entire thought exercise assumed that I was creating a new service from scratch. I didn’t even address situations where we might have an existing codebase. There’s a host of different applications, from creating documentation to identifying redundant points, from translating to different languages to inferring operations based on logs that I could go into.However, in the time that we have left, I want to return to a high-level conversation and discuss the implications of LLMs being widely used in software development.In the immediate future, we will see all manner of existing software tools incorporating ‘AI’ or ‘Copilot’ features. It is just too much of a compelling selling point now. Some of this will be genuinely beneficial and create new opportunities for productivity. In other cases, existing algorithmic automation will get rebranded.With all of this ‘AI’ advertising, we need to be able to evaluate the claims made. There will be helpful functionality. There will also be a tremendous amount of ‘AI snake oil’.Much of what we discussed in both the design and development sections has the potential to create better results. However, it is crucial to recognize that both of these steps pale when discussing software’s total cost of ownership.To be clear, 90+% of the cost of any code, let alone APIs, is in the maintenance and operation. We treat getting into production as checking the box, completing a goal, and being “done”. Then, the thinking goes, the more things we can get “done”, the more productive we can be.Creating something faster is not the boon to business that you think it is. LLMs, done incorrectly, are the equivalent of throwing more things at the wall, faster.We should aspire to create better software, not necessarily more.Of course, the more we use these tools, the more likely these model’s outputs will be included in the training sets. When this happens, it leads to an interesting phenomenon known as “model collapse”.Datasets that contain LLM-generated text experience worse performance; it is almost like making a copy of a copy of a copy. Subsequently, volumes of data compiled before 2020 will be at a significant premium for people looking to continue training models. And the more we put the output of these tools out into the world where they can be scraped for the next generations of LLMs, the more problems those LLMs will have.But even if we could uncover another Reddit or Wikipedia, which somehow had avoided being used in training models thus far, there is the question of whether we’d see the same leaps in perceived performance that we have seen to date.As suggested by papers in the space, we could be reaching the point of diminishing returns in raw training data set size. There is a high likelihood that performance improvements in the immediate future will be because of targeted, task-based optimizations for specific industries, as opposed to larger training data sets.All of that is some interesting, challenging technical problems. I’m not saying that we won’t see improvements in LLMs in the future. What I am trying to impress upon you is that the rate of progress isn’t up and to the right forever – at least not using current techniques.But even with what we have, what we have is pretty amazing. Simon Willison perfectly captures the sentiment I’ve felt while exploring these tools  ‘AI-enhanced development makes me more ambitious with my projects.’  “As an experienced developer, ChatGPT (and GitHub Copilot) save me an enormous amount of “figuring things out” time. For everything from writing a for loop in Bash to remembering how to make a cross-domain CORS request in JavaScript—I don’t need to even look things up any more, I can just prompt it and get the right answer 80% of the time.  “This doesn’t just make me more productive: it lowers my bar for when a project is worth investing time in at all.”I’m not a cutting or even leading-edge developer. My production code days are at least a decade behind me. I cut my teeth in the era of responsive web design, database normalization, and three-tier software architecture apps. I still think of software in model-view-controller terms. I moved to organizational concerns before the big shift to cloud, containers, complex frontend libraries, and intricate deployment pipelines. As such, launching a new project is intimidating for me. Even attempting to follow getting started tutorials can be a frustrating experience; so many of them start from a place of high background knowledge and assumed pipeline guardrails that I have difficulty following along.Being able to quickly bridge that experience gap by asking for what I need to know - rather than having to stitch together the missing puzzle pieces from here, there, and everywhere else – is huge. In some ways, it is personal for me.This brings me to my last point. We’re not talking about a model when we say ‘AI did this’ or ‘AI disrupted that’. Whether we’re talking about laying off nearly 8,000 people or undermining a workers’ strike, those are decisions being made by people. And we need to hold them accountable for their actions.From Emily Bender, again:  “Rather than asking, ‘can AI do that?’, the more appropriate question is ‘Is this an appropriate use of automation?’”That applies to a lot more than just ChatGPT.  From our dev pipelines to our call center support, how do new forms of automation enable us to BEST serve our customers and what they are trying to do? In whose interest is it to lay off journalists, creatives, and even technology professionals?‘Dismissing today’s current crop of LLMs, or “generative AI” as only capable of “telling lies” or “hallucinating” projects far more personhood and sentience - a will or agenda present during interactions - than what exists. In a world that has seemed more chaotic and randomly cruel, particularly in the last several years, our brains are working overtime to see a pattern, an intelligence, an intent anywhere we can find it. Sadly, those looking for a savior (or an opponent) will be disappointed.What does exist is a set of tools - useful, powerful tools that tighten the feedback loop for creators. Further, these tools leverage the power of language. Rather than requiring a priesthood versed in ritualized incantations, the promise is that anyone who speaks can create software. While much of the low or no-code effort has focused on greater visual metaphors, from Visual Basic to Scratch, the promise with tools like ChatGPT is to forgo that learning ramp entirely.”Grady Booch, an American Software Engineer perhaps best known for developing the Unified Modeling Language, once said, “the entire history of software engineering is one of rising levels of abstraction”. There is a solid argument to be made that LLMs represent the next major abstraction in software development. The key to unlocking ever greater levels of software potential was not enriching our communication with more rigid semantic meaning. Instead, it was about training the machines to be more comfortable with our language’s ambiguity.In conclusion, as those most able to understand these tools’ nature, we must use them wisely – to empower where necessary and avoid perpetuating a status quo of inequality and apathy.Thank you for and inviting me back again to speak this year and the opportunity to share some of my most recent work.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2023-06-23T00:00:00-05:00'>23 Jun 2023</time><a class='article__image' href='/2023/06/23/SeparatingAIFactFromFiction'> <img src='/images/2023/06/Slide1.PNG' alt='Separating AI Fact from Fiction'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2023/06/23/SeparatingAIFactFromFiction'>Separating AI Fact from Fiction</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Seven Skills to Save Software",
      "category" : "",
      "tags"     : "Software Change and Presentations",
      "url"      : "/2022/06/28/SevenSkillsToSaveSoftware",
      "date"     : "Jun 28, 2022",
      "content"  : "This June, I had the good fortune to present my recent work to several different venues. As I progress in my career, I’m increasingly more interested in how change happens than the bits and bobs of the change itself. In other words, I started out with a career in technology and have ended up caring a lot more about the people involved.Here is my most recent work, ‘Seven Skills to Change Complex Systems (And Save Your Software)’. A recording of the Deliberate Complexity delivery is embedded at the bottom.Title SlideMy name is Matthew Reinbold. I am happy to be here. I am also  grateful for the technology that allows us to have these kinds of conversations, regardless of whatever is happening in the world. Today, I will be talking about the seven skills to change complex systems and, subsequently, save your software.To Identify The Barrier to Change, We Need to Rethink RelationshipsBefore we get to the skills, we need to  illustrate the relationships in modern software development. We need to talk about what happens with a change in a complex system and why it seems so hard to facilitate large-scale improvement programs within the software.What kind of change am I referring to? When I say improvement program, I refer to a variety of things. This could be:  Becoming more customer-responsive  Improving the agile processes  Increasing your security postureWhatever that thing is within your company, chances are you found it was like moving through molasses. Change in a complex system is not just difficult, but new wrinkles seem to constantly emerge, threatening to undo whatever progress has been made.Once Upon a Time, Software Was SimpleLet’s start with a gross oversimplification of the way things used to be.Once upon a time, the software a company was responsible for could be modeled as a single unit. This is not a perfect metaphor, but it is useful. In this case, we’ll say that there was a single team working on a single code base, and everybody was working toward the same release date. Everyone celebrated when the “gold master” was published. When it was time to update things, getting everyone moving in the same direction was simple, since there were “of a piece”.Since then, I’ve had a firsthand seat to how software creation and distribution have changed. As a Digital Engagement Lead with the Concentrix Catalyst group, I help large enterprises accelerate their API-led digital transformations. I also write about sociotechnical issues on my website, MatthewReinbold.com. Previously, I helped multiple Fortune 500 companies establish software improvement efforts, covering tens-of-thousands of developers across numerous geographical locations and different Lines-of-Business. As a writer for Net API Notes, my email newsletter, I’ve chronicled the changing nature of service interaction for more than seven years.Having the ability to peek behind the curtain, I know this model on the screen is not how companies’ internal operations look today.Software Composition Has ChangedWhere once we might have had a singular monolith - both in concept, team resourcing, deployment, language, framework, and objective - our software capabilities resemble something more akin to abstract art.This network traffic map is from a UK company called Monzo. This was in 2019, so it’s probably more sophisticated now. This graph represents the network traffic between their 1500 different microservices. Rather than having a single monolith, they have 1500 tiny individual pieces that make up the capability that they ultimately deliver to their customers.And Monzo is not alone. These ominous charts are called “microservice death stars,” and similar charts exist for Netflix, Amazon, Twitter, and probably – to some degree – the company where you work.Today, Software Is Composed of SystemsPerhaps, you’re not attempting to manage 1500 microservices. But the odds are that the software capability or experience you’re trying to deliver comprises multiple pieces, and for a good reason.As software has been challenged to more significant problems, it has become increasingly difficult for any person, or even one team, to comprehend the entire software scope. As a result, we (software practitioners) have increasingly sought reductive techniques for turning a large problem into smaller chunks:  Agile is a reduction in the size of the work unit to be delivered  CI/CD is about reducing the time it takes to deliver through automation  Even the concept of two-pizza teams is about reducing the scope of ownership to something that isn’t swamped by coordination overheadThis has been a boon for the individual units and, subsequently, is why the modern enterprise is no longer a single “blob” of software, but a complex, interconnected distributed system.Reductionism Can Lead To IncoherenceThis reductionism has been the primary mechanism that we’ve attempted to scale the systems. However, that has led to an interesting side effect: each one of these subsystems potentially becomes uncoordinated from the larger whole. The lack of visibility into other parts of the system, schedule crunch, and comprehension overload cause developers to make decisions optimized for a local scope and often suboptimal for the overall system.Each may work toward its local optimized maximum. Examples may include:  Upgrading to a new dependency version  Responding to an audit request  Adding a feature in response to a customer  Cleansing data for ML initiative  Working on performance improvements  Rewriting in the latest framework mentioned on HackerNews because “it looks cool”We optimize subsystems to the detriment of the entire system all the time. And that becomes its own form of “conceptual debt” for the whole.The Incoherence Penalty Stifles ChangeAutonomy, on its own, is insufficient to address the incoherence penalty. For companies to benefit from better, faster decision-making on the part of their autonomous teams – to meet the volume and velocity of critical decisions to be made during a time of change - those decisions need to be aligned.The hardest part of modern software development has less to do with the technology itself, it has much more to do with maintaining coherence across the parts.Michael Nygard is an author and frequent speaker on software development. In a powerful blog post, he defined the “Incoherence Penalty” as:  “Whatever time the team members spend re-establishing a common view of the universe.”As Michael points out, the penalty might be small for a half-dozen people in a single shared workspace or across a half-dozen components. A whiteboard session every week or so is enough to keep everyone aligned.However, the effort necessary to maintain alignment grows as we scale and as the system becomes more complex.(For another perspective on this scale challenge, and why it is so difficult to teach at the university level, see this great blog post from Lorin Hochstein.)We Often Model the Architectural RelationshipsIn a complex system, the power is in the relationships between the pieces, the places where these things interact. With dynamic systems, these are the API interfaces. When we diagram these things, it is almost always in terms of technology. We go in hoping to identify a new architecture or tool that will provide the silver bullet to the incoherence problem.However, We Often Leave Human Systems Vague or UndefinedHowever, what is missing from these diagrams are the interactions between humans. In creating change, we shouldn’t ignore a significant source of the relationships in an organization.So, if we’re going to save software, if we’re going to create change in modern development environments, we need to be able to create coherence. And to create coherence, that means applying skills to the human relationships equally, if not more, than the energy we expend on the software integrations.This Is Unfortunate, As Tech Doesn&#39;t Create Alignment; People DoTechnology does not create alignment - people do.Autonomy and alignment are not opposing ends of a spectrum but complimentary. The more alignment you have, the more autonomy can be supported, assured that the decisions made will move the organization in the same direction, not pull it apart.If you’re going to be successful, here are, rapid-fire, seven skills essential to addressing the human system.There Are Seven Skills For Extending Influence Over a Complex SystemTalking about each of these, comprehensively, could be an entire talk on its own. What I will attempt to do is introduce the concept in the time we have left, reference some powerful places to get started for further exploration, and we’ll go from there.Crafting a Compelling VisionHaving an idea for how something could be better is not the same as having a compelling vision. If all success needed was a good idea, then my domain name registrations would have made me rich long ago. It takes work to go from an idea of what to do to a vision that rallies other to the cause.Photo by Riccardo Annandale on Unsplash .Start at the End: What Are You Celebrating?In his book, Agendashift, author and Agile coach Mike Burrows lays out a formal process for creating a compelling vision.He starts with the concept of this celebration. So perhaps in my organization, I might say, “I wish we had every API on the same gateway, rather than everyone punching holes through the firewall with their own redundant infrastructure”. Going through this exercise, called the celebration, we need to reframe that because, in my head, I’ve already picked a solution. I’ve already said, “I want this external vendor and I want everybody to be on it”. But that’s not an outcome. In terms of the business value to be delivered, it’s already assuming a solution.By following this exercise, called the celebration, we proceed to answer the “5 questions that start with ‘W’” – who, what, when, where, and why. When I’m doing is I’m unpacking, this preconceived notion of everybody on a single vendor.Recast Obstacles As Outcomes, Not AbsencesMike also defines this other exercise called the 15-minute FOTO, which is also incredibly adept at reframing, but this time reframing obstacles to outcomes. What obstacles keep us from getting to this wonderful celebration? Well, this obstacle that I’m writing down, more likely than not, is in the form of an absence. So, for example, I might say one of our organizational problems is that we don’t have meaningful postmortems. That’s an absence of something. And again, that absence assumes a solution; it assumes that postmortems should be done, but it doesn’t necessarily define the outcomes we’re trying to create.Recasting obstacles in this way can have two significant benefits:  It encourages you to be specific (perhaps the request for postmoterms has nothing to do with learning, but rather an individual wishing closure, a milestone, after a significant effort)  Avoids describing the problem only in terms of the absence of some prematurely defined solution (there may be other prompts or activities to re-incorporate learnings other than a postmortem event)Also, maybe the reason that somebody is suggesting postmortems is not that they want to incorporate learnings. Perhaps they wish they had a more definitive milestone. When a project is done, maybe there’s a backlog that seems endless. A postmortems would act, in this case, as a milestone, as a means of recognizing achievement.So, in reframing things you go beyond obstacles to discover what people value. That true value is at the heart of a compelling vision.A Vision Comprises More Than Just An IdeaOnce you have what you’re trying to accomplish in terms of outcomes, you can go ahead and create your compelling vision. Your vision should include:A Clear Articulation of the Current StateA transition story will highlight how the past way of doing things is unsustainable and how it has led to the current crisis; a crisis which requires new ideas (your ideas!) to overcome. The articulation must explain why the change should happen now. As I work with companies, we spend a lot of time here. Sometimes the source of urgency is obvious: things like a pending bankruptcy or a public security breach are in the driver’s seat. But, often, your idea must confront a suboptimal, yet functional, status quo. The key is creating a sense of urgency, not panic, about why the change must happen now.An Attractive FutureA story must emphasize that the future is not a fixed, predetermined point but something that can be changed. We can’t predict the future, but we can try to invent one with more desirable outcomes. If instituting a change is worth doing, we must have a coherent story about the new possibilities.A New Identity for ParticipantsSystem change requires working in new configurations, often with new (to you) people. Stepping beyond the comfort zone of our friends and colleagues means engaging with strangers and opponents who may not have a shared understanding. A story should enable people to recognize their shared interdependence in the system, thus creating a shared identity. It must show how the sub-optimal future cannot be solved by individual stakeholders alone and how a new network with new relationships can.A Path Connecting It TogetherAbove all, a story must point people toward needed change. Part of this includes articulating what progress along the path looks and feels like.A vital aspect of a story is how it links current actions to the desired future destination. Connecting these things increases the understanding of our responsibility and agency within a system.To illustrate, I’ve written an example arguing for remote work elsewhere.Coalition BuildingMajor change is challenging to accomplish. No one individual, no matter how charismatic, can develop the perfect vision, communicate it to everyone, eliminate all obstacles, perform all the experiments, and tally all the short-term wins. What is needed is a coalition able to shoulder the load and recruit new help as the effort grows.Perhaps one of the most critical aspects of coalition building is that you’re attempting inclusion, not assimilation. A coalition should elevate the participating members’ unique skills, experiences, and desires. A sense of belonging is essential to sustaining a movement through difficult times. This means that members should still feel uniquely valued. They’re going to be bringing their ideas, assumptions, experiences, and preferences. A sign of a healthy coalition is if the vision is evolving, changing, and adapting because of the participation of new individuals.Photo by Jason Goodman on Unsplash.Create Onramps For All Interests And AbilitiesHere are just a handful of activities for involving people in your coalition-building. Your call to action can be much more diverse than “please read this blog post” or “attend our office hours”. Those, in a vacuum, are not that compelling. People have a variety of different availabilities, talents, and inclinations. In building your coalition, create inclusion points or on-ramps that can accommodate that variety.The book More Fearless Change is not like a regular book; you don’t read it from beginning to end. Instead, like a cookbook, it includes numerous recipes for things to try. They start from very simple like “attend this lunch-n-learn” and escalate to holding an internal developer conference.Move From Mobilizing To OrganizingYou may not be able to launch an internal developer conference at the beginning of your change effort. But the critical thing is accommodating and allowing for people to engage with your effort as they are able. And once you start doing that, you need to start thinking about moving people from mobilizing to organizing.Transactional mobilizing is a relatively straightforward concept– people offer to help, and you give them a task to do. This is the kind of low-effort “Retweet if you agree” campaigning on social media. While that may be easy to do, the actual, long-lasting impact is low.Transformational organizing is about:  Identifying, recruiting, and developing other people with whom we share purpose to form a collective identity for the change distinct from their previous role  Growing a group of people that recognize and express responsibility to each other (if they had to pay dues, would they still belong)  Transforming the resources of that group into the power needed to make and sustain changeMany folks are happy to help if it doesn’t cost them time, energy, budget, or resources. A significant task of coalition building is moving people who are already concerned about the issue to those willing to do something, even at a cost to themselves. Organizing deepens participants’ understanding of who they are and why they want to make the change. In doing so, they then identify others who share their values and recruit to continue building change momentum.For more, check out this video from Hahrie Han on the difference between Mobilizing and Organizing.CommunicatingSo obviously, that includes a lot of communication. When I say communication, I don’t mean standing on the top of your building with a bullhorn and yelling your awesome idea at people. When it comes to change, people don’t need a good talking to – to make a change, they need a good listening to.Everyone wants to be more successful, efficient, and capable in their roles. However, as important is retaining their autonomy. Just ordering people to do something, even if it is in their best interest, rarely works. For example, I absolutely understand that I should eat healthier but still bristle whenever my wife brings it up. If communicating comes across as a command or a mandate, it will most likely create resistance.Photo by Brooke Cagle on Unsplash.Evoke The Reasons For Change They Already HaveMuch of our daily conversation is a default activity: it just happens. By contrast, strategic conversations deliberately use limited time and attention with another person to achieve a specific goal. In our case, it is about furthering our change initiative.Motivational interviewing is a conversation technique designed to strengthen personal motivation and commitment to a specific goal. It does this by eliciting and exploring a person’s values and beliefs within an atmosphere of acceptance and compassion.So rather than charging into a forum to say, “Hey everybody, listen to my idea,” motivational interviewing starts with asking open questions to find out more about the person:  Why did they join the company?  What is it about the company that they enjoy?  What are the recent accomplishments that they’re proud of?  What do they find challenging?Through that listening, you’ll get an understanding of the things that they value. You can then affirm the strengths of their beliefs system that align with the kind of change you’re trying to make.Reflective listening underscores the individual is being listened to; not everything needs to be rephrased or repeated. Much of the exchange should be those things that support or bolster already existing attitudes or beliefs that align with the change.Finally, summarize. Connect the dots between the things that they already believe and want to accomplish in their own careers with the things you are trying to make happen within the organization. Create that alignment.A more detailed description of the usefulness of motivational interview is available.For additional perspective on having strategic conversations with potentially resistant people, see the article “Persuading the Unpersuadable by Adam Grant.Bring Schwag And End With A Call To ActionAnd, during these conversations, bring schwag!This is a picture of my laptop. And as you can see, I’ve been part of a few efforts. What is important to remember is that the more abstract the change effort, the more helpful it is to have a physical manifestation. It doesn’t have to be just stickers. Challenge coins, pins, posters, t-shirts, or polos are all valid. What you pick ultimately depends on the culture and what kind of currencies are exchanged. But bottom line, have something representing the mission that can extend and communicate change after you are gone.In both the conversation, and with your swag, end with a call to action. If you study this image, you might notice that few of these images even have a link where people might go to find out more. Ultimately, you don’t want to miss an opportunity to connect people with one of your carefully crafted coalition on-ramps created in step 2. Invite people to the next step on their journey as part of your communication.ExperimentingTo make change possible, we likely need to understand more about what is required – we need to adapt and adjust based on what we learn.Too often, we think great change requires atomic, massive events that stand out like a fork in the road – at Amazon, they refer to these as “one-way doors”. And as you might imagine, trying to do that huge thing will generate a proportional amount of resistance. However, a powerful skill is shrinking the change being asked for, running several simultaneous experiments, and then leveraging the learnings to make the change more effective.Because, during our vision creation in step 1, we’ve reframed our obstacles and we’re looking for outcomes. We know that there might be a host of things we might do to deliver and achieve that outcome. From the coalition we’re assembling in step 2, we might have people in a position to try different things and report back. This is where we engage them to run experiments.Photo by Julia Koblitz on Unsplash.Small Experiments Equate To Less ResistanceThis experimentation skill is how we engage those groups, gather the results and continue to create a flywheel of exciting revelations that subsequently inform more experiments, getting us closer to our ideal state. Small experiments equal less resistance. We always need to understand and consider how we make an experiment safer.If an experiment is too big to fail, it’s no longer an experiment. And that becomes very, very, very scary for your leadership team to rally behind.More from John Cutler and the importance of experiments here.Experiments Create Short Term WinsWhat kind of things make a good experiment? Good experiments are :  Visible  Unambiguous  Clearly relate to the change effortFor a host of additional considerations when running experiments, I again refer you to John Cutler.CelebratingOnce our experiments begin generating results, we need to celebrate!Of course, I’m not talking toga parties, or gender reveal events. When done strategically in a business context, celebration is a skill to help further influence a complex system to align behind the change you seek.Most of us don’t have a plan for celebrating accomplishments. Moreover, the past 2-and-a-half-years of remote work and pandemic isolation has meant that regular notice and elevation of good work has been much more difficult. That is a problem because celebration is a significant opportunity to cement the lessons learned and strengthen the relationships between people that make future achievement more plausible.Change and growth are promoted through positive emotions more than through disciplined practice. Celebrating small wins produced by our experimentation reinforces the learning experience.*Photo by Priscilla Du Preez on Unsplash. *Leverage Your Company&#39;s Internal Recognition PyramidJust as the accomplishments we celebrate don’t have to be large, our celebrations don’t have to be grandiose; they just need to be meaningful.Every company of decent size has an internal kudos or recognition program. There might be that yearly dinner with the CEO for the people nominated and selected for extraordinary effort. This formal type of program is at the top of the pyramid. And while those are nice, they only impact between 1% and 10% of the employees at any given company, and they do so infrequently.Then there are the informal programs where you can give people kudos or send a gift card. That might be monthly or quarterly (if people remember). Perhaps that gets between a third and half of employees. A $50 gift card to Amazon is nice, but it still isn’t the kind of continuous reinforcement we need to see for change.I’m interested in the sincere, daily detailed word of thanks to a person illustrating the desired behavior. When done correctly, these expressions of gratitude become their currency.Everyday recognition is about expressing thanks to people and acknowledging others for doing fantastic work in distinctive ways. It should be weekly, if not daily, and can impact 80-100% of employees, if done correctly. While formal, “big” recognition activities may be appropriate for significant milestones, it is the regular, persistent reinforcement that can have 2 to 3 times greater impact.In previous roles, I had calendar time blocked out once a week to express gratitude. In some cases, this might have been a note to people that had presented an above-average API description. Other times, it might have been someone that asked a great question during a group event. Sometimes, it might have been a team that had their big launch. Regardless of what it was,  I made sure that I spent some time reflecting the positive qualities they exhibited and connecting how their success was related to the change underway.And, like most corporate kudos systems, their manager also saw these messages. Managers are busy. They’re usually grateful for any additional signals to help them triangulate where their team is and how they’re doing. What makes these nudges valuable is that they’re scarce– we take it for granted that people know how they’re doing. Taking the time to create something “official”, that persists as part of the employee’s work history, creates a currency that can be paid out during performance reviews and quarterly sync-ups.If you’re interested in more on authentic recognition, there’s more available elsewhere.There Are Several Ways To Frame SuccessWhen starting, it may be challenging to find ways not to feel like a broken record, repeatedly telling people “good job”. The encouragement that is delivered needs to be authentic. Furthermore, some people respond differently to different types of feedback. Some like feedback about their own performance. Others react more strongly to a favorable comparison with their peers. Others prefer to hear good news despite disappointing performance.This framework is from Dr. BJ Fogg’s book, Tiny Habits. It is not meant as a checklist, but as a handful of examples when framing encouragement.Empowering OthersCritical momentum is lost whenever you let up before the job is done. Regression may follow.In successful transformation, the guiding coalition uses the credibility afforded by the short-term wins to push forward faster, tackling even more or more extensive projects.Photo by Mars Sector-6 on Unsplash.Different People React To Change DifferentlyIt’s incumbent to realize that not everybody embraces change to the same degree. This illustration is of the innovation distribution curve.The curve illustrates that within any population, you have the following distribution:  Innovators (2.5%): Will something for no other reason than it is new  Early Adopters (13.5%): More discrete in their selections than innovators, adopters use status as early pioneers to maintain social credibility with their peer group while taking on less risk (cutting versus bleeding edge)  Early Majority (34%): Willing to adopt innovations, but only after seeing what success with the innovation looks like among their peers  Late Majority (34%): Are reluctant to adopt the innovation unless specifically told they have to, after which they require higher levels of support and encouragement  Laggards (16%): Those who actively resist change and will actively work to thwart an innovation for no other reason than it is newDifferent People Require Different ResourcesThe reason that I point this out is that different people will require other support. A mistake would be to treat all those necessary to change as a single, monolithic group. To best support them, it is vital to recognize where they are in their journey and meet them where they are.Terraforming the CultureNew practices, if they are to continue beyond the effort of the guiding coalition, need to grow deep roots. Without them, the existing cultural norms will reassert themselves when the transformation program or initiative stops working day and night. Shallow roots require constant watering. Without the attention, the practices dry up, wither, and die.When the new practices made in a transformation effort are not compatible with the relevant cultures, they will always be subject to regression. Changes in a workgroup, a line of business, or even an entire company can come undone, even after years of effort, because the new approaches haven’t been anchored firmly in-group norms and values.Subsequently, the final stage in changing complex systems is terraforming the culture to make change last.Photo by Nikola Jovanovic on Unsplash.Inverse Conway Maneuvers Are Hard In PracticeFinally, for the last step in influencing a complex system to align behind a change, I want to touch on culture briefly.For those familiar with the API space, you’re probably familiar with the concept of Conway’s Law. You may also be familiar with the Reverse or Inverse Conway Maneuver. In the Inverse Conway Maneuver, the idea is that redesign your organizational structure to produce the kind of software that you want. It is a powerful idea, but having lived through my share of enterprise re-orgs, I can definitively say this is easier said than done.I’ve written about the impacts of Conway’s Law on software design before. For coverage of the nuance required for successful Inverse Conway Maneuvers, check out this edition of my newsletter, Net API Notes #199.Plant The Change In Operations, Processes, and RewardsIn order for a seed of an idea to grow, it must be firmly planted in the company’s culture. This means that it is part of the ongoing activities. That could mean:  People with experience with the idea are explicitly sought as part of the hiring process  The importance of the change is specially highlighted as part of employee onboarding  Demonstration of the change is part of the reward performance structureThere’s a reason that this is step 7. While some steps, like coalition building, communication, and experimentation should be done simultaneously, changing cultural norms should only be attempted when sufficient momentum is achieved.Next StepsI’d like to end with a challenge.      This second - think about something in your current work you wish (or needs) to be better. This shouldn’t be hard - nothing is perfect and we’re not trying to prioritize here - that can be done later. What’s the first thing that comes to mind?        Today - whether it is through Slack, Microsoft teams, an email, or your corporate HR feedback system, send a note of gratitude to someone that you’ve seen handle the problem well. “Hey Tim, I just wanted to let you know I was really impressed with how you keep the test suite current. That takes care and consideration I don’t always see. Thank you.” The goal here is not to solve all the things for all the time - the goal here is to begin a practice of reinforcing positive behaviors.Create a recurring task to do this on a regular basis. And make sure the feedback is genuine.        This week - schedule a chat - over lunch, if you’re back in the office, or a casual “sync” with someone who might feel the same way. Explore what they might have tried and what the results were. And ask if they are aware of others to have further conversations with.  You probably won’t be able to enact the entirety of your change immediately. But you will have taken the important first steps of acknowledging the human system at play. You started down the path of creating greater alignment and, in doing so, begun to bridge the fragmentation that exists.Better Bits - A Book To Expand On These IdeasI had mentioned that there was so much more that could be said for each skill. I also strongly believe that successfully learning these skills is essential for us to navigate not just our complex software systems, but life itself. That’s why I’m writing a book called Better Bits. If these topics are of interest to you, sign up for updates.Thank you for this opportunity.A video recording of the Deliberate Complexity delivery of this talk is available online.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2022-06-28T00:00:00-05:00'>28 Jun 2022</time><a class='article__image' href='/2022/06/28/SevenSkillsToSaveSoftware'> <img src='/images/2022/06/Slide1.PNG' alt='Seven Skills to Save Software'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2022/06/28/SevenSkillsToSaveSoftware'>Seven Skills to Save Software</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Software Pipelines As Behavioral Prompts",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2022/04/14/GoldenPath",
      "date"     : "Apr 14, 2022",
      "content"  : "I have previously discussed how important the environment is in creating meaningful behavioral change. I’ve also suggested that the developer’s IDE (or Integrated Development Environment) was an influential source of positive behavioral prompting. If we move beyond just the single IDE, the software development pipeline could also be an environment capable of prompting desirable outcomes. This process is known as The Golden Path.Charity Majors is the co-founder and CTO of Honeycomb, makers of code observability software. She describes the Golden Path like so:  “Tell all your engineers that going forward, the Golden Path will be fully supported by the org.  Upgrades, patches, security fixes; backups, monitoring, build pipeline; deploy tooling, artifact versioning, development environment, even tier 1 on call support.  Pave the path with gold.  Nobody HAS to use these components … but if they don’t, they’re on their own.  They will have to support it themselves.”For all but the smallest of dev shops, there are advantages to having centralized processes and infrastructure. “Approved” tech stacks are standard to ensure proper staffing and triage is possible. A single log standard can save copious amounts of time and effort when in the thick of an outage.Traditionally, governance - either in the form of an Architectural Review Board, Center of Excellence, or some other bureaucratic entity - dictates the software development behaviors they expect others to follow. An example might be “We are a Spring Boot and Node shop” or “Every new service must implement Open Tracing”. The bulk of energy is then expended on detection and enforcement, which - honestly - is probably not how anybody dreamed they’d be spending their productive waking hours. (The lack of of career development path for this work is a topic for another post; all too many enterprises end up parking their most passionate system thinkers into these professional cul-de-sacs.)Instead, employing a Golden Path strategy directs that energy to create a superior developer experience. Sure, each team that needs to make an API could select, configure, and operate their own API gateway. They could roll their own authentication and key provisioning server. They could customize their own CI/CD pipeline. But if there is a platform team providing a well-supported, consistently performant,  and feature-compatible equivalent, why would they? And some point, the novelty of tinkering with configuration files wears off, and a realization sets in: dithering with non-differentiating technology is not the same as delivering business value.Creating a Golden Path is work. However, suppose you can create an environment where doing the right thing is the easy thing. In that case, you are significantly further along than relying on best faith efforts and goosing external incentives.Update 2022-05-05Along these same lines is Yunong Xiao’s 2017 presentation entitled, “The Paved PaaS to Microservices at Netflix”. “Paved Path” is the same concept as “Golden Path”.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2022-04-14T00:00:00-05:00'>14 Apr 2022</time><a class='article__image' href='/2022/04/14/GoldenPath'> <img src='/images/2022/pipes.png' alt='Software Pipelines As Behavioral Prompts'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2022/04/14/GoldenPath'>Software Pipelines As Behavioral Prompts</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "&quot;Just Tell Me What To Do&quot;",
      "category" : "",
      "tags"     : "Software Change and Software Governance",
      "url"      : "/2022/03/29/JustTellMeWhatToDo",
      "date"     : "Mar 29, 2022",
      "content"  : "In a recent edition of the Ctrl Alt Delete podcast, host Emma Gannon described her discovery of a Facebook group that helps individuals make small decisions. “Can’t decide between two shirts?” it asks. “Can’t choose pizza or spaghetti for dinner? Let this group make small decisions for you.”In “the before times”, I would have no use for a group like this. However, in the pandemic times, there are simply some evenings where this sort of “outsourcing of the banal” seems attractive.I wrote about decision fatigue before:  Decision fatigue, or when the mind becomes exhausted after a sustained period of decision making, often follows. Many became acutely aware of decision fatigue during the Covid-19 pandemic. Suddenly, even trivial activities like opening doors and touching elevator buttons were a puzzle. Not only had the number of decisions skyrocketed, but the heavier impact that those decisions carried (the possibility of illness or death) created outsized effects: stress, loss of energy, and lowered mental capacity.The last several years have been stressful. When individuals weren’t navigating a pandemic, they were experiencing everything from political unrest to supply chain bottlenecks. And then there was a war.Businesses dealing with API sprawl are also stressed. The unprecedented events have meant that software architects, already stretched thin, have experienced higher levels of decision fatigue.  “Just tell me what to do” is a common request.The Software Strategic ImpactIt is understandable how individuals would desire to bypass the hurly-burly of defining first principles - those are yet more decisions! “If it is good enough for Stripe or Twilio”, the thinking goes, “it is good enough for us- we don’t have energy for that vision quest stuff; there’s too much to do!”.However, my concern is what happens on Day-2 with this “made to order” approach to API standards. “Day-2” is a DevOps term. It relates to the challenges that arise not from changes to a specific application but the more significant abstract processes and operations. For API standards, Day-2 problems relate to how a set of design standards, architectural guidance, or run-books get disseminated, adopted, and improved upon over time. It is one thing to gather key leaders together to announce expectations for a newly established API program. It is another thing entirely to continue to drive engagement and improvement among stakeholders in month 6. Without creating the crucible to form first principles, this greater identity and shared purpose aren’t formed.Further, without discussion, adopting standards developed elsewhere may lead to bloated and ill-fitting style guides. Every standard a developer must follow introduces a grain of cognitive friction. Sometimes, the price paid is worth the production-environment benefit. However, every organization is different, with its own experience, style maturity, expertise, market, and desired end goals.Each requirement in a standards doc should be able to answer:  What is the better API outcome created by this standard?  What are we willing to sacrifice (stop doing) to make this standard possible?  How will “better” manifest in our day-to-day activities, behaviors, and interactions?  How will we know if the standard is working?  Has anyone done this before?  Are we inviting others to a better future or imposing a singular vision of a future onto others?  What is the non-obvious implication of this standard?  (Bonus) How will we automate the education and enforcement of this?Without considering the above questions, adopting standards from a different context will (best case) result in unnecessary effort and (worst case) be ignored. The consulting practice I work for does a great job of incorporating this nuance through careful, considered conversations. Together, we arrive at a healthier place for all involved.The Good NewsJohn Cutler is a product management expert and frequent communicator. He also sees the stress among the change agents he works with. Through that work, he also shares some hope:  “In the last eight months, I have spent countless hours speaking with change agents. They reach out to me for product management advice, but these conversations inevitably seem to turn to the topic of how to nudge their organizations in new directions. During the pandemic these discussions have acquired a new sense of urgency.  “Their anxiety is palpable.  They care for their teams but are overwhelmed by the challenges, and the opportunities, facing them.  To be sure, the pandemic has been catastrophic on every level, but many of the change agents I have spoken to are finally receiving the support they need and bringing about the impact they have long wanted to see. Their work is paying off, at the most inopportune time. There is movement in the right direction.”During these unprecedented times, we must recognize the inherent opportunity in the status quo fracturing. Introducing change now does not have to contend with bursting people’s “normal” bubble. Nothing is normal! The cheese has already been moved. Energy is available if someone dares to channel it. That is not to say that change, like defining a set of API standards for a sprawling and increasingly problematic ecosystem, is easy. However, it does mean people are more likely to accept something new.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2022-03-29T00:00:00-05:00'>29 Mar 2022</time><a class='article__image' href='/2022/03/29/JustTellMeWhatToDo'> <img src='/images/2022/whiteboard.png' alt='&quot;Just Tell Me What To Do&quot;'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2022/03/29/JustTellMeWhatToDo'>&quot;Just Tell Me What To Do&quot;</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Standards as Accelerant",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2021/11/22/StandardsAsAccelerant",
      "date"     : "Nov 22, 2021",
      "content"  : "When debating IT governance structures, people make lots of claims. One is that decentralized governance “maximizes” team freedom. Or, specifically:  “Increased standardization decreases the freedom for teams and people to innovate.”As I argue in my piece on the usefulness of polarity maps, we shouldn’t treat IT governance as a false dichotomy or “centralized versus decentralized”.  There is a spectrum of implementations that can blend positive aspects from both sides. Standards and guidelines tactics can help focus and direct work in productive directions when used correctly.Decision Fatigue Happens When Too Many Decisions Are Delegated To The Lowest LevelDecision paralysis is when an individual or group has difficulty taking action because the solution space is too large (also called “analysis paralysis”). Decision fatigue, or when the mind becomes exhausted after a sustained period of decision making, often follows.Many became acutely aware of decision fatigue during the Covid-19 pandemic. Suddenly, even trivial activities like opening doors and touching elevator buttons were a puzzle. Not only had the number of decisions skyrocketed, but the heavier impact that those decisions carried (the possibility of illness or death) created outsized effects: stress, loss of energy, and lowered mental capacity.Worse, attempting to make decisions on rapidly shifting data impedes speed and confidence. It is reasonable that pandemic guidelines would change to reflect new information. However, the early lack of a single, centralized message and delegation to local authorities (many of whom were ill-equipped to be making epidemiolocal judgments) created a cacophony of competing, sometimes contradictory, guidance.Similar conditions exist in IT environments where all decision-making authority has been deferred to individuals or small teams. It is challenging to “be innovative” under such circumstances. Encouraging folks to “just make better decisions” will not create the desired outcomes.Standards Free Focus For What MattersClear, concise standards serve as guide rails that steer limited bandwidth toward productive activity. Rather than debating how to express pagination for the thousandth time, teams can adopt a pre-existing company style, thus diverting their energy toward creating unique business value. Instead of wrestling with the decisions involved in understanding and coding around another bespoke datetime format, internal API producers could accelerate delivery by uniformly adopting a widely known standard, like ISO 8601.Like all implements in the governance toolkit, standards, guidelines, and rules can be misused. However, when applied appropriately, clear policy and regulation can reduce decision fatigue and free teams’ time and energy for more meaningful work.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-11-22T00:00:00-06:00'>22 Nov 2021</time><a class='article__image' href='/2021/11/22/StandardsAsAccelerant'> <img src='/images/2022/ataforkintheroad.jpg' alt='Standards as Accelerant'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/11/22/StandardsAsAccelerant'>Standards as Accelerant</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Pandemic-Led Digital Transformation; You&#39;re Doing it Wrong",
      "category" : "",
      "tags"     : "Software Change and management",
      "url"      : "/2021/11/09/DigitalTransformation-YoureDoingItWrong",
      "date"     : "Nov 9, 2021",
      "content"  : "The pandemic impacted businesses in many ways, some obvious (hello, work-from-home) and some so subtle that they may not even be apparent for several more years. One aspect pointed to in business and technology press is how the pandemic “sped up” digital transformation.How true that statement is depends to large degree with how you define digital transformation. I was recently asked for my thoughts on the matter and I thought I’d also share them here.Was the pandemic a catalyst for digital transformation? Or do you think most companies missed the chance to drive their digital transformation initiatives forward?Change is hard, even under the best of conditions. We often see a change in moments of crisis (takeovers, bankruptcy, or public scandal) when the call-to-action is finally loud enough to overcome people’s comfort with the status quo.The pandemic (and ensuing intertwined crises including supply chain disruption, political upheaval, and social unrest) provided plenty of impetus to change. However, companies need to assess whether what changed is simply doing the same thing as before, but over video and instant messaging? Or did they embrace the situation to introduce new norms, processes, and products to their business?Doing the same thing as before, but more efficiently, is called digitization. It was not a digital transformation. At the beginning of the pandemic, I can’t fault leaders for this response; they did the best they could to maintain any semblance of “normal” even in the most adverse conditions--even if that meant attempting rituals that were a poor fit for this new reality. A cringe-worthy example was the rash of post-pandemic “virtual happy hours”. The attempts to connect came from a place of good-intentions: replicate the after-hours get together to foster a sense of team. People assumed they’d do the same thing as before but BYOB over Zoom with everyone working from home.However, rather than being something to look forward to, these become loathsome, dreary affairs that only reminded people of how weird and isolated the pandemic made all of us. After a day filled with imperfect video meetings, the last thing most people wish for is more time at their makeshift desk, glued to the computer.Digital transformation requires examining these things that used to work, identifying what was valuable, and imbuing those properties in forms better adapted for change.How would you advise companies to take on digital transformation in 2022?Going into 2022, we have a better sense that there will not be an exact return to pre-pandemic “business-as-usual”. Leaders need to stop thinking about Band-Aids and temporary fixes while waiting to return to the way things were before. Instead, leaders need to take a hard look at which parts of their business fared better than others. Which areas were ill-suited to the rapid, consistent change? And how vital is fixing those areas before the next shock?Digital business design is the holistic organizational configuration of people (roles, accountabilities, structures, and skills), processes (workflows, routines, procedures), and then technology (infrastructure and applications). Someone somewhere is experimenting with providing employees with meaning, connection, and advancement in these necessary new ways. That person can either be at your company or employed by a disruptive rival.Where are your experiments? How do you measure whether the new ways, made possible by digital technology, are better than the old ways? How are you discovering new, uninterruptible ways of delivering business value? If companies haven’t thought about or answered these questions, now is the time to start.Update, 2021-11-12While wargaming likely 2022 API scenerios, I came across this 2022 set of predictions from Forrester (emphasis mine):  “Business leaders are grappling with big employee-related questions right now. When (or if) to return to the office environment and how? We predict that only 10% of firms will shift to a fully remote model, and 30% will go back to a fully in-office model. The remaining 60% of firms will shift to a hybrid model, and one-third of those firms will fail in their first attempt at anywhere work. Why? Because shifting to a hybrid model while still designing meetings, job roles, and promotion opportunities around face-to-face experiences will send productivity plummeting and lead execs to question the model instead of the processes they cling to.”We have not only the opportunity, but the imagination to create new forms. A return to “business-as-normal” is a strategic mirage.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-11-09T00:00:00-06:00'>09 Nov 2021</time><a class='article__image' href='/2021/11/09/DigitalTransformation-YoureDoingItWrong'> <img src='/images/2021/11/digital-transformation.png' alt='Pandemic-Led Digital Transformation; You&#39;re Doing it Wrong'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/11/09/DigitalTransformation-YoureDoingItWrong'>Pandemic-Led Digital Transformation; You&#39;re Doing it Wrong</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Why is there no &#39;Correct&#39; API Lifecycle?",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2021/11/02/WhatIsTheAPILifecycle",
      "date"     : "Nov 2, 2021",
      "content"  : "Recently, my colleagues in the Postman Open Technologies Program and I were discussing API lifecycles. It quickly became apparent that we each had our own mental models for what was (and *most certainly was not *) worthy of inclusion.A quick survey of search results hints that the industry has as many opinions about what constitutes an API lifecycle as we had:  TechTarget has a five-step lifecycle: plan, dev, test, deploy, retire  Apigee promotes an 8-step version: design, develop, secure, publish, scale, monitor, analyze, monetize  Axway lists three steps (with many, many substeps): creation, control, consumption  SmartBear mentions 5, but a different five than TechTarget: planning and designing, developing, testing, deploying, retiring  Mulesoft mentions 4: design, implementation, security, management  Redhat features a confusing conjoined set of circles, and 13(!) kitchen-sink steps: strategy, design, mock, test, implement, deploy, secure, manage, discover, develop, consume, monitor, monetizeThe process that evolved during my time as Capital One’s Center of Excellence Director skewed heavily to the needs of a large, mature, and internal system. As a result, our API lifecycle:  Made no mention of monetization  Emphasized discrete team ownership and end-of-life elements  Hand-waved past development requires as code creation had its process, controls, and oversite groupThe process that resonated for us, eventually, was:  Discover: Has someone already solved this problem?  Define: Who will own the work at a team and LOB level, what access models will be in place, what SLAs need to be met, etc.  Design: Engage with stakeholders, make an OpenAPI representation, get feedback, iterate  Develop: Code the thing (subject to many, many other criteria outside the API group)  Deploy  Deprecate: Plan for ending or superseding with a subsequent version; includes communication plan, timeline expectations, etc.  Delete Define what info sticks around for historical purposes while ensuring any executables, access tokens, and gateway routing is removedSo why all the variation? Why isn’t there a “right” or “correct” API lifecycle?I think the variation is largely because lifecycles are created within companies to generate particular outcomes. Nobody installs a lifecycle for the sake of having more to train and enforce. If sloppy design leads to losses in a competitive marketplace, a company should have an explicit “design” step in its lifecycle to drive better outcomes. If security has been a mish-mash, a dedicated “security” step should be elevated as part of a lifecycle process to prompt more focus on correcting that behavior.A monitoring company is sure to list monitoring as part of its lifecycle. A company that sells documentation software will also elevate documentation to a high-level concern. It will depend on the vendor, but whatever their product excels at will probably be part of whatever lifecycle they promote.With companies looking at instituting a lifecycle, I’d first find the burning problem that would benefit from additional learning, creativity, and focus. That would be the first touchstone called out in the path between an idea’s inception and production runtime. I’d then continue to build up and out from there. Dropping an entire thirteen-step lifecycle where none previously existed isn’t just introducing a massive amount of disruption all at once - it also summons a proportional amount of resistance.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-11-02T00:00:00-05:00'>02 Nov 2021</time><a class='article__image' href='/2021/11/02/WhatIsTheAPILifecycle'> <img src='/images/2021/11/scales.jpg' alt='Why is there no &#39;Correct&#39; API Lifecycle?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/11/02/WhatIsTheAPILifecycle'>Why is there no &#39;Correct&#39; API Lifecycle?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Finding API Governance Balance With Polarity Mapping",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2021/11/01/PolarityMappingAndAPIGovernance",
      "date"     : "Nov 1, 2021",
      "content"  : "Some of my most rewarding conversations in my professional career are when I coach folks on their emerging API governance needs. A common myth is that companies must settle for one extreme decision-making structure or the other regarding governance. Either they grant API teams full autonomy and suffer from the fragmentation and associated overhead it brings. Or they gain alignment and consistency through centralized oversight and heavy bureaucratic processes while losing innovation opportunities.Unquestionably, anything done to an extreme can create negative consequences. However, in my experience, too many companies only see a total commitment to one position or another as their only option. What companies need, in reality, is a blending of the two approaches.How do we find the Goldilocks (the “just right”) amount of governance? With a polarity map.(Re)Introducing the Polarity MapFig 1: An Empty Polarity Map; I&#39;ve Made A Google Jamboard Template Available based on the example from UXMastery.Ruth Malan’s Organizational Design Masterclass introduced me to polarity mapping. A polarity map recognizes there are benefits and unintended consequences with each extreme. It encourages participants to describe these in detail. Once we’ve identified benefits, we then discuss activities to achieve these desirable traits in our system. After that, we can define a series of measurable indicators. The purpose of these metrics is to signal when we’ve overcorrected and risk unbalancing the system.We might use polarity maps for a variety of “versus” articles popular software architecture:  Build versus Buy  Microservice versus Monolithic Architectures  Synchronous versus Asynchronous  Batch versus Real-Time  Testing versus Debugging  API-Design First versus API-Code First  Tabs versus Spaces (joking, kinda)Polarity maps help explain a phenomenon I observed in previous roles: the “pendulum effect”. If we begin to fill in the map according to the “decentralized versus centralized” API governance, as I described in the beginning, the map looks something like this:Fig 2: A Beginning Polarity Map for Centralized Versus Decentralized GovernanceMost organizations start API governance in the upper left of the quadrant, “decentralized”: individual API teams have nearly total decision-making autonomy. While this is efficient initially, the problems with this model become more apparent as the size of the API ecosystem grows. The map represents this change with the downward arrow leading to the lower left quadrant.As the negatives accrue, support for the opposite pole, or “centralization”, grows. The organization seeks the benefits of the upper right quadrant. This change works, for a while, until the overcorrection creates its adverse effects. If we continue to follow the arrow’s path, we end up in the lower right area. When the downsides reach a critical mass, the organization moves back toward decentralized decision-making and repeats the process.By putting both extremes on a single plot, we can demonstrate benefits to both sides. Moreover, in establishing the oscillation between sides, we can make a case that adopting one or the other is not an argument to be won but a set of properties to balance.Getting Started With A Sample MapTo illustrate the process, let’s walk through an example polarity map that shows what many burgeoning API ecosystems struggle with: *do we promote centralized or decentralized API management?When doing a polarity map, it is essential to remember that each will be different; every company has unique needs, people, goals, and available resources that impact what is listed. YMMV.However, based on my own experience, a set of benefits and unintended consequences for both sides might look something like this:Fig 3: An API Governance Polarity Map With Example Benefits and Unintended ConsequencesDefining Action Steps and Early WarningsDefining benefits and unintended consequences is a significant first step. Talking through effects and their placement on the map is beneficial for building organizational or API leadership team alignment. Where things get truly useful is going to the next level and identifying action steps and early warnings.Fig 4: A Polarity Map with Action Steps and Early Warnings AddedAction Steps are how we will gain or maintain the positive results from focusing on a given pole.Early Warnings are quantifiable indicators to signal when a system is straying into the downside of a pole.Suppose we want to take actions to promote the positive aspects of centralization (the upper right: “visibility”, “predictability”, “consistency”, etc.). Action may include:  Documenting API standard operating procedures (including, but not limited to, style guides, production environment readiness requirements, architectural decision records for changes, etc.)  Creating compensation or recognition structures for teams demonstrating API excellence  Forging communication channels to both promote the best work as well as solicit feedback for further refinementEarly warnings for the centralized side of the map may be more challenging to define but not impossible. There could be a problem if there’s a growing clamor of teams waiting on the centralized group for a decision, or a noticeable uptick in meetings to reconcile a tricky edge case. Identify which areas are of most concern for your organization, identify how to quantify changes, and continue to iterate until you have something actionable.The left side is left as an exercise for the reader.ConclusionPolarities involve two equally valid and necessary points of view or truths. Despite how we usually think of them, polarities are interdependent pairs that need each other to maintain and gain performance.A polarity map is a tool that API leaders can use to  understand where they are in the system and accentuate positive aspects of both worlds. When it comes to API ecosystems, polarity maps suggest that centralized or decentralized decision-making is not final governance destinations but part of a whole to be managed.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-11-01T00:00:00-05:00'>01 Nov 2021</time><a class='article__image' href='/2021/11/01/PolarityMappingAndAPIGovernance'> <img src='/images/2021/11/tugofwar.jpg' alt='Finding API Governance Balance With Polarity Mapping'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/11/01/PolarityMappingAndAPIGovernance'>Finding API Governance Balance With Polarity Mapping</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "We Made an API Description, Now What?",
      "category" : "",
      "tags"     : "Presentations and Software Governance",
      "url"      : "/2021/10/01/WeMadeAnAPIDescription",
      "date"     : "Oct 1, 2021",
      "content"  : "First of all, thank you for being here. I hope you’re healthy and you’re safe, and those that you care about are secure as well. We’ll get through this. I’m sure of it, and someday we will see each other again in person. However, until then, thank goodness we have these kinds of arrangements to share and continue to learn from one another in some form.This presentation is entitled “We wrote an API description, now what?”In many organizations, OpenAPI has become the way to capture and share API intent and function. In API-Design-First shops, the creation of an OpenAPI description is required.But after you’ve created this machine-parsable description, what is next? How do you get the most significant amount of ROI for the time and energy you invested in it? How are others using their OpenAPI artifacts beyond just documentation? And how do you get started? I’ll answer those questions and more in this talk.My name is Matthew Reinbold, and I am Postman’s Director of API Ecosystems and Digital Transformation.At Postman, I’m a member of the Open Technologies Program. Our mission is to improve API practice, education, and research for companies of all shapes and sizes.In addition to that, I also write a weekly API email newsletter. The amount of API-related things published on the web can be overwhelming; Net API Notes started as my attempt to filter the signal from noise - it just turned out that the persistent act of sense-making was valuable to others as well. It also prepares me for conversations like the one we’ll have today.First, though, let’s establish a few things. I’m not going to cover the history of how OpenAPI and AsyncAPI became nearly the defacto API specifications. There are plenty of other talks covering that ground in greater detail - some at this very conference!However, I do want to clarify how I will use a couple phrases of throughout this presentation. If you use these words differently in your day-to-day work, that is completely fine. For this presentation, however, when I say API Specification, I refer to the specific documented, syntactical requirements an API designer writes to. Examples of API specifications include OpenAPI and AsyncAPI.When I talk about an API Definition, I refer to the JSON or YAML document that captures your unique API’s business intent, written to meet a specification requirement.Again, when I talk about an API specification, I talk about what a standards body writes. When I talk about an API definition, I am talking about what you write.Also - in this presentation, I will be sharing or referencing numerous links. If you are interested in those links and don’t want to wait until this presentation is published on my website, go over Twitter and look up the username libel_vox, shown in the footer. All the links are in a Tweet pinned to my profile.Let’s start by rewinding the clock.Guido of Arezzo (ur-EH-zoe) was a Benedictine monk living in Italy at the turn of the millennium before last, around 1000 AD. And Guido had a standardized notation problem.At the time, the pinnacle of popular music was liturgical chants. People went crazy for them. But as Guido visited churches, he noticed how much younger singers struggled to learn the songs.It was common to have parchments with the words and some occasional squiggles that suggested the performer move their voice higher or lower. However, there was no representation of pitch.Image source: original uploader was Robbot at Dutch Wikipedia. - Transferred from nl.wikipedia to Commons., Public DomainThe solution, Guido reasoned, was to invent a means that would allow someone to sing along even if they had never heard the music before.So Guido invented the staff. With fixed notes and a specification for conveying them, young students could “better detect the level of pitch”, as Guido wrote.People new to APIs also have trouble getting started. And API documentation is usually the first thing people think of when they think of what to do with an API description. Unfortunately, that’s often where it ends, too.The image on the slide is a grossly simplified development process, but one that is all too common. In it, a bunch of work is done to create a thing and, when it is ready to “go live”, some documentation is made for “the customer”.Don’t get me wrong - documentation made this way is better than a random PDF or CMS entry - both of those are akin to non-uniform random squiggles Guido’s students previously had. There are many places where you can insert an OpenAPI description and get out some beautifully rendered documentation, either for your dev portal or for sharing with a customer.However, documenting at the end means that the context and nuance of why something is the way it is has to be recreated and reassembled. Because of this, things get left out. The API description, when treated this way, becomes lipstick on a pig.If you’re composing music, one doesn’t wait until the entire song is done before writing something down. In the same way, we need to think about API descriptions as not something that comes at the end but a means at the center of creating a better result in multiple ways.A standardized representation of intent, or an API description, can be used for more than documentation.If we start treating our API description as our central source of truth about the API, rather than an afterthought or “nice-to-have” documentation, a whole host of options open up.For the rest of this presentation, I am going to detail four areas:  Code Generation  Testing  Monitoring  GovernanceAfter that, I’m going to extrapolate a bit.First, let’s talk about code generation. If you have an API description, whether yours or an API you wish to consume, you are well on your way to having code generated for you.There is no shortage of client code generators available. The Open-API generator supports an incredible number of programming languages. I had to make the type super, super tiny on this slide to fit them all in.I’ll admit that generators won’t write everything. However, getting the tedious, non-differentiated boilerplate out of the way through generation is a huge time saver.And it isn’t just client code! You can also stub out a server implementation if you have an OpenAPI description of how an API works.In the slide, I have a picture of Postman’s interface. I’ve loaded an OpenAPI 3.0 description. Next to the YAML syntax, I have a button that allows me to create the beginnings of my server code with just a couple of clicks.Servers include Go (Chi), NodeJS (Express), Java (JAX-RS), and Python (Flask). That is a compelling way to kickstart new development and the next logical step with what we can do with these API descriptions.It is also possible to generate SDKs from OpenAPI descriptions.One of the problems with SDKs is finding the team bandwidth to keep feature parity across multiple languages, especially during rapid change. Plaid has a fantastic case study detailing how they automatically keep a broad suite of beneficial SDKs in sync and up to date from their OpenAPI sources of truth.But it’s not just code that we can generate. Let’s take it to the next level and talk about generating code to test code!Testing an API is one of the most important things to do. However, not all testing is created equal.At the bottom of this pyramid of testing needs, we need to make sure our response payload is as expected; making sure that when we make a request we get the response we intended in the shape expected.Next up, we have chaining HTTP calls. Once we know that one request works the way we assume, we start using it in conjunction with other calls as part of more advanced workflows.Moving upwards, we have data-driven requests. This level is where we take our static requests and begin to change the data provided. In doing so, we being discovering the rough edges and uncovering assumptions about ongoing usage.Nearing the top are negative tests and error flows. In other words, at this level we’re purposely stepping off the “happy path” and evaluating how gracefully the API fails.Finally, at the top of the pyramid, we have contract testing. Testing at this level is no longer about the API we’re creating but verifying the consistent behavior of other APIs we might be dependent on.Like many pyramids, every level is sized in approximate proportion to how much effort should be expended. So, for example, companies should spend a large amount of effort verifying that the response payloads are structured correctly or at the bottommost level before moving upwards.However, where people should put the bulk of their effort also happens to be some of the most tedious work. Therefore, it is a no-brainer that we leverage an API description to provide the necessary coverage.This version of the API testing pyramid inspired by the test pyramid featured in Net API Notes Issue 170.A valid OpenAPI document inside Postman can be used to create test cases to be run across multiple endpoints. Or you can customize on a per-endpoint basis. Like code generation, generating tests free brain cycles on solving higher-level, more challenging problems.That generation is possible because we have a standardized notation that conveys our intent even if we haven’t seen the API before.Things get really interesting when we take that code and tests that we previously created and connect it to automation. We are now able to aggregate and monitor a complex system. We can “see” not just individual APIs for the trees they are. Instead, monitoring whole collections of APIs gives us a sense of the larger forest.Recently, Postman’s founder, Abhinav, shared a vision of the API platform landscape. And there are many companies in that view that perform what we call API monitoring: using a remote computer to send requests to an API on a scheduled basis.But ensuring that an API is running or not is the same thing we were doing a decade ago. It is important, but it also scratches the surface of the complex automation possible with API descriptions and some simple bridge code.Many are familiar with the website, If-This-Then-That (IFTTT). With API descriptions, creating workflows via the Postman monitor is nearly as easy.As I mentioned, the purpose of the Postman Open Technology Program is to elevate API practice across all industries. As you might imagine, that entails a lot of writing. Rather than just using a monitor to tell me whether services I care about are up or down, I created a workflow to prompt me to complete my writing.I used an OpenAPI description to create a call to my cloud-hosted markdown editor. That gets me the words I’ve written so far daily. I put together some logic to not worry about weekends because the worst thing is stress-inducing notifications during recovery time. Finally, I merged that with the results from another OpenAPI description that gets and parses US holidays - again, alarms aren’t going off when I am recuperating.It does require a bit more work than dragging lines between colorful chicklets (Rest In Peace, Yahoo! Pipes!). However, if you have standardized service representation, exciting workflow automation is at your fingertips. We’ve gone beyond just testing APIs to creating low-code solutions.That’s empowering for the people in your organizations who may not be full-blown developers but still want to take advantage of information and services already available.That brings us to governance.An API journey doesn’t start with a cast of thousands. For most companies, their first API began as a targeted means to a specific business end. Scaling architectures, processes, training, and tooling was far from the minds of all involved at the onset, as it should be - a town doesn’t build its public works department when there are only a few homesteads.However, with more people creating APIs more experiences, architectural styles, and bespoke infrastructure are introduced into the growing API ecosystem. In the absence of repeatable processes, preferred techniques, or uniform tooling, the results from API production will become unpredictable - coordination costs across unaligned pockets of practice increase along with inefficiency. Higher-order alignment suffers. As described in the book Accelerate, “teams become adrift, concentrated on micro-optimizations disconnected from aligned business delivery”.Somebody needs to be concerned with those higher-order concerns and the health of the ecosystem. Many might assume that necessitates a cumbersome, gatekeeping API review. However, with API descriptions, there are several lightweight, helpful things we can do to encourage alignment while maintaining team autonomy.To create consistency in approaches, many companies create API style guides. But just having a proposal of what people should do is not enough. Just because something is written down does not mean it will be interpreted and presented in an API description the same way.In the slide, in gray, I have an example suggestion for pagination that you might find in a style guide. It encourages the developer to use the words “limit” and “offset” when giving callers the ability to page through a collection of items.That may seem straightforward. However, what happens in practice is something akin to what appears on the left side of the slide, in purple. Yes, the author included the words “limit” and “offset”. But the articulation of how these two keywords are used is still vague. As a caller of this API, we may assume that both are numeric values with some certainty. However, several questions remain. Is there a maximum value for “limit”? Is offset 0-indexed? What is the default page size?  Are these values to be passed only as query params, or do they also work as header values?The API description on the left meets the letter of the law, but not the spirit; this API’s user has to spend additional time and energy to figure out how it works.So should we berate an API designer, especially one new to the company, for not magically including all the additional verbiage of the right-hand example? OF COURSE NOT!  “Just knowing” is hard. The style guide should make doing the right thing easy! Rather than leaving the right thing up to interpretation, the style guide should provide the desired YAML or JSON representations for anyone to copy and paste into their designs.It sounds straightforward because it is! Creating meaningful templates and snippets that solve everyday problems creates alignment because you’ve made doing the right thing easy.I’m written more about these approaches on my website.Similarly, several tools can parse an API description and nudge practice to a healthier place. Using tools in this way is a much healthier practice than manual reviews, where suddenly it is a contest of will over who is right.There are a ton of API validators. OpenAPI.tools, the picture on the left, does a fantastic job of categorizing many of them.Likewise, the OpenAPI Converter can also take an API description in a variety of formats. Both can be used to ensure an API description adherence to expectations, thus avoiding fragmentation.Security is a pressing issue at the moment. As I’m showing here in the slide, the tool is warning the API author that not only are they not providing any authorization for these endpoints, but the entirety of communication is happening over unsecured HTTP.We’ll continue to see tooling get more opinionated. Thus better supporting API designers with insights when it is most beneficial - while they are designing.That was a quick run through four areas - code gen, testing, monitoring, and governance that can benefit today from a description-centric approach. But let’s go even further. What happens when entire industries can sing from the same songbook?I love this story that Jean Yang, founder and CEO of Akita software, shared recently.The goal of Akita software was to help developers make sense of their complex distributed systems. They began to approach the problem in a systems way and briefly considered integration with open telemetry or maybe integrate with a service mesh like Envoy. The problem was that there had been no standardization; not everybody uses a service mesh, and when they do, it isn’t always Envoy!Akita realized that APIs provided a standardized point that was uniformly consistent across all providers, architectures, and languages. Because services had adopted this common lingua franca, they were able to build a new set of observations and insights.Likewise, a company called Stedi is doing some fantastic things.EDI, or Electronic Data Interchange, has been around since the 1970s. It attempts to standardize the exchange of business information, like purchase orders and invoices.Stedi applies modern approaches to schema validation, like JSON schema, to EDI. In the process, a whole suite of modern tooling can be leveraged for working with legacy formats; unlocking new value and opportunities in the process.In conclusion, back to this guy - back to Guido.In the centuries since Guido invented standardized musical notation, there were many additions. First there was duration. Then barlines, stylized clefs, dynamic markings, ties, and slurs were added. These changes supported a growing number of instruments and vocal styles.Music grew beyond liturgical chants. The Renaissance era, where music tended to remain on a single tempo for the duration of the piece, gave way to the Baroque period, one marked by increased composition creativity. Baroque also established the opera, concerto, and sonata as musical genres.This expansion didn’t happen in isolation. It is no coincidence that this creativity occurred when people had a greater ability to capture and share their intent. The development of a standardized notation, a specification, allowed composers to cross-pollinate, enrich, and evolve each others’ work.But unless you’re a music nerd, that may be trivia. Let’s make this less abstract.To help students remember his new standard, Guido also invented something else you might be familiar with; a mnemonic that helps people remember the steps between tones on his staff. You probably know it: do-re-mi.That mnemonic is featured prominently in the 1965 film Sound of Music. That film, and the von Trapp children within, was seen by millions - including my wife and me.I don’t have a Gretl, but I have a Greta. I also have a Liesel. Guido, in 1000 AD, wouldn’t know what a movie was, let alone comprehend his influence on it. Furthermore, he couldn’t conceive how a standard representation would ultimately influence my daughters’ names. But it did.Swagger, the predecessor of the OpenAPI specification, came out in 2010, a little more than a decade ago! It’s not even a teenager yet!Emergence from complex systems is an unpredictable thing. Our APIs ecosystems are complex systems. Who knows what future will emerge from the API descriptions that we create and share today? Whatever it is, I can’t wait to see what’s next.Thank you so much for your time. If you want to get ahold of me, you can go to my website. You can also check out my email newsletter, and I’m pretty responsive on Twitter.Thanks again!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-10-01T00:00:00-05:00'>01 Oct 2021</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2021/10/01/WeMadeAnAPIDescription'> <img src='/images/2021/10/ASC 2021 - Wrote an API Description, Now What_01.png' alt='We Made an API Description, Now What?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/10/01/WeMadeAnAPIDescription'>We Made an API Description, Now What?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Overcoming Change Resistance",
      "category" : "",
      "tags"     : "Software Governance and Software Change",
      "url"      : "/2021/09/22/OvercomingChangeResistance",
      "date"     : "Sep 22, 2021",
      "content"  : "Photo by Brad Starkey on Unsplash  You’ve got an excellent idea for your organization. You’ve spent time carefully crafting your story and begin to share it. Then something begins to happen; perhaps there isn’t anything as dramatic as a slammed door or “NO” screamed in all caps. But there’s a hesitation, an avoidance, or an ongoing series of “whataboutism” that increasingly frustrates and drains energy. Congratulations, change agent! You’ve met resistance.Workplace changes are sociotechnical, or having both a technical and a social aspect. The technical change part is the mechanics of how a task is performed. There might be technical detail and nuance to be debated. However, what is a far more significant source of resistance is the social aspect of the change. Social refers to how those affected by the change believe it will alter their organizational relationships.Change, even wholesome, necessary, and positive, can provoke a sense of loss in individuals. Sometimes this sense of loss is legitimate, like when a company closes down its “innovation hub” or no longer recognizes “Quality Assurance (QA)” as distinct from the engineering job family. In other situations, the change is perceived as a loss of dominance, control, power, and/or a sense of familiarity.People react to loss in different ways.Resisting ChangeIn one case, they dig in and close down. Those resisting demand what is lost be returned. Without a recognized, new identity for the participants, our change narrative induces a counter-narrative: an energetic incitement to return to the way things were.As this classic 1969 Harvard Business Review article by American sociologist Paul R. Lawrence states, resistance manifests as:  “persistent reduction in output, an increase in the number of “quits” and requests for transfer, chronic quarrels, sullen hostility, wildcat or slowdown strikes, and, of course, the expression of a lot of pseudological reasons why the change will not work. Even the more petty forms of this resistance can be troublesome.”This response is so typical that many executives assume resistance to anything is inevitable. Yet, changes must occur for businesses to thrive. This doubly for the all-important “little” changes that constantly take place: changes in work methods, in routine office procedures, in the location of a machine or a desk, in personnel assignments and job titles.  “You never want a perfectly fit, coherent, and therefore stable system (therein lies stasis and death)… for a system to evolve and thereby persist over time requires a certain (unspecified!) resilience more so than stability.” – Alicia JuarreroOpening Oneself (And Others) To ChangeThe other way people might respond is to open up. This opening requires a shared assumption that there is something new here and that we will find our way into that newness together. What does that mean, practically?The easiest way to getting buy-in to a change is when those affected by it are co-creators. While this participation may sound simple in theory, in practice, it does entail careful handling. Participation is a feeling on the part of people, a belief that their needs are being heard and concerns addressed. Participation is not inviting people to comment or attend a meeting and checking the box ‘done’. Employees must be treated as having treasured insight and opinions rather than a target to be pumped for carefully calculated questions.That is why the identity piece of our storytelling is so critical. A future vision they can relate to, and the relationships it entails, will mitigate the sense of social loss.An API Governance ExampleAs companies grow, the complexity introduced due to fragmented API design approaches and ad-hoc, laissez-faire governance drowns any benefit the API ecosystem had while new. In this state, integrations take longer, meetings go up, and estimates get more untrustworthy.As a result, leadership may move to establish one of any number of groups: Centers of Excellence, Design Guilds, Architectural Review Board, or API Champions. The expectation is that these specialists are inserted between the “doers” and the production environment. Their job is to ensure that designs are “done right”, mitigating the mishmash (and related overhead) that the organization increasingly toils under.The problem with this approach, if done unilaterally, is that leadership has introduced not only a technical change - the specific THOU SHALL and THOU SHALL NOT that moves an architectural style from descriptive to prescriptive. They have also changed an API developer’s relationship with the organization by inserting an oversite group in the pipeline. The usual work relationships, not just between developers and their peers, but developers and their environments, were changed.As I discussed above, changing the social relationships nets more than just “who moved my cheese” or “why wasn’t I consulted” whinging. The sense of loss breeds resentment, resentment creates low morale, and the quality and alignment initiative meets resistance.That doesn’t mean the idea to decrease fragmentation and improve design cohesion was a bad one! What it means, instead, is that a different approach is needed. Rather than a top-down directive that changes the entire organization’s working relationships, the affected parts of the organization should be invited to co-create the change.That includes listening first, talking second. It could be that not everyone agrees on what the problem is. If people are given a chance to come up with ideas, discuss the ideas of others, or otherwise be involved in the process, they’ll become invested in the change and understand it better. It is also easier to build a future inclusive identity in your narrative if those people were involved in defining that identity.In ConclusionChange has both a technical and a social aspect. The technical aspect of change is about making a measurable modification in the job’s routines or practices. Change’s social aspect refers to the way those affected by change think it will alter relationships.If we can get better about addressing the social needs of people during change, we will better positioned for long term success. Again, from the 1969 article:  The significance of these research findings, from management’s point of view, is that executives and staff experts need not expertness in using the devices of participation but a real understanding, in depth and detail, of the specific social arrangements that will be sustained or threatened by the change or by the way in which it is introduced.Technologies come and go. But people remain the same.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-09-22T00:00:00-05:00'>22 Sep 2021</time><a class='article__image' href='/2021/09/22/OvercomingChangeResistance'> <img src='/images/2021/09/barrier.png' alt='Overcoming Change Resistance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/09/22/OvercomingChangeResistance'>Overcoming Change Resistance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Creating Compelling Stories",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2021/09/10/CreatingCompellingStories",
      "date"     : "Sep 10, 2021",
      "content"  : "In my last post, I talked about the importance of creating a plausible promise for system change. To briefly recap, a plausible promise must be (1) inspiring enough to attract others to participate and (2) stand a believable shot of happening given all other constraints.But what happens when a change agent needs more than the elevator pitch? How does one move from a plausible promise to a compelling change narrative? The answer is crafting a compelling story for systems change.Why Stories?Storytelling is for more than just screenwriters and teenagers past curfew. Stories are how we articulate the world, our place in it, and the ability to change. “We’re all-in on the cloud” and “We’re an agile shop” are both story excerpts companies retell to shorthand how their technical work should be done.Stories, particularly those repeated within organizations:  Appeal to our emotions, moving us to act in a way that dry, dispassionate analysis fails to (“I empathize with your pain.”)  Simplify the complexity of the unknown unknows into a logical, repeatable set of causal relationships (“I now have words for what was just a gut feeling.”)  Make abstract phenomenon tangible and thus changeable (“I can get my arms around it.”)Change begins when one of the existing stories begins to fail. This faltering could be due to scaling challenges, a strategic pivot, or marketplace disruption. Whatever the reason, the old narratives no longer work or seem incomplete given increased business complexity. When this happens, it is time to tell new stories.Parts of a Motivating StoryAsk five aspiring authors what makes a good story, and you’ll get six answers, two podcast recommendations, and the odd existential crisis. When it comes to systems change, however, the components are well known. To inspire change, a story must have the following elements:  A Clear Articulation of the Current State  An Attractive Future  A New Identity For Participants  A Path Connecting It All TogetherA Clear Articulation of the Current StateContext frames and gives meaning to the change that must take place.A story of transition will highlight how the past way of doing things is unsustainable, how it has lead to the current crisis, which requires new ideas (your ideas!) to overcome. It is important that that articulation explains why the change should happen now.An Attractive Future  “When people are holding on tightly to the past, it’s because there is something they value and they have no idea of what might be valuable in the future.” - Esther DerbyDuring disruption, past data is a poor predictor of a future state. Faced with uncertainty, people often take what they know about the past, combine it with their assumptions and emotional state, and project it on to the future, largely unconsciously. Deconstructing a group’s assumptions and projections about the future requires careful analysis. If we can identify which beliefs are steadfast and which are loosely held, we can navigate this potential minefield.A story must emphasize that the future is not a fixed, predetermined point but something that can be changed. We can’t predict the future, but we can try to invent one with more desirable outcomes. If instituting a change is worth doing, we have to have a coherent story about the new possibilities.A New Identity For ParticipantsSystem change requires working in new configurations, often with new (to you) people. Stepping beyond the comfort zone of our friends and colleagues means engaging with strangers and opponents who may not have a shared understanding. A story should enable people to recognize their shared interdependence in the system, thus creating a shared identity. It must show how the sub-optimal future cannot be solved by individual stakeholders alone and how a new network with new relationships can.Keep in mind, creating change may not require everyone. It does, however, need to connect the people that need connecting.A Path Connecting It TogetherAbove all, a story must point people in the direction of needed change. Part of this includes articulation of what progress along the path looks and feels like.A vital aspect of a story is how it links current actions to the desired future destination. Connecting these things increases the understanding of our responsibility and agency within a system.The path storytelling should emphasize more positive than negative. Change spurred by intrinsic motivation is more sustainable, or those internalized stories rooted in people’s strengths, aspirations, and ability to overcome.A Remote Work ExampleLet’s take what we’ve learned above and apply it to an area many businesses are currently wrestling with: remote work. Let’s assume that you’ve stumbled through the past eighteen months, but you’re looking for more.Articulate the current state:  Remote work has been around for some time. However, during the Covid-19 pandemic, millions of individuals were thrust into remote work situations not by choice but by necessity. Some companies were able to cope better than others. More than a year and with multiple variants continuing to spread, leaders are challenged to go from merely surviving to thriving. Talented individuals have come to expect remote options. Companies that insist on co-location at some unknown point in the future limit themselves to whatever expertise happens to be within a geographical area.Craft the attractive future:  We need to move beyond thinking about remote work as a temporary band-aid. Moving office ritual and routine to a Zoom meeting is not enough (“virtual happy hours”, for example). Instead, we need to truly digitize the work, not just work digitally. Learning to do this effectively taps our organization into the best, brightest, and most diverse talent wherever they are in the world. It also positions our org for a future where adaptation and iteration will be the norm.Define a new identity:  Getting there will require new management techniques. Communication is always a vital skill. But we must learn how to go beyond lowest-common denominator transactional interactions encouraged by digital tools to relational ones. Our managers and leaders need to be able to check-in with our employees, building trust and psychological safety, not just checking-up on WIP. If our managers can demonstrate the more significant empathic requirements of remote management, our people will deliver greater value while enjoying increased flexibility.A Path To Connect It All Together  We need to revise our operating procedures, training focus, and performance review characteristics to get to that future. There is precedent: Gitlab, a company with a $6 billion valuation, has no physical headquarters and employees in nearly 70 countries. Automattic, makers of WordPress and operators of Tumblr, employs almost 1700 remote employees. By learning from their examples to prioritize the appropriate digital investments, we will embrace the sort of change that is more perpetual, pervasive, and exponential.That’s just a generic example. If you were to do this for your organization, this remote story would need to be customized to speak to the unique needs, incentives, and fears that exist. Begin sharing a version of your account with those you trust to give you constructive criticism. Then iterate.Conclusion  “A plausible narrative has immense power. Much more than mere evidence or data.” - Bob MarshallStories are critical for creating systems change and can be told by anyone. If we better understand the elements that go into a story, our messages will find more traction faster. Moving beyond a plausible promise to a full-blown change narrative takes work. However, if your idea is a good one, the results are worth it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-09-10T00:00:00-05:00'>10 Sep 2021</time><a class='article__image' href='/2021/09/10/CreatingCompellingStories'> <img src='/images/2021/09/campfire.jpg' alt='Creating Compelling Stories'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/09/10/CreatingCompellingStories'>Creating Compelling Stories</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Changing Organizations With Plausible Promises",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2021/09/03/PlausiblePromises",
      "date"     : "Sep 3, 2021",
      "content"  : "It is inevitable that, at some point, a passionate practitioner  wants things to be better. Whether that is improved API design quality, greater developer autonomy, or increased product focus, these change agents want to nudge their organizations in new directions.Knowing where to start, however, can be overwhelming. Feeling, on a deep, fundamental level, that a course of action is right can seem insignificant compared to the size and entrenchment of a complex system.Clay Shirky wrote about the term plausible promise in his book, Here Comes Everybody. He defined it as “a message framed in big enough terms to inspire interest, yet achievable enough to inspire confidence.”That sounds straightforward on the surface:  Aim too high, and people will dismiss you as a liar, hopelessly naïve, or someone looking to sell something. Examples include “End World Hunger Tomorrow!”, “6-Pack Abs In 6 Days”, or “Generate Beloved APIs From Your Database Schema”. It is hard to rally people to your cause if it seems unobtainable.  Aim too low, and nobody will be inspired to take up the cause. There’s either too much specific detail or too little perceived reward to make it attractive. Urging that “Every field name must be written as kabab-case” is not the bold rallying cry you might think it is.The challenge is to find the Goldilocks middle message: not too pie in the sky, not too in the weeds, but just right.John Cutler is a product evangelist and coach. In his guide on sustainable change agency, he defines several ways you’ll know when your plausible promise is working:  People begin to invite you to meetings to learn more about it  Other parts of the organization begin to adopt it  You’ll have volunteers helping to grow the idea in new ways  Someone will try to take credit for it (a good sign!)  People will reach out to thank youA picture of a linear lifecycle process accomodating many changes.You want change. Identify what about that change will achieve broad acceptance. Articulate how the process for change is not only possible but probable in the current organization. Gaining critical mass is still challenging. If you start with a plausible promise, however, you’ll have taken an essential first step.  “Never believe that a few caring people can’t change the world. For, indeed, that’s all who ever have.” - Margaret Mead",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-09-03T00:00:00-05:00'>03 Sep 2021</time><a class='article__image' href='/2021/09/03/PlausiblePromises'> <img src='/images/2021/09/dandelion2.png' alt='Changing Organizations With Plausible Promises'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/09/03/PlausiblePromises'>Changing Organizations With Plausible Promises</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "&#39;Power-Over&#39; Strategies And How Reporting Can Backfire",
      "category" : "",
      "tags"     : "Software Governance and Software Change",
      "url"      : "/2021/08/27/PowerOverStrategiesAndHowReportingCanBackfire",
      "date"     : "Aug 27, 2021",
      "content"  : "A problematic aspect of being a change agent is the lack of proven, frequently discussed techniques for making change happen. For example, in the API space there’s no end to people putting forth “best practices”. But getting teams to agree which practices are best, let alone adopt them? That advice is much harder to come by.Several years ago, I briefly touched on some approaches I was trying as head of an API Center of Excellence. In that role, one of my responsibilities was to improve API quality and practice throughout the organization. However, like so many change agents, I didn’t have formal authority over the people who needed to change their practices. With hindsight, I want to share my experience with one influence approach, intriguingly called Kingpins and the Fishbowl.I read about kingpins and fishbowls in the book Blue Ocean Strategy. The book is mostly about finding new markets (the “blue ocean”) for product dominance. However, the latter third included practical advice for getting people engaged in something new; something that any change maker deals with.The first part of the strategy is to identify the key individuals, or “kingpins”. These people are not just impacted by the change you’re proposing but have the authority to act on it. In a D1 organization, these could be, but are not limited to, executives with hierarchal power. The high-flyer with the ear of leader (but without formal authority) is also a candidate.With the kingpins identified, the next step is creating the fishbowl. The fishbowl is a means by which the kingpins’ performance (or those they are responsible for) is easily compared and contrasted. This review may manifest as an internal dashboard or regular report to executives. Colloquially, people might also know this approach as “naming and shaming”. APIMetrics does this publicly. A lot.The kingpins and fishbowls technique sounds plausible: identify those that have authority to make the designed change, put them in a dashboard showing how deficient they are compared to their peers, watch those trend lines change for the positive! As I said in my introduction of the topic:  “In my experience, executives didn’t get to where they are without being a tad competitive. Publishing results and easing comparative analysis creates a natural driver for action; each of the leaders want to be number one among their peers.”The approach is not without merit. I did see some success in limited areas. However, looking back, any success was vastly dwarfed by the antagonistic relationships caused by such reporting. To understand why it is crucial to discuss Mary Parker Follet’s concepts of power-over and power-with.Mary Parker Follet was a contemporary of Frederick Taylor, the “father” of management theory. But while Taylor believed “the boss knows best”,  Mary’s ideas on power and authority were very different. She defined power-over as a situation where one person has power overanother person. This manifests as dominance and coercion. One side vies for power over another, at best trying to influence the other to concede itsposition.A kingpin may not oppose the idea of API design improvement. However, design may differ in their priority compared to someone, like the Center of Excellence head, whose sole job is design improvement. Kingpins have no shortage of things vying for their time and energy. Those people create systems for triaging what is worth entertaining and what threatens those limited resources to remain successful.A metric originating from outside their preview, attempting to coerce their priorities list and consume oxygen will not be enthusiastically embraced. While they may not frame it in terms of a “power-over” play, they will resent the attempt all the same and treat the effort with suspicion, if not as a threat. Having sat in those conversations, I can confirm that there are better ways of spending one’s time.Put in a similar position today, I would instead attempt what Follet referred to as power-with. Power-with is collaborative, establishing common ground from which both sides identify and discuss important desires. She called these discussions integration:From the power of collective wisdom website discussing Follet:  “She [Follet] understood that true leaders do not command obedience through force or manipulation but rather by giving expression to external realities and the interior aspirations of others.”I talked about the priority mismatch. What I should have done is better understood the constraints and challenges these leaders faced. Rather than assuming that design quality improvement is job #1, I should learn their actual stack ranking and then integrate how better design could deliver on that. I should have had regular, ongoing conversations, independent of whatever reporting cadence existed, to co-evolve the agendas and make us partners in each others’ success. The metrics needed to be in service of our ends, not their activities being a means to achieving mine.The Kingpin in the Fishbowl technique may seem like change is only a dashboard away. However, based on my experience, it is an example of power-over rather than power-with. Before attempting to coerce an influential leader’s priorities, carefully consider how that message may antagonize rather than compliment. If possible, pursue a power-with strategy instead.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-27T00:00:00-05:00'>27 Aug 2021</time><a class='article__image' href='/2021/08/27/PowerOverStrategiesAndHowReportingCanBackfire'> <img src='/images/2021/08/fish2.jpg' alt='&#39;Power-Over&#39; Strategies And How Reporting Can Backfire'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/08/27/PowerOverStrategiesAndHowReportingCanBackfire'>&#39;Power-Over&#39; Strategies And How Reporting Can Backfire</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Three Systems Theory Approaches to API Governance",
      "category" : "",
      "tags"     : "Software Governance and management",
      "url"      : "/2021/08/19/Three-Systems-Theory-Approaches-To-Governance",
      "date"     : "Aug 19, 2021",
      "content"  : "When there is more than one team in an organization, things need to be coordinated. This is especially true when it comes to organizations seeking consistent API design despite have those designs having different authors. Developers, designers, architects, and product managers intuit that consistent design helps them achieve greater speed and scale. Further, a common approach makes integration more intuitive and can reduce ongoing support costs. But getting teams aligned is a whole separate, more significant challenge when compared to just creating the API.The social scientist couple, Fred and Merrelyn Emery, identified two basic patterns for coordinating activities across multiple teams. They named them “first design principle” and “second design principle”, or DP1 and DP2, respectively. Later, they added the concept of the laissez-faire organization.The Emerys&#39; depecition of DP1 and DP2 organizations.Laissez-fair GovernanceLaissez-faire is defined as the absence of design principles. Nearly all API ecosystems start as laissez-faire. API design is not a coordinated activity in the beginning but rather a technical means-to-an-end. Laissez-faire is understandable, even desirable at this point in an organization’s journey. An organization’s culture and context define a significant amount of the unique pain points that emerge from inconsistent approaches; these can be difficult to predict. Further, if the API ecosystem does not require further scaling or evolution beyond fragmented, random one-off efforts, a laissez-faire approach to consistency may be appropriate.DP1 GovernanceHowever, given the necessity of APIs to value delivery in digital transformation efforts, most businesses can’t stop with just laissez-faire design approaches. In these cases, leadership will establish a DP1 organizational structure; they’ll introduce a manager or supervisor whose explicit job is to coordinate parts to achieve an outcome. In API design, the role of this “API reviewer” or “Center of Excellence” group is to achieve greater consistency for the interfaces produced.On the one hand, responsibility for achieving a quality outcome is straightforward. A single, highly-trained individual (or group) could apply to an entire domain. Ownership of the improvement activities is clear; activities like problem assessment, activity creation, oversite, progress reporting, and feedback gathering.On the other, DP1 implementations of governance also have notable downsides. For one thing, it can be difficult for any person from a single discipline (architecture, engineering, etc.) to also excel in the  myriad of additional skills this type of oversite requires. These skills include diplomacy, consensus-building, project management, and influencing with minimal formal authority, in addition to having a rich and deep understanding of API nuance. Career progression for these diamonds-in-the-rough people is also unclear.For development teams, especially for those used to a laissez-faire design approach, the introduction of this new supervisor or group can be met with hesitation, even suspicion. They may feel a loss of autonomy or lowered morale over what they perceive as a condemnation of their past work. When the relationship is strained and feedback loops poor, the introduction of this design leadership comes across as “ivory tower architecture”.It is these DP1 organizational environments that spring to mind when we hear the word “governance”: bureaucratic, dictatorial, and process-heavy hierarchies. These worst-case scenarios cause individuals to feel robbed of agency without the opportunity of recourse. Not everything is worse-case, of course. The most common case is ineffectual, flaccid governance: governance that is tolerated during the production of a token wins. However, the overall API program/platform cannot deliver on the grand transformation promised at the onset.DP2 GovernanceIn a DP2 approach, regulation of design standards (and subsequent quality outcomes) is built into the teams themselves. Individuals are expected to manage the coordination across their boundaries. For example, when designing an error object, Ramesh would consult with his peer on another team, Tara. Tara would have experience creating something similar from her work with Maria and Jose who, likewise, are assigned to other teams. And so on and so forth.Those familiar with Brooks’ Law might notice their Spider-sense tingling. Putting the onus to “carry water” on individuals creates significant communication overhead, particularly as the number of people required to coordinate increases.A picture depicting the increasing lines of communication described by Brooks&#39; Law.Training is one approach to lessen the amount of communication required.   “If everyone just knows what to do,” the thinking goes, “they’ll have more time to just do it”. With ongoing effort, this approach can work. However, “upskilling” every individual across all the organization’s development teams is also not trivial. A business pursuing this course of action is also likely to appoint someone or some group to oversee this upskilling, which puts us back into the DP1 design camp. The “information action fallacy” also looms large.Changing the environment to make desired outcomes more likely is also an approach. I’ll talk more about this in a future post.Wrapping UpAs the number and complexity of API ecosystems increase, we also need to increase the sophistication of our scaling approaches. Thankfully, a tremendous body of sociotechnical and systems theory over the decades addresses exactly that. As stewards of those ecosystems, our challenge is to step outside of our previous professional callings and engage with this new (to us) wisdom. The sooner we can do that, the sooner we can deliver on the promise of distributed systems.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-19T00:00:00-05:00'>19 Aug 2021</time><a class='article__image' href='/2021/08/19/Three-Systems-Theory-Approaches-To-Governance'> <img src='/images/2021/08/khomputerr.png' alt='Three Systems Theory Approaches to API Governance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/08/19/Three-Systems-Theory-Approaches-To-Governance'>Three Systems Theory Approaches to API Governance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "One Way to Improve API Guidance",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2021/08/18/OneWayToImproveAPIGuidance",
      "date"     : "Aug 18, 2021",
      "content"  : "I’ve seen my share of API Design guidelines. I’ve even contributed to a few. Consistent across those style guides, standards documents, and requirements pages is that we crafted them without the benefit of technical writing or information architecture professionals. Despite having the best of intentions, we left opportunities for conveying our design expectations in better and more useful ways.One simple yet powerful addition to any design requirements page is the inclusion of examples formatting in the company’s schema of choice. These examples can be easily copied/pasted and modified in the editor of choice, removing the ambiguity of personal interpretation or possible typos.A picture of a slide from 2018 commenting on the importance of examples from Jasmine Mithani.Let’s take a closer look at what I mean. Here is a hypothetical example of an API rule a business might adopt for interface consistency:  Pagination  When retrieving a collection of similar items, a caller may desire only to retrieve a subset. The caller may also need the ability to progress through subsets. To paginate through a collection, an API SHOULD provide a pair of query parameters: limit and offset.That is solid guidance and a step toward encouraging APIs that behave more consistently within a domain. However, even within that tiny snippet, several nuanced elements need to be translated correctly to an OpenAPI’s YAML. We also assume that developers are well versed in YAML conventions. In my experience, OpenAPI is a means to an end, not a topic of voluntary study and application. As a result, whoever is writing the API description writes just enough to get their description to validate against the OpenAPI schema and moves on. This minimum viable description checks a box but falls short of being good enough for integrators:paths:    /users:        get:            responses:                &#39;200&#39;:                description: success            parameters:                - $ref: &quot;#components/limit&quot;                - $ref: &quot;#components/offset&quot;components:    schemas:        limit:            description: the limit        offset:            description: the offsetPublishing an API describing pagination this way meets the letter of the rule, it fails to demonstrate the spirit: lowering comprehension overhead.Part of doing the right thing lies with the API designer. But the guidelines, by providing examples that can be copy/pasted, can do a tremendous amount to make that job more manageable. If it was the dev team creating APIs, the benefit is limited. Ten? Now we see some benefit. Dozens of teams across a company? At that scale, the consistency and speed possible by copy/pasting fully realized guidance directly into a design begins to add up.So after the description of the pagination guidelines above, include an example that they can easily copy, paste, and customize into their own work, like below. Then continue for each and every other API design feature that would benefit from a more consistent approach. Those writing API descriptions will thank you for it.paths:    /users:        get:            responses:                &#39;200&#39;:                description: success            parameters:                - name: offset                    in: query                    required: false                    description: The index of the first item to retrieve. Indices are zero-based                    schema:                         type: integer                        format: int32                        minimum: 0                        default: 0                - name: limit                    in: query                    required: false                    description: The number of items to retrieve at once. &amp;lt;&amp;lt;insert API-specific default here, including if there is a maximum value&amp;gt;&amp;gt;                    schema:                         type: integer                        format: int32                        minimum: 1                        maximum: 1000                        default: 20",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-18T00:00:00-05:00'>18 Aug 2021</time><a class='article__image' href='/2021/08/18/OneWayToImproveAPIGuidance'> <img src='/images/2021/08/treasure-map.jpg' alt='One Way to Improve API Guidance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/08/18/OneWayToImproveAPIGuidance'>One Way to Improve API Guidance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Machine Learning Prompts Within IDEs",
      "category" : "",
      "tags"     : "Software Development and Software Governance",
      "url"      : "/2021/07/16/GithubCopilot",
      "date"     : "Jul 16, 2021",
      "content"  : "In previous posts, I’ve discussed how one’s environment impacts behavior, how defaults and templates are part of a software development environment, and possible behavioral prompts to consider in an OpenAPI template. But what do irresponsible or counter-productive environmental prompts look like? The recent kerfuffle over Github’s Copilot AI is a great example.Photo by Amza Andrei on Unsplash  I discussed Copilot in a recent edition of my API email newsletter, Net API Notes #168. In short, Copilot is an assistant for writing code. As a developer types in their Integrated Development Environment (IDE), Copilot suggests “whole lines or entire functions” learned from similar found across Github.On the surface, this seems like an example of using the environment to prompt behavior. When it recognizes what the developer is attempting, Copilot prompts a solution similar to what others have done previously. Being the path of least resistance, the developer (particularly a junior one) is likely to accept the default provided and move on to their next task.In that scenario, however, what outcome is the environment optimizing for? Quality or convenience? If we consider how Copilot was trained, we begin to get an answer.From a published paper and subsequent tweets, it appears Copilot trained on all publicly available Github code. As someone who has contributed their share of broken, test, and experimental code to Github, I can guarantee that not everything publicly available follows best practices. Further, as I discussed in my overview on machine learning’s API future, Copilot’s algorithm can’t discern which common programmatic approaches are good, only those that have occurred historically. It then, subsequently, propagates those with its promptings.What does that mean in practice? As an industry (and with APIs specifically), software developers are still wrestling with comprehensive, security-minded practices. It should come as no surprise, then, that Copilot ends up prompting the same kinds of security flaws that have bedeviled the industry throughout the past. A security researcher studying the issue says Copilot suggests:  “-bad code that looks reasonable at first glance, something that might slip by a programmer in a hurry, or seem correct to a less experienced coder.”In a more API-specific example, from the same article:  “The AI tool also ‘blundered right into the most classic security flaw of the early 2000s: a PHP script taking a raw GET variable and interpolating it into a string to be used as an SQL query, causing SQL injection’”.It is easy to optimize a system for speed. However, using machine-learning to create environmental prompts isn’t automatically value-adding activity. Designed poorly, it becomes the equivalent of throwing more spagehetti at the wall. When considering what behaviors an environment creates, don’t lose sight of the quality outcomes.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-07-16T00:00:00-05:00'>16 Jul 2021</time><a class='article__image' href='/2021/07/16/GithubCopilot'> <img src='/images/2021/07/robot-pilot.png' alt='Machine Learning Prompts Within IDEs'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/07/16/GithubCopilot'>Machine Learning Prompts Within IDEs</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "What Prompts Should Be In an OpenAPI Template?",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2021/07/14/WhatShouldBeInATemplate",
      "date"     : "Jul 14, 2021",
      "content"  : "In my last piece, I talked about the importance of not overlooking the behavioral influence of software templates. The conclusion was that our output is influenced by our tools whether we consciously are aware of it or not. Therefore, we could continue to trudge on in ignorance and wonder why things aren’t working out as intended. OR we can design our environments to more easily achieve our governance outcomes.An OpenAPI description has become the most common way to express RESTful and RESTish API designs. As a result, a wide variety of API tooling presents an OpenAPI default to a developer beginning a new design. Unfortunately, this default is usually a lowest-common-denominator, stripped-down suggestion that does little to encourage company-common practices.A picture of the default OpenAPI template provided by Postman.What kinds of prompts could an API Center of Excellence/Enablement, API Governance, or enterprise architecture group consider putting in their default template?VersioningIn its research (paywalled, unfortunately), Gartner identifies not one, not two, but five different ways an API could be versioned:  API Evolution, or only allowing for additions to an API  Root namespace URI versioning (https://api.example.com/v1/resource)  Resource-level URL versioning (https://api.example.com/resource/v1)  HTTP content header versioning (curl -H &quot;Accepts-version:1.0&quot; https://api.example.com/resource)  HTTP query parameter versioning (https://api.example.com/resource?version=1)Believe it or not, there are even more ways to version an API than that!  And one way isn’t superior to another method. Yet, to manage the cognitive overhead of working with many APIs, it is important to create designs with consistent versioning behavior within a common domain, like an organization. A new member to that domain, when presented with a template, shouldn’t have to guess which approach is desired in their new context.The OpenAPI template should demonstrate the versioning method preferred by the organization. It should not be up to the designer to recall best practices from a separate correspondence in order to do the right thing.Better DescriptionsSimilarly, how many times have you been reading documentation, like that generated from an OpenAPI description, and you’ve come across something like this:name: userIddescription: the Id of the userWhile that might be technically correct, it is also the bare minimum way to describe an important piece of information. The writer might have not bothered with a description since it doesn’t convey much more than what could be gleaned from the name.In a previous role, we defined a series of characteristics that makes a compelling, worthwhile description.            Characteristic      Details      Examples                  Context      Detailed business context explaining what the data stands for and its expected usage      “A userId represents individuals and business entities that either (1) have active accounts or (2) are in the pre-sales pipeline.”              Disambiguation      Explains terms not commonly used      “Field refers to the number of seconds after launch when MECO occurred. MECO stands for “Main Engine Cut-Off”              Interrelationship      Defines if there is an important interrelationship with other available data in the same structure      “User account status code and user reactivation indicator are referenced together for obtaining the correct status of the account.”              Values, Range, or Examples      Proves insight into the range or bounded set of values possible.      “Valid FICO scores are between 300 and 850. A FICO score less than 300 or greater than 850 is invalid. Negative numbers should never be used.”              Data Sourcing      Where the data comes from or how it is generated.      “This FICO score is provided by Equifax.”              Reference/Notes      Provides links to training documents      “For more information on satellite launch thresholds and valid values, please see https://example.org/reference/DOC-12345.”              Proper Grammar &amp;amp; Complete Sentences      Definitions should start with the term being defined.      “Currency Code is the ISO three-character code indicating the currency for the transaction.”              Update Frequency/Retention      Information on source application, frequency of upload, and/or retention policy, if applicable.      “Data is updated monthly for the entire customer population.”      Not every field will require every characteristic. However, when it comes to the template presented to an API designer, we should provide examples that illustrate better, more complete information. If we give a designer a bare-bones, minimally worded OpenAPI description, they’re likely to continue that same approach in their work.ConclusionAs your API landscape grows, perhaps versioning or better field descriptions aren’t a primary concern. However, hopefully, these examples have sparked some ideas on how you might lean in on the issues that concern you.And it doesn’t have to end with just the templates. At the recently completed APIDays conference, ADP’s Boris Vernoff demonstrated how their customized environments promote consistency within their design environments (screens begin around the 15-minute mark). Rather than starting the design process with a blank page, a designer can select from a series of prompts. This ‘wizard’ approach does constrain the possibility space. However, in doing so, it directs energy to solve the unique business problem and away from introducing variance on non-value-adding API mechanics.There is a lot that goes into creating APIs with greater consistency and cohesion. What is your environment doing to make that easier?",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-07-14T00:00:00-05:00'>14 Jul 2021</time><a class='article__image' href='/2021/07/14/WhatShouldBeInATemplate'> <img src='/images/2021/07/holding-the-door.png' alt='What Prompts Should Be In an OpenAPI Template?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/07/14/WhatShouldBeInATemplate'>What Prompts Should Be In an OpenAPI Template?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Rethinking the Humble Template",
      "category" : "",
      "tags"     : "Software Governance and Software Change",
      "url"      : "/2021/06/30/TemplatesAsPrompts",
      "date"     : "Jun 30, 2021",
      "content"  : "In my last post, I discussed how changing the environment could change people’s behavior. Further, I proposed that software tools are as much the environment as a developer’s office. Careful prompt design within those environments can create better behavioral outcomes with less effort and more buy-in. But what does that look like in practice?The Stack Overflow ExampleStack Overflow is a website where people ask questions for other people to answer. To remain viable, Stack Overflow desires certain behaviors from its audience. First of all, they aren’t interested in quantity but quality; poorly worded, vague, or duplicate questions aren’t welcome. You don’t go to Stack Overflow to idly chat. Further, they aren’t interested in lots of answers, only the right answer.The website’s environment goes to great lengths to prompt these sorts of behaviors. Before one is allowed to ask a question, a modal pop-up reminds the asker to search to see if their question has already been asked and how to ask if they can’t find a prior version.If I, subsequently begin a question, the interface immediately provides feedback as to whether it is worth posting, and any already existing questions. The process continues through the post body, with a host of prompts for specificity, uniqueness, and completeness. By exhibiting these behaviors, I’m more likely to get my question answered, and the site gets a valuable reference for the next person.Stack Overflow still has moderators. They do step in when necessary. But the amount of manual intervention they undertake is significantly less than if there were no environmental nudges toward behaviors beneficial for the community.The OpenAPI ExampleLikewise, we should think of templates also as a prompt. When capturing business intent in an API specification, like OpenAPI, many tools present a bare-bones template. This template exists to help a new designer get started but often it is the most minimal valid version.There is so much potential here! Most companies I’m familiar with have some form of an API style guide. Imagine if I, as a new developer, had those desired API behaviors around naming, descriptions, and responses embedded in my tooling? How much easier would it be to design “the right way” if I just had to customize a relevant example rather than invent YAML whole cloth? How much more likely am I to adopt a particular error object structure if it is prompted at the beginning of every new design, as opposed to having to track it down in documentation somewhere else?We’re not there yet with organization-level templates. And, even then, more meaningful templates for their toolchains are only the beginning. As Stack Overflow shows, there are numerous types and times for prompts in a software environment. As people trying to create better outcomes, we need to add environmental design to our available approaches.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-30T00:00:00-05:00'>30 Jun 2021</time><a class='article__image' href='/2021/06/30/TemplatesAsPrompts'> <img src='/images/2021/06/computer_stablediffusion.png' alt='Rethinking the Humble Template'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/06/30/TemplatesAsPrompts'>Rethinking the Humble Template</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "To Change Behavior, Change The Environment",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2021/06/25/ArchitectureIsLaw",
      "date"     : "Jun 25, 2021",
      "content"  : "A school’s corridor can be a problem. Children run from their rooms on one end to the exit on the other. In the stampede, someone could trip. Kids could get hurt. In even the best-case scenario, the hallway chaos riles kids up, cutting into productive classroom time.One approach would be to insert an authority figure. Policing the hallway, they could shush and wag their finger. Alternatively, a school could install a floor like this.The floor is still perfectly level. However, the illusion produced by the tile design demonstrates the power of architecture. People don’t run across this. We have a change to the environment that creates a change to behavior.In his book, Tiny Habits, BJ Fogg, PhD  describes how a behavior occurs when the following three things converge in the exact moment:  Motivation - The desire to do a behavior  Ability - The ability to do the behavior  Prompt - The prompt to do the behaviorWhen the bell rings at the end of class, it is a prompt for the students to exhibit a behavior: moving from one place to another. They could walk. However, they have a low motivation to do so; if they run they can get the best pick of seats, have more time to talk, etc.Inserting a hallway monitor is an attempt to change the motivation and, thus, the behavior. By putting an authority figure in the space, students’ willingness to “get in trouble by running” must be taken into account. It works, but the introduction of policing and enforcement creates an antagonistic relationship.So much of the software governance literature starts with an apology. Then the author jumps to their particular riff of “sticks and carrots”. As you might guess, sticks represent punishment for not performing certain behaviors. Carrots are rewards for playing along. Most people can intuitively grok extrinsic “sticks and carrots”. However, despite being one of the easiest to understand methods of changing behavior, both address only one part of the behavior equation, motivation.As the floor illustrates, there are other ways to change behaviors. In software, our environments are composed of numerous tools. Conscientious systems thinkers must consider how tooling prompts and empowers (or disempowers) ability. Without purposeful design, the behaviors created by these everyday touchpoints are left up to chance.Modify an environment to make the right thing easy to do, and the need for someone to police behavior goes down significantly.Update (2023-10-08): In another example of the environment changing behavior, a village in France used road markings in a unique pattern to deter speeders. Update 2025-06-19: Here are two examples of changing the environment to create a desired behavior I recently came across on Reddit. As before, this is an attempt to get people slow down at intersections. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-25T00:00:00-05:00'>25 Jun 2021</time><a class='article__image' href='/2021/06/25/ArchitectureIsLaw'> <img src='/images/2021/06/environment_pixray.png' alt='To Change Behavior, Change The Environment'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/06/25/ArchitectureIsLaw'>To Change Behavior, Change The Environment</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "How Versus Why Questions",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2021/06/23/HowVersusWhyWhyQuestions",
      "date"     : "Jun 23, 2021",
      "content"  : "In my API governance experience, I interviewed a lot of teams. The purpose of those chats was always to reach a better understanding of the problem. A better understanding leads to better design. Most of the time, these conversations were amicable, easy-going affairs. One contributing factor that kept these affairs from becoming confrontations was when I switched from asking “Why” to asking “How” questions.When you ask someone “Why” they do or don’t do something, you’ll inevitably provoke a defensive response. For example, when trying to learn more about somebody’s API practice, I could ask:  “Why don’t you have 100% contract test coverage?”  “Why aren’t your API descriptions captured in a single, discoverable place?”  “Why did you produce so many microservices?”  “Why is your domain terminology inconsistent?”  And the classic catch-all, “Why did you do it this way?”Each of those may be a legitimate question. However, the nature of the question comes across as a request for justification. Worse, answers to a why question immediately entrenches the person in a list, of their own making, of confirmation bias. What was supposed to be a positive discourse has turned exhausting, as each side attempts to prove that their approach is superior.Asking “how” is much more productive. Reframing our points from earlier changes the questions to:  “How do you detect breaking changes in production?”  “How do developers discover and learn how to use APIs in your area?”  “How do you manage the greater complexity with your number of microservices?”  “How do you describe this concept within your domain?”  “How did you work through the difficult decisions in this design?”Both the ‘how’ and ‘why’ examples address, roughly, the same areas of concern. However, the ‘how’ questions are more likely to result in people talking in greater length, detail, and thoughtfulness. They assist us in going further in exploration.Asking quality, open-ended questions creates a better rapport and a clearer idea of how to help. And the faster we get to help, the sooner our customers will find success.The next time you feel the urge to ask “why”, try reaching for “how” instead.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-23T00:00:00-05:00'>23 Jun 2021</time><a class='article__image' href='/2021/06/23/HowVersusWhyWhyQuestions'> <img src='/images/2021/06/conflict_midjourney.png' alt='How Versus Why Questions'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/06/23/HowVersusWhyWhyQuestions'>How Versus Why Questions</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Blasting Off For New Adventures",
      "category" : "",
      "tags"     : "Milestones",
      "url"      : "/2021/03/29/Postman",
      "date"     : "Mar 29, 2021",
      "content"  : "I’m excited to share that, this April, I’ll be joining Postman as the Director for API Platforms and Digital Transformation.  I’ll be reporting to Kin Lane, Chief API Evangelist. I’m the latest addition to Postman’s Open Technologies group, an incredible, assembled group of industry-leading professionals.Postman, as many developers already know, sets the bar for API collaboration excellence. I’ll get to help companies build their API lifecycle management and governance programs on that incredible bedrock.I’m excited to get started and look forward to meeting all my future fellow Postmanauts!While I’m eager to look forward, I would be remiss to not say a few words about the past. Thank you to those at Capital One for an incredibly educational five and a half years. I’m proud of so much of that early, ecosystem-enabling work. That effort has scaled to thousands of schema-defined, affordance-consistent microservices that perform half a billion requests a day. From training to the collaborations, from tool development to analysis, every day was an opportunity to grow as a professional.A half-decade is also long enough to see initial assumptions grow, change, and take on a life of their own. Relationships form and strongly held ideals evolve beyond the first contact with production. I have a different level of professional maturity now that I didn’t have at the start, even if the past year has mostly been unkempt hair and sweatshirts.There remain a vast number of folks there continuing to create positive change. I see you, salute you, and want you to know I will continue to root for you. I also wish my former team the best of luck; you have taught me a tremendous amount. Now the wheel is yours. You’re driving where things go next. You’ve got this. I believe in you!It will be a busy next few months. In 2015, my family moved to the East Coast for the Capital One job. The pandemic and limited travel options impressed just how removed the northern Virginia region is from our extended families. So we’ll be taking advantage of Postman’s 100% remote allowance and moving our circus to the Midwest.That’s a lot of uff-da for now, but we’ll break lefse soon enough. Skol and boldness to you, friends!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-03-29T00:00:00-05:00'>29 Mar 2021</time><a class='article__image' href='/2021/03/29/Postman'> <img src='/images/2021/03/countryside_midjourney.png' alt='Blasting Off For New Adventures'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/03/29/Postman'>Blasting Off For New Adventures</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "WandaVision and This American Moment",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2021/02/08/WandaVision",
      "date"     : "Feb 8, 2021",
      "content"  : "We need to talk about WandaVision, the Disney+ series, and the first entry into the Marvel Cinematic Universe’s Phase Four. After more than a year and a half, the team behind the series could have easily coasted on pent-up fan demand and character nostalgia. Yet, through some meticulous design decisions and serendipitous timing, WandaVision is uniquely commenting on this moment.Social and class unrest, political skullduggery, disrupted workplaces, chaotic education situations, and economic uncertainty are all playing out amid a global pandemic. We’re at home; a move that began as a preventative measure but, increasingly, feels like a prison. Since there’s little else to do or little else we have the cognitive and emotional energy for, I’ve been watching more television than usual. Like many, I’ve binged past comfort shows while doomscrolling through insomnia.Time moves strangely in the pandemic’s unreality. One day drags along in repetitive tedium like any other. Yet the months rapidly disappear with little memory to account that they were there. Without personal touchstones - the trips, reviews, concerts, and even new media releases- I’ve become a character stuck in my own show’s reruns, repeating the routine but unable to progress the character arc.light spoilers to followWandaVision, now streaming on Disney+In WandaVision, the residents of Westview, NJ, also find themselves trapped in an unnatural reality. They are compelled, sometimes at great pain, to maintain a facade of the American dream: the suburb, the marriage, the homeownership, the stupefying white-collar job, etc. Even the town name, ‘Westview’ is a nod to western, or American, perception of success. The aspirational normalcy is an attempt to cope. And, at the end of the episode, the characters avoid the strangeness unpinning it all by watching TV.When I watch WandaVision, I see a reflection of ourselves; protagonists struggling with grief. We are unsure of how this started or when it will end. We’re in control but, not? We are grieving for those we lost. We grieve for the time we won’t get back and the plans deferred. We grieve for the myths we told ourselves about a just nation and a logical, ordered world. Wanda’s story is one of grief. Despite the superpowers, her story is eminently relatable to our own.That is a lot. Some of us have yet to acknowledge what has happened. Some of us continue to cling, even violently, to the narratives we once had. Processing the world as it is and what has changed will continue for us for some time to come.Would WandaVision resonate so strongly if we weren’t in a pandemic? Perhaps. I could write another post on how the show uses TV tropes and audience expectations to accentuate the storytelling. That “meta-ness” would be entertaining in any time.However, WandaVision becomes transcendent at this moment in which we’re all trapped in our own Westview.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-02-08T00:00:00-06:00'>08 Feb 2021</time><a class='article__image' href='/2021/02/08/WandaVision'> <img src='/images/2021/02/wandavision_midjourney.png' alt='WandaVision and This American Moment'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/02/08/WandaVision'>WandaVision and This American Moment</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Why AI Success is API Built",
      "category" : "",
      "tags"     : "AI, Presentations, and Software Development",
      "url"      : "/2021/01/08/WhyAISuccessIsAPIBuilt",
      "date"     : "Jan 8, 2021",
      "content"  : "Last year, I gave two public presentations. I posted ‘APIs are Arrangements of Power’ previously. The clean-up on the second, delievered when in-person gatherings still happened, languished due to (gestures wildly at the surrounding air) things. During the holidays, however, I made an effort to finalize and pull everything together.A recording of an abridged version of the talk is embedded at the bottom. A portion of the talk even made it into the book, Accelerating Software Quality, by Eran Kinsbruner.Without further ado, here is ‘Why AI Success is API Built’.Welcome!Hello everyone! My name is Matthew Reinbold, and tonight, I will be talking about Why AI Success is Built on APIs.AgendaWe’re briefly going to go over:  Why AI is such a big deal right now just to level set  Talk about the challenges of creating AI models  Why some of those challenges lead to APIs to deliver AI functionalityWhy is Matthew giving this talk?I’m passionate about these issues because they impact my work. I am the Director of the Capital One API and Event Streaming Center of Excellence. It is a unique position that requires me to be part enterprise architect, part business analyst, and part internal developer evangelist.My team and I work with our 9000+ developer community to ensure that the message-passing systems built exhibit consistency and cohesion. We provide training, collaborate on API descriptions, evolve oversight processes, and facilitate co-creation on our design standards.I also do a fair amount in the broader API community. I write a newsletter called Net API Notes. I curate Net API Events, a list of in-person events for API professionals worldwide. I also tweet a fair amount, mostly about APIs but sometimes, occasionally, Lego.I also make some legally dubious laptop sticker parodies for my Patreons.Getting on the Same AI PageIt is important that I first establish what I’m talking about when I talk about when I say ‘AI’.Clarifying AIAI has generated almost as much excitement as clickbait headlines. You would be forgiven to think that we’re all one errant compile away from Skynet. I mean, even the Pope is talking with Microsoft. When something crosses over into popular awareness, it is significant; even if that awareness is imperfect.Before going further, we should be on the same page. AI is a broad brush that paints many things. Usually, when you see these alarmist articles about Skynet and Terminator death robots, the authors are postulating about “Artificial General Intelligence”. This is software that can “think” in a manner we associate with people.We are still quite far from that future. What I will be talking about tonight is much more narrowly focused. So narrow, in fact, that practitioners refer to it as “narrow AI”. Even more specifically, I will discuss a popular technique, often conflated as AI, called “machine learning”.Machine learning has real, tangible benefits for companies. It also solves interesting challenges. As an additional plus, it probably won’t end human life as we know it.Machine Learning is Growing at a Tremendous RateIf you were trying to follow every single new paper released in the machine learning space, you’d now be trying to absorb 100 machine learning papers every single day. While the concepts behind machine learning have been around for some time, the current Cambrian explosion of published work has many factors.  Moore’s Law - The speed of compute is faster than it has ever been, particularly in GPUs  Cloud Compute - Everyone can get access to these fast processors  More Data - For better or for worse, we are better about to scale both data collection, storage, and analysis  Greater Ease in Model Creation - More people are trying more stuff more of the time(Chart from the blog post ‘Too Many Machine Learning Papers’)What is Machine Learning?A full explanation of how machine learning, and how its various permutations work is beyond this presentation’s scope. However, as we begin to discuss why these things take so much compute or why they’re so energy expensive, we need some theoretical model in how they’re composed.Suppose, for example, we had to create a service that could determine whether a provided picture was of a chihuahua or not. The output is either “yes” if a chihuahua is present or “no” if not.Using machine learning, we would create several nodes for our input layer. Each of these nodes corresponds with an individual pixel of the image provided. A weight is assigned to each of the nodes. The value of this weight is based on how important that node, or individual pixel, is to determining whether a chihuahua is present. Pixels framing the outside might have a low weighted value, while those around the inverted triangle comprising the two eyes and snout would be worth more.Before going further, I think it is important to note we’re already dealing with some large numbers with only our input layer. My first digital camera was a Sony Mavica in 1999. The max resolution of a picture saved to the floppy drive was 640x480. If we were processing images in that resolution, we’d have an input layer of 307,200 nodes. Those are 307,200 weights that need to be tuned to develop a model. And as you might imagine, pictures taken with modern mobile devices have millions of pixels.However, we’re only getting started. We take the RGB values in a given node, compute a result with the weight for that node, and then pass that value to every other node in the subsequent layer to be processed. There may be many of these “hidden layers” between the input and the output. Each node in each layer mathematically computes its result. This continues until all the results are recombined into a value in the output layer.This output layer contains the probability of whether the input meets our criteria. If it is above a particular percentage, we might say, “yes” the image did contain a dog. We continue to iterate on our weights until we are satisfied with how often our machine learning model successfully matches our labeled sample data used for training.We’ve used machine learning to create a model to detect if our picture features a chihuahua…(For more explanation, see the YouTube video course, Crash Course: AI)(Chihuahua Photo by Alvan Nee on Unsplash)(Photo by Reproductive Health Supplies Coalition on Unsplash)Finding Patterns in Data is Not the Same as Understanding Data…or a muffin. It is essential to point out that through all those mathematical calculations, machine learning doesn’t understand what it is looking at; at least not the way we do. It has only identified patterns where two darker dots consistently appear above one other dot (eyes above the snout).In her book You Look Like a Thing and I Love You Janelle Shane described a similar problem. Microsoft has an image recognition product that works similar to our example: it takes an image and suggests what might be in it. One day, while using this product, Janelle noticed that it was finding sheep in photos that definitely did not have sheep.After experimentation, Janelle hypothesized that the machine learning model was trained with lots and lots of pictures of sheep in green, grassy countrysides. The model did not “learn” the sheep’s visual properties, but mistakenly correlated the landscape with the sheep label. Subsequently, when Janelle gave the model pictures of sheep in cars or livings rooms, the model labeled the animals as dogs and cats.(Image from the ‘Chihuahua or Muffin?’ tutorial.)Machine Learning is Strategically Important to CompaniesDespite this, machine learning is still a very big deal™ for companies. According to an Accenture global research survey, 85% of business leaders expect AI to open up new products, services, business models, and markets. Another 78% expect AI to disrupt their industry in the next ten years.Further, a report from market research firm Tractica forecasts that the annual global revenue for artificial intelligence products and services will grow from $643.7 million, in 2016, to $36.8 billion by 2025. That’s a 57-fold increase and makes AI the fastest-growing segment in the IT sector.And no, AI is not coming to take our jobs. As the quote from Mary Gray says, automation doesn’t eliminate jobs; it changes the form those jobs take.Machine Learning is Good at Specific ThingsMachine learning promises to lower costs and produce better outcomes. It’s because AI can recognize subtle patterns in vast volumes of data.Princeton professor Arvind Narayan created an excellent presentation late last year, entitled “How to Recognize AI Snake Oil”. He identifies where machine learning techniques are practical, where they have problems, and where they may be ethically dubious.Enhancing or scaling perception is a great application of machine learning. These have clear success criteria; either the model successfully does a thing or needs additional training. Automating judgment, or asking a machine to call balls and strikes when there is some gray area, is more complicated.Then there’s predicting the future. You may use a machine learning algorithm to review someone’s social media feed and identify how often a beer bottle is pictured. That is perception. Assuming that a high percentage of beer bottle appearances makes an individual unfit for employment is predicting an outcome. That is problematic, as research has shown. Machine learning, despite its promise, cannot tell the future. It can only find correlations in the past.However, Machine Learning is Not a Silver BulletIt is also essential to use common sense when considering machine learning. Martin Zinkevich is a research scientist at Google and author of “Rules of Machine Learning: Best Practices for ML Engineering”. He urges several useful heuristics when evaluating whether machine learning is appropriate for a task, like:  “If your system has more than 100 nested if-else [statements], it’s time to switch to machine learning.”For example, imagine you’re a smartphone developer, and you’re tasked with recommending the next application someone should use. You could consider the time of day, the weather, user movement, sentiment of their social media accounts, their text and call volume, the proximity of that communication in a social graph, etc. Those could all be inputs to a complex model.Or you could recommend the most frequently used apps. If a simple heuristic, like “recommend the most recently used items”, is successful 70% of the time, any model built has to significantly outperform it to justify the increased complexity.Challenges Title ScreenWhat form does that complexity take? Let’s talk about the challenges to developing machine learning.There are ChallengesThere are four big challenges to creating successful machine learning models. They are:  The volume of data to collect and refine  The compute cost to process  Regulatory, privacy and/or ethical concerns  Operationalization.To illustrate this, let’s talk about Google’s Meena chatbot. A sample conversation between Meena and a human is shown in the slide. Google used 341GB of text to train the model. In doing so, they consumed $1.4 million in cloud computation. That’s a lot of money. It is also a lot of power. For comparison, it would take the average American household  28 years to burn the same 292,912 kWh of power. I might argue that the conversation is not noticeably better than Eliza, a program crafted at MIT in the 1960s. As such, there is an ethical question of whether the results warrants that level of energy expenditure (and subsequent carbon footprint).And that’s before we even get to operationalization and the challenges of doing Continuous Delivery for Machine Learning.(More on Meena from a ZDNet article)Building Your Own AI Models Can Be ExpensivePlease consider where the compute for your models is being run. If the training can be done anywhere, research which AWS regions carbon offset, for example. For reference, that is not US-EAST-1. If the training is geographically agnostic, take a few minutes and click the necessary boxes to a configuration more carbon friendly.(Articles pictured in this slide include Training a single AI model can emit as much carbon as five cars in their lifetimes and Computer power needed is rising seven times faster than ever before)Building on Other&#39;s Work Is ImportantAlso, consider building upon others work. It may be hard to remember, but there was a time when the idea of having a picture of every single inch along every single street in every single place was a problem of seemingly infinite scale. Imagine if every application with a street view had to stand-up and operate their own fleet of vehicles and cameras. Yet today, anyone can call a Google Maps API.Similarly, we aren’t that far removed when small and mid-sized businesses maintained their server closets. Handling things like seasonal traffic or DDS attacks was an individual challenge. Now we have APIs on cloud-providers, like AWS, to call.Finally, imagine if every application that wanted to send a text message had to negotiate individual deals with each and every telco provider? The barriers to innovation would be horrible. Better to let someone like Twilio do that once, and then we build upon the abstraction.In the same way that these companies have exposed services via APIs, the future very much looks like leaving the big, precarious, and expensive data collection and model building to the experts. Then we consume that model through an API.Enter APIsAPIs are an enabling technology. AI doesn’t reduce or eliminate the need for APIs. More AI use demands more sensible and well-designed APIs.APIs Provide an Abstraction to Technical ComplexityA web API (or Net API) provides a separation of concerns. You have your code. You focus on uniquely solving your business problem. Then, through an API, you consume someone else’s generated model.The AI provider handles the tricky issues of:  Collecting and Refining the Data  Paying the electricity bill  Fielding regulatory inquiries around privacy and security  Managing the operationalization of dataLanguage is the Most Used AI Accessed Through APIsI see the industry already moving in this direction. The chart shown was created from a survey of which types of functionality were consumed via API. Things like natural language processing are highest on the list, for the reasons that Princeton’s Arvind Narayan pointed out: these are all perception related. Scaling perception is where AI has proven its usefulness and we’re moving toward a commodification of the feature.(Chart from Statista.com)AI API Claims Require Data QuestioningWhen choosing between AI offerings via an API, it will be necessary for consumers to evaluate their claims via intelligent questions.Vicki Boykis is a data scientist and writer out of Philadelphia. In her essay, “Neural nets are just people all the way down”, Vicki highlights some important revelations on one highly-touted AI use case:  “if you’re doing image recognition in 2019, it’s highly likely you’re using an image recognition systems built by images tagged by people using Mechanical Turk in 2007 that sit on top of language classification systems built by graduate students prowling newspaper clippings in the 1960s.”There’s so much we should be asking about our AI providers. However, briefly, consider the incentives. Be wary if there are financial incentives to be less than transparent about how the model is generated or where the data is collected from. Also, be skeptical if an AI product also happens to use the latest blockchain-enabled, agile-Kubernetes, nano-service hype salad. Leverage others’ work, like this article comparing cloud providers; not all pieces are this comprehensive, but there are folks out there that are sharing their results for the community’s benefit. And, finally, interrogate the data. In general, we’re not good at this, in general, but, going-forward it will increasingly be more important.Articles pictured in this slide include:  Three easy ways to evaluate AI Claims  Comparing Machine Learning as a ServiceDataset Nutrition Labels Need Our SupportA survey was done asking folks whether they had practices in place to determine whether their data was good. Unfortunately, 44% said ‘no’.Increasingly, that is not going to be an acceptable answer. We need to figure out best practices to interrogate the data. This is especially true of APIs since we may not have our hands on that data.From the same survey, a majority of respondents reported that their ability to analyze data was self-taught. Going forward, we will need standardized, reusable approaches to create standardized, predictable results. As proposed in the linked white paper, one idea is using a nutritional label-like representation to compare and contrast datasets used in AI products.Adopting a dataset nutrition label could help. However, keep in mind that having a robust understanding of the data is only one part of the process necessary to create a working model.(Charts from The Dataset Nutrition Label Whitepaper)ConclusionsThat was a lot and, again, I’m only showing the tip of the iceberg.Where to Learn MoreIf you are interested in learning more, there are numerous placed to get started. In addition to the many papers, presentations, and courses that I’ve linked to throughout this talk, I would also recommend the following books:  You Look Like a Thing and I Love You by Janelle Shane  A Human’s Guide to Machine Intelligence by Kartik Hosanagar  Rebooting AI by Gary Marcus and Ernest DaviesIn addition, I would highly encourage those working in the space to have a firm grasp of how these algorithmic approaches can cause harm. For that, I would suggest:  Weapons of Math Destruction by Cathy O’Neil  Automating Inequality by Virginia EubanksIt also surprises me that there aren’t more sites that allow prospective AI users do “comparison shopping” across the major providers. Algorithmia used to be an online marketplace for algorithms. Similarly, Inten.to used to allow running sample queries across cloud algorithms. Both appear to have since pivoted. Certain AI APIs can still be found within the Programmable Web directory, however.There are also a couple good sources for data, if people are looking for raw ingredients to get started. If you are aware of other sites that provide a similar service, let me know.How to Contact MeThank you for your time and attention. My name is Matthew Reinbold and you can find me online at these fine establishments.Good night.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-01-08T00:00:00-06:00'>08 Jan 2021</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2021/01/08/WhyAISuccessIsAPIBuilt'> <img src='/images/2021/01/computercity_craiyon.jpg' alt='Why AI Success is API Built'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2021/01/08/WhyAISuccessIsAPIBuilt'>Why AI Success is API Built</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Our Shared Road",
      "category" : "",
      "tags"     : "Software Governance and Presentations",
      "url"      : "/2020/08/05/OurRoadIsShared",
      "date"     : "Aug 5, 2020",
      "content"  : "From an individual API producer’s perspective, adherence to an enterprise company’s design style guide may seem puzzling. “Why do we have to learn these naming conventions?” they’ll ask. Other questions include, “What difference does our style of versioning make?” or “Why can’t we use the authentication scheme that worked at my previous company?”At the end of 2019, I did a series of “Back to Basics” roadshows for my day job. According to various surveys, the average developer tenure at any company is between one and two years. My goal, through the roadshows, was to re-establish the principles that have guided our five-year-old program. I’ve used urban planning stories before, whether that is Brazillian Favelas or Paris’s tree-lined boulevards. To justify the need for enterprise standards for a degree of design consistency, I used a traffic regulation analogy.I was reminded of it because of the most recent Postlight podcast, “Restricting Freedom for More Freedom: On The Parallels Between Wearing a Mask and Regulating Tech”. In that show, hosts Paul Ford and Rich Ziade discuss people treating mask requirements during Covid-19 as a violation of constitutional rights (spoiler: they’re not).Sometimes inconveniencing the individual is the best for the larger group. That goes for whether we’re talking about masks, software governance, or traffic. Below a snippet of my argument from that “Back to Basics” deck.Modern software architecture is complexJohn Ousterhout, in his book “A Philosophy of Software Design”, defines complexity as:  “-anything related to the structure of a software system that makes it hard to understand and modify the system.”In other words, a barrier to the kind of business agility that we crave, that is needed to win in competitive marketplaces, is how hard our architectures are to grok.Message Passing Hides Complexity Behind an InterfaceMessage passing is a means of abstracting complexity and hiding behind an interface.That abstraction allows programmers to work on a system without being exposed to all a system’s complexity at once. An API is a simplified view that omits unimportant details (or at least those details unimportant to the API’s consumer). It makes it easier for us to think about and get stuff done in complex environments.“Going Faster” and “High Quality” Are Not Diametrically Opposed“Going faster” is not a matter of getting rid of the rules. Martin Fowler,  elegantly states to the contrary, that this is a false trade-off. In his piece, “Is High Quality Software Worth the Cost?” he outlines how quality efforts, over time, translate to great speed for the entire system over any individual’s speed.Quality Design is a Financial ImperativeLow-quality design, while quick to make, incurs a lifetime tax. Maintenance is harder, requires additional overhead, and compares less favorably in the marketplace. Quality is not a moral argument, something that makes our inner artisan feel good. Quality design is a financial imperative to increase our software return on investment.  “The Key to Writing Less code and causing less rework is to write better abstractions” - Eric Elliot, distributed systems expert and authorWe Need Continual Renewal and Reflection on What Quality Means for UsThat is why it is essential that each of us, whether we are product managers, architects, or engineering leads, continually renew our understanding and application of basic core principles.A garden is not something that you plant in the spring and wander away from. The ability to reap what was sown requires constant attention and care. We have to rededicate ourselves to executing on the fundamental, basic things before overcoming complexity is possible.Our Road is SharedAnd the most basic thing, the first principle - the one to remember if you remember nothing else - is that we’re in this together.When there is only one car on the road, then the fastest way to get from point A to B is to ignore all speed limits, go whichever way they want on one-way roads, and view all traffic signage as optional. From their perspective, an individual team will wail and gnash their teeth at how much faster they could get to production if they were only allowed to do whatever they want. Imagine the freedom(!!!)… for them.However, there is not a single team. There are hundreds on their journeys, crisscrossing each other and going to and fro. Things like speed limits, lane markings, stop signs, and traffic signals are all there to move the most people to the greatest number of places, safely. We exist within a system. The road we travel is shared between us. If we are going to arrive, it will be through minor, in-the-moment, inconveniences made for the larger, more-long-lasting, good of all.~fin~The Road Forward",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-08-05T00:00:00-05:00'>05 Aug 2020</time><a class='article__image' href='/2020/08/05/OurRoadIsShared'> <img src='/images/2020/08/road3_midjourney.png' alt='Our Shared Road'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020/08/05/OurRoadIsShared'>Our Shared Road</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Technology Aphorisms",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2020/08/03/Technology-Aphorisms",
      "date"     : "Aug 3, 2020",
      "content"  : "Recently I was talking to another professional with decades of technology experience. When I dropped a reference to bike-shedding, I was met with a blank stare. Given he had never heard of the reference, much less know the difference between that and yak shaving, I decided something had to be done.Over my professional career, I’ve collected numerous pithy statements about technology. Some of these aphorisms are serious; others, not so much. But folks seem to find these things useful. Internalizing may not make you a better technologist. However, the next time you’re stuck, you’ll know you’re not alone.Yak Shaving. The definitive guide.Now, onto the aphorisms!  Amdahl’s Law  Ashby’s Law  Baader-Meinhof Effect  Balk’s Law  Betteridge’s Law of Headlines  Bike Shedding  Brandolini’s Law  Brook’s Law  Cargo Cult (Programming)  Cellan-Jones Principle  Clarke’s Third Law  Conway’s Law  Correlation Principle  Cunningham’s Law  Demeter (Law of)  Dunbar’s Number  Dunning-Kruger Effect  Eagleson’s Law  Finagle’s Law  Fitt’s Law  Gall’s Law  Gilder’s Law  Godwin’s Law  Goodhart’s Law  Gracely’s Theorem  Hanlon’s Razor  Hofstadter’s Law  Huang’s Law  Hyrum’s Law  Jevons Paradox  Katz Conjecture  Kernighan’s Law  KISS Principle  Law of Leaky Abstractions  Law of the Second Floor  Least Power (Rule of)  Lindblom’s Razor  Lindy Effect, The  Linus’s Law  Lister’s Law  Metcalfe’s Law  Moore’s Law  Murphy’s Law  Ninety-Ninety Rule  Niven’s Third Law  Occam’s Razor  Parkinson’s Law of Triviality  Peter Principle  Postel’s Law  Principle of Good Enough  Rule 34  Singh’s Inevitable Avoidance  Socratic Paradox  Sturgeon’s Law  Sunnyvale Principle  Sustrick’s Law  Tesler’s Law  Universal Scaling Law  Weiler’s Law  Wirth’s Law  Yak Shaving  Zander’s Law  Zawinski’s Law  Zeno’s Paradox  Zipf’s LawTechnology AphorismsAmdahl’s LawNamed for Gene Amdahl and created in 1967, Amdahl’s Law states that there will always be a limit on the speed possible with parallization, since only a portion of any task can be parallelized. Amdahl’s Law is a precurser to the Universal Scaling Law.Ashby’s LawFor a system to be stable, the number of states that its control mechanism is capable of attaining must be greater than or equal to the number of states in the controlled system. Or, in Jade Bloom’s words, “complex environments (and wicked problems) require complex organizations”. Attributed to British cybernetician W. Ross Ashby.Baader-Meinhof EffectThe name given to a frequency or recency illusion where once something has been noticed, then every instance of that thing is noticed, leading to the belief it has a high rate of occurrence.Balk’s LawEverything you hate about the Internet is actually everything you hate about people. Attributed to Awl co-founder Alex Balk.Betteridge’s Law of HeadlinesAny article with a headline or title that ends in a question mark can be summarized by ‘no’. Attributed to British technology journalist Ian Betteridge.Bike SheddingThe act of wasting time on trivial details while important matters are inadequately attended to. See also Parkinson’s Law of Triviality.Brandolini’s LawSays “the amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.” Named for Alberto Brandolini, an Italian programmer.Brooks’s LawAdding people to a late software project makes it later. Attributed to Fred Brooks, author of the book Mythical Man Month.Cargo Cult (Programming)A discouraged term for a style of computer programming characterized by the ritualistic inclusion of code or program attributes that serve no real purpose. It was first included in a glossary of computer slang in 1991. The phrase is rooted in incorrect and racist origins.Cellan-Jones PrincipleYou can either explain quantum computing so that it’s understandable or factually correct, but never both simultaneously. Attributed to Rory Cellan-Jones.Clarke’s Third LawAny sufficiently advanced technology is indistinguishable from magic. Attributed to British science fiction writer Arthur C. Clarke.Conway’s LawAny piece of software reflects the organizational structure that produced it. Attributed to computer scientist Melvin Conway.Correlation PrincipleAs defined by software development coach Geepaw Hill, the Correlation Principle says that our productivity is tightly correlated with the internal quality of software.Cunningham’s LawThe best way to get the right answer is not to ask questions; it’s to post the wrong answer. Attributed to the wiki creator, Ward Cunningham.Demeter (Law of)The Law of Demeter (LoD) or principle of least knowledge is a design guideline for software, particularly object-oriented programs. It is summarized as (1) each unit should have limited knowledge of other units, (2) each unit should only talk to its friends, and (3) only talk to your immediate friends. First proposed by Ian Holland.Dunbar’s NumberThe theory an individual can only maintain stable relationships with up to 150 people. Attributed to British anthropologist Robin Dunbar.Dunning–Kruger EffectA cognitive bias in which unskilled individuals suffer from illusory superiority, mistakenly rating their ability much higher than average.  Described by social psychologists David Dunning and Justin Kruger.Eagleson’s LawAny code of your own that you haven’t looked at for six or more months might as well have been written by someone else.Finagle’s LawAnything that can go wrong will and at the worst possible moment.Fitt’s LawA design law that states the longer the distance to move a cursor and smaller the target size, the longer it takes. It was originally described by Paul Morris Fitts in a 1954 paper.Gall’s LawA complex system that works is invariably found to have evolved from a simple system that worked.Gilder’s LawBandwidth grows at least three times faster than computer power. Attributed to author George Gilder.Godwin’s LawAn adage that asserts that the longer an online discussion goes on, the probability of a comparison involving Nazis or Hitler approaches 1. Promulgated by the American attorney and author Mike Godwin.Goodhart’s LawTurning a metric into a target makes it a bad metric. Attributed to economist Charles Goodhart.Gracely’s TheoremA theorm that states that there are very few new ideas, rather there are mostly advancements because of improved CPUs and Networking speeds. Attributed to Brian Gracely.Hanlon’s RazorNever attribute to malice that which is adequately explained by stupidity. Coined by Robert J. Hanlon. See also Occam’s Razor.Hofstadter’s LawIt always takes longer than you expect, even when you take into account Hofstadter’s Law.Huang’s LawHuang’s Law is named for Nvidia’s chief executive and co-founder Jensen Huang. It was coined by Chrisopher Mims. It says the performance of GPU chips (which excel at parallel processing) will double every year. This is compared to Moore’s Law, which described performance of a single-threaded CPU.Hyrum’s LawWith a sufficient number of users of an API, it does not matter what you promised in the contract. All observable behaviors of your interface will be depended upon by somebody. Attributed to Hyrum Wright, a Google software engineer. See also the Law of Leaky Abstractions.Jevons ParadoxAn economic phenomenon that says when technological process increases the efficiency with which something is used, the rate of consumption exceeds previous consumption due to increasing demand. Named for English economist William Stanley Jevons.Katz ConjectureThe conjecture states that to effectively use any abstraction, you must - eventually - have a solid understanding of what it’s abstracting. The conjecture has two implications: any abstraction that doesn’t sufficiently simplify what it’s abstracting makes everything worse, and any abtraction you don’t understand is a risk to your project. Named after Yehuda Katz.Kernighan’s LawDebugging is twice as hard as writing code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it. Attributed to author and C Programmer Brian Kernighan.KISS Principle‘KISS’ is an acronym that stands for “Keep It Simple, Stupid”. Associated with aircraft engineer Kelly Johnson and noted by the U.S. Navy in 1960. See Occam’s razor.Law of Leaky AbstractionsCoined by software developer Joel Spolsky, the Law of Leaky Abstractions states that all non-trivial abstractions are, to some degree, leaky. See also Hyrum’s Law.Law of the Second FloorBuilt upon Dunbar’s Number, the law of the 2nd-floor states that no person two levels above or below you on an org chart really understands what you do for a living.Least Power (Rule of)A design principle that suggests choosing the least powerful [computer] language suitable for a given purpose.Lindblom’s RazorNever attribute to incompetence that which can be adequately explained by systemic issues. See also Hanlon’s Razor.Lindy Effect, TheThe Lindy effect proposes that the longer something, like a technology or an idea, has survived to exist or be used in the present, the longer life expectancy that thing will have. The concept is named after Lindy’s delicatessen in New York City. The Lindy effect has subsequently been theorized by mathematicians and statisticians, including Nassim Nicholas Taleb. This is also known as “Lindy’s Law”.Linus’s LawGiven enough eyeballs, all bugs are shallow. Formulated by Eric S. Raymond in his essay and book The Cathedral and the Bazaar in honor of Linus Torvalds.Lister’s LawPeople under time pressure don’t think faster. Attributed to Timothy Lister.Metcalfe’s LawOriginally attributed to Robert Metcalfe, Metcalfe’s Law states the effect of a network is proportional to the square of the number of connected users in the systems. While coined to describe the value in connecting compatibile communication devices in the era of the Ethernet, it has carried over and applied to describe users within a social media system.Moore’s LawThe observation that the number of transistors in an integrated circuit, or CPU, doubles approximately every two years. Attributed to Gordon Moore, the co-founder of Fairchild Semiconductor and CEO and co-founder of Intel. See also Huang’s Law.Murphy’s LawAnything that can go wrong will go wrong. Named for Edward Murphy.Ninety-Ninety RuleThe first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development. Yes, that is supposed to add up to 180%. The rule is attributed to Tom Cargill of Bell Labs and popularized by Jon Bentley.Niven’s Third LawIt is easier to destroy than to create. Part of a series of laws named for science fiction author Larry Niven.Occam’s RazorA problem-solving principle that is paraphrased as “the simplest explanation is most likely the right one”. Attributed to English Franciscan friar William of Ockham.Parkinson’s Law of TrivialityAt any board meeting the amount of time devoted to an item on the agenda will be the inverse proportion to the issue’s difficulty. Said another way, “The time spent on any item of the agenda will be inverse proportion to the sum [of money] involved.” Named for C. Northcote Parkinson. See also Bike Shedding.Peter PrincipleEmployees tend to rise to their level of incompetence. A management concept developed by Laurence J. Peter.Postel’s LawNamed after Jon Postel from his work on TCP/IP, the Postel law says computer protocols should be strict in what is sent and forgiving in what they accept from others. Also known as the Robustness Principle.Principle of Good EnoughAlso known as the “good enough” principle. A rule in software and systems design that says consumers will use products that are good enough for their requirements, despite the availability of more advanced technology.Rule 34Rule 34 is an internet meme which states, “If it exists, there is porn of it. No exceptions.” Thought to have originated from a comic drawn by Peter Morley-Souter.Singh’s Inevitable AvoidanceWhen organizations don’t know how to solve their problems, they will tweak their process to accommodate their dysfunctions. Spotted by Tim Ottinger and attributed to Asshok Singh.Socratic ParadoxA saying, attributed to Greek philosopher Socrates, stating, “I know that I know nothing”. It is derived from Plato’s account but not one that Socrates ever recorded as saying.Sturgeon’s LawNinety percent of anything is crap. Coined by Theodore Sturgeon, an American science fiction author and critic.Sunnyvale PrincipleThere’s never time to do it right, but always time to do it over. Attributed to Jack Bergman.Sustrick’s LawA law that states that well-designed components are easy to replace and that, eventually, they will be replaced by ones that are not so easy to replace. Attributed by Martin Sústrik and first coined on his blog when talking about the complexity of most legacy codebases.Tesler’s LawEvery app has an inherent amount of irreducible complexity. The challenge is how to deal with it. On the surface, spending a development week to save a minute on a common task may seem unjustifiable. However, if there are a million users, the consumer is penalized for making the engineer’s job easier.Said another way, “Complexity can neither be created nor destroyed, only moved somewhere else.”Universal Scaling LawNeil Gunther extended Amdahl’s Law based on observations of performance measurements from many machines. He derived the Universal Scalability Law, which is a mathematical formula which determines relating relative capacity or the normalized throughput given an applied load.Weiler’s LawWeiler’s Law says that “nothing is impossible for the man that doesn’t have to build it himself.” It comes from the fictional book “Malice in Blunderland” by Thomas L. MartinWirth’s LawSoftware is getting slower more rapidly than hardware becomes faster. Named after Niklaus Wirth who discussed it in his 1995 article, “A Plea for Lean Software”.Yak ShavingRefers to a task that leads you to perform another related task and so on, with each subsequent task leading one further from their original goal. This continues until, eventually, you find yourself shaving a yak. Coined by Carlin Vieri after viewing an episode of The Ren and Stimpy Show featuring “Yak Shaving Day”. Can appropriately be applied to Donald Knuth, who stopped writing his masterwork, “The Art of Computer Programming”, to write a better typesetter, TeX. Ten years later Knuth resumed writing the book.Zander’s LawFrom the book The Art of Possibiity, Zander’s Law says “Don’t take yourself so goddamned seriously”.Zawinski’s LawEvery program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can. Named for American computer programmer Jamie Zawinski.Zeno’s ParadoxThe belief in change actually occurring is a mistake, and that any motion forward is nothing but an illusion. Thought to be devised by Greek philosopher Zeno of Elea.Zipf’s LawZipf’s Law refers to the fact that for many types of data studied in the physical and social sciences, the rank-frequency distribution is an inverse relation. It was named after the linguist George Kingsley Zipf. For example, the most frequent word in a language will occur about twice as often as the second most frequent word, three times as often as the third most frequent word, etc. Oddly, the same relationship occurs in many other rankings, unrelated to language, such as the population ranks of cities in various countries, corporation sizes, income rankings, etc",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-08-03T00:00:00-05:00'>03 Aug 2020</time><a class='article__image' href='/2020/08/03/Technology-Aphorisms'> <img src='/images/2020/08/commandments_midjourney.png' alt='Technology Aphorisms'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020/08/03/Technology-Aphorisms'>Technology Aphorisms</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Leading People in Crisis",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2020/07/22/LeadingPeopleInCrisis",
      "date"     : "Jul 22, 2020",
      "content"  : "Update, 7/22 - At the same time I was posting this, Cassie McDaniel published “Everyone’s Sad and Getting Sadder”. It wonderfully expresses some of that which I brushed past on the way to solutioning.Update, 7/23 - Microsoft has published compelling data on new remote work trends. Revelations include that “managers are enabling employee resilience through this disruption. Employees across our team saw their work hours spike after the shift. But looking at one-on-one meetings, a key connection point in the manager-employee relationship, we found that the employees who averaged the most weekly one-on-one time with their managers experienced the smallest increase in working hours. In short, managers were buffering employees against the negative aspects of the change by helping them prioritize and protect their time.”Being responsible for employees is challenging, even in the best of times. It is something else entirely to care for people during simultaneous health, inequality, justice, governance, economic, and education crises caused by Covid-19. We, collectively, are undergoing a transition to something else. Like with many transitions, there is discomfort.When stressed, fight-or-flight reflexes engage. Our minds brace for an oncoming challenge. However, with this global pandemic, there is no enemy to overcome and no timeline for resolution. We remain on high alert for an all-clear that won’t come. Further, previously simple actions, like going to the grocery store or getting a check-up, are filled with new and unfamiliar processes that generate additional micro-bursts of stress.We’re shadowboxing with history. It is no wonder we’re exhausted each evening.For your team, dealing with Covid-19 is more than just virtual happy hours and disrupted travel plans. Uncertainty breeds anxiety, no matter what your resilience level was going into this year. About one-third of Americans have exhibited signs of anxiety or depression in the wake of Covid-19.  And anxiety erodes our energy, patience, and ability to absorb new information. It does so, slowly, at first, but this prolonged experience aggregates into significant mental health concerns.Here’s what I’m doing to care for my team during these times.Keep Up Lightweight Check-ins, But Let Them LeadThis transition requires all of us to process a lot. Even with a great rapport, your co-worker may not have the time, energy, or ability to articulate what they need. Respect your team member’s choice if they aren’t ready to talk. In that case, impress on them that epiphany has no deadline. When they’re ready, you’ll move mountains to meet them.Continue your regular cadence of check-ins, but let them tell you what they need. Ask a multiple-choice question designed to require as little energy, on their part, as possible:  “Just wanted to check-in. Would it be more helpful to keep our one-on-one today, reduce it to 15 minutes, or skip it? I’m happy no matter what— just want to make sure you have what you need.”Strike “How Are You?” From Your OpenerIf your team member does opt to meet, avoid the weak “How are you?” or “How you doing?” opener. It will, most likely, result in a reflexive “OK”. Instead, prepare questions that will provide additional insight and present more profound opportunities to help. Lara Hogan is a management coach. She lists several excellent items appropriate for 1-on-1’s during this time. Some examples include:  What’s been working for you so far?  What’s been the hardest? What’s been the most surprising thing during this time?  What’s your north star?  What’s one thing you want to experiment with right now?For more questions, check out the Elizabeth Weingarten article, “20 Questions to Ask Instead of ‘How are You Doing?’”.Be PresentOnce you’ve engaged, apply active and empathetic listening.  Everyone needs something different right now. Don’t presume to know what challenges are occupying your people’s head space.Look into the camera rather than sidelong at yourself in the video. Avoid scrolling through email. Close Slack. Turn off text notifications. These meetings are not to bolster your hierarchical imbalance through the zillion alternatives you could do. This time is about them. Catharsis through connection is possible only through focus.You may not be able to solve every problem. You shouldn’t attempt to spin what you’re hearing into a silver-lining. And never, never, invalidate what the individual is thinking or feeling the first time they’re attempting to process, out-loud, what is impacting them.Avoid the Cliches or False BravadoProviding hope or expressing wishes for the future is one thing. Inauthentic promises or thoughtless chest-beating will create distance from those who have a different perspective.There is a business management playbook filled with cliches. War metaphors, in a time with unprecedented death, ring particularly hollow at this moment:  “Rally the troops.”  “Let’s win this battle!”  “This is our fight.”  “Weaponize this opportunity!”  “Who’s killing it?”It’s OK to admit that you might not have answers for a once-in-a-lifetime event. It’s OK if your team isn’t fired up to storm the beaches of Normandy. Admitting “I don’t know” and allowing oneself to be vulnerable goes a long way toward connecting and creating authentic relationships.Offer positive feedback and encouragementDr. David Rock, who has a doctoral degree in neuroleadership, says Covid-19 has made people hyper-sensitive to their standing. Through this filter, normally benign questions are now interpreted as negative or even discouraging.Proceed thoughtfully. Instead of asking, “Why is your delivery late?”, which may be inferred as a personal attack, reframe it as, “What’s happening with this project?” It’s not about lowering expectations or letting performance slide. This shift in language is about acknowledging the sensitive spot people are in and reducing anxiety, not making it worse.Strive to Create CertaintyAmbiguity heightens stress. The more variables you can remove from employees’ lives right now, the better. Lara Hogan has another piece on Creating Predictability and Stability in Times of Rapid Change.One approach for creating certainty is sharing information. Sharing helps create certainty and builds trust, even if that news isn’t always positive. Research shows that children can deal with almost any disappointment if provided with appropriate support. However, if children feel that they were lied to, they will act out. Similar dynamics exist between a leader and their team.Accept We’re All Human in a CrisisA recent Wall-Street Journal article called for a return to an idealized professional esthetic:  “No more dogs, chips or lurkers — as video-conferencing becomes a fixture in working life, it’s time to shed the rookie moves.”Perhaps if everyone had chosen their current work predicament, I’d agree. However, not everyone has the optimized quiet place. We’re all distracted, doing the best we can with those we’re surrounded with, who are also going through a thing. We’re humans in a crisis.Re-asserting workplace norms adds undue performative expectations on those already struggling. When we feel like we have no control or choices, even a small stress becomes overwhelming. Leaders should offer unexpected autonomy and flexibility. Relax the always-on camera requirements. Or forgive the hastily assembled lunch on the part of a busy parent. And honor those aspects of human experience - delivery person interruption, pets barking, kids video-bombing - that remind us these aren’t just workplaces, but our lives co-opted into a global event.Take Care of Yourself, TooYour employees aren’t the only ones dealing with volatile levels of attention and energy. Your reserves are also being siphoned.To best serve them, it is vital you’re managing yourself. That may mean not scheduling the back-to-back-to-back marathon meetings that you’d typically be able to do. It may mean saying no or pulling back on worthwhile, yet not primary, initiatives. It might mean being an example and figuring out how staycations work, not because you need more time at home, but because you’re illustrating how important mental breaks are for the marathon we’re running.ConclusionRelationships rooted in psychological safety are like an oak tree: the best time to plant them was years ago. The second best time is now. If you haven’t spent the time to cultivate trust, your employees are less likely to share what they’re struggling with. That makes it harder to help.The way that people choose to lead will be remembered for years to come. Some leaders are just trying to command through goal setting and stretching people to their limits. Then there will those exhibiting empathy, making sure that people feel heard and are taken care of for the long haul.Be that latter type of leader.The road ahead.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-07-22T00:00:00-05:00'>22 Jul 2020</time><a class='article__image' href='/2020/07/22/LeadingPeopleInCrisis'> <img src='/images/2020/07/parade_stablediffusion.png' alt='Leading People in Crisis'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020/07/22/LeadingPeopleInCrisis'>Leading People in Crisis</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs are Arrangements of Power",
      "category" : "",
      "tags"     : "Presentations and Software Governance",
      "url"      : "/2020/07/09/APIsAreArrangementsOfPower",
      "date"     : "Jul 9, 2020",
      "content"  : "I presented “APIs are Arrangements of Power” at the 2020 APIDays Interface conference. It was my first virtual conference and a very different experience. How I prepared for that context is a different article. For now, the slides and script are below.Title Slide(Office Photo by Ali Yahya on Unsplash)I am Matthew ReinboldHello, everyone. I hope that you and yours are healthy and safe during this interesting time. If there is a sliver of a silver lining to all of this, I think it’s doing things like this gives some extra context and insight into the type of people you might otherwise only interact with online.Welcome to my workshop and creative space. My name is Matthew Reinbold. As was mentioned, I work for Capital One. I am the Director of the Platform Services Center of Excellence. That’s a lot of words. It means that my team and I work with our 9000+ developers on thousands of APIs that answer 3.5 billion calls a day. It is a large ecosystem that we steward. We’re also increasingly involved with things like standards and processes and training around data transformation and event streaming. It is a role that cuts across the entire company and collaborates with numerous disciplines.I also write Net API Notes, a regular, weekly email newsletter that just celebrated five years. There I chronicle the comings and going of an industry in flux. Talking about one API, or even a handful is one thing. The challenge of managing thousands is something different. I’ve seen what it takes to go from API theory to practice.Where to find me, along with a hashtag for social media, is in the footer of each slide so we can continue the conversation even after my time is up here.AgendaThere’s plenty of blog posts, videos, and presentations - some at this very conference - that go DEEP on technical and tactical aspects of delivering APIs. That is useful. However, many of us who have been involved in the space for a while have realized that just mindlessly copying someone else’s tech stack isn’t enough to guarantee success. Just because you’ve implemented all of Netflix’s open-source projects or replicated Amazon’s cloud infrastructure doesn’t mean you’re going to be successful in delivering business value.Why is that?It is because APIs are more than just technology. It has so much more to do with how an API strategy manifests within the people responsible for carrying it out.This talk is for anyone that cares about creating better, more well-designed software - not just APIs. To do that, we’re going to have to architect people, not only machines. And, in the process, perhaps redefine your expectations of the role API governance.Part 1: The Power of Organizations on ArchitectureConway&#39;s LawIn 1968, Melvin Conway published a paper entitled “How do Committees Invent?”. He proposed that the way that an organization was arranged directly and dramatically affects how software is made.That early anecdotal observation was later supported by quantitative research. It stated that:  Organizational distribution and product modularity are correlated  Products really do end up looking like the teams that create themSuppose that a company has two development teams that rarely talked with one another: one supporting the warehouse and another supporting the back office. If you set out on an API journey, Conway’s Law predicts that the resulting architecture from those teams would consist of two APIs: one for the warehouse, one for the back office. This despite the fact an external 3rd party wishes to integrate with your single company, not your org chart parts.Organizational Structure Impacts Code QualityBut the organizational arrangement doesn’t just affect modularity.  It turns out that organizational complexity is also the greatest determining factor for how buggy a piece of code is.  The more complex the organization is (due, in part, to how removed decision-makers are from implementors) the worse the code is.(The Microsoft Research Study mentioned here.)Organizational Structure Impacts Delivery PerformanceAccelerate: Building and Scaling High Performing Technology Organizations, published in 2018, cited organization arrangement as a key contributor to achieving delivery performance as well as for whether the engineering organization can scale.  “If we achieve a loosely-coupled, well-encapsulated architecture with an organizational structure to match we can achieve better delivery performance… and substantially grow the size of the engineering organization and increase product lineraly.”Organizational Structure Impacts MoraleTeam Topologies is another book dedicated to organizational arrangements. It also happens to be the best API book that I’ve read thus far this year, despite not marketing itself as an API book. The authors agree that it isn’t just getting the technology right. Designing the organization that utilizes that technology is just as important.  “Never before has explicit sociotechnical design been so important.”I say more on that $5 word, “sociotechnical”, in a few minutes.Organizational Structure Accounts for 90 or 95 Percent of PerformanceW. Edwards Deming was an American engineer and management consultant. He is often credited as one of the inspirations for the Japanese post-war economic miracle of the 1950s. When it came to organizational arrangements, Deming said:  “The fact is that the system that people work in and the interaction with people may account for 90 or 95 percent of performance.”When I talk about mindless copying, when I talk about those teams that take everything that Netflix has done and jam it into production, when I talk about turning on every toggle in the AWS interface in the hopes of achieving the same kind of success I talk about failure to acknowledge what Deming says. It is one thing to imitate the technology. However, that is such a small aspect of what it takes to deliver value.Designing better APIs means first recognizing, then addressing Conway’s Law.Three Ways Conway&#39;s Law Affects API GovernanceI want this presentation to be additive. I want it to build on stuff that is already out there. That does mean that it comes with a bit of homework if you’re interested in learning more.At the 2016 API Strat Conference, I presented “3 Ways Conway’s Law Affects API Governance”. In that talk I gave three different ways the organizational makeup affects the API design. If you are passionate about this stuff, I encourage you to seek that out and learn how hierarchy, geographical organization, and 3rd party lines of communication end up changing the API design in specific ways.buffer&#39;s story is one of organizational arrangementI want to provide at least one new example, as well. That comes from Buffer. Buffer is a social network management platform. In late 2015, Buffer acquired Respondly, software that enabled social media teams to respond to customers. Buffer’s technical leadership now found themselves managing two monolith architectures. These two products, Buffer and Respondly, were not connected in any way. Despite offering complimentary products, the organization’s arrangement meant there were significant challenges to delivering business value. The organizational communication structure was negatively impacting the ability to provide obvious customer value that spanned both offerings.In March 2017, Buffer re-imagined itself as a platform that would support multiple complementary products. The technical team realigned themselves into groups responsible for core functionalities: billing, sessions, centralized storage of a user’s social media account connections. On top of that they reorganized both their architecture and additional teams around customer’s jobs-to-be-done: Publish, Reply, and Analyze.To deliver the most value to the consumer, Buffer needed to change its architecture, which necessitated a change to its organization.(The buffer story comes from this Increment.com article)Part 2: The Power of Architectures On OrganizationsDevelopers Are Doing Just As Much Work in Building Companies As CodeBy this point, I hope I’ve convinced you that the arrangement of the organization, specifically how it communicates, impacts how software is made.But can we go the other way? Can the architecture drive organizational change? Or does it always have to start with the organization?Vicki Boykis is a data scientist and technology essayist. In her June 6th newsletter, she wrote:  “Something happened in the last 30 years where developers transformed from some nerds sitting in the company’s basement, to the driving force of the company itself. Developers now have a lot of power, and, consequently, are doing just as much work in building companies as in building the code.”Feng shui is a design practice that attempts to use the arrangement of objects to harmonize people in their surroundings. Likewise, APIs are an arrangement of power. Designed with purpose, the arrangements have the power to shape organizations.Sociotechnical Systems Optimize Both People and TechnologyDesigning arrangements with purpose is not a new concept. The relationship between people and systems has been studied for some time. The field of Sociotechnical Systems Engineering dates back to World War II. The word “sociotechnical”, which I mentioned earlier, refers to the interrelatedness of an organization’s social and technical aspects. It seeks to optimize both the people and machine in order to improve performance and work-life quality.Taking a sociotechnical system approach, an API practice attempts to identify the systematic power arrangements that exist within an organization.As explained earlier, these factors can have an enormous impact on the software produced. And yet, if it is as powerful as I suggest, why do we so rarely see this?You Can&#39;t Out-Tool a People ProblemIf I were to speculate, I would guess that the messy, complicated work with people is something outside of most engineer’s training? Or, perhaps, it is something that is derisively regulated to “the humanities”. Or maybe it is because people are used to thinking about individual pieces, and rarely of a system as a whole.Whatever the reasons, given the power that organizational arrangements have to deliver quality code, that is a shame. It is also a vast, untapped area of improvement.Donella Meadows was one of the foremost system thinkers. In her both her educational work and book, “Thinking in Systems”, she repeatedly impressed the importance of communication above all else.  “The scarcest resource is not oil, metals, clean air, capital, labour, or technology. It is our willingness to listen to each other and learn from each other and to seek the truth rather than seek to be right.”Ultimately, this is why copycatting fails. All the importing of another company’s open-source toolkits, their deployment playbooks, and their tech does nothing to address the interpersonal-communication of the groups implementing them. Said another way, it doesn’t matter how silver the bullet is if the gun continues to misfire.Part 3: The Inverse Conway ManeuverUsing architecture as a beachhead for changing the organization has a name. The Inverse Conway Maneuver is where the architectural needs required for consistent, cohesive design and fast flow are considered first. The organization, subsequently, is built around that.(Photo by Bob Fisher on Unsplash)Change HappensChange happens all the time, even to organizational arrangements. Sometimes it is not the way we want it. Sometimes it is not at our preferred pace. But change occurs in ways both tiny and epic.The apocryphal story of the Bezos memo is one such example. As the story goes, one day in 2003, Jeff Bezos required that everyone create API interfaces for their services. Anyone who didn’t do so would be fired. If that sounds harsh, it is ok; the email ended with Bezos wishing the recipient a lovely day. Kind of a passive-aggressive thing going on there, but it seems to work for them.That change in how the organization communicated among itself set the stage for AWS. The Bezos memo stated that the company needed to change its architecture to take the organization to where it needs to go.However, as head of Amazon, Jeff Bezos had the hierarchical power to declare that kind of change. Where do you begin if you’re somewhere else other than the top within the org?As you might expect, this is a big topic, and there is only so much I can cover in a 20-minute conversation. The road you will travel is dependent on your context. However, I want to briefly cover two useful approaches in the time we have left. They are (1) Shrinking the Change and (2) Scripting the Critical Moves.(Origins of the Bezos Memo are available online)Shrink the ChangeThe two techniques I’m covering are from a book I have pictured here, called Switch. I highly recommend it not just for these two approaches but also for the number of illustrative cases it presents.The first technique is shrinking the change. Upending organizational arrangements might be necessary. But starting with an intent that large will be met with proportional resistance.Instead, shrink the change and, in the process, you’ll shrink the likelihood that people will say no.  Can’t change an organization? Start with your line of business.  Can’t change your line of business? Start with your program.  Can’t change your program? Start with your team.  Can’t change your team arrangement? Start with how (and whom) you communicate.So much of this is about the complexity of our daily communication. How regularly do the API implementation teams talk with the primary stakeholders? Are their intermediaries involved? Do groups talk past each other while emailing attachments? Are the same people always at the table? Or are new pathways being forged by the purposeful and ongoing discovery on your part? Are you building relationships in places where none existed before, are new opportunities presenting themselves?Even if through informal conversations, changing access to information is a precursor to those affordances being codified in an interface. It is also the first step to organizational change. It can also be as simple as buying someone a coffee or (these days) having a video meet-n-greet.Script the Critical MovesAnother idea is to script the critical moves.Many people, especially during a global pandemic, don’t have a tremendous amount of bandwidth for the unknown. We are dealing with unprecedented, low-level, and persistent stresses. The ambiguity of the unknown saps our energy and lessens the likelihood of new pursuits. The appetite for the potentially ambiguous just isn’t there right now.In this environment, providing the explicit, incremental steps for change may be necessary. A level of prescriptive detail lightens the lift for, otherwise, distracted, distraught, and disengaged teams.One of the things I’m currently working on with James Higginbotham is a prescriptive process for teams to design bounded contexts. There is an ocean of tips and techniques out there for how to do this already. However, right now, for our audience,  telling people to boil that body of water to find something pure that works for them is too much. We need to script the critical moves.Maybe there are alternatives to what is in the prescriptive plan. Perhaps some of those alternatives might be better in certain contexts. For those that don’t have the bandwidth for that exploration, however, we’re providing a roadmap to get them moving. We’re attempting to make getting started as easy as possible. We’re scripting the critical moves.I also mentioned the Team Topology book earlier. I appreciated this book because it takes an infinite number of team arrangements and asserts four specific, followable team types. There may be other arrangements. Your mileage may vary. However, for those looking for an example organizational structures, the Team Topology book is also an example of scripted critical moves.Git Gud at the PeoplesLet’s get real for a moment.I know changing organizations may not have been what you signed up for when you assumed responsibility for your APIs. I suspect that the reason you chose software development was the hard certainty of 1s and 0s, rather than swishy, unpredictable nature of the people around you.However, there is a problem. We spend thousands of dollars on ongoing training. We accumulate hours and hours of precious time getting certified and accredited. Back when it was still a thing, we even traveled across continents to learn the esoteric ins and outs from others. Yet, when it comes to interpersonal communication, the thing that we do every day, we can’t be bothered to Google improvements?That’s wrong.We deal with people. We spend our time and budget optimizing machines, but it is the people that matter. It is the people that determine the success or failure of our efforts.Working with people to build a better organizational structure is a skill like any other. It can be learned, but only when our API designers and architects stop ending at the interface and start entrepreneuring sociotechnical relationships. Your organization’s ability to deliver business value reliably, scalably, in the face of accelerating change depends on it.Change is not Kubernetes. Change is not a service mesh. Change happens with people. That is why it is time to git gud on the peoples.(Photo by Nicholas Green on Unsplash)Part 4: ConclusionAPI Governance is a Sociotechnical FunctionWhen it comes to software systems, many conclude that API governance is a checklist, or a set of rules that must be applied. While the enforcement of common practice on something like an OpenAPI description of intent might be a tactic of governance, it is not a strategy.Governance broadly refers to who decides what is in a platform’s ecosystem. Said more generally, governance is a framework for how we choose to co-exist. Checking for naming inconsistencies and implementation detail leakage out through the interface is one thing. I’m challenging you to get to a higher level. That level is to be a organizational designer.The invitation to co-create these arrangements changes the way information flows in a company. Changing the way communication flows is a precursor for changing behavior, and changing behavior is a precursor for changing the organization itself.The book “Platform Ecosystems: Aligning Architecture, Governance, and Strategy” has a number of profound statements on this area. The chief one is:  “The architecture of a platform is inseparable from how it ought to be governed.”That is the real power of API governance.Further ReadingThere are many books in this space. If you are interested in work being done around organizational arrangements and their effect on value creation check out:  Accelerate  Team Topologies  Thinking in SystemsThere is also a fair amount written on change management. Many of them are related to individuals but the ones that I’ve listed here can also apply to organizations.On Change  Switch: How to Change Things When Change is Hard  Agendashift: Outcome-Orientated Change and Continuous Transformation  More Fearless Change: Strategies for Making Your Ideas Happen  Tiny Habits  Blue Ocean Strategy (the latter third)Thank You for Your AttentionThat’s it! My name is Matthew Reinbold. I hope you’re safe. I hope you’re healthy. And I hope to talk with you again soon.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-07-09T00:00:00-05:00'>09 Jul 2020</time><a class='article__image' href='/2020/07/09/APIsAreArrangementsOfPower'> <img src='/images/2020/07/boss_midjourney.png' alt='APIs are Arrangements of Power'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020/07/09/APIsAreArrangementsOfPower'>APIs are Arrangements of Power</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "API Management Questions",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2020/05/13/APIManagementQuestions",
      "date"     : "May 13, 2020",
      "content"  : "Background IntroductionAdam DuVander, a Portland raconteur and all-around good fellow reached out several months ago. He was writing an article and hoped I could answer a few questions on enterprise API management. A few of my quotes, along with insight from a handful of others, have since been posted in a piece entitled “API Experts Share How They Organize Thousands of APIs and Microservices”.The choicest bits made it into the piece. However, behind the scenes, I bloviated enough to populate a standalone piece. Here’s the entirety of my replies, tweaked and updated for clarification.The questions have to do with how companies manage their internal API portfolios. These are collections that, particularly in the age of microservices, grow at exponential rates.Q1: How does an engineer discover what internal APIs already exist?The ProblemAPI architectures are useful for several reasons. Benefits include organizing the complexity of an enterprise environment, allowing for independent deployment, dividing labor, and achieving faster times to market. Despite these advantages, however, moving from monolithic software deployment does cause discovery problems. Where there was once a single mass to inspect, there are now many homunculi to track down and interview. This is a problem, regardless of the development shop size.A centralized API registry for service discovery should be the source of truth. This single catalog not only benefits integrators looking to kickstart new experiences; it also is vital for data and regulatory appeasement (GDPR, CCPA).As Luis Weir points out in his book, “Enterprise API Management”, many companies, unfortunately, don’t have this single portal discovery experience. The discovery process, in these orgs, relies on tribal knowledge and shared spreadsheets.One needs to design the discovery experience, not just for external APIs, but for internal ones, as well. There are many examples, often retold, for excellent external experiences. What isn’t covered nearly as much is the internal discovery experience. Whether this is a dedicated portal meticulously maintained by a dedicated platform team or a list (or list of lists) of APIs in a spreadsheet, this discovery experience should be managed. Knowledge management is an undervalued discipline; if you have access to talent in this area, use them in creating this experience!Automation Can Take Multiple FormsWhether it is one portal or many, relying on “good faith” efforts aren’t scalable. Pleading for harried developers to “do the right thing” and “create some docs” doesn’t work. It, at best, results in the same stale documentation that plagues so many company content management systems. The process for data entry to the registry must be as automated as possible. Thankfully, automation is possible through standardized lifecycle management and process enforcement through uniform API descriptions, like OpenAPI.Another approach is to have the runtime gateway environments “phoning home” to a centralized registry. The description of the business intent would be more abstract. However, identifying highly trafficked or critical infrastructure would be a place to start building out more robust management rigor.Duplication of Work Will Happen; The Degree to Which this is a Problem is DebatableThe Continuous API Management (CAM) book, by the dearly departed API Academy, fingers internal API duplication on poor discovery ability. However, in my experience, this is an oversimplification. Even with a comprehensive catalog of APIs, development teams may seek to minimize their dependencies. This includes other people’s APIs (see point #2 in my talk, “Three Ways Conway’s Law Affects API Governance”). Internal APIs do not have the same market-force natural selection to pick winners and losers. Other sociotechnical systems engineering approaches need to be brought to bear.How do you ensure new APIs are consistent and meet guidelines?Consistency of Design Starts with Consistency of LanguageBefore consistency can happen, we have to have a clear medium of exchange. The consistency of design starts with the consistency of language. Are the words “policy”, “guidance”, and “standards” all used interchangeably? What about “resources” and “endpoints”? Are “methods”, “actions”, and “verbs” all the same thing? Or do they have different meanings? Observe the language the business uses and create consensus where there is none. This is a foundational activity before guidelines can be built. It is also ongoing.Pair Design Requirements to Organizational OutcomesThe next step is to understand the organization’s goals. Guidelines are a means of driving teams a particular direction, but to where? Guidelines without a destination, that don’t drive an organization to a better place, will be ignored. Are new integrations taking too long because of incomplete (or even contradictory) affordances in the interface? If so, we now have an outcome (or perhaps even KPIs) to shape guidance.Enforcement is Not an All or Nothing MatterWith guidelines matched to outcomes, we can start enforcement. There is a spectrum. One extreme is gatekeeping. This is where an API is not allowed into an environment (development, QA, production, etc.) without ‘approval’ by a company-sanctioned group. This group is responsible for ensuring that guidelines are met.Automation can help here, as well. Tools like Spectral can detect deterministic rules. These are cases where a team’s design attempts to submit a body as part of a GET operation. However, more subjective criteria, like whether “chAccPwChangeId” is self-descriptive and easily understood to the target audience, may still require human judgment.The gatekeeping approach is the simplest to implement and the easiest to understand, particularly in highly regulated industries (to prevent the bad outcomes from happening a sanctioned party reviews all the things). However, this approach introduces an organizational dependency on software development. It also can be discouraging, particularly for those that self-identify as highly-skilled, empowered individuals.The book, “Team Topologies”, presents an alternative approach. Rather than mandating a gate, the intent is to create a desire for mastery across all constituents and then help them get there (this pursuit of mastery better aligns with the self-image mentioned above, and thus, is more empowering). Skewing on this this side means the emphasis goes from up-front prevention to ongoing internal evangelism and a service interaction models by a supporting API team. Successfully deploying, maintaining, and demonstrating effectiveness of this model is incredibly challenging, however. It is why, I believe, I haven’t seen it implemented nearly as much.Guidelines are a Process, Not a Stable End-StateFinally, any guideline program needs a well-established and continuously practiced feedback mechanism. The market changes, developer maturity changes, and the organization’s goals change. So too should the guidelines change to reflect that reality. The process for continual co-evolution of the guidelines is so much more important than the given guidelines at any one specific point in time.Organization of digital assets is as important as physical ones.How should “legacy” APIs be treated differently?It is highly unlikely that any guideline or standards process is starting greenfield. Organizational leadership may be surprised by the number of interfaces, and the data exchanged through them, that already exist at the onset of a cataloging effort.When it comes to building a catalog, the first priority, even above adherence to standards, is being listed. Once listed, an API governance team can begin a process of ‘eventual consistency’ to guidelines. This is where the API is discoverable but listed as out of compliance. When the team begins work on the next breaking version, reconciling incompatibilities can also happen since the client will have to modify their code to accommodate the new version anyway.I’m not fond of “burn the boats”, all-or-nothing transformation initiatives. Even if these “legacy” APIs are not the way we’d do them now, they are still providing business value to someone (hence their continued existence). Cataloging, with an understood path forward, enables that quirky part of the corporate ecosystem to be studied and understood. As stewards of these complex systems, we’d do well to learn from the complex accretions that occurred. This is opposed to ignoring a company’s legacy to declare a fleeting ideological victory.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-05-13T00:00:00-05:00'>13 May 2020</time><a class='article__image' href='/2020/05/13/APIManagementQuestions'> <img src='/images/2020/05/organizing3_stablediffusion.png' alt='API Management Questions'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020/05/13/APIManagementQuestions'>API Management Questions</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "A Roadmap for AI Governance",
      "category" : "",
      "tags"     : "AI, Software Governance, and Presentations",
      "url"      : "/2019/11/25/ARoadMapForAIGovernance",
      "date"     : "Nov 25, 2019",
      "content"  : "While AI may be new(ish) for enterprises, the cultural transformation challenges are not. Seeing history repeat, I put high-level roadmap for business leadership and implementing developers on the change that is happening, the challenges, and what successful town planning of this new space looks like.I’d like thank Dan Caton, and the folks at Tential Tuesdays, as being the catalyst for putting my jumbled thoughts, suspicious, and experience to words on this topic. Presenting at an event with a DJ was also a first. That’s some top-notch hospitality, right there.I’ll also enshrine to the internet archive a heartfelt thank you to Vicki Boykin. She is a data scientist and the author of the excellent Normcore Tech email newsletter. Vicki was kind enough to provide a health dose of context to my more tenuous connections. Thank you, Vicki.Now, onto the show.Title SlidePhoto by Matt Noble on Unsplash.AgendaIn this talk I am going to cover:  Why this is a critical juncture for a particular type of AI, called machine learning, in business  List where machine learning application creates risk  Present a roadmap for the ground that should be covered by a company’s AI governance program  Briefly discuss how to get started, and who should do itWhy is Matthew Reinbold talking about AI?My name is Matthew Reinbold and, for the past half-decade, I have helped multiple fortune 500 companies create more fair, equitable, and empowered knowledge communities. I create software governance that empowers digital transformation. I’ve found myself situated a unique intersection of business strategy, distributed architecture, and internal developer evangelism.I started my career building developer communities of practice. I also continue to do a fair amount with APIs. In addition to blogging at my website, https://matthewreinbold.com, I write an email newsletter called Net API Notes. I curate a list of in-person events for API folks at Web API Events and wholesomely Tweet.Between 60-80% of software transformation efforts fail. With my help, however, Capital One embraced an API platform concept, going from zero to 3.5 billion daily messages passed. My team and I did this while maintaining design consistency and cohesion, maximizing lifetime ROI and minimizing risk.After creating a thriving culture of APIs at Capital One, I generalized my approach for any digital modernization effort within an enterprise. As I assess upcoming challenges successfully building a data-driven culture, one in which machine learning can thrive, is a big one.Wild West Ghost TownSimon Wardley is a researcher for the Leading Edge Forum. He popularized the concept of Pioneers, Settlers, and Town Planners. It is a way of thinking about technology adoption within a company. Briefly:  Pioneers, as the name implies, discover uncharted territory. Their work is precarious, and they take numerous wrong turns along the way. This is deep research, hard to explain, and harder to understand. However, this is the work that leapfrogs what is possible.  Settlers follow the pioneers, taking chance encounters and precipitous routes and creating repeatable, predictable certainty. They turn prototypes into products and products into profits.  Finally, Town Planners take what is settled and grow it. They scale communities and provide the stable launching points for the next group of pioneers.The wild west of high-end research labs is giving way to the more humdrum of daily application and tedious ROI discussions. And that transition is causing some discomfort.Photo by Eniko Polgar on Unsplash.Inflection Point with AIAnytime you combine immense potential, technical complexity, and cultural discomfort, you end up with headlines like these. It is telling when my 91-year-old Grandfather’s is scared about AI destroying mankind, due to the technical nihilism in his daily reading. Whether it is Elon Musk declaring the end of humanity or the Pope discussing Clippy’s mental state, many pixels have been burned hypothesizing the wild west we’re in.There’s anxiety we’re on the verge of losing control.Title SlideBefore I can talk about practical, town planner solutions, I first need to ground our conversation. That means addressing the ad-driven, click-bait hysteria around AI.No, Skynet and Terminator-style robots are not imminent. The kind of general-purpose AI that we would recognize as “intelligent”, capable of comprehension and not just pattern matching, is still a significant way off. I highly recommend the book, shown here, by Gary Marcus and Ernest Davis. In “Rebooting AI”, the authors do an excellent job pointing out where hyperbole has outstripped h-indexes.If you don’t have time for a book, Kevin Kelly posits some of the same arguments in his 2017 article, “The Myth of Superhuman AI”. There’s also the IEEE’s article, ‘3 Easy Ways to Evaluate AI Claims’.AI Has Promise In Specific AreasPrinceton’s Arvind Narayan also published a wonderful talk entitled “How to Recognize AI Snake Oil”. I’ll leave exploring the entire piece as an exercise for the audience. However, I will steal his slide.Arvind correctly identifies that AI used in the pursuit of perception and classification is getting better, and useful in a number of business contexts. Where there is trouble is when companies conflate classification with predicting social outcomes.Machine Learning has Moved from Theory to PracticeMachine learning is a form of narrow AI, one which uses statistics to find patterns in data. The reason we’re feeling the impact in the areas of perception and classification now is because of the:  Greater ability to collect, store, and study data  Increased comfort utilizing and scaling cloud compute  Recent breakthroughs creation and tuning of neural networksThere will be Winners and LosersCompanies need to be data-driven to compete in an increasingly fast-paced, complex market successfully. According to an Accenture global research survey, 85% of business leaders expect AI to open up new products, services, business models and markets, while 78% expect AI to disrupt their industry in the next 10 years.Further, companies that are first to harness and apply data to business processes will experience what is known in systems design as a “reinforcing loop”. Data will create machine learning models, which will have business outcomes that can be measured, which will produce more data, etc. The first companies that implement this loop will have compounding competitive advantages. First mover advantage, here, means sustained leads for as long as the competitive landscape remains the same.While the need may be obvious, however, fulfilling this vision is hard. According to NewVantage, seventy-seven percent of companies surveyed report problems adopting big data initiatives.Further, from the same research:  72% of survey participants report that they have yet to forge a data culture  69% report that they have not created a data-driven organization  53% state that they are not yet treating data as a business asset  52% admit that they are not competing on data and analytics.Put another way: pioneers discovered a new place, the settlers demonstrated value, but most haven’t found the town planners to scale this practice.Creating a data-driven culture, one that can feed machine learning, is difficult. Many will fail.Continuous Delivery for ML is EmergingMany will attempt the transformation. However, deferring all responsibility for ‘correctness’ to practitioners will result in as many definitions of ‘correct’ as their are people in the org. Companies need to think more holistically about how they approach AI in general, and machine learning, specifically.Just managing the assets used to create a model, for example, is challenging. A successful machine learning model is data, model, and code. As a research paper from Google points out, technical debt in these systems arises not from code complexity, but from data dependencies, model complexity, reproducibility, testing, monitoring, and dealing with changes in the external world. Further, a business should be able to release new models into production at any time. It may not be necessary to release all the time. However, the ability to do so means the decision becomes a business one, not a technical one.We have well-understood processes for the continuous delivery of code into production environments; how shops apply automation, quality, and discipline to create repeatable and predictable outcomes. However, packaging and delivering the data, code, and model simultaneously is still an emergent area. See Martin Fowler’s website for more on continuous delivery for machine learning.Creating a continuous delivery pipeline not just for code, but for data and models is difficult. There will be a lot of failures before we have this figured out.Regulatory and Ethical Challenges are GrowingAnd just as companies believe they understand the landscape they need to be successful in, they discover that the landscape is changing.The last several years have demonstrated an increasing societal awareness of data and its impacts. A decade ago, ethics and fairness conversations happened, but they were limited, mostly, to policy wonk circles. Thankfully, that is not the case today and these are above-the-scroll topics for discussion; we are in a different place.States, in response, are creating legislation like the California Consumer Privacy Act. Before that was the European General Data Protection Regulation, or GDPR. I’d wager we aren’t done with these yet, either.Successfully navigating the growing regulatory regimes and changing societal moors is difficult. There will be some high profile failures (and even some unintended consequences, as we’re learning in light of the FTC COPPA fallout amount YouTube creators).Done Badly, ML Can Destory LivesWhat does a machine learning model look like when it fails? Lost opportunities, unjust systems, and destroyed lives. Worst case, as described in the MIT Technology Review article, failed algorithmic decision making perpetuates societal ills. And it does so without clear “bad-guy” to detain and publish. Often, there is little to know accountability.Many have written about algorithmic failure, at scale.  For those interested, I’d recommend:  Weapons of Math Destruction by Cathy O’Neil  Automating Inequality by Virginia Eubanks  Technically Wrong by Sara Wachter-BoettcherWhat is a Developer to Do?That is all prior to predicting, policing, and preventing all the complex interactions, post-production, between systems machine learning practitioners might not even know about or control. Expecting engineers to be experts in all of these areas is unrealistic.The challenges with AI are not just a “techie” problem. They’re not just an “analyst” problem. The complexity of this landscape is not something any single pioneer or settler is equipped to address. These problems are a company problem that requires a much broader and more systematic approach to fix.A Successfully Scaled System Requires a Different ApproachDigital town planners are skilled at growing a complex system.  These folks take their cues from urban planning, community organizing, and systems thinking. To solve complex emergent behaviors in software, they eschew causal, command-and-control approaches in favor of dynamic, community driven efforts.So just hire some of these town planners, right? Or, better yet, just tell the folks on hand to start thinking like this and get back to regular work, right?Photo by Arto Marttinen on UnsplashAI Governance?If the potential is great and the challenges well known, then what do companies struggle with this? According to that NewVangage survey I cited earlier, executives state the problem isn’t related to the technology. Rather:  “Ninety-three percent of respondents identify people and process issues as the obstacle. Clearly, the difficulty of cultural change has been dramatically underestimated in these leading companies — 40.3% identify lack of organization alignment and 24% cite cultural resistance as the leading factors contributing to this lack of business adoption.”IT governance is the people, processes, and tools deployed to ensure the effective and efficient use of technology to achieve business goals. AI governance, therefore, is a branch of IT governance to ensure the effective and efficient application of AI to achieve business goals.Effective governance is more than being a bureaucratic gatekeeper, or a barrier between teams charged with delivery and the definition of done. AI governance must address the challenge of culture change. These town planners must bridge the wide world of threats and challenges with the domain expertise of the AI modeler.Start with PrinciplesA new AI governance program doesn’t have to invent guiding principles out of thin air. The good news is that there has been a tremendous amount of well-researched, nuanced work already crafted and available for free.For example, Apple’s Security Principles require:  Opt-in consent for the use of people’s data for training AI  Employees, not contractors, to review and label samples used for ‘supervised learning’Likewise, the NeurIPs conference encourages the declaration of critical components for reproducing a result be included with any work, including  The number of models trained before the “best” one was selected  The computing power used  Links to code and datasetThe IEEE also has a book available describing a host of ethical considerations in autonomous and intelligent systems that is worth reading. Google, Microsoft, and AI Now (PDF) also have some great material available.But Success is More than a ChecklistHowever, successful governance is more than just a checklist of things to do or not do. It must holistically address the entirety of a company’s transformational journey. These town planners shouldn’t just be sharing rules and approving forms. A community of practice can group their activity into three broad categories.Understanding the EcosystemAI governance must understand the terrain they operate in; not only the dynamics that shape the landscapes within their own companies but industry and societal forces, as well. Success in this area requires:  Building team amidst ambiguity, as there aren’t many maps for these territories  Collaborating across functional boundaries  Understanding the interplay between technology, business strategy, and ethics  Identifying where AI has outsized impact on people’s livesHelping Teams Navigate the TerrainOnce the landscape is understood, governance must help their fellow employees cross, safely and efficiently. This crossing might include:  Introductory training across the entire company about AI’s importance to the company’s strategy, what it is, and how they can contribute  Gathering, like an anthropologist, the experience and best practices of people already practicing responsible AI to codify and redistribute  Empathetic listening to the fears and concerns at all levels, and carving the feedback channels back to those best able to take actionAudit/MeasurementWith the list of critical, impactful areas where AI is making a decision, it is then important to have regular, ongoing audit to prevent failures and test fitness. Areas include:  Inputs, like data quality and potential bias in training data  Model(s), including statistical tests for model fit (overfitting, causation versus correlation), model transparency (interpretable), and  stress testing against simulated data  Outputs, listing decisions with explanations, and possible outliersIn this area, I see a future, emergent discipline. It would be one part data scientist, but another part ethical hacker. They would be familiar enough with the science to understand where the edges of a model begin to break down; things like how poisoning just 0.025% of the data can have a machine learning system misclassify the target. This new job title would stress assumptions made by others.Governance has Much to DoThose are broad categories of things governance could do. However, what might that include, tactically?Resolving TensionsAn AI Governance group could be called upon when two values, seemingly, conflict. An example would be in a business attempting to create a model  for personalized recommendations. Promoting tantalizing, or outright salacious, content might increase the total amount of time users engage on site. However, what if constitutes tantalizing to one group is scandalous in others? Setting the lines here requires clarity and consensus on ethical concepts, and well-understood means for the resolution of these tensions.A whitepaper from the Nuffield Foundation explore these challenges in more detail.Defining What Constitutes a ‘Critical Decision’Factors for determining which algorithmic functions have greater risk include:  What kind of data was used?  What variables were considered?  Global and/or local interpretabilitySetting Environmental Impact TargetsMIT recently published an article claiming that ‘training a single AI model can emit as much carbon as five automobiles over their entire lifetimes’; this includes even the energy used to  manufacture the car itself.If a simple linear regression has slightly less performance, could it still be more desirable than an energy-intensive model generation? Who makes the call with whether melting the polar ice caps is an acceptable use of energy?Update 2019-12-13This recent NeurIPSConf paper makes the case for energy use accounting be a standard part of AI accontability.Update 2020-01-28Actionable steps for machine learning researchers should take to reduce carbon emissions include:  Quantifying current output  Choosing cloud providers and data center locations wisely  Reduce wasted resources through effecient algorithms, good tests, and early debugging  Choosing more effecient hardwareDefining CreepyYes, it is necessary to analyze data and machine learning for impropriety. However, that’s not the only factor at play. Designing AI-driven experiences require an understanding of where people accept machine intervention, and where people perceive a line is crossed.As discussed in his book, “A Human’s Guide to Machine Intelligence”, author Kartik Hosanagar describes how people may fully embrace algorithms for things like automatic stock management (Betterment). However, they abhor automated systems in things like self-driving cars (Tesla). Why do we trust algorithms in some cases, but not in others?One theory is that we’re happy to turn an algorithm onto a job previously performed by someone else (picking stocks) but not something performed by us (driving). While studies consistently show that algorithms may outperform humans, on average, we continue to believe that we are better than average (psychologists refer to this as the “better than average” effect).It is not a matter of “what’s at stake”. People happily board planes everyday. Airplanes have been mostly algorithmically driven for some time. Yet, somehow, cars remain a bridge too far.Creating a capable technology and having that technology accepted by an audience is two different things. Having a group that can identify these issues ahead of a costly deployment, and mitigate them will be important for successful adoption.Transparent Collaboration over CoercionNobody sets out to make an evil AI. I genuinely believe that the majority of people want to ‘do the right thing’. However, defining “right” and nudging people, as described in this 2019 Havard Business Review article, may not be enough; an enterprise’s best efforts may be perceived as patronizing or subtly manipulative.This is a particular problem for AI practitioners because they possess three common traits:  A strong sense of purpose  A desire for autonomy  A commitment to masteryNudges, to these highly trained professionals, may be perceived as threats to their autonomy or questioning their professional mastery.As a result, it is imperative that any AI governance nudge be accompanied by:  Transparency of Purpose  Co-Creation of Content  Constructive Framing (not just avoiding mistakes, but championing professional ideals)Leadership in this New SpaceThis effective AI governance, ironically, starts with people.Maybe I’ve convinced some of you to take the next step. Or I’ve suggested issues would be best solved collaboratively in your organization, rather than ad-hoc on a team-by-team basis.Despite this, getting started isn’t clear. Perhaps you feel that you’re “just a developer”. Maybe you assume that you need to be in upper management to create the kind of impact that I’m talking about.The massive changes in how organizations create software in the preceding decade are directly the result of bottom-up initiatives. Whether extending experiences and capabilities to the phone, adopting responsiveness through agile and continuous integration, or growing resiliency and ability to scale with the cloud, developers have been instrumental in defining the future of their workplaces. Yet, when it comes to something like how to relate to each other, or how we govern this new area, we hesitate. Or worse, we declare it “not my job”.If you are interested in leveraging the power of machine learning in a just and fair way, and you’re not in a position to issue top-down edicts, there’s still a tremendous amount you can do. Begin identifying those people in your organization using these tools. Begin having conversations and identifying common points of both practice and pain.Begin down the path of building a community of practice. If one does not exist, create one. Start with a Slack channel and grow from there. Begin building the momentum to create a demonstrable case to leadership for the need. Don’t wait for someone to get hurt shooting from the hip, wild-west style. Apply the type of town planner approaches appropriate for this new place.Photo by Jehyun Sung on UnsplashThanks for your attention.Photo by Zac Ong on Unsplash",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-11-25T00:00:00-06:00'>25 Nov 2019</time><a class='article__image' href='/2019/11/25/ARoadMapForAIGovernance'> <img src='/images/2019/11/map.jpg' alt='A Roadmap for AI Governance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/11/25/ARoadMapForAIGovernance'>A Roadmap for AI Governance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Visiting Carbon Offset Sites Prior to the Global Climate Strike",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2019/09/18/ComparingCarbonOffsetSites",
      "date"     : "Sep 18, 2019",
      "content"  : "This Friday, September 20th, is the Global #ClimateStrike. It is a day when millions of people will join youth activists, like Greta Thunberg, in demanding immediate climate action. This worldwide event comes ahead of the UN Climate Action Summit. To find out if there is an event in your area, check out GlobalClimateStrike.net.Striking to raise awareness is one thing. Taking concrete actions to mitigate our carbon footprint is another. Earlier this year, I talked about how I was rethinking my approach to airline travel. After writing that piece, I signed up for three different carbon offset subscription services:  Offset Earth  Project Wren  Eden Reforestation ProjectsWhich one is the best? After several months using each, here are my thoughts.First ImpressionsOf all three, Offset Earth has the clearest call to action with cute, cartoony graphics: give money, save the planet. Project Wren is similar, albeit more focused on specific initiative support.Eden Project is a more “traditional”, non-profit website. By that, I mean it has sections for ‘Mission and Vision’ and ‘Leadership’. It, too, highlights specific projects in various geographical regions. In addition to its reforestation work, the Eden Project also emphasizes the job creation that comes from its programs.The Signup ProcessOffset Earth has the most straightforward signup process. A new individual is presented with three monthly donations options. This “small”, “medium”, and “large” package size is extremely familiar to anyone that purchased freemium or SAAS products on the web.There’s also a toggle for a “family plan”, allowing some degree of customization of the recurring donation size. After selecting an option, some basic name and contact info is required to create an account. Stripe facilitates payments and the overall experience is extremely clean.Project Wren required that I answer several questions about my lifestyle and habits. This was to calculate my carbon report. After presented with the approximate size of my carbon footprint, I was then offered the ability to sponsor one of several projects, each listing its  approximate impact, in ‘cost per ton’, toward offsetting my calculated number.A Sample Set of Questions to Calculate a Carbon FootprintThe Eden Reforestation Project has a one-page signup. There are five suggested amounts. There is also options to customize both the size of the donation and whether to make recurring or occur once. Donations can be targeted via a drop-down selector, requiring that you either pick one at random or open up a second browser tab to research each elsewhere on the site. To gauge impact, Eden focuses less on tons of carbon. Instead, it cites “number of trees planted” and “number of workdays created” as crucial metrics.Ongoing CommunicationOffset EarthOffset Earth users have a shareable dashboard displaying the number of days they’ve been offsetting their carbon, the amount of carbon offset, and the number of ‘trees in the forest’. There’s an illustration showing, month-by-month, how “big” your trees have gotten.It is cute and makes a good first impression. However, I don’t know if it is something that I’ll continually visit. It also is an  approximation, as I’m told my donations have gone toward wind turbines in Turkey and improved cooking stoves in Kenya.The emails have been approximately once a month.A Representation of the Saplings &quot;Planted&quot; Because of My DonationsProject WrenThrough Project Wren, my monthly recurring donation is used for Amazon Rainforest protection. Thankfully, the site also provides an approximation of the impact this support is having in the form of the total amount of carbon offset. If you wish to go deeper, Project Wren provides a personalized carbon report based on information given during signup, with the carbon calculator (my previous travel patterns profoundly stands out here). Addition actions are suggested based on this information.I get an email at varying times during the month from “Ben”. It has included news related to the project I’m supporting along with additional calls for feedback.Eden Reforestation ProjectsThe Eden Reforestation Project allows you to sign up for a monthly, recurring donation. Oddly, this does not also create an account on their site. I receive monthly email invoices letting me know my credit card has been charged. I’ve also received a monthly email letting know about their ongoing work. However, it is not personalized; for example, there’s a ‘Donate today!’ call to action addressed to someone that is already donating. The email is also from an entity, not an individual.That said, the Eden Project was the only site where I was allowed to opt-out of email updates during the signup process. While both Offset Earth and Wren have the ubiquitous “unsubscribe from this list” links in their follow-up emails, I appreciate being given the option from the get-go.Final ImpressionsSo who is the apparent winner? The planet, of course. I can see each of these sites appealing to a different audience. Pick the one that is best for you. You don’t have to be like me, getting my kicks by diversifying my support across many simultaneous initiatives. But pick one.And, if you’re so inclined, check out the Global #ClimateStrike. Let’s turn the climate crisis into climate action.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-09-18T00:00:00-05:00'>18 Sep 2019</time><a class='article__image' href='/2019/09/18/ComparingCarbonOffsetSites'> <img src='/images/2019/09/earth_craiyon.jpg' alt='Visiting Carbon Offset Sites Prior to the Global Climate Strike'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/09/18/ComparingCarbonOffsetSites'>Visiting Carbon Offset Sites Prior to the Global Climate Strike</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Sleep, Creativity, and Being Brilliant Every Day",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2019/08/27/OtherLessonsToLearnFrom02",
      "date"     : "Aug 27, 2019",
      "content"  : "It is another video collection!There are a lot of “productivity suggestions” online. Often referred to as “hacks”, some genuinely are useful. Most, however, are slight rehashings of common sense or trivial alternative ways of doing a thing. A few are downright counterproductive.Below are a handful of videos I’ve found to be genuinely useful. They require a greater investment than the hacks you might find most places. I’d go so far as to refer to them as productivity lifestyles. If you’re up for a challenge, I’ve found the returns they offer are worth the effort.Creativity in Management, by John Cleese, Video Arts (1991)Yes, it is Monty Python’s John Cleese giving a business lecture. However, despite it being a “serious” talk, the viewer ends up getting tremendous insight into John’s creative process. I particularly like his steadfast insistence to take all available time to search a creative space exhaustively.Oh, and it also turns out that John is an entertaining speaker. Whoda thunk?John Cleese on Creativity in ManagementSleep is Your Superpower, by Matt Walker, TED (2019)“Pulling an all-nighter” is romanticized in software development. And there was a time where I did that to make deadlines on a fairly regular basis. However, as I grew older I began to notice that the time it took to “bounce back” became longer and longer. Comparing working me in my 20s verses a 40-year-old me after a night with a sleepless baby is stark.So sleep is important. Probably not a news flash there. However, the degree to which it is essential shocked me.With a search, you can find quite a few videos by Matt Walker online. However, I like this one from the 2019 TED conference. It packs all his usual witticisms into a digestible twenty-minute chunk. The difference, for me, of having six or eight hours of sleep a night is my overall stress level, ability to roll with the punches, and reciprocate social graces. The older I get, the more powerful superpower that becomes.Sleep is Your SuperpowerIf you’re interested, Matt goes into greater detail (with more specific tips for getting to sleep quickly, dealing with jet lag, and more) in a longer Google Talk.Being Brilliant Every Single Day by Alan Watkins, TEDx (2012)I dunno about you, but there are those days when I feel fantastic: I can say the surprising, witty thing, I have an epiphany to a tricky problem, or I slip into and out of deep, concentrated flow like a salmon returning home. Then there are other times when achieving coherence is the brunt of the battle. Control over which version of me showed up, and why, was mostly a mystery.Thankfully, the talk “Being Brilliant Every Single Day” provides numerous pointers on the various physiological factors that impact one’s sense of being. Being mindful of what our bodies are telling us in any given situation, and finding the appropriate methods of coping, can make a tremendous difference.Does that mean I effortlessly saunter about the plains of enlightened nirvana? Hardly. However, I can attest that taking a moment to breathe, as shown in the video, successfully quiets the lizard brain before being creative or attempting sleep.Being Brilliant Every Single Day (Part 1)Being Brilliant Every Single Day (Part 2)Wrapping UpThere are numerous, self-proclaimed, lifestyle gurus online. However, I keep referring to these videos because I’ve found the information to be useful. If you know of similar productivity lifestyle enhancements, not just hacks, let me know.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-08-27T00:00:00-05:00'>27 Aug 2019</time><a class='article__image' href='/2019/08/27/OtherLessonsToLearnFrom02'> <img src='/images/2019/08/productivity_craiyon.jpg' alt='Sleep, Creativity, and Being Brilliant Every Day'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/08/27/OtherLessonsToLearnFrom02'>Sleep, Creativity, and Being Brilliant Every Day</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Agile Antipatterns",
      "category" : "",
      "tags"     : "Presentations, management, and Software Development",
      "url"      : "/2019/08/02/AgileAntipatterns",
      "date"     : "Aug 2, 2019",
      "content"  : "“Agile Antipatterns” was a June workshop I lead for the DC Technical Product Management Community. The purpose was, through techniques borrowed from Lego Serious Play, to take the audience through a journey discovery about their own software development challenges. It was different from the lecture style I usually do but, despite this, the quality and depth of the ensuing conversation exceeded my expectations.This presentation is part of my goal to produce six original works in six months. For more information see the post about my conversion of travel time to productive time in 2019.The slides and script are below.Title SlideAgendaHello everyone! Let’s get started.Welcome to agile anti-patterns. Thank you to Rob for giving me a chance to deliver this talk where we’re going to talk about:  Tetris Planning  Feature Factories  Success TheaterMore importantly than just talk about those things, we’re going to discuss what to do if you happen to find yourself in those situations.And if none of that sounds appealing, we also have some Lego at our disposal. Regardless of what you were looking to do, by the end you shouldn’t leave disappointed.More About MeMy name is Matthew Reinbold and I am an adult fan of Lego. When I’m not tinkering on my own builds in my home office I am also the director of Capital One’s Platform Services Center of Excellence. My team and I are responsible for balancing software programmer independence and platform integration needs for API and event streaming development. Capital One has approximately 9,000 developers. At some point in their lifecycle, my team collaborates with those development teams. I also have done similar roles at other enterprise companies. In the past year I’ve also consulted with Allstate, CVS, and Google on how they can create more effective software development pipelines.When you deal with that many teams over the course of many years, you tend to see some things. Certain behaviors show up time and time again. At some point, these behaviors go from being random things and begin to be patterns.(Photo Credit: Linux Foundation)Models Convey MeaningCreating models - either rhetorically or with physical bricks- is important. Models allow us to visualize assumptions and surface unknown values. Models help create shared understanding between many individuals, supplementing language.This image is from 2014, just after I was getting back into Lego during my adult years. I was trying to model the stairwell at work, to better understand how space was used. While I could have pondered things for some time, building a physical representation of a stairwell gave me a different perspective and greater appreciation for how the space was optimized.There are many ways that one might create a model. I could ask you to draw your responses, or perform some interpretation of your current challenges. Don’t worry, I am not going to ask you to do that, but I would be willing to bet that some of you already have the hairs on the back of your neck just at the thought.Bricks, however, are far less intimidating. Many people have reservations about their artistic or thespian talents. But everyone can stick two or three bricks together. Lego presents a simple, approachable means to creating models: click/snap.More About Lego Serious PlayHow many here have heard of or participated in a Lego Serious Play activity?Lego Serious Play, or LSP, is a technique that uses Lego blocks in directed exercises to build structures that metaphorically represent business models. In the 1990s, under the direction of then president and CEO, Kjeld Kirk Kristiansen (grandson of the original Lego founder), Lego began looking for new techniques leadership teams could use when developing their strategies. The first version and trained facilitators began appearing in 2001. By 2010, Lego created the “community model” of sharing the technique, akin to open sourcing the ideas behind Lego Serious Play.I’ve used Lego, previously, engage kids in computer science exploration. However, tonight I’m using a less structured version of a Lego Serious Play experience, while still heavily leaning into the model creation for discussion and discovery.Complex Stories Can Start with Simple ModelsYou can tell a great story with a few bricks. What you can see here are a series of advertisements that Lego has run in the past. While the models may be simple, they tell a very complex story.The point with this models is not to have picture perfect recreations of their real-world counterparts. What we’re going for here is the metaphor. If there is one rule this evening, it is that people should “Comment on and critique the metaphor, not the construction”.Title Slide.That brings us to our first question for us to dig into. As technical product management, you either are working, or have worked with, a development team. I want you take a few minutes and create a model for your role in the development process.Here are a few examples:  (hold up a stack of bricks) Perhaps this is your model -a bastion of stability, solid and firm for your team to be built upon  (hold a gear) Or maybe this is your model - a cog in a machine  (hold up a captain minifig) Maybe this is how you see your role in the development process - a Captain, ready to lead the team to adventure  (remove the head from the captain minifig) Or maybe this is how you feel, a headless captain, given all the responsibility but none of the answersThe model I want you to build is a metaphor for your role in the software development lifecycle. Let’s take five minutes and then we’ll discuss.There’s a timer onscreen. When it reaches zero, I’ll ask a few folks to share their creations. Again, we’re not going for photo-realism and five minutes is not a whole lot of time. We need to work quickly. Go with you first idea. Trust your instincts and let’s get going.Ready? Set. Build!(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)Introducing Planning TetrisLet’s get into our antipatterns. In my experience, before we can correct a phenomenon, we first have to identify and name it. Without a name, we can’t address it.What follows are the description of three agile anti-patterns. There are certainly more, but there’s only so much time that we have this evening.Agile anti-patterns typically manifest themselves as commonly applied solutions. A solution becomes an anti-pattern when it ceases to provide an effective fix, or when the cumulative effect of repeatedly applying that fix has an ongoing negative impact.The first of those anti-patterns is Planning Tetris.TetrisHopefully everyone here is familiar with the game Tetris but, in case you aren’t here’s a quick summary:  The shapes of various configurations enter a player’s screen from the top, and the shape begins to descend to the bottom  The player can move the shape side to side, as well as rotate it  The player’s goal is to complete horizontal lines with the provided shapes. Completed horizontal lines will disappear from the gameboard  The game is over when shapes can no longer descend from the top of the boardThe goal is to avoid gaps in the board by cramming as much together in as tight of space as possible as fast as possible.Illustration of Tetris Playing.What does this have to do with product management?How many people here use story points in their planning rituals? T-shirt sizes? Time-buckets? Am I forgetting any other sizing method?Well, regardless of which method used for planning, each of these assume that not all work is sized the same. There are “big” tasks and “small” rocks. When prioritizing a backlog, a common approach is to weigh the size of a task with its importance. Balancing across many, potentially competing, backlogs (like tech debt, UX updates, and business imperatives) are a challenge.The first problem is getting the master queue prioritized for the business. Typically, there are rules for how to do this. Putting together the ‘master list’ isn’t the problem, however.The second part, and where people get into trouble, is assigning that work. These are two separate problems, but people begin playing Tetris (optimizing for the peak number of items “done”) rather than maximizing the flow of business values.In this animation, there are several parts:  First, the business creates the “master queue” of priorities across many competing concerns.  Next, teams are assigned, with the highest priority (or ‘Priority 1’) items assigned, then ‘Priority 2’, and so on. In this case, we have a UX “shared team” that will work with Team 2 on Priority 3.  However, ‘Priority 2’ is a big item that requires two teams. Team 2 can’t start work without Team 1. Despite the fact that ‘Priority 1’ is the highest priority, it is shuffled so that teams 1 and 2 can start at the same time.  Meanwhile, the UX team is encouraged to “work ahead” or “get a jump on” their work, despite being dependent on Team 2’s input.  And then executive leadership comes along with their own work-to-be-done, immediately rending the previous prioritization irrelevant.Properties of Planning TetrisWhat are common properties of planning Tetris? Let’s run through some examples:  Pulling “small stories” into a sprint to hit some illusory “velocity” target (even when the stories have nothing to do with a meaningful goal).  Encouraging high individual utilization rates. Optimizing for “looking busy” instead of optimizing for efficacy, outcomes, and flow.  Big-batch quarterly/annual planning whereby some group of managers/planners attempt to “put the puzzle pieces together” and “get all of this done in the quarter” (even if priorities vary drastically).  Asking functional disciplines like UX to “get ahead” of the work, in an effort to work more “efficiently”. This results in an impossible-to-navigate set of dependencies and handoffs (and a lack of information exchange).  Making assumptions about the size/shape of planned work (and the flow of future work) that end up being false. For example, a team will be asked to “move on” from a promising initiative because of layers of dependent plans.  Rapidly reshuffling/rotating teams to tackle an onslaught of projects.  Parallelizing dependent work in the hope that a “horizontal slice” of multiple projects can be completed simultaneously (instead of treating the work as a single project).  Never going back to fix things. The “debt” remains, eating into the collective psyche of the organization.  Ever-increasing pressure on “the teams”. Pushing teams until they crack. Instead of fixing the gaps, management layers on more and more work until the system experiences a spectacular collapse. Teams, inevitably, have to clean upthe mess (and are blamed for not “pushing back”).  Banking on that “one piece” to fall into place and save the day. Until then, making no forward progress. When the silver-bullet piece fails to appear…you find the next silver bullet.Alternatives to Planning TetrisHow do you deal with planning tetris?  Do not decompose a unit of value into tasks, and then place the tasks on other teams’ queues.  In other words, what counts is the mission: the engaging outcome you hope to generate for your customers and business.  Try to deeply ingrain the idea of “pull” in your organization. It is a huge mindset shift. Pull means that starting something will ALWAYS mean finishing something else. You don’t load people/teams up. You don’t “push” work on teams. Rather, you wait for teams to reach out when they’re ready, and you respect that. You have to trust your teams to do their best without asking them to pre-commit to big batches of work and “stretch goals”.  Stop fetishizing busyness and output. Place a premium on doing more with less. Make craft, thriftiness, and frugality a part of the culture. “Above and beyond” is fine, but it often inadvertently swamps the system. It also incentivizes local heroism over global flow. Focus less on output/busyness, and more on benefits and outcomes. (this can be challenging when metrics are set up in such a way to promote “business”  Leverage work in progress/process constraints. WIP constraints serve as a forcing function for continuous improvement, a catalyst for pull, and a signal that the system is straining and needs some TLC. Think of every piece/level on a Tetris board as WIP. Unfortunately, WIP constraints are counterintuitive: we look to estimates/guesses to “size up” the work and “fill up” the system. This is a recipe for dangerously high utilization rates and long, long lead times.  Visualize dependencies / visualize the whole. When we split things up, we tend to lose the thread. By visualizing things “as a whole”, we tend to make wiser decisions. Instead of six “projects”, we have a single mission.  Do something about the “debt”. Cutting corners creates gaps. We rationalize cutting corners to learn earlier, deliver earlier, and make money earlier. The problem is that the debt add up and add psychic drag on teams and, eventually, overwhelm them.  Map your assumptions. We tend to act based on a web of assumptions (some conscious, some unconscious, some fragile, others robust). Building shared understanding around our assumptions can expose “tangled webs” early, and encourage us to simplify, solidify plans at the last responsible moment, and leave more slack in the system.Modeling You in Relation to Your BacklogThis brings us back to our models. We previously created a model of our roles in our product development. We’re going to continue to build on that. Take the model of yourself and create the relationship between you and your backlog (or backlogs).Is that relationship:  a treasure of untapped potential  a dumpster fire  a pipeline of great ideas  an overstuffed stuffed closet?While creating that model, take what we’ve learned about planning Tetris. Is there an aspect to that in your sprint grooming? Are you optimizing for a high rate of Work-in-Progress (WIP)? Do you metrics celebrate busyness or velocity? How does that manifest in your model?(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)Introducing Feature FactoriesPlanning Tetris, if left unchecked, results in teams producing things for the sake of producing things.In this situation, development has been come a factory, pumping out features, and the team are just line workers. They’ve become disconnected from the business value derived from their work. They finish a feature, or close a ticket, only to get another immediately afterward with little sense of continuity or importance.Update 2020-01-17I had to include this image from Charles Lambdin’s post. It perfectly illustrates the problem of mistaking feature velocity for value generation.Feature factories (also called feature pumps) are incredibly corrosive to morale and, despite the pressure to create an ongoing stream of work, decreases the alignment with the missions of the company. Outputting things is more important than the outcomes those things cause.Feature Factories Illustrated.Thus, we have the agile antipattern of feature factories.What does it feel like to work in a feature factory? This quote sums up the experience:  “You know… when this is “done”, we will have moved on to the next thing. Sure we will have shipped something, but it will be anyone’s guess whether this actually worked. When do we answer that question? It just never seems to happen.”Properties of the Feature FactoryHow can you tell that you might be working in a feature factory?  Rapid shuffling of teams and projects.  Instead of compelling missions or initiatives, teams deal in feature and project assignments. Chronic multitasking and over-utilization  Infrequently acknowledged failures and scrapped work. No removed features. Primary measure of success is delivered features, not delivered outcomes. Work is rarely discarded in light of data and learning. Often the team lacks the prerequisite safety to admit misfires  No connection to core metrics. Infrequent discussions about desired customer and business outcomes. Team cannot connect work to key business and customer satisfaction metrics. Impossible to connect iterations to “what matters most”  No PM retrospectives. Product managers do not conduct regular retrospectives on the quality of their product decisions and compare expected benefits to actual benefits. Developers have “passing tests”, but product managers do not. Product managers view velocity and output as their key performance indicator.  Obsessing about prioritization. Mismatch between prioritization rigor (deciding what gets worked on) and validation rigor (deciding if it was, in fact, the right thing to work on). Prioritization rigor is designed exclusively to temper internal agendas so that people “feel confident”. Lots of work goes into determining which ideas to work on, leaving little leeway for adjustments and improvisation based on data. Roadmaps show a list of features, not areas of focus and/or outcomes  No tweaking. Once work is “done”, the team moves immediately on to the next “project”, leaving no time to iterate based on qualitative and quantitative data  Culture of hand-offs. Front-loaded process in place to “get ahead of the work” so that items are “ready for engineering”. Team is not directly involved in research, problem exploration, or experimentation and validation. Once work is shipped, team has little contact with support, customer success, and sales  Large batches. Without the mandate to experiment, features are delivered in single large batches instead of delivering incrementally. You might still work in sprints (yay, we’re “Agile”), but nothing new is reaching customers at the conclusion of each sprint  Chasing upfront revenue. Features are implemented to close new deals. While not inherently wrong, the economic justifications are often flimsy (at best), and fail to account for the non-linear increase in product complexity (you make the quarter, but you pay for it many times over later). Again, this reinforces the idea that features are the unit of value measurement. Product decisions lack a sound economic grounding  Shiny objects. Low visibility for refactoring work and debt work-down. Low visibility for overall value delivery capabilities. As mentioned, primary measure of success is new feature output. Little appreciation for the health of the whole product as opposed to shiny new objects. Little awareness around impact of new features on usability (and maintainability and extensibility) of existing product  Success theater around “shipping” with little discussion about impact. You can tell a great deal about an organization by what it celebrates (more on that in a moment).Approaches to Dealing with Feature FactoriesCorrecting a situation in which a feature factory exists means mending the gap that has occurred between what is worked on and the value that is delivered.Arrange a meeting with your company’s CFO. Have them explain the moving parts in the business model, and the assumptions that underpin forecasts and growth targets. How do you really make money, and what must remain true for you to continue to make money? What costs matter now? Why are sales goals what they are? Where does product performance fit into the big picture?To defeat the feature factory, the line-workers (that’s you) must learn to speak the language of the business as well as the language of their craft. It’s the game you’re playing. Be wary when told that the team “just needs to execute”.What does the ‘language of business’ sound like? Some examples include:  “If we continue to iterate on this existing feature we can achieve that goal without having to fork the product. It’s worth our focus.”  “The work we’re doing is barely making a dent in the key metric.”  “If we accumulate this technical debt, we wont be able to meet those goals for new product development.”  “Churn will increase beyond your threshold if we don’t double-down on nipping this expectation mismatch in the bud.”  “We can still meet these sales goals if we choose to be more selective. Building feature on demand is a distraction, and I’ll show you why ….”It’s a reframing of one’s job. It means you’re not just there to deliver work. But by speaking the language of business you can break out of the factory model by explaining how peak optimization is hurting the bottom line.Modeling the Delivery of Business ValueIllustrate the value of your work in terms of business output - the value created by your teams is not the number of features delivered, and be wary of any metric that only looks at features delivered, tickets closed, etc. Emphasize the outcomes created in terms of business value - what does that look like?(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)Introduction to Success TheaterThe continued production a features, now unmoored from real value creation, cause an interesting dynamic. Lots is getting done, but there’s questions about whether it is the right thing. Those that are creating the work now have a stake in selling the work as valuable. In that respect, they become complicit in marketing the work. They are performers in what is known as “success theater”.At its base, “success theater” is an projected optimism and celebration of delivery that doesn’t match the reality of customer reaction. It’s that the burndown chart must go to zero, or features delivered quarter after quarter go up and to the right, although there were corners that needed to be cut. It’s vanity metrics - the ones that celebrate more for the sake of more, but have little to do with value delivered. It’s optics and smoke and spin and the more levelheaded you are about honest summaries, the more likely you’ll be cut out of the loop for not being a “team player”, or “being a critic”.Properties of Success TheaterSome tell-tale signs of ‘Success Theater’ include:  “pervasive good news culture”, including creation of a particular language. For example, you are not allowed to point out problems, or discuss weaknesses. Instead, anything that isn’t great today is “an opportunity”. (Story about color coding an item in a spreadsheet as ‘light green’ instead of green when it is behind schedule, because coding the row as yellow would raise alarms.)  Every plan is a hockey stick; in order to justify the hiring and spending wanted now, significant ROI has to be shown the day after tomorrow. Or, there’s always the story that next year is the year it all comes together  Messengers are shot - people who raise concerns keep disappearing - either moving on of their own accord, or have odd reasons  Do you do a product showcase? Warts and all? Is it scary to share anything less than the final product to product owners? Stakeholders?Approaches to Dealing with Success TheaterSuccess Theater is the last resort of teams that have done the tetris planning, toiled in feature factory, resulting in little-to-no meaningful impact; as a resort, the team is forced to trumpet hollow talking points to justify all their activity.Success theater has its own language. Like combatting feature factories, it is vital to recognize the prevalent storytelling and frame the discussion accordingly. This won’t be undone easily, either. If you work in one of these places you won’t be able to walk to your manager’s office door tomorrow and be celebrated for the list of grievances you nail to it.  Ask people to highlight issues or concerns - if the culture is averse to admitting weakness, you can soft pedal by asking “if a risk were to develop, where would it be?”  Lead by example - find those in leadership that are passionate pragmatists, concerned about the craft more than the ladder climbing. This leadership needs to reinforce the message, swarming on the things that matter.  Share challenging news, but beware of tone - this isn’t to wallow or curry sympathy. This is an open conversation with an emphasis on learning; despite the fact there might have been a setback, use it to engage and energize people that there is a way forward.  Celebrate those who share an issue or concern, reinforcing their courage and willingness to be vulnerable. It is a way you signal it’s ok to share concerns.  When you have “real” wins, celebrate them like crazy! Shout from the rooftops - put a spotlight on the things that really matter. Have avenues for telling your story and make sure the message isn’t ignored from “celebration fatigue” by only using them for the big things.  Promote people who have bounced back. - celebrate those who have demonstrated resilience, rather than those who have never tasted failure.Celebrate Real WinsCreating a culture where true impact is valued is vital. How do you celebrate the ‘real’ wins? What does that look like in your company? Add to your model how you’ll overcome superficial superlatives, and elevate those things that create real positive customer impact.(After building, five minutes of conversation where volunteers share what they’ve built, and why. We discuss the metaphors and how that makes them feel.)Wrapping UpThe challenges of successfully implementing an agile development process are numerous. We’ve only just scratched the surface. However, it is my hope, that by providing an introduction to planning tetris, feature factories, and success theater you’re better able to identify these problems before they grow.Additional ResourcesIf you are interested in reading more about these items, please refer to the links below:Lego Serious PlayIn general, why there are some interesting bits here, I have yet to find a Lego Serious Play reference I can recommend without reservation. Your mileage may vary.  Build to Lead (Free ebook from O’Reilly), Donna Denio &amp;amp; Dieter Reuther  Building a Better Business Using the Lego Serious Play Method, Per kristiansen and Robert Rasmussen  Serious Work - How to Facilitate Meetings and Workshops Using the Lego Serious Play Method, Sean Blair, Marko Rillo &amp;amp; PartnersPlanning Tetris  John Cutler - Stop Playing Tetris  John Cutler - Quit Planning Ahead and Keeping People Busy  John Cutler - Tetris, Queues, Dependencies, and Flow of Value (especially starting at the 6 minute mark)  Manuel Gomes - Full Utilization and WhitespaceFeature Factories  John Cutler - 12 Signs You’re Working in a Feature Factory  John Cutler - Beat the Feature Factory with Biz Chops  John Cutler - Beat the Feature Factory: Run Pre-Cap Design StudiosUpdate 2020-01-28  John Cutler - Feature Factory Signs - 3 Years LaterSuccess Theater  Liane Davey - Is ‘Success Theater’ Masking Rot in Your Organization?  How Success Theater Derailed GEFinally, if you are on Twitter, I would strongly recommending following John Cutler, the origin for a number of these links. A self-described “product management nut”, he regularly provides thought-provoking examinations of modern product development facets.Contact InformationMy name is Matthew Reinbold. If you are interested in my thoughts on the evolving API industry, I write an email newsletter called ‘Net API Notes’. I am Twitter’s libel_vox and write at MatthewReinbold.com.Thank you and good night.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-08-02T00:00:00-05:00'>02 Aug 2019</time><a class='article__image' href='/2019/08/02/AgileAntipatterns'> <img src='/images/2019/08/Slide1.PNG' alt='Agile Antipatterns'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/08/02/AgileAntipatterns'>Agile Antipatterns</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Overcoming Complexity through the Principle of Least Power",
      "category" : "",
      "tags"     : "Presentations and Software Governance",
      "url"      : "/2019/07/17/OvercomingComplexity",
      "date"     : "Jul 17, 2019",
      "content"  : "Here are the slides and script for the presentation I made on July 17th at the San Francisco APIDays Conference. The theme for the event was ‘The New API Stack’.This presentation is part of my goal to produce six original works in six months. For more information see the post about my conversion of travel time to productive time in 2019.Without further ado, here is the talk.Update 2019-08-13The video recording for the talk has been released. If you’d prefer to watch rather than read, I’ve embedded it below.An innocuous introduction slide.Welcome, everyone. My name is Matthew Reinbold, and my talk this morning is how to overcome complexity with the principle of least power.Photo by Shahadat Shemul on UnsplashDefining software complexity.Modern software architecture is complex. John Ousterhout, in his book “A Philosophy of Software Design”, defines complexityas:  “anything related to the structure of a software system that makes it hard tounderstand and modify the system.”In other words, a barrier to the kind of business agility that we crave, that is desired to win in competitive marketplaces, is how hard our architectures are to grok.Complexity grows. For everyone.Complexity is a problem that we all share. Clear back in the innocent, carefree days of 2011 Marc Andreessen quipped that “software was eating the world”. That same year Forbes declared that “every company is a software company”. Sometime around the middle of this decade, our community began talking about how “APIs were eating software”.As the Director for the Capital One Center of Excellence, I lead the team that sets the API and event streaming standards for 9,000 geographically disbursed developers. A vast majority contribute to the thousands of in-production, internal APIs that our company uses to deliver new products and experiences. My team and I oversee an internal ecosystem that delivers 3.5 billion API requests a day.In addition to that “day job”, I also write an email newsletter called “Net API Notes”. There, I love to highlight stories of how other companies are managing their API journeys. While many are at different points along the road, all of us eventually run into same problem: complexity.APIs offer the greatest leverage point in a dynamic system.Why APIs? Because the API is the greatest leverage point in a complex system. An API is a means of abstracting complexity and hiding it behind an interface.That abstraction allows programmers to work on a system without being exposed to all a system’s complexity at once. An API is a simplified view which omits unimportant details. It makes it easier for us to think about and manipulate complex things.It’s why APIs have exploded, both internally and externally. In our organization, we might have started with APIs - either our own or 3rd parties - for critical functionality. However, in time, patterns emerged to deal with the complexity of the environment. If you’re Netflix’s Daniel Jacobson, you call these “experience APIs” (2014). If you’re Phil Calçado, director at Meetup, this is the Backend-for-Frontend (or BFF) pattern (2015).At the same time that this orchestration API layering was taking place, James Lewis and Martin Fowler were talking about an abstraction they saw called microservices (2014).Even these abstractions meant to hide complexity birth their own complexity when done in mass.Thing is, complexity is neither creator or destroyed, is just changes shape. Not only are there more services, resulting in the infamous “microservice death star” style graphs, but the complexity introduced to try and manage these services – deployment pipelines, service meshes, monitoring tools, auditing, dependency managements also introduce their own emergent behavior.In fact, over the past several years, through the writing on Net API Notes, I’ve seen a number of pieces where companies retreat back to a monolith exactly because they were more comfortable with the complexity that they had known rather than the new form it had taken.With enough abstractions, we begin to see that layers change at different rates.Images from “An Open Source Benchmark Suite for Microservices”Layering of abstractions move at different rates.Abstractions changing at different rates doesn’t just happen in software. Wherever there are people, we see a stratification among abstractions.In his book, “The Clock of the Long Now”, Stewart Brand described “Pace Layers”. He identified layers with each layer building upon slower-moving layers beneath it.At the bottom are those things that are the slowest to change. These are things of nature. As far as we know, the laws of physics haven’t changed. For example, the speed of light is constant.Next up is the cultural layer. People are people. It’s why the stories of the Greeks and Romans still resonate with us today.Above that is governance. Note that this is not governments (think democracy or populism).Above that, moving at a faster clip, is infrastructure. These are things like our road systems, or the electrical or plumbing networks in this building.Moving even faster that that is commerce or the rate at which new products, services, and experiences can be brought to a market.Finally, at the top and moving with the greatest speed, is fashion.Fast layers innovate, slow layers stabilize.One layer isn’t more important than another. It turns out that all layers are important for a well-functioning system. Each has its place. Imagine if something as important as foreign policy was being run on a whim? Or if innovation was only allowed to happen at the speed of bureaucratic consensus.As Stewart says in his book:  “Fast learns, slow remembers. Fast proposes. Slow disposes. Fast is discontinuous and slow is continuous. Fast and slow informs slow and big by accrued innovation and occasional revolution and slow and big control slow and fast by constraint and constancy. Fast gets all our attention but slow has all the power.”An API Pace Layer begins with unchanging natural laws.When it comes to web, or ‘net’, APIs I see similar stack that changes at different rates. I’ll insert my usual model disclaimer here: “all models are wrong, but some are useful”. I acknowledge this is incomplete, but this API Pace Layering model we’re about to walk through is useful for raising topics for discussion and illustrating insights about complexity (and where we attempt to hide it).At the bottom, again, are the laws of nature. The speed of light sent between distributed systems is constant. Not a whole lot there likely to change soon.TCP is foundational, constant and unchanging.The next is the TCP layer. That protocol has been around since the 70s. That’s probably a good thing, as something as necessary as packet transmission needs to be stable; considering the amount of physical hardware, languages, and frameworks that have it “baked in”, you wouldn’t want it changing often.HTTP is the next layer.As we go up, remember that we’re beginning to pick up the rate of change. There are lots of protocols, like FTP or email. However, most of us in this room are probably familiar with HTTP. HTTP 1.1, which a guy named Roy Fielding worked on, was ratified in 1999. HTTP/2, which many haven’t implemented yet, was approved in 2015. It’s not whipsawing speed, by any stretch of the imagination. However, compared to TCP, it’s changing faster.HTTP can be thought of as additional, addative layers.Here’s where I purposely made it interesting. HTTP, itself, is layered. There’s the verbs or methods. Everybody is familiar with “GET”, “PUT”, “POST”, and “DELETE”. Some might even use “PATCH”. There are others, like “OPTIONS” and “HEAD”, which are useful in other circumstances. There’s a couple more, but that’s mostly it; under ten items to recall that have been stable since the last millennium.There are status codes; while, officially, there are 50-60 status codes the ones we care about can be broken into three broad groups. Any 2xx responses tell me, as a client, my request succeeded. Any 4xx tells me, as a client, that I need to modify my request before doing it again. Also, 5xx tells client me that the API provider is having a very bad moment. Again, stable, consistent, and doesn’t require me to introspect the payload for the high-level gist of what is going on.The last layer of the HTTP protocol worth highlighting is headers. There are about a hundred of these. Some of them get into a fair amount of subtlety and nuance. Not all are that useful. However, this is where we get a wonderful set of tools to shape requests. The fastest request is the one you never have to make. If an API provides thoughtful clues through caching headers to a client, it is a beautiful, highly-performant, thing. Headers also where we can perform content negotiation, allowing the same API to return the JSON representation, a CVS file, a PDF, a binary image, or more all from the same resource.RFCs offer lots of opportunities for experimentation.Above HTTP, evolving at a greater clip, are the IETF’s Requests for Comment, or RFCs. There are thousands of these notes which capture proposed ways communication on the internet might work. That’s a lot and there are new ones all the time.There is some excellent work here that can powerfully aid comprehension and intuitiveness of a design. When things go wrong, RFC7807 defines a common error object. By using a standard, clients aren’t left having to figure out where in the payload to look for information to help solve their issues. A standard might also suggest information, or representations of information, that you might not otherwise have considered.There’s also RFC 8594, the sunset HTTP header. It is a way of telling someone that requests a URI that it may become unresponsive in the future. This one was fun to watch being born, on Twitter and through email, by this extended community. A common need for better lifecycle management was identified folks online and they swarmed together to discuss merits of different approaches. From their efforts, we now have a abstraction: the complexity of having to come up with how to do this was handled by someone else.Patterns are numerous, and quick to evolve.Finally, at the top of this layering, are patterns. There are some patterns, like the backend-for-frontend or experience API pattern, that become popular - possibly even so popular that they end up generating dedicated RFCs to support them. Remote Procedure Call (or RPC) is a pattern. Webhooks are a pattern. Hypermedia is also a pattern. These can are multitudinous, and a new one can be introduced as quickly as the Netflix engineering or Hacker News forums publish a new post. These are constantly changing. Some become quite fashionable.A layered architectural approach gracefully degrades.The wonderful thing about how these layers perform in a complex system is how they gracefully degrade. Suppose, for example, that I provide an API that implements an RFC, like the common error object. What if the client isn’t expecting, or doesn’t care that I’m following a prescribed standard. Do we fail to exchange meaningful information?Of course not. A client unaware of RFC 7807 would only see a JSON response returned to them, and they would parse it anyway, the same as they would if my response was something that I came up with off the top of my head. The advantage are those complex ecosystems featured in the microservice death stars – when all services express information in the same way, it opens opportunities for tooling; tooling which takes the cognitive burden from developers, freeing them to focus on the business problem.Let’s take another example and go a layer deeper. As an API provider, I have the best understanding of when the underlying data changes. As a result, I provide cachecontrol and ETag headers to the client, allowing them to make smart decisions about when to request an object. After all, the fastest API call is the one that didn’t have to happen in the first place. If a client is savvy and picks up on it, great! If not, things still work; maybe not as efficiently, maybe not as elegantly. However, building in layers that can gracefully degrade means that communication is still possible.GraphQL cuts across layers, connecting an interaction pattern to TCP.Now, for a brief moment, let’s talk about GraphQL (going through a similar exercise for gRPC is left to the reader). GraphQL is a query language for data retrieval and updating via HTTP. I put it in the “pattern” layer, as it is a different API interaction pattern between client and server.Unlike the other patterns that I had previously mentioned, however, GraphQL is not built upon the same layered approach. All requests, be it data retrieval or mutations to update, are submitted via POST. The only status code ever returned is a 200, requiring introspection of the payload of every response in case there is an error embedded in it. Headers aren’t encouraged, as they’re not displayed in tooling like the explorer from GraphQLHub.com. There’s no equivalent RFC-like error response for GraphQL, although vendors like Apollo are promoting their approach.There’s a paradox here. I can hear it. “Matthew,” you might say, “by freeing us from having to think about verbs or codes or headers or RFCs – by getting rid of the layers, aren’t we abstracting complexity behind a single abstraction?”Remember, complexity is neither creator or destroyed, is just changes shape.GraphQL is not a layered approach; everything from the pattern to the TCP/IP layer is either strictly specified by GraphQL or left for developers to recreate in their own, bespoke way. Eschewing layers, as GraphQL gives developers tremendous power to solve problems exactly how they imagine a problem to be solved; both from the consumer’s point of view, where they can tailor the response to their needs. The API provider also can implement their own approaches to common distributed systems problems. But that power comes with great complexity. The layers that abstracted the complexity of things like caching, of error handling, content negotiation are all left to the developer. And having each GraphQL solve those things in their own fashion will increase the complexity of comprehension on the part of clients and tool makers.To combat complexity, the principle of least power suggests keeping things simple and within layers.The principle, or rule, of least power states that one should:  “Choose the least powerful language suitable for a given purpose.”That seems incredibly counter-intuitive. Don’t we want more power to solve problems? Shouldn’t we deserve the newest tools? The most flexible frameworks? Who in their right mind is a fan of the least among us?We can apply this to our layers. When I call an API, I can include instructions as to whether I’m reading or updating information in the payload; that is a payload the server will have to introspect and act on. Or I can use the humble verb at the lowest layer, and signal the same thing via a GET or PATCH. It seems like a simple thing but it drastically affects where the complexity of our tracing, monitoring, entitling, securing, rate-limiting, framework-ing, and supporting goes.Update: 2019-09-03For a robust list of useful, defined elements that apply to a number of common use cases, check out Standards.REST. Why re-invent the wheel?Ultimately, there is nothing wrong with fasion. Just make choice based on principle. So do I hate GraphQL? Am I advocating that we should only use “boring” technology? That the old stuff is better?While I am a fan of The Boring Technology Club, that is not the message. I’ve grown to appreciate what happens within the fashionable layers. The chaotic experimentation is exciting. The vigor for overturning assumptions and pursuing new avenues is how we discover new, potentially powerful ideas. In a healthy stack, the best ideas go from being fashionable, to products sold via commerce, to essential pieces of infrastructure eventually requiring governance and important pieces of business culture.What I do advocate for, however, is conscious, decision being made when pursuing new patterns. Eschewing layers comes with trade-offs. Enter into those decisions with eyes wide open.As Mythical Man Month author Fred Brooks said:  “There are no silver bullets.””Photo by Mariya Georgieva on UnsplashAn innocuous conclusion slide.In conclusion, every company is a software company which means every company is wrestling with growing complexity.One approach to dealing with complexity to create abstractions. The abstractions at the different layers in any system evolve at different rates, which is a good thing. Fast layers accrue innovation and occasionally incite a revolution while the slow provide stability and filtering.Net APIs have evolved into different layers. Each layer provides a host of solutions to common problems that gracefully degrade if not used. The principle of least power suggests choosing simple, layered solutions to layer-spanning solutions.Only by making more informed decisions, fully aware of the trade-offs at hand, will those responsible for API governance be able to overcome the complexity of our current API stacks.Thank you for your attention.I’ll have the slides, along with some additional color and links to sources, at my website, matthewreinbold.com. I’ll announce when its ready on my Twitter stream and in my newsletter, ‘Net API Notes’.I am Twitter’s @libel_vox, and you can follow me and continue the conversation there. Thank you for the precious gift of your attention. Enjoy the rest of the conference!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-07-17T00:00:00-05:00'>17 Jul 2019</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2019/07/17/OvercomingComplexity'> <img src='/images/2019/07/Slide1.PNG' alt='Overcoming Complexity through the Principle of Least Power'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/07/17/OvercomingComplexity'>Overcoming Complexity through the Principle of Least Power</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On Travel",
      "category" : "",
      "tags"     : "Culture and travel",
      "url"      : "/2019/06/21/On-Travel",
      "date"     : "Jun 21, 2019",
      "content"  : "For a variety of reasons, I’ve been rethinking my approach to physical travel - particularly for conferences. Don’t get me wrong; there are few things in life more thrilling for me than discovering a magic circle, particularly when reconnecting with online friends. However, the unrecoverable time there and back, the carbon footprint accrued, and the time away from my family looms ever larger.To paraphrase climate activist Greta Thunberg:  “What we need are role models who practice what they preach and live within sustainable planetary norms. Otherwise we just normalize the high carbon lifestyles of jet-setting ‘thinkfluencers’.”Before going further, I emphatically recognize that choice for me to change my behavior is a privileged decision. For new professionals, the networking opportunities created by regular travel may be exactly what is needed to propel them forward. Others may not enjoy their company’s support and encouragement to attend events, thus making the rare opportunities that much more precious. I get it and hold no judgment.I get a lot out of attending conferences. Just stopping means replacing those imagination catalysts and peer feedback loops with something else. Here’s what I’m trying.  “Expose your mental models to the open air… Get your model out there where it can be shot at. Invite others to challenge your assumptions and add their own. Instead of becoming a champion for one possible explanation or hypothesis or model, collect as many as possible.” - Donella MeadowsBuilding Local Communities of PracticeIf running NetAPI.events, a list of worldwide, in-person API events has taught me anything, it’s that there’s always lots of local meetups and gatherings happening every week for most metropolitan areas. In the past, these events were something I would drop-by if there was nothing else going on (an increasingly rare occurrence these days).This year I’m making local events like the DC Web API and Technical Product Manager meetups more of a priority. There’s also a host of other noteworthy things happening just up and down the I-95 corridor. Often these events are free, have interesting things to say, and need the participating from folks like you and me to make them successful.Reapplying Travel Time to Connecting with New AudiencesSpeaking of participating, the time I put into a user group presentation is about the same as the preparation I do for a conference talk. And yet, as has happened in the past, that investment has little return beyond a single delivery.I’ve tried to be more diligent about blogging talks in detail (like about ‘Growing Software Culture’, ‘API Governance’, or ‘noodling on Conway’s Law’). However, this is a golden age of web-enabled audio and video. I want to put out more mixed media for those that don’t cherish chunks of text.And rather than create a single deck for the year and try and reuse it at a handful of events, what I’d instead do is use the time saved not traveling and create more conversation starters. For 2019, I have a goal to create six different presentations in six months. Thus far I have:  May - ‘Getting Started with API Governance’  June - ‘Planning Tetris, Feature Factories, and Success Theater - Agile Anti-Patterns and How to Avoid Them’ (illustrated using techniques taken from the Lego Serious Play method)  July - ‘Overcoming Complexity through the Principle of Least Power’  August - Successful Storytelling with Executive Leadership  October - Internal ‘Back to API Basics’ Roadshow      October - ‘A Roadmap for AI Governance’    (I’ll add links to the presentations as I get them posted online) *Further, there are all sorts of online outlets that I could be writing for. I wrestle with this. I am a big believer in not only owning one’s words, but publishing them on one’s own site. There are lots of places happy to abscond with one’s thought juice in exchange for “exposure”. However, there are still good people out there who, through hard work and passion to craft, have attracted audiences where I would feel at home. It is a matter of finding the right outlet.Salon CohortI admire AnnMarie Thomas. She is a STEM educator and author of the Making Makers. For the past several years, she has curated a monthly “Play Date” across time zones called the “Salon”. It is a way, using video conferencing technology, of regularly connecting exciting people for lively conversation, regardless of where they are.I hoped to emulate the pattern and approached several folks to do something similar for the latter half of 2019. However, my initial call ran into issues; a number of people (justifiably) were unavailable, confused by my pitch, or didn’t respond.I think there’s still an opportunity to create a regular online hangout that folks look forward to with the same enthusiasm and joy as they do meeting in physical space. Given everything else going on, I’ll rethink on how better to present this and try again in 2020.When I do Have to TravelAs I’m quick to point out, the point isn’t a draconian ban on all travel; it’s to make smarter decisions when I do. And sometimes there isn’t a choice, like when I am required to travel for work-related reasons.In those cases, there are sites like the carbon footprint calculator. It helps visualize the impact of air travel. More importantly, it provides options to support numerous programs for offsetting the impact of those trips. I don’t have the carbon footprint of Elon Musk. However, every little bit helps and, when I do travel in the future I will be sure to contribute to activities that mitigate the impact.Update: 2019-08-05To date, I have set up monthly, recurring donations to each of the following organizations to offset my travel footprint (and then some):  Project Wren  Offset Earth  Eden Reforestation ProjectPhil Sturgeon and his campaign to raise awareness for carbon offsets by cycling across Europe remains an inspriation.High above the clouds the problems all look so small.Wrapping UpThe last several years (or the last decade, tbh) have been a strange time, filled with all sorts of grim portends. However, I think its important to remember the power of our agency among the uncertainty. No one person is going to solve everything. However, people feeling empowered to make purposeful, informed actions can be aggregated into profound change. We are not bound to the status quo until a change is forced on us; this is precisely the time to be running millions of little experiments, all incrementing toward something better.Are you trying something different? Got something that isn’t on the list? I’d love to hear about it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-06-21T00:00:00-05:00'>21 Jun 2019</time><a class='article__image' href='/2019/06/21/On-Travel'> <img src='/images/2019/06/airplane_stablediffusion.png' alt='On Travel'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/06/21/On-Travel'>On Travel</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs and Digital Transformation",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2019/05/06/APIs-and-Digital-Transformation",
      "date"     : "May 6, 2019",
      "content"  : "Recently, Bill Doerrfeld interviewed me for a piece that appeared on the Adobe CMO blog entitled “The Platform Economy: Why APIs And Integrations Are Crucial”. As usual, I ended up preparing way more than what eneded up on the final piece. An sampling of my expanded responses is below.In my Net API Notes email newsletter, I talked about the changing API space earlier this year. Hopefully that, as well as the answers below, provide some clarity for executive leadership on how the landscape is evolving.What the current state of the API economy?The API economy, however it is defined, is in a state of transition. For the last several years companies have limited, or even shuttered, their “open” developer in favor of explicit partner-to-partner relationships. From, most recently, Lyft, to Venmo, Facebook, and Twitter, companies that aren’t perusing an explicit platform strategy have significantly changed how they think about the strategic potential for APIs.A number of factors have driven this. On the one hand, I see an end to companies who released public APIs with a “build it, and they will come” philosophy. Without a vision of how corralling 3rd party developers would bolster a company’s strategic execution, these developer portals were cost centers primed for elimination as soon as the platform fervor passed. (For some comprehensive thinking on the role of software platforms, I’ve been enjoying “Platform Ecosystems: Aligning Architecture, Governance, and Strategy” by Amrit Tiwana.)More recently, I see companies increasingly aware of their expanded risk profile due to public API access. Even with robust security, and the API is behaving as intended, the Cambridge-Analytica scandal awakened many. We now see how the seemingly benign exchange and aggregation of information can have huge ramifications. Simply “putting something out there” not only can be expensive, but it has consequences.However, that’s a footnote in the larger story. The more significant economic impact of APIs is how companies are using them to achieve greater marketplace agility. It’s the internal decomposition - the reduction coupling and coordination overhead - where the real digital transformation lies. The economic benefit from Netflix’s API approach is not from the developer program (something they ended in 2014). Highly modular architecture allows experiences, powered by APIs, everywhere on everything.How have APIs historically disrupted digital business? How will platform-platform integrations continue to evolve?APIs have had, and will continue to have, an out-sized effect on reshaping the cultures of the companies that truly adopt them. Whether it is adoption of the “infrastructure as code” and CI/CD pipelines necessary to efficiently deploy them, or the rearrangement of teams to support bounded context modularity (the “reverse Conway maneuver”), APIs challenge existing organizational and operational structures. (For more information exploring the cultural implecations of APIs, please see the writeup of my conference talk, “A Gardner’s Approach to Growing an API Culture”).What we’ll see is a continued diversification of useful interactions patterns beyond HTTP’s traditional request/response model. The need for real-time workflows will necessitate investment in, and understanding of things like webhooks (also referred to as callbacks or subscriptions), websockets, and more. The interest in machine learning, along with a greater emphasis on storing and leveraging data, will necessitate more ‘algorithms-as-a-service’ APIs.How can APIs be used in B2B partner strategies?More businesses realize the impact data, not only theirs but others, can have on their operations. The responsible exchange of this data is critical. APIs make organizing and managing these partnerships more easily possible due to the wide variety of proven technologies. Everything “speaks” HTTP, securing and monitoring API gateways have vetted playbooks and standards (like OAuth), and there’s a mature talent pool available.What are the major takeaways for CMOs &amp;amp; CTOs?Technical leadership is experiencing pressure from all directions. To one side, they are expected to deliver impactful digital transformation to compete in the future marketplace. Simultaneously, they have to meet new (and growing) data governance expectations. APIs, with their standardization of message exchange and centralized points of control, can play an essential role in both objectives.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-05-06T00:00:00-05:00'>06 May 2019</time><a class='article__image' href='/2019/05/06/APIs-and-Digital-Transformation'> <img src='/images/2019/05/digital-transformation2_craiyon.jpg' alt='APIs and Digital Transformation'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/05/06/APIs-and-Digital-Transformation'>APIs and Digital Transformation</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "A Plan for Continuous Learning and Win Sharing",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2019/05/06/ContinuousLearningAndWinSharing",
      "date"     : "May 6, 2019",
      "content"  : "Like most at Capital One, my team is currently busy with talent management activities. Rather than being a backward-looking review of work previous done, talent management is forward looking. When done correctly, it produces honest conversations about each’s professional ambitions. Those ambitions, subsequently, are then deconstructed into the repeatable systems necessary to produce accumulating wins.A significant component of any talent management plan is continuous learning. That learning could be:  Online coursework  Grokking Books  Professional Organization Participation  Experimenting with new technologies and techniquesWhile there’s no shortage of resources, what is in short supply is time to make it happen. A challenge, for all too many managers, is supporting ongoing learning goals not just in lip service, but with meaningful scheduling. It’s great to say you’re investing in team development. It is another thing to foist the raised expectations on an employee’s outside-of-work time.With that in mind, I instituted a new, dedicated “continuous learning’ plan with my team. Every other Friday is reserved for team members to focus on their learning objectives. (I created two cohorts, each of which is staggered with each other’s Fridays so that there’s still a subset engaged with our stakeholder communities.)Members track their progress via a card in our Trello system stating how their work:  Contributes to the company’s mission  Progresses them toward their talent management objective  Will be shared with a larger group“Win sharing” is a critical component of continuous learning. Once a month, the team will get together to discuss what worked and what didn’t. I expect there to be surprises. There will be those pursuits that don’t pan out as expected. However, it remains a “win” if the team member not only discovers that new insight but shares it for the benefit of the larger group.We’re all busy. I anticipate the biggest criticism of this proposal is whether the Center of Excellence can take 10% of our time and devote it to something other than processing team submissions for review. In my perspective, however, I don’t know how we can afford not to. Technology moves fast. Things that were prudent even only a year ago may be persnickety today. One of the core pillars of the CoE activity is to define healthy ecosystems. Understanding the technology landscape to guide others across it requires a continuous investment in ourselves.Rather than being a tax on our time, I view this as a calculated investment our talent growth, relevance, and retention. In setting this continuous learning plan, we’ve also created a forcing function. We create the habit by reserving the space and observing the ritual. If that means we need to be more efficient in our other work to meet current expectations, then so be it.Finally, this is subject to change. We may try this for a few months and, with some initial learning, reformat our whole approach. Much like the individual experiments, using the experience to inform refinement our approach is a win. The only way we lose is if we never bother to try.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-05-06T00:00:00-05:00'>06 May 2019</time><a class='article__image' href='/2019/05/06/ContinuousLearningAndWinSharing'> <img src='/images/2019/05/classroom_stablediffusion.png' alt='A Plan for Continuous Learning and Win Sharing'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/05/06/ContinuousLearningAndWinSharing'>A Plan for Continuous Learning and Win Sharing</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Diffusion of Innovation, Digital Transformation, and Dynamic Systems Theory",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2019/04/18/OtherLessonsToLearnFrom01",
      "date"     : "Apr 18, 2019",
      "content"  : "A bridge through the fog.Despite the crudeness of the phrase, I consume a lot of online content. The internet is awash in things to pass the time. Most of it is crap, the mental equivalent of cotton candy. However, there are a handful of talks that I continue to return to. They are the ones that, even after years, I highlight in presentations and compare and contrast with new information.Here is a selection of some of my foundational references. Hopefully, you’ll find them as influential as I have.How to Design a Good API and Why it Matters, by Joshua Bloch, Google Tech Talks (2007)I’ve written some form of the Net API Notes Email Newsletter for the past several years. In that time, I’ve reviewed gobs of API-related content. However, I have yet to come across another piece which as powerfully states the importance of great API design, and what it is, like this video.Joshua rightly argues that good API Design is:  Easy to Learn  Easy to Use, Even Without Supplemental Documentation  Hard to Misuse  Easy to Read and Maintain Code that Uses It  Sufficiently Powerful to Satisfy Requirements  Easy to Evolve  Appropriate to the AudienceThe kicker here is that Joshua isn’t even talking about web, or net, APIs. The APIs he is talking about are lower-level, intra-language interfaces. However, the fact that these things continue to apply to other contexts is a testament to the universality of the message.How to Design a Good API and Why it MattersMeeting Resistance and Moving Forward, by Linda Rising, GOTO Conference (2017)Having lived (survived?) through several digital transformation efforts, each with various degrees of success, I have an appreciation for diffusion of innovation theory. The theory outlines “the process by which an innovation is communicated over time among the participants in a social system”.Said another way, a disruptive change, like those brought about by digital transformation, is adopted by different audiences at different rates. Subsequent research has shown that any changing population breaks down into the same percentages:  Innovators (2.5%): Will something for no other reason than it is new  Early Adopters (13.5%): More discrete in their selections than innovators, adopters use status as early pioneers to maintain social credibility with their peer group while taking on less risk (cutting verses bleeding edge)  Early Majority (34%): Willing to adopt innovations, but only after seeing what success with the innovation looks like among their peers  Late Majority (34%): Are loath to adopt the innovation unless specifically told they have to, after which they require higher levels of support and encouragement  Laggards (16%): Those who actively resist change, and will actively work to thwart an innovation for no other reason that it is newBe warned: the opening five-ten minutes to Linda Rising’s talk is rambling and referential to the events at the time; many were still attempting to process the results of the 2016 presidential election. However, when you scrub past that, you get a wonderful insight into people’s relationship with technology. Any change agent attempting big things, at scale, needs this foundational awareness before developing their strategy.Meeting Resistance and Moving ForwardSeeing Whole Systems, by Nicky Case, The Long Now Foundation (2017)Software governance at enterprise scale is tricky. To explain reoccurring phenomenon, I had to expand my research beyond typical software fare. Donella H. Meadows “Thinking in Systems”, and related systems dynamics education, has been incredibly relevant.The software environment in most companies is a complex, dynamic system. A defining characteristic of a complex system is that the behavior cannot be understood by knowing about the individual components. There is not a linear relationship between a top-down mandate and the desired outcome. A complex system will exhibit emergent behavior when nudged; behavior that is always unexpected, and sometimes undesirable.It is one thing to realize you’re a participant in (or victim of?) a complex system. A logical next step is identifying what to do about it. Nicky Case’s video on Seeing Whole Systems goes into that detail. Nicky, correctly, articulates how too much of governance thinking presumes clear causality between actions and outcomes. This is the mentality of “something bad happened, so we’ll create a rule to prevent the bad thing from happening”. Instead of edicts or directives, Nicky demonstrates how virtuous feedback loops (either positive or negative) can work on a dynamic system over time.Seeing Whole SystemsWrapping UpThat’s a brief, first list of references that I return to regularly. If folks find this useful or know of related material I should check out, let me know.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-04-18T00:00:00-05:00'>18 Apr 2019</time><a class='article__image' href='/2019/04/18/OtherLessonsToLearnFrom01'> <img src='/images/2019/04/chart2_midjourney.png' alt='Diffusion of Innovation, Digital Transformation, and Dynamic Systems Theory'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/04/18/OtherLessonsToLearnFrom01'>Diffusion of Innovation, Digital Transformation, and Dynamic Systems Theory</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs, Specifications, and Pedantry",
      "category" : "",
      "tags"     : "Software Governance and Software Change",
      "url"      : "/2019/02/27/APIsandPedantry",
      "date"     : "Feb 27, 2019",
      "content"  : "In a recent edition of my newsletter, Net API Notes, I finished with an off-the-cuff remark about hating how one term was used interchangeably for another. If I said chaos ensued, I would be making a gross overstatement. However, it was, despite the numerous pointed and carefully crafted statements that I make on an ongoing basis, the thing that people responded to the most to in a long time.Ludwig Wittgenstein was an Austrian-British philosopher. His is, perhaps, most famous for inspiring the phrase “language is use”. To explain what that means, here is a snippet from everyone’s favorite technical companion, Existential Comics, explaining why a hot dog is not a sandwich.Finally, an answer to whether a hotdog is a sandwich (be sure to read the whole thing, too).As the comic explains, we can pick apart the semantics of a term any of a thousand ways. We can debate the taxonomy, history, and context. We can make inferences and wring our hands over future outcomes, both seen and unseen. And, as Wittgenstein argued, all of that is irrelevant if it isn’t how people use the language.In my time doing API governance, I’ve seen thousands of what I’ve come to call “API descriptions”. I use this term to disambiguate between many things that get mushed together. If a team says they “need help with their API,” they could be referring to:  the code that implements some business functionality, exposed through a standardized interface (usually over HTTP)  an endpoint (the unique combination of URI and method [as wrong as it is to refer to a single endpoint as an API, it does happen])  the collection of endpoints that comprise the bounded context as defined by the team  the affordances made possible by their work, and the work itself  the file or artifact that articulates the business intent provided by that interface (written to a specified standard like OpenAPI, AsyncAPI, etc.)  the documentation of all of the above, and source code, mock data, CI/CD pipeline, and key registration shenanigans necessary to create a pleasurable Time-to-Hello-World (or TTHW) experienceWhat is the right terminology for all this stuff? Unfortunately, Wittgenstein can’t help us settle this debate. The way people use language is all over the place. The way they use ‘API’ (and related terms) is not the way we talk about hotdogs. There isn’t one, singular cultural understanding that we could point to and say “this is the one way”.To aid comprehension, I’ve adopted the following language model. It doesn’t mean that this is the right way. As the famous George Box quote goes, “all models are wrong, but some are useful”. When somebody says they have a problem with their API, I ask questions to clarify which of the following things, in my mental model, they are referring to:  API Specification - A technical standard, like OpenAPI 3.0, that defines how to describe an API’s interface in a general, broadly applicable way that is both a machine-parsable and human-readable.  API Description - A file articulating a single API’s interface that fulfills the requirements and expectations of an API specification.  API Interface - The obvious or described (and, according to Hyrum’s law, not so obvious) means to communicate with a set of functionality within a system.  API Implementation/Code - The gobbledygook created by software developers necessary to accomplish a business function to be exposed via an interface.  API Executable/Deployable - The version of code that is promoted to a live environment and responding to production requests.  API Documentation - The collection of things necessary to convey sufficient meaning so that clients can successfully use the deployed API through the interface. This includes, but is not limited to, the API Description.This is my model. It works for me but if you’re comfortable with a different set of terms, great! As long as those that interact with you regularly share the same model, communication is happening with the least amount of cognitive overhead as possible.After reading that, I know what you’re thinking.  If this is your model, and people having different models is ok, why did you say ‘it drives me crazy that they refer to these documents as “specifications”’?My problem, particularly with vendors, is when the language is imprecise. I chafe when words are used interchangeably, often without disregard. Sometimes it is even on purpose, a targeted erosion of discourse in order to make a sale. I hate when words become less about clear communication and more about memetic highjacking, attempting to associate, expand, and/or co-opt organic phenomena in the pursuit of shipping product. That’s how a useful term is rendered all but meaningless (see ‘AJAX’, circa 2005 to 2008, or what is happening to ‘microservices’ now).Having a model, and using it consistently, implies there is a certain amount of thought and rigor put into coexisting with your fellow folks. Words mean things, dammit, and the time you invest in your words is time invested in helping communicate meaning to other people.The other way, best case, is lazy. Worst case, its calculated obfuscation.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-02-27T00:00:00-06:00'>27 Feb 2019</time><a class='article__image' href='/2019/02/27/APIsandPedantry'> <img src='/images/2019/02/magnifyingglass2_midjourney.png' alt='APIs, Specifications, and Pedantry'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/02/27/APIsandPedantry'>APIs, Specifications, and Pedantry</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "A Manager README for Me",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2019/02/14/AManagerREADME",
      "date"     : "Feb 14, 2019",
      "content"  : "On a recent episode of the Screaming in the Cloud podcast, host Cory Quinn interviewed Etsy’s Matt Newkirk. They discussed the value of a ‘Manager README’ document. There has been a long tradition of README documents in software development. However, typically those files contain information about a program. This podcast was the first time I had ever heard about one for managers.The longer they discussed the usefulness, the more I realized that I needed to create one for my team. Since becoming a people manager at Capital One (and having gone through several rounds of hiring folks), I know valuable information isn’t always shared during on-boarding. I also know that just commenting on these things in passing, during the fire-hose of other new-hire information, only adds to the stress and anxiety of a delicate period.Done well, a Manager README can be a helpful and proactive piece of content. It prompts conversations, sets the context, and serves as a “living reference” for team cultural norms. Here’s what I put together for my first attempt. Did I miss anything? Is there something that is unclear?Also, is this something that you do within your organization? Let me know.Hello, and Welcome to My TeamHowdy! My name is Matthew, and I’m thrilled to have you on the team!You’ll get a tremendous amount of information in the coming months. This is a big place, with a lot going on at tremendous speed. It may feel overwhelming. Know that (1) that is entirely normal, (2) it may take several months (or more!) to feel on top of things, and (3) your newness can be a superpower!What is this? A ‘Manager README’?This Manager README is a way to:  Introduce Me  Describe My Approach to Managing You  Answer Some Questions (and Raise Some You May Not Have Previously Thought Of)I don’t expect you to memorize this document. I don’t even expect you to read it given the vast amount of other onboarding things currently happening. But it is here when you need it.What this document isn’tThis document isn’t a list of my personality quirks. Or the cliff notes guide to getting a promotion. Or where to find the free food. There is a time and a place for each of those things. But not here.Who Am I?My name is Matthew Reinbold. I have a website, Twitter stream, LinkedIn profile, and API newsletter, among other things. Since starting my professional career in 1999, I’ve worked as a software developer, tester, architect, community builder, and product manager. That work has included everything from small startups to companies including IBM, Microsoft, and Adobe.I love well-crafted storytelling and have a passion for business strategy. I am a visual learner. I do not drink but don’t mind hanging out with those that do. While I can be comfortable in social situations, I may prefer to be alone when I need to re-energize.My Approach to Managing YouWhat Being Your Manager Means to MeMy job, at a minimum, is to attract, retain, and grow world-class talent for the organization.If I do something that negatively impacts my ability to retain you, you would be doing me a huge favor if you let me know about it, as soon as possible. Likewise, if I do something that feels more like telling you how to do your job than setting context, also let me know.I believe everyone has things they can get better at. We hired you because of your positive traits. I’m excited to work with you to continue to grow those traits, as well as help you discover and refine new ones in the course of working together. In the process, I hope to become your biggest advocate to the rest of the company!How We CommunicateThere are numerous conversation channels at our disposal: Skype, Slack, Hangouts, Trello, etc. However, I treat those as ephemeral; because of the volume of commentary, I don’t tend to go back and read any missed history. If you send an email, it will be seen (eventually). If you want to ensure that I see what you have to say, send it to me in an email.If you have an issue which requires my immediate attention and I’m not immediately available, the best channel to reach me is via text message. I will do my best to respond promptly.I promise to do my best to avoid emailing or texting over the weekend or in the evenings. If I do contact you, it is either to convey breaking, important information or a pressing thought has just occurred to me. I do not expect that you should work outside of regular work hours. Unless I say that things are URGENT, it can always wait until we’re back in the office on Monday.My AvailabilityMeetings can seem like a way of life. My calendar is no exception. It may seem intimidating to schedule something with me. However, my direct reports come first. If there is an urgent need and there doesn’t appear to be an available upcoming time, send me a text message (see above). I do my best to accommodate you at the first available moment.How I Follow UpWorking in software governance, we are called on to make difficult calls regularly. I have 100% faith and confidence that you will make the best decision given your professional experience, your expectations, and the information available at that moment. That is why I hired you.There may be times when I will contact you to revisit that decision. I may have questions. I may ask for additional nuance. When this happens, it isn’t because I am second guessing your judgment. Rather, what is much more likely happening is that I am attempting to gather the necessary context to explain the action to others.Reviewing past work and ensuring that it holds up under inspection is a healthy thing. It is how I learn from you. Do not mistake this as looking to assign blame.1:1sI will schedule a dedicated, bi-monthly meeting for a half hour between us. This is your time to ask questions about what you’ve seen/heard/read and talk about your concerns. You set the agenda. It is not to deliver a status update to me unless you want to update status.The point of these meetings is to give you a chance to be heard. I am a big believer in Michael Lopp’s approach to this time. When I ask “How are you?” you can take that whichever direction you feel is appropriate. I’m still learning how to be better at this and thank you in advance for your patience.I will, to the best of my ability, try to maintain the same time for this meeting so that it becomes habitual. However, there may be times when there’s a conflict that can’t be avoided. When those situations arise, I (or my admin) will do our best to reschedule within the same week.Important things About How We WorkWork/Life BalanceI do not track hours in the office. I, also, do not believe that “clocking-in” at a specific hour is the key to productivity. I don’t hand out kudos just because you are in before I am. Likewise, I don’t keep points on who is still in the office when I leave. I trust you will put in the necessary time to do a good job. I also believe you are an adult capable of balancing your professional and private obligations. If you have an outside commitment during the workday, however, I ask that you let the team, including me, know.Likewise, if you take time off (illness, vacation, etc.), I ask that you give the entire team as much heads-up as possible. We do this by sending a calendar to the team inviting them to your ‘OOO’ (out of office) event. The first few times it may feel odd inviting your teammates to your time off. However, I’ve found, it is a lightweight way of keeping folks in the loop.There may be cases, like associates in California, where time off needs to be accurately tracked. In those cases, I expect that you accurately record your hours worked.Fridays are work-from-home days. You are free to come into the office these days. However, most on my team take advantage of this perk to avoid lengthy commutes and concentrate their “deep focus” work. On these days I maintain a weekly team meeting where we discuss common challenges and share information.If I feel that this approach is being abused and is negatively impacting the team’s ability to deliver, I will talk to you about it. Together, we’ll figure out how to arrive at the appropriate balance.Disagreements are Valuable. Arguments are NotI’ve hired you, in part, because you are a different person than I am. You have your own values, experience, education, and ambition that is different than mine. Your uniqueness reinforces in some spots, and supplement gaps in others. When combined together, our productive product can be greater than the sum of the parts.Just because I am your manager does not mean that you should defer to me without question. I ask for your input, not your fealty.Because of those differences, there may be times when we disagree. Some even might be substantive and ongoing. That is completely normal. What can’t happen is for an argument to occur. This is when discussions get emotional, even heated and feelings can be hurt. When that happens, either one of us can ask for each other to take a step back, with a promise to circle back.There may be times when consensus is not possible at the moment. Despite the lack of alignment, a way forward is needed. In those times I will rely on my best judgment given all available information. If I make a call counter to your recommended guidance, it is not personal.Putting Your Feedback to WorkFeedback is critical for anyone to get better. If you provide feedback for me during our time together, I do my best to:  Provide a safe environment  Make sharing easy  Create a positive outcome from what is sharedIf I could do any of these things better, let me know.Transparency, Candor, and DiscretionI have a high bias toward authenticity and candor.  However, there may be situations (for example, an ongoing strategic discussion or pending external opportunity) that I may not be able to discuss. I may be limited in what I can share in situations where you are not in a position to influence the outcome. If things have not yet been decided, I may defer the conversation rather than conjecturing. I may say that I can’t talk about something at the moment.There will be times when I say “I don’t know.” I guarantee that I don’t have all the answers. But if it matters to you, I promise to work with you to find one.What I ValueMinding the details can be the difference between incredible success and a 327 million dollar failure. Solving the immediate problem is the most important thing, whether that is putting together a persuasive presentation, responding to an email question, or consulting with a team. However, how the problem is solved is where the attention to detail can pay dividends.Aggregation of Marginal GainsI believe in the compounding benefit of continually fixing small things; if you say something more than once, write it down, share it, and point to it later. Over time, those references add up to a significant amount of saved time. Furthermore, at the end of the year, you’ll have a body of work to point to.Likewise, your job security is not dependent on how busy we are (or appear to be). We should continuously be looking for ways (processes, tools, collaborations with other groups) that make us more efficient. Reducing the tedium from our activities without harming outcomes means we free ourselves for more professionally rewarding opportunities.For more on this, read the Aggregation of Marginal Gains Theory.Meeting AcumenBe courteous to your fellow associates. Show respect by being on time for meetings. If possible, schedule meetings so that they end five minutes before the top (or bottom) of the hour to allow people to start their following sessions on time. Figure out the best configuration for your remote meeting software and practice it. State what the specific outcome is for any meeting scheduled. There are lots more useful tips for running successful meetings; while applying every tool every single time is a bit much, being adept with the basics will carry you far.Presentation SkillsSlide presentations (or “decks”) are a critical part of Capital One culture. They are the primary means of socializing ideas. Some assume that slides are inferior to other ways of sharing information. Creating powerful and persuasive arguments is possible. The problem is that many reach a basic level of proficiency and never advance beyond it.You may feel as though you’ve got this talking thing down cold; you were hired, in part, for your communication skills. In the same way a skilled craftsman selects and applies the specific tool to a job, however, you should also see this as an opportunity to attune your skill set for this particular audience.The creation of a successful deck, particularly accounting for ‘Capital One style’, is beyond the scope of this document.And it just kind of stops… so far. I envision this being a work in process. If you were working for me, what kinds of things about having me as your manager would you want to know? What things are missing? I’d love to get your opinions.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2019-02-14T00:00:00-06:00'>14 Feb 2019</time><a class='article__image' href='/2019/02/14/AManagerREADME'> <img src='/images/2019/02/instructionmanual_midjourney.png' alt='A Manager README for Me'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2019/02/14/AManagerREADME'>A Manager README for Me</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Soft and Hard Power in Software Governance",
      "category" : "",
      "tags"     : "Software Governance, management, and power",
      "url"      : "/2018/11/13/SoftPowerVHardPower",
      "date"     : "Nov 13, 2018",
      "content"  : "An complex image of power at play across a ceiling.I’ve had the privilege (or curse, depending on your predilection) of working in a software governance role for the last several years. What started as a simple API design advisory job has scaled into something that is equal parts technical acumen, developer empathy, business strategy, process psychology, and cultural anthropology. In growing, I’ve had to learn some new things.One of those things is the power within systems, and how it is wielded.  I’ve seen top-down, “do as your told”, initiatives flounder, despite the impressive titles of those declaring the mandate. This is because applying linear thinking in blunt ways to dynamic systems often fails.But it doesn’t have to be that way. If you have a technical leadership position within your organization, you have more at your disposal than ‘my way or the highway’. Success in a non-linear system requires an appreciation of different governance power: soft power and hard power.SOFT POWERSoft power is a political concept developed by Harvard University’s Joseph Nye. Nye defined soft power as the ability to achieve objectives through appeal and attraction, rather than force or coercion. He clarified that it is in opposition to “command power”, or a nation “ordering others to do what it wants.”Soft power applies to change agents within a company who may have the responsibility of achieving technology initiative outcomes, but lack the authority over all the participants. They cannot command people to comply. Instead, they have to rely on a different set of actions: diplomacy, strategic communication, assistance, negotiation, and community building. These actions share an inclusive vision for the future that others embrace without being told.Creating standards or processes with a soft power approach may be as simple as stating a new expectation for teams to aspire to in a public forum. Or it might be a mutual agreement between parties on how to move forward on a particular issue.Soft power excels when the situation is new and/or evolving rapidly. During this phase of an initiative, it is beneficial to adapt to new information while experience is gathered. Needs, some of which could not have been anticipated ahead of time, can be rapidly responded to. In cases where governance does not know what the final outcome should be, where flexibility and experimentation are most important, soft power should be the preferred approach until a desirable tenable solution is discovered.Hard PowerHard power is the ability to command (or restrict) a person or group to a specific set of behaviors. Usually, it describes the recognized authority for one individual (or organization) to direct another. But hard power can also be described as the set of allowances that a software system exposes.Lawrence Lessig, in his books Code and Other Laws of Cyberspace (1999), and Code v2 (2006) proposed that software regulates behavior the same way laws do, albeit within the confines of a program. Software commands (or restricts) the user’s actions in a way that coercive, soft power methods do not.Soft power may be a suggestion to do something a particular way via a persuasive argument. Hard power, as delivered via software tooling, is the encoded set of things a user is allowed to do. There is less malleability to a specific context. But the outcomes are stable and predictable. Also, because it is delivered via software, hard power can scale more efficiently than soft power.A change to hard power, however, means changing code. Hard power’s capability to react and adapt is only as fast as a team’s deployment cycle. That cycle may include creation of a backlog item, gathering of stories, prioritization in a sprint, coding, functional testing, integration testing, user-acceptance testing, and final deployment. For stable, mature environments that don’t change often, that round-tripping may be an acceptible trade off for hard-power’s benefits.Update: 2019-09-03Related is the field of Choice Architecture. Choice architecture is the creation of desired outcomes through purposeful interface design.Two Recent ExamplesTwo recent work examples illustrate how I employ soft and hard power to support developers delivering business value.In one case, we were tasked with creating a collaboration process on a newly launched technology platform. It was so new, in fact, that what success looked like was tbd. With so many things like developer maturity, throughput, expectations, etc., yet to be determined, we needed to have the flexibility to experiment and change over time. Few things warranted dedicated tooling, or a ‘hard’ power approach, in this situation. Ignore the delivery lag; nothing kills developer moral like telling them to throw out what they just proudly delivered because “the situation is fluid”.In the second situation, we recognized an opportunity to express hard power through our lifecycle tooling. The process flow was mature, with clear parameters and desired outcomes. However, we had an immediate problem that stalled a team. In that case, we defined a soft power agreement (“we will proceed with things in this way, and manually track what comes through during this intermediate phase”) until the hard power updated could be applied. It allowed us to solve issues today while we waited for backlog priority could align.ConclusionBeing a change agent managing a software process across thousands of developers is no simple task. Moving from a simple linear system to a complex ecosystem requires a different set of approaches. I came from a development background; “applying power” talk still makes me  uncomfortable. But, in order to be effective in my role, it is essential understand the nuance and how it can be applied.This framework for how I classify approaches has been helpful to me, and hopefully it will be helpful for you, too.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-11-13T00:00:00-06:00'>13 Nov 2018</time><a class='article__image' href='/2018/11/13/SoftPowerVHardPower'> <img src='/images/2018/11/militaryuniform_stablediffusion.png' alt='Soft and Hard Power in Software Governance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/11/13/SoftPowerVHardPower'>Soft and Hard Power in Software Governance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "A Gardener&#39;s Approach to Growing an API Culture",
      "category" : "",
      "tags"     : "Presentations, Software Governance, and Software Change",
      "url"      : "/2018/10/31/Gardeners-Approach",
      "date"     : "Oct 31, 2018",
      "content"  : "My work on pragmatic software governance has evolved. It started with a focus scaling good API design across a modern enterprise company. Increasingly, I&#39;m interested in how culture impacts technology adoption. Why are do some approaches become deeply embedded within an org, while others disappear after a hot minute? I gave this talk several times this past fall - most notably at APIStrat (Nashville) and API City (Bremerton, outside Seattle). For many, the content may have been unrelatable; what&#39;s all this talk about ecosystems when one is only submitting pull requests to a single branch? For a select subset of enterprise folks, however, these issues of scale and co-habitation loom large. There&#39;s also few resources available. Hopefully, this post will provide some insight into what they&#39;re seeing based on my own experiences.Hello everyone. My name is Matthew Reinbold and the title for this talk is &quot;A Gardener&#39;s Approach to Growing an API Culture&quot;. If that topic sounds a bit different, that&#39;s because I hope it is. And I&#39;m guessing that it might have attracted an audience in search of something a bit different. What this talk is about is APIs at scale. What considerations occur when you go from managing &quot;a few APIs&quot; to being a gardener of an ecosystem?I don&#39;t know how big your organizations are but, no doubt, you&#39;ve seen an increase in the level of software complexity. Also,  our collective industry  has adopted some very nasty habits; everything from move fast and break things to resume-driven development. How do we cultivate software design that, as Fielding described, has a &quot;scale of decades&quot; when the average developer tenure at a company is a year and a half?What I hope to do in this talk is share some of what I have found to be resilient about an API culture, make it relatable through the use of a garden analogy, and share some techniques for those grappling with ongoing technological change within their own organizations. For the last several years I&#39;ve been the Director of the Capital One Platform Services Center of Excellence.My team and I are responsible for gardening a complex, distributed-systems ecosystem. Capital One has around 9000 developers that we work with on API and event streaming designs, standards, and lifecycle management. These developers are spread across numerous North American locations and multiple lines of business. They&#39;ve produced thousands of APIs that we manage with our own infrastructure, resulting in more than two billion request/responses a day. And our messaging infrastructure is on pace to surpass the historical adoption trends we experienced for internal APIs. My team and I are responsible for software process management. We build shared communities of practice and federated responsibility.  We&#39;ve used centralized design management to cross-pollinate the best ideas and multiply infrastructure impact across the organization. In addition to powerful internal functionality, our investments into distributed architectures have allowed us to:Be the first company to offer Amazon Echo access to their financial accounts Win multiple JD Power Awards for our mobile experienceSign partnership portfolios worth tens-of-billions-of-dollarsHover just outside the top Fortune 100 companiesDistributed systems aren&#39;t a theoretical gamble for us. It&#39;s who we&#39;ve become as a culture. It&#39;s how we win in the competitive marketplace.We are reaping the fruits of our labor. And increasingly, I&#39;m not just interested in the harvest that we have, but how we keep it healthy and prosperous going forward. I like this image – it takes many of the components of a healthy garden and breaks them up into their individual components. We can have a greater appreciation for all interplay that occurs within one of these systems.I&#39;m guessing most people here would be familiar with a garden ecosystem. There&#39;s the ground, which includes the mineral composition, the producer plant life, and the consumers - both the animals attracted by the plants - the worms, the bees - and the second order consumers - the snakes, the spiders, etc. I glossing over a tremendous amount, and probably doing a disservice in the process, but an ecosystem can be complex. But ecosystems don&#39;t just happen. Throwing seeds on the ground and coming back months later expecting something to harvest isn&#39;t statistically likely. And micro-managing the interplay between the numerous participants in such a complex environment doesn&#39;t scale.[Image taken from https://blog.grovegrown.com/what-grove-does-differently-to-get-people-growing-cd6a71f39864]Likewise, technology ecosystems have numerous components. Attempting to address only one of them, while ignoring all the other factors, is like attempting to make a garden flourish while only being able control the flow of water. What is adequate during times of drought or flooding does little to deal with insect infestation, or an invasive species.[Breakdown of elements taken from Matt McLarty&#39;s presentation, &quot;Design-based Microservices, AKA Planes, Trains, and Automobiles&quot;, slide 42]Kudzu is a Chinese vine introduced by way of Japan to the United States. It was a perfect match for the climate of the southeastern United States. In the right conditions, a Kudzu vine can grow almost a foot a day (or between 19 to 30 centimeters). During the dust bowl of the 1930&#39;s, planting Kudzu was encouraged as a way of preventing soil erosion; it&#39;s addition to the ecosystem was a desirable thing. And then the ecosystem changed. Rain returned and the places where Kudzu had taken root suddenly had themselves a problem. It grows so fast it smothers native plants and trees, drastically reducing their access to sunlight and water. Left unchecked, Kudzu will devastate ecosystems that are dependent on native plant and wildlife. In the US it does not have any natural predators.[Photo by Eli Christman and shared under a Creative Commons 2.0 license. Original photo here: https://flic.kr/p/abgksv]The modern software development environment has also been one of increasing complexity. On this page are a variety of processes, techniques, frameworks, technologies, and styles. The last decade has been marked by creating incrementally smaller deployable units. The tradeoff of increasingly granular executables is a non-linear increase in configuration and communication management. Today&#39;s modern development environment includes:Microservices, functions, SaaS-all-the-thingsPolyglot languages (at least in theory)Cloud and ContainersSoftware-Defined EverythingEverything Optimized for ReplacementExistence of Platform TeamsThis trend results in complexity, and complexity leads to emergent behaviors, or behaviors that may not be easily addressed with linear thinking. It is an ecosystem.How does one go about determining the right fit? Which of these things will be around two years from now? Five? Is there a way of identifying those things, like Kudzu, which seem to have short term benefits and long term ramifications? How do we identify complimentary species to our ecosystems and those that will unbalance it?A forest is a complex ecosystem. Think about how it handles change. There is a size hierarchy: pine needle, tree crown, patch, stand, forest, and biome. Those differences in scale also form a time hierarchy; said differently, as we increase in scope, we also increase in time frames of reference:The needle changes within a year -the tree crown over several years -the patch over many decades -the stand over a couple centuries -the forest over a thousand years -and the biome over ten thousand years What can happen in the short term is constrained by the larger, slower moving concepts. The range of what the needle may do is constrained by the tree crown, which is constrained by the patch and stand, which are controlled by the forest, which is controlled by the biome.It is a complex ecosystem. But it is not static. Innovation happens throughout the system via evolutionary competition among individual trees. Each tree survives or dies dealing with the stresses of crowding, parasites, predators, and weather.[Photo by Julien R on Unsplash]Stewart Brand&#39;s Pace Layer model is an attempt to capture this layering. &quot;Pace Layers&quot; appeared in Stewart&#39;s 1999 book, The Clock of the Long Now, and was an extension of the architectural concept of &quot;shearing layers&quot;. Shearing Layers, a concept coined by architect Frank Duffy, was elaborated on by Stewart in his 1995 book, How Buildings Learn. It describes how buildings are a set of components that evolve in different timescales. The book was, subsequently, turned into a BBC television series that can be viewed online. Different parts of a society, or industry, move at different rates. Concepts at the top of the graph change at a rapid clip. The further down one goes, the slower change occurs.Take, for example, a conference center.  It is a complex ecosystem necessary to produce a given outcome: an event. The chairs are reconfigured as need dictates. They&#39;ll be swapped out according to fashion. They have rates of change much greater than the carpet or the visual facade, which changes faster than the street ordinances or hospitality laws. All of which changes faster than our cultural tendency of getting together face to face. It is the combination of fast and slow moving parts that gives a system its resiliency. The layers are not independent. As each moves at its own speed, there is tension at the edges where they layers touch, something called &quot;slip zones&quot;. Consider any recent emerging technology. Those electric scooters you&#39;ve probably seen around are in a slip zone. Will they decend beyond a fad, becoming part of a city&#39;s transportation infrastructure, perhaps even requiring governance, on the way to becoming a cultural touchstone? Or is it a fad, resulting in some commerce but disappearing after the VC money runs out? * Fidget spinners were a fad. They decended to the commerace layer as everyone sought to sell some product. But they never became part of people&#39;s routines (their habitual infrastructure). There was no need for governance, and they never embedded themselves in cultural identity. As a result, the ubiquitous thing one summer is easily disposed of and replaced by the next. This is such a beautiful summary, it is worth repeating.&quot;The fast parts learn. The slow parts remember. The fast parts propose things, the slow parts dispose things. The fast and small instruct the slow and big with accrued innovations and occasional revolutions. At the same time, and we don&#39;t respect this as much as we should, the big and the slow control the fast and the small with constraints and with constancy. All the attention is paid to the fast parts. But all the power is in the slow parts.&quot;&quot;Each layer needs to respect each other&#39;s pace. If commerce is too dominate in a society, it can jerk governance around harmfully. Or it can reach down and disrupt culture and nature by going too fast while not having the patience to deal with infrastructure problems. The flip side is where the Soviet Union tried to run everything at governance pace (five year plans, for example) and they destroyed other layers.&quot;So let&#39;s start to bring this together. The web as a platform is a result of its architectural simplicity, the use of a widely implemented and agreed-upon protocol (HTTP), and the pervasiveness of common representation formats (JSON). Fashion (gRPC, GraphQL, RPC, SOA, etc.) will come and go. However, creating distributed systems with web-based APIs in the same manner of the web will continue because of foundation in something deeper, more substantial. This is because of web principles like:Independent Deployment and EvolutionIndependent ScalabilityResiliency/Isolation The key for distributed systems success is a few well-known actions and the application-specific interpretation of resource representations.According to the book, ‘The Modern Firm&#39;, by John Roberts, culture is three things: people, architectures, and routines.A software development culture is not ping pong tables and keg stand Fridays. Culture is not open floor plans or the glowing adjectives used in press releases. Culture is how a company behaves when stressed.By mimicking the web, and embracing people, architectures, and routines that promote loose coupling, individual scaling, and resiliency between individual elements, the company I work for has embraced an API culture for sustaining innovation. How successful would a garden be if every plant had to grow at the same rate? If the entire ecosystem was comprised of a single flower? We nurture an ecosystem that is diverse, has a degree of independence, but is mutually responsible to the whole. More importantly, knock on wood, that firmament will remain stable while we evaluate new technology fashions that arise.The faster layers propose things. But we&#39;re not beholden to try everything. The slower-moving, cultural layer constrains the faster moving layers for the stability of the entire system. That said, how do we use this when evaluating change? Let&#39;s look at two comparable, but different, API-related items. On the surface, we might lump things like hypermedia and microservices together. They are both popular topics on the API speaking circuit over the last half decade and, in a rush, we can hand-wave at them as &quot;web-API&quot; things. I&#39;ve written my email newsletter, NetAPI Notes, for the last several years. I consume numerous blog posts, slide decks, and video recordings every week in an attempt to share only the best, most salient information with my busy audience. In parsing all that material, it has become clear that microservices has taken root across software development shops in a way that hypermedia hasn&#39;t. It doesn&#39;t mean that hypermedia is a bad idea - far from it. And yet, time and time again, these hypermedia seeds cast don&#39;t seem to flourish. The Pace Layer model provides a theory.Microservices are implementation details. They are supposed to be the smallest possible cohesive unit in a system.As Irakli Nadareishvili likes to say, &quot;microservices are not about reuse!&quot; They are about reducing the coordination overhead costs among teams. They are not &quot;little APIs&quot;, although they use all of the API infrastructure (the protocols, networking frameworks, etc.) that already exists within a company. They lack exposure (remember, they&#39;re not about reuse) in order to maximize their ephemeraility.They are like the chairs in this building. Or the pine needles in the forest. The rate of change is within the infrastructure layer.Hypermedia is more than just providing links to related information, although it might be pitched that way.At a previous e-commerce job, I was an backend developer and architect for a product perfect for hypermedia. On checkout, the business wanted to dynamically A/B test various upsell offers based on the contents of the cart. Because of the rate at which they wanted to test offers, combined with the dynamic nature of the cart contents, trying to bake every possible upsell paramutation into an executable that went through an app store approval process (itself which might take two weeks) was impossible.Hypermedia is a great solution for &quot;workflow&quot; like events, which the checkout flow primarily was. Each state returned by the server would provide links to the next step. That next step may change, depending on what is being tested. The mobile application would navigate the path presented it, and the business case would be fulfilled.Despite the natural fit, however, the work floundered. Hypermedia is more than just links. Its an inversion of communication flow. Rather than the mobile developer being able to look at the totality of exposed functionality and call their shot, they where now expected to respond to a bread trail they were given. It was a different architecture resulting in a different calling routine for the people involved. As we mentioned from John Robert&#39;s definition, people, routines, and architecture are aspects of culture. Hypermedia, done correctly, challenges conventional development paradigms. It requires the appropriate supporting culture, something that moves more slowly to support new forms. It doesn&#39;t mean that hypermedia will never happen. What it does mean, however, is that adoption is on the order of a culture change, not infrastructure. Not only does it take longer, but successful culture change also requires a different set of approaches.Note: this is a model. Anyone using a model should be quick to share the George Box quote, &quot;all models are wrong, but some are useful&quot;. But despite the fact they are an oversimplified version of reality, a good model let&#39;s us see a situation in a new light, and makes us ask different questions in the pursuit of new and/or different insights.Using Stewart Brand&#39;s Pace Layering model, I conclude that there haven&#39;t been many compelling cases of hypermedia because the layer that needs to change, an organization&#39;s culture, moves at a much slower rate in adopting new things. Changing culture is more challenging than changing infrastructure. I&#39;ll leave the exercise of walking through GraphQL, what change layer it is most likely to be, and the future ramifications to the reader. However, if you do that, keep the following questions in mind:Of the problems that GraphQL claims to solve, out of which layers in the pace layer did those problems emerge?In which layer are those problems most felt?From which layer is a solution most likely to merge?For example, consider a company where GraphQL is being considered. Perhaps previously created REST-ish APIs have had poor bounded contexts, ill fitting with desired business experiences. But if the culture of a company (the people, routines, and architectures) can&#39;t accruately articulate well isolated, composed pieces of business functionality, what happens if the culture stays the same and we swap infrastructure, instead?Your mileage may vary. But I&#39;d argue that, in the above example, you&#39;ve conceded defeat and pushed the hard work of creating well-understood business interactions onto the integrating client. Is that a sustainable decision for your ecosystem? Or, over time, will we look back on this as a moment where Kudzu was encouraged?We work in an industry proficient in eating its young, of chasing the dragon of the ‘next big thing&#39;, of disposing perfectly workable solutions in the pursuit of the next silver bullet. We can&#39;t (or want to) stop the growth of our ecosystems. Excellence within our software development circles will remain an ongoing, evolving conversation with constant change. But we also don&#39;t have to accept a binge-purge cycle of architectural violence as a given. We can break that pattern. We can stand on the shoulders of giants, rather than repeatedly attempting to chop them off at the knees. Like attentive gardeners, we can carefully cultivate dynamic, complex environments where innovation can happen, while being wary to threats that might jeopardize the balance. Thank you for your attention.* Update 2023-12-20: Scooter startup Bird has declared bankruptcy.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-10-31T00:00:00-05:00'>31 Oct 2018</time><a class='article__image' href='/2018/10/31/Gardeners-Approach'> <img src='/images/2018/10/gardening_pixray.png' alt='A Gardener&#39;s Approach to Growing an API Culture'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/10/31/Gardeners-Approach'>A Gardener&#39;s Approach to Growing an API Culture</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Adding SSL to WebAPI.events",
      "category" : "",
      "tags"     : "Milestones and Software Development",
      "url"      : "/2018/08/13/UpdatingWebAPIEvents",
      "date"     : "Aug 13, 2018",
      "content"  : "A screenshot of the previous WebAPI.events desktop experience.The Original Architecture - Spreadsheets &amp;amp; 3rd Parties &amp;amp; Captive Portals, Oh My!Years ago, in an effort to support the API community, I started a website called “WebAPI.events”. It listed a collection of upcoming, in-person conferences and meetups for those interested in service design.I used the original site as an opportunity to play with several ideas converging in my head. The first was using a Google spreadsheet as the data store. Setting up, securing, hosting, and maintaining traditional database software seemed like overkill for a little project like this. A spreadsheet also, significantly, broadens the audience able to follow with a similar approach.I also didn’t think a little “tool” site warranted a paid hosting account. Github pages are a simple, free means of hosting “static” sites - those comprised of CSS, HTML, and JavaScript. The “trick” was to get the information from the spreadsheet to Javascript uploaded to Github. For that, I used APISpark, from Restlet. After some configuration, it converted a Google spreadsheet into an API.That worked for many years. It never occurred to me, however, that SSL was something that this kind of site needed. Even when free certs became available, from sources like LetsEncyrpt, it seemed silly. I wasn’t storing sensitive information!Besides, not having SSL made WebAPI.events my go-to on “captive portals”. Encrypted sites, like Google or Twitter, usually just timed out if I attempted to open them before agreeing to the captive portal terms. A quick browse attempt to WebAPI.events, however, and the hotel sign-in page appeared immediately.The Need for ChangeToday, however, there are several reasons to change. The first was the announcement that Chrome would begin marking ‘http-only’ sites as insecure. It was a move copied by other browsers, like Firefox. Some, like RSS co-creator David Winer, felt the move was a gross overreach, and that it painted sites that don’t collect info, like webapi.events, with too broad a brush. However, I was convinced that my site needed SSL after watching security expert Troy Hunt demonstrate the importance for static sites.This happened about the same time that Github announced SSL support for custom domain names. It was the right thing to do, it was free, and it should have been easy. With little other excuse, it was time to get to work.The WorkThe first bit was some light rework on the software architecture. Out went the Google Form fronting the spreadsheet, the spreadsheet itself, and RESTlet. I’d just edit JSON data, directly. It would be stored in a file alongside the site code. The GUI, rather than calling an API, would instead load JSON from the same site. That part of the plan went pretty much as intended.I live tweeted the challenge of updating the site within the runtime of the latest Mission Impossible movie. The part that tripped me up was the application of Github’s cert on a custom domain name. I was in good company. I ended that tweet-storm, and the evening, on a sour note.After a few more fruitless attempts, I resorted to the CloudFoundry solution that had worked so well for my personal site. A few minutes referring to my notes from last time, some time to let the new d33ts propagate, and webAPI.events was back!Yet to DoAt the time I was pulling this piece together, designer Eric Meyer shared a different perspective. He described how certain parts of the world, like rural Uganda, are dependent on geosynchronous-satellite internet. Because of the slow speeds and rampant packet loss, local caching servers are a popular thing.HTTPS is meant to prevent “man-in-the-middle” manipulations of a page. However, caching content also happens to require a “man-in-the-middle”. The move to SSL everywhere has rendered these important services unusable.A possible solution is the usage of “service workers”. I don’t know much about them, right now, but it seems important in order to enable reasonable access to the widest audience possible.As Eric points out, it doesn’t completely solve the problem. There is still the issue of older browsers and operating systems. And it is not just in far flung locations; libraries are another location where those dependent on access are limited to whatever older installations are available. Service workers won’t address that situation.The design could also use some twiddling. What is there, now, is serviceable (although the table is a bit small on mobile devices). There are templates available, but the thousands of CSS boilerplate to support many responsive designs is shocking. Given the normalized complexity in everything from cloud deployment pipelines to front-end JavaScript frameworks, I probably shouldn’t be surprised. But damn.A screenshot of the new WebAPI.events desktop experience.ConclusionSo webapi.events is refreshed. It has a simplified workflow, reduced dependencies on 3rd parties, a simplified design, and is only ever served up with SSL.And those “captive portals” at airport and hotel wifi spots? Rather than pinging my own stuff, I’ve started using “NeverSSL.com”. Simple, easy-to-remember, and perfect for man-in-the-middle hijacking.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-08-13T00:00:00-05:00'>13 Aug 2018</time><a class='article__image' href='/2018/08/13/UpdatingWebAPIEvents'> <img src='/images/2018/08/padlock_craiyon.jpg' alt='Adding SSL to WebAPI.events'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/08/13/UpdatingWebAPIEvents'>Adding SSL to WebAPI.events</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Rethinking NPS for API Quality",
      "category" : "",
      "tags"     : "Software Governance and management",
      "url"      : "/2018/07/10/Update-on-NPS",
      "date"     : "Jul 10, 2018",
      "content"  : "Previously, I shared my team’s 2017 blueprint for API Governance. A component was measuring API quality using a “management tool” called Net Promoter Score, or NPS. While NPS is usually used to quantify customer loyalty, I had hoped to repurpose it. As I explained in my previous work, NPS shortcutted much of the hand-wringing and tedious defense of any methodology we derived ourselves; when measuring “quality of experience”, NPS was already lingua franca among leadership.You are probably familiar with NPS, even if you don’t know it by name. Ever been asked to rank your experience between a 0 and 10? Most likely your answer is being compiled into an NPS score.After a year of experimenting with NPS, however, we’ve moved on. This is a update on the why, what we’ve done in the first half of 2018, and where I see continuing challenges in measuring API quality.There are many repudiations of NPS. However, none encapsulated as many of the problems we were experiencing as Jared Spool’s “Net Promoter Score Considered Harmful (and What UX Professionals Can Do About It)”.Problems with NPSIt Skews NegativeAs Jared points out, NPS is not a mean/average of all the scores collected. Rather, values “0-6” are considered detractors, or people who are unlikely to recommend something to others. Based on how my team used it, this was whether my API team would recommend the API design for emulation by others within the org. A “7” or “8” is passable; neither so offensive that we have a clear call to action, but not the best of what we hope to see. Anything rated “9” or “10” we shout about from the roof tops.Framing scores int his way doesn’t match with people’s expectations. A ‘middle of the pack’ rating of 5 seems as though it should be neutral, neither good or bad, halfway between either pole. Yet, when computing NPS (the % of promoter scores minus the % of detractors), this value negatively impacts the rating.It became a training issue for reviewers. And if it was non-obvious for the people doing the scoring, it certainly was a challenge for the development teams reviewed (who are different than executive leadership).When meeting with busy folks outside your normal sphere of influence, you only get a few, fleeting minutes to hook them with “an ask”. Arguing over methodology minutia was not a good use of precious time.Quality Improvement, on Individual APIs or Otherwise, is Washed OutLet’s suppose a team has done the bare minimum for an API and, for various reasons, it exhibits intention that is neither consistent or cohesive with what has come before. My team would give this design a low score in an effort to incentivize improvement. Let’s say that score is “1” (a detractor). There’s no promoters, so the NPS results in a value of -100, or the worst score a design can get.Shocked by “-100”, the group sets out to improve the design: perhaps they improve the documentation, address some of the unintuitive RPC patterns, etc. The prioritize this work against a backlog of competing features, resubmit for review, the reviewer acknowledges their effort by scoring them a “6” and……the team still gets -100 NPS. The team has made huge strides; their design is now above average! Yet, in the number reported to leadership, that effort was invisible. Imagine how demoralizing that would be on the part of the team, and how unlikely they’ll prioritize effort on new work in the future.There’s also a scenario, as Jared points out, where a team improves a design previously rated “8”. That “neutral” score results in an NPS of 0. But, with a bit of polish, the design is re-reviewed at “9”. The result is an NPS of 100: a perfect score!What is more valuable for future integrations? A team that improves a design from “1” to “6”, or a team that moves from “8” to a “9”? With NPS, the former is ignored. In the latter, it is overemphasized.The purpose of that my team produces these metrics is to incentivize positive behavior. If the correct behavior is happening, but it isn’t reflected in the metrics, then we need to change things.What We’re Doing NowA sample chart of what we&#39;re currently reporting out, grouped by business division.Since moving away from NPS, we’ve gone to a much more straightforward average of reviewer scores. While each of these have a high degree of nuance, at a high level APIs are scored on:  Standards Adherence  Completeness of the Documentation  Consistency and Cohesion with Previously Published Work  Viability to Exist as an API ProductThe average score remains useful for leadership to know where they are in their API design maturity. But what is much more actionable for teams is directed feedback. A team that learns that their design averaged a score of “6” could cast about for changes to make on their next version. Or they could address a detailed list of concerns.What’s NextStop Converting Noise into ScienceAfter moving away from computing NPS, we still had a considerable amount of scoring activity that was useful. But it was based on the 11-point (0-10) scale used by NPS. So, when we continued with more straightforward averages, we maintained the previous scale so that we could blend the old and new scores.Unfortunately, I’d be hard pressed to define the specific difference between an API design where one is rated a “4” and another is rated “5” on an 11-point scale. The distinction isn’t clear and leads to situations where one person’s “7” may be another person’s “5”.A 3-point scale is very straightforward: if an API design is “bad”, give it a “1”, just ok APIs get a “2”, and awesome API designs get a “3”. However, that doesn’t leave a whole lot of nuance. Something akin to a 5-point scale seems to be a better fit. However, retrofitting the past year of scoring activity, along with avoiding polarization tendencies remains a challenge.Conflicts of Interest when Judge, Jury, and ExecutionerPresenting a picture of where leadership is at in their journey is one thing. We create the expectations and measure how well we meet those expectations. A conflict of interest arises when leadership, subsequently, sets specific scoring targets that they expect my reviewing team, working with software development teams, to deliver.That could be a problem. The USDA food inspector isn’t required to show improvement in the produce they’re reviewing. The engineers that inspect bridges aren’t expected to have their defects detected trend downward overtime. Putting those who review a thing with a well intentioned, but misplaced, incentive can result in some troubling outcomes. There’s tremendous pressure to pull a punch here, or turn a blind eye there.The team and I need to define a better way forward here, with clear accountability and laser focus on driving the correct outcomes.ConclusionsUltimately, this is part of a healthy process. We tried something, learned a ton in the process, and are iterating to get to something better. We have a ways to go. But I think it’s a sign of maturity to be able to take on new information and evolve to something better because of it.Do you have an API quality metrics story? Are you wrestling with accountability and socialization of organizational improvements? Shoot me a line. I’d love to compare notes.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-07-10T00:00:00-05:00'>10 Jul 2018</time><a class='article__image' href='/2018/07/10/Update-on-NPS'> <img src='/images/2018/07/filecabinet_stablediffusion.png' alt='Rethinking NPS for API Quality'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/07/10/Update-on-NPS'>Rethinking NPS for API Quality</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Facebook, Regulation, and Who Controls the Kitchen Sink",
      "category" : "",
      "tags"     : "Culture and Software Governance",
      "url"      : "/2018/03/26/Facebook",
      "date"     : "Mar 26, 2018",
      "content"  : "In the wake of Cambridge-Analytica, Facebook seems to be taking the wrong lessons from the incident (or, if I’m cynical, they’re skewing in a direction that cements their market dominance). They are correct that the loss of trust is so much bigger than whatever terms of service Cambridge Analytica violated. However, the stated conclusion that there is a binary relationship between data portability and privacy - that either everything must be shared or Facebook controls everything - is wrong.IntroLast week, concerns over Facebook’s data collection practices reached an all-time fever pitch. I had intended on sharing my thoughts, along with a handful of recommended takeaways for API providers, as part of my Net API Notes. However, the longer I compiled breaking news, the longer the piece became. Eventually, it seemed warranted to break Facebook off into its own dedicated post.I’ve tried to be thorough, but “uncritical” set sail awhile ago. I’m biased. People, like techno-sociologist Zeynep Tufekci, raised the alarm years ago, when meaningful action could have been taken.  I left Facebook around the same time over concerns on the power uber data aggregators wield.Despite those protestations, Facebook’s practices continued. It doesn’t appear that the internal conversations ever switched from “can we?” to “should we?” And now the mob, embittered and frustrated by the cultural malaise of the moment, are coming with torches and regulatory pitchforks.About. Goddamn. Time.BackgroundMid-March, The New York Times reported that Cambridge Analytica improperly acquired the private data of approximately 50 million Facebook users. It then, subsequently, used the psychological profiles it created with the data to target voters on behalf of the Trump campaign during the 2016 presidential election. The Obama campaign, in 2012, also ingested Facebook relationship data. However, while the Obama campaign was transparent that people were giving their information (and their friends’ information) to the cause of re-electing Obama, the Trump campaign used data culled from a personality quiz app.This app used the 1.0 version of the Facebook’s Graph API. That version launched in April, 2010 and allowed developers to “not only see the social connection between people, but see and create the connections people have with their interests - things, places, brands, and other sites”.Very little information is needed before profound insights can be inferred about a person. A Carnegie Mellon study has shown, 87% of Americans can be positively identified using only a 5-digit postal code, gender, and date of birth. Full name, postal code, and date of birth equate to voter rolls, which themselves are sold by many states. Using nothing but likes, researchers Michal Kosinski, David Stillwell, and Thore Graepel have successfully shown they can predict a wide range of sensitive personal attributes including “sexual orientation, ethnicity, religious and political views, personality traits, intelligence, happiness, use of addictive substances, parental separation, age, and gender”.Further, version 1.0 of the Graph API didn’t just make information about a specific user available; it allowed “extended permissions”. This feature allowed approved apps to request a range of users’ friends, along with their information. This additional information did not require the consent of those friends before it was shared. In addition to Personally Identifiable Information (or PII), this friend information included education, groups, hometown, interests, location, relationships, religion, work history, etc. Having understanding of information flow is powerful; according to one study, ‘95% of the potential predictive accuracy attainable for an individual is available within the social ties of that individual only, without requiring the individual’s data’.A University of Cambridge professor, Aleksadr Kogan, created an app called thisisyourdigitallife. Built using Facebook’s Graph API, he seeded the initial userbase with people paid through Amazon’s “Mechanical Turk”. Subsequently, around 270,000 people were paid between $1 and $2 to download and use the personality quiz app. Through the use of ‘extended permissions’ the initial 270,000 users resulted in 50 million populated profiles; profiles containing the names, dates of birth, employment history, likes, and more. Aleksadr then gave the information he collected to Cambridge Analytica. Technically, only the last step violated Facebook’s rules, which prohibit selling or giving away data collected by a third-party app.Graph 1.0 was deprecated on April 2014 (and access ended entirely in 2015). The second version of the Graph API, while providing information for the conscenting user, no longer has extended permissions. However, the data collected by external entities during this time cannot be expunged; revoking access does nothing to the apps that might have had access and saved themselves a copy. The data is out there, on who-knows-how-many private servers, with the potential to be purchased, aggregated with other datasets, and weaponized for future scenarios.In fact, as the author of the Facebook game ‘Cow Clicker’ stated, “all the publicity around Facebook’s Cambridge Analytica crisis might be sending lots of old app developers, like me, back to old code and dusty databases, wondering what they’ve even got stored and what it might yet be worth”.Furthermore, the abuses didn’t stop when Graph 1.0 was fully shutdown in 2015. Other Facebook products, like Instagram’s API, still exhibit similar behavior. In March, 2016, Facebook expelled a group that was using its API to scrape data about people who expressed interest in Black Lives Matter. The group had been selling the data to police departments. At the end of the same year, the Department of Housing and Urban Development launched an investigation following concerns that Facebook’s advertising tools allow real estate advertisers to discriminate users according to race. Facebook has also admitted to collecting call and text message history of users who own Android phones (while users were asked if they wanted to import their phone contacts, it was not obvious to many users that they were agreeing to have their cell phone activity recorded).Mark Zuckerberg responded last Wednesday afternoon, outlining reactive steps to the situation: Facebook would investigate old apps that used v1.0, further restrict access to data, and give more transparency and control to end users.Meanwhile, Facebook and Cambridge Analytica have threatened to sue the journalists that broke the original story. This seems, primarily, over the erroneous use of the word “breach” in the course of describing events; if determined to be a data breach (which this wasn’t), the company could face fines.ConclusionsFrustratingly, Facebook seems to be taking the wrong lessons from the incident (or, if I’m cynical, they’re skewing in a direction that cements their market dominance). They are correct that the loss of trust is so much bigger than whatever terms of service Cambridge Analytica violated. However, the stated conclusion that there is a binary relationship between data portability and privacy - that either everything must be shared or Facebook controls everything - is wrong.Techdirt summarized the round of media interviews that Mark Zuckerberg did, where he said:  “I was maybe too idealistic on the side of data portability, that it would create more good experiences — and it created some — but I think what the clear feedback from our community was that people value privacy a lot more.”Later, he bemoans having to make these kinds of tradeoffs:  “I guess I have to, because of [where we are] now, but I’d rather not.”If consumers had control, it would take Mark out of the leadership role that he is, apparently, uncomfortable playing.  Why can’t someone easily be able to bulk-delete “likes” older than a year? Why is it necessary for Facebook to retain work history older than the last employer? Sexual orientation, race, and religious affiliation can get someone killed - so why can’t people indicate that these should never be stored, or even inferred - as part of their profile?The most valuable part of Facebook, for an individual, is not the status updates, or the images uploaded - it is the network of connections they’ve built. This is why so many apps, unable to get the social graph from Facebook, resort to the kludge of the “access your contacts” email workaround. If the individual chose, why couldn’t they take those relationships (sans ‘extended permissions’ data) with them somewhere else?Rather than allow apps to hoover up the kind of information useful for psyops, why not allow developers to create 3rd party tools for permissions configuration, the kind Cory Doctorow wrote about?Unfortunately, because there is little market incentive for Facebook to do so. Till now, the profitable thing has not aligned with the right thing. As Doc Searls has written, this is a problem not just for Facebook, but for an entire online publishing industry dependent on building advertising panopticons for revenue growth.Regulation, above and beyond what currently exists, is coming. It could make a difference. However, ideas currently swirling entrench Facebook as the market leader, with little likelihood of alternatives arising. An example is the European ‘General Data Protection Regulation’ (GDPR). It goes into effect May, 2018. Some have hailed it as progress toward defining when user consent is necessary. It also has provisions for data portability. However, there are already workarounds devised, with the social graph considered a “legitimate interest” of the social network. As a ‘legitimate interest’ of the business, it is not privy to export.As Techdirt summarized:  “Solving” the problem isn’t going to be solving the problem for real – and it’s just going to end up giving Facebook greater power over our data. That’s an unfortunate result.What we need is thoughtful, not knee-jerk, regulation. We need consumer-friendly policies that promote the principles of the open web and eschew monopolies. We need to treat personal data with the kind of care and responsibility that we do with powerful, and potentially dangerous, things in the real world. And we need to look for answers outside of Facebook, because there’s few incentives to drive the necessary change from within.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-03-26T00:00:00-05:00'>26 Mar 2018</time><a class='article__image' href='/2018/03/26/Facebook'> <img src='/images/2018/03/sadmark_stablediffusion.png' alt='Facebook, Regulation, and Who Controls the Kitchen Sink'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/03/26/Facebook'>Facebook, Regulation, and Who Controls the Kitchen Sink</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Role of Product Management in API Design",
      "category" : "",
      "tags"     : "management and API Design",
      "url"      : "/2018/03/12/ProductManagementInAPIDesign",
      "date"     : "Mar 12, 2018",
      "content"  : "  “The handles of a craftman’s tools bespeak an absolute simplicity, the plainest forms affording the greatest range of possibilitites for the user’s hand.  “That which is overdesigned, too highly specific, anticipates outcome; the anticipation of the outcomes guarantees, if not failure, the absence of grace.” - William Gibson, All Tomorrow’s PartiesSuccessful APIs, whether they are external products or internal glue, require strong product management. However, given an API’s ephemeral nature, product managers may have difficulty with how to proceed. This poor API product management results in a product that doesn’t meet the needs of users. Adoption will be limited. Integrations, when they do happen, will be difficult. And correcting mistakes after development will remain a demoralizing and expensive proposition.Martin Eriksson defines the Product Manager role as an expertise that lies at the intersection of tech, business, and UX. Martin then quotes the book, Inspired, that states a product manager should ‘discover a product that is valuable, usable and feasible’. What constitutes “valuable”, “usable”, and “feasible” for an API?ValuableAt the most fundamental level, an API must provide a useful function. Determining what is useful and what is not is the first job for an API product manager.Building for the Correct AudienceProduct managers should understand the audience that will consume the API. That may be harder than it sounds, as there are several different types of people evaluating an API, each with their own questions. As Brad Fults mentions, these audiences may include, but are not limited to:  Decision Makers evaluating competing API products  Developers looking to get started  Integrators attempting to debug a specific issue in an existing clientEach audience has different needs. For the decision maker, is the functionality provided by an API the same, if not better, than other competitive offerings? Can a developer get started with an API easily, perhaps with nothing more than a CURL statement? Does the API return the type of error messages that, when things go wrong, make it easy for an integrator to fix?API Design that is ‘Outside In’, not Reflections of Internal ImplementationsAn API design should align with the integrator’s understanding. Creating an interface constrained to the internal system implementation is rarely a good idea. These systems, particularly those that have existed in legacy environments, are a complex aggregation of shifting business priorities, technical advancement, team experience, etc. Exposing years (if not decades) of ‘dirty laundry’, at once, significantly increases the barriers to comprehension and adoption.Clear OwnershipProduct management includes a degree of ownership. The part of ownership that integrators care about is the amount, and form, that ownership is exhibited in. Trust in an API is difficult to earn and can be easily frittered away.Ownership of an API translates to the following communication:  Uptime Dashboard/SLA  Change Log/Release Notes  Roadmaps  Known and Communicated Support and Feedback ChannelsThe individual forms by which each manifest may vary. However, each of these attempts to convey stability and permanence; two crucial elements when wooing developers with other options. A product with a future and team behind it is orders of magnitude more desirable than unmaintained code deployed on a computer under someone’s desk. A product manager should ensure that the former is being communicated, not the latter.UsableThere are a variety of different approaches for web-based APIs. Whether using RPC, REST, or subsequent variations, an API design produced by one team may vary significantly in usage and affordances from another team’s product - even when both teams work for the same company! The number of design choices, and how they subsequently manifest in the design, require additional work to ensure the designs are usable.DocumentationThis collection of differences means that documentation is incredibly important. In fact, in John Musser’s talk, “Ten Reasons Developers Hate Your API”, “sucky” documentation was listed as the #1 API problem.Reasons that documentation may suck include, but are not limited to:  Being inaccurate/out-of-date/incomplete  Lacking a getting started onramp  Unprofessional and/or lacking clarityFormats that capture an API’s intent, like the OpenAPI specification, are a start. These integration contracts can be used to render documentation in a manner similar to how annotations in a Java codebase can render Javadoc.However, like Javadocs, this “documentation” is often the bare minimum that can be done towards effective communication and understanding. An API product manager should be closely involved in creating an API’s documentation. They should ensure that the business value of their product is clearly captured and expressed to the intended audience.StandardsA common design consideration is “the principle of least surprise”. Design works best when it reuses familiar interface concepts. With a user interface (or UI), this allows end users to successfully make educated guesses. This results in better user experience (UX). A corollary developer experience, or “DX”, should be part of the consideration when creating an API design.Common industry patterns should be used. Where possible, data should adhere standards, and those standards should be explicitly referenced in the documentation. For example, why force a consumer to parse your bespoke date format? Use ISO8601 instead, reference it in the documentation, and be done with it. Extra points if the API design takes advantage of the work on schema.org and properly uses media types.FeasibleDifferent integrations will have different consumptions needs. Some may be able to consume the entire payload as designed. Others, due to computational or bandwidth constraints, may want a refined perspective on the resource available. Working with potential consumers to build in rate controls from the beginning is important.MalleabilitySupport for sort ordering and pagination on returned collections is important. Default return amounts, rather than to defaulting to the entire collection, should be explicitly stated in the documentation and modifiable (within reason - page size limits should also be explicitly called out). Filtering, depending on the collection size, may be important. A more advanced option, depending on the need, is to allow for selective parameter retrieval.CacheabilityAPIs should take advantage of the idempotent and safe natures available on the appropriate endpoints. Services enhance cache-ability by setting headers on responses. These headers, at a minimum, include:  Date  Cache-Control  Expires  Pragma  Last-ModifiedIt is also possible to use the ETag header for validating the freshness of cached representations, as well as helping with conditional read and update operations. Its value is an arbitrary string for the version of a representation, sometimes a simple hash of the underlying object.A product manager may not understand the exactly technical mechanisms behind how these headers work. However, they should desire the best customer experience possible, and - for many - that means zippy responses.Phil Sturgeon has a couple of fantastic pieces on HTTP caching. The first is a blog post on how to speed up API performance with HTTP response caching. The second is a presentation he recently gave that was posted to YouTube.Wrapping UpIf that sounds like a lot to manage, it’s because it is. Being a product manager for an API comes with all the research and testing of a normal product, but with an additional dash of technical acumen and developer savvy. But the reward - easier integrations, more developer happiness, and better expressions of business value - is worth it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-03-12T00:00:00-05:00'>12 Mar 2018</time><a class='article__image' href='/2018/03/12/ProductManagementInAPIDesign'> <img src='/images/2018/03/cowboys_midjourney.jpg' alt='The Role of Product Management in API Design'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/03/12/ProductManagementInAPIDesign'>The Role of Product Management in API Design</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "RIP John Perry Barlow",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2018/02/08/RIPJohnPerryBarlow",
      "date"     : "Feb 8, 2018",
      "content"  : "John Perry Barlow did many amazing things. He was a Grateful Dead lyricist. He was a Wyoming rancher for more than a decade and a half, itself no small feat. Much too late in my professional career I contributed to the Electronic Frontier Foundation (EFF), an organization he founded to fight for a free and open internet. However, JPB will be most notable, for me, as the author of the “Declaration of Independence of Cyberspace”.It starts:  “Governments of the Industrial World, you weary giants of flesh and steel, I come from Cyberspace, the new home of Mind. On behalf of the future, I ask you of the past to leave us alone. You are not welcome among us. You have no sovereignty where we gather.  “We have no elected government, nor are we likely to have one, so I address you with no greater authority than that with which liberty itself always speaks. I declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. You have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.”JPB wrote the manifesto as an email in 1996. Even in the wide-eye days of the web’s infancy, it was controversial. Arrogant. Eye-roll inducing. In light of everything today - from nation state cyber-warfare to the Snowden revelations, from Facebook manipulating elections to people dying from swatting - it is hard not to choke on the naivety.And yet, the loss of that innocence, and the visionary who articulated what the web could be, hurts so much.The same year that JPB declared cyberspace’s independence, I started my freshman year at college. His web became the web I aspired to. In addition to the manifesto, I was also quickly introduced to the works of William Gibson, Bruce Sterling, Neal Stephenson, 90’s British Rave Culture, Hacking, Phreaking, IRC, Napster, Icecasting, Pseudo, and so much, much more. Instead of fiddling with index cards, report research was just an AltaVista search away. I learned HTML on a Geocities site so that I could share the same miserable poetry as others from exotic locations like Europe, or Australia, or Des Moine. And music; there was so much music. Music to study to, music to make-out to, and music to ring in a new millenium where anyone with an ounce of ambition and a newly minted degree in computers could save the world (while getting fabulously rich in the process).The dot-com bust turned out to be a speed bump. In 2004-2005, I was a regular listener of podcasts and ran a web forum for an MMORPG guild. By 2007, I was all in on ‘Web 2.0’, or ‘The Social Web’. Friends attending SXSW that year invited me to try something called ‘Twitter’. By the end of that year, I was producing (poorly attended) conferences extolling the virtues of blogging for businesses. Brands would be conversational, not unidirectional! Businesses could harness the wisdom of the crowds! All aboard the Cluetrain! “If only,” I would argue without irony, “everyone would blog, we’d see we aren’t really that different!”Sitting here, writing on a private VPN network, in a browser meticulously stripped of as much ad tracking as I can manage, with a sticker slapped over the webcam, I’m humbled. This isn’t the web I want. This isn’t the web he wanted.JBP saw physical space’s city on the hill for what it was - a gated community of power and privilege that looked down on those different or unwanted. He called for something new. However, it is important to point out that JPB’s dream for cyberspace wasn’t an appeal for lawlessness; his streak of libertarianism wasn’t ‘do whatever you want’. It was an appeal to be something better than we’ve been. The blackest backwaters of Reddit, or the white power movement, or malware opportunists were inevitable, but unwelcome. He was in a race to sow the seeds of something wonderful before the weeds of our worst nature could take root and choke it out. In JBP’s “new home of Mind”, we’d see a vision of a virtual place beyond the violence beget of physical judgement and maybe, just maybe, we’d finally treat each other like human beings.And now John Perry Barlow is dead. A mantle has been laid down and its owner put to rest. Cyberspace is dead. Long live cyberspace.A Declaration of the Independence of Cyberspace by John Perry Barlow. from IDEALOGUE on Vimeo.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-02-08T00:00:00-06:00'>08 Feb 2018</time><a class='article__image' href='/2018/02/08/RIPJohnPerryBarlow'> <img src='/images/2018/02/jpb_midjourney.png' alt='RIP John Perry Barlow'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2018/02/08/RIPJohnPerryBarlow'>RIP John Perry Barlow</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Three Ways Conways Law Affects API Governance",
      "category" : "",
      "tags"     : "Presentations and Software Governance",
      "url"      : "/2017/12/07/ConwayAndAPIDesign",
      "date"     : "Dec 7, 2017",
      "content"  : "[Update 2023/07/25: Several years later, I regret contributing to the cult of personality around Elon Musk. At the time, in 2016, he still seemed like a green energy champion and space innovator. The analogy I took from one of his talks and applied to APIs below still applies. However, the last several years’ worth of actions have proven him loathsome. I’m sorry for having elevated this individual in whatever small way.]When I presented ‘3 Ways Conway’s Law Affects API Governance’ at the 2016 API Strategy Conference, I had no idea that it would become my most requested talk. Even now, a year later, I still get the occasional email asking if the talk has been posted anywhere. What had started as a handful of observations in how organizational structure was showing up in API designs had struck a cord with those in other areas.So why haven’t I shared the deck before now? No good reason; there just always seemed to be some other more pressing need (or want). However, people persisted and made me realize that the content wasn’t just a blip in the conference milieu; rather, it was something that needed to be shared.So, without further ado, here’s “3 Ways Conway’s Law Affects API Governance”.Before I start my slides, I&#39;d like to start with someone else&#39;s presentation. Recently, Elon Musk presented his plan for how to make humans an interplanetary species. It is available online and has a number of interesting ideas. What intrigued me most, however, was how Musk illustrated why going to Mars remains prohibitively expensive. Musk argued that &quot;full reusability&quot; was vital to reducing the cost, thus making a trip to Mars viable. How many of you flew on a plane to get to this conference? Elon’s argument that if we built a 737 for one time use, a seat from LA to Las Vegas would cost $500,000. Of course, a plane is reused, lowering the price which makes air travel much more accessible for everyone. Why is that? Because the plane is used, day after day, year after year. The cost, prohibitively expensive when used once, is distributed over the life of the vehicle. Reusability is why a ticket from LA to Los Vegas can cost as little as $43 dollars. Reusability is a key cornerstone in Musk&#39;s plan to reduce costs to the point that going to Mars becomes viable. And reusability is a compelling feature for internal APIs.Building a plane for one use is crazy. And yet enterprise organizations are filled with point-to-point software, one time use API interfaces that the organization pays for. Then they do that again, again, and again. Instead of creating consistent service architecture and demonstrating service re-use, teams inadvertently produce Just a Bunch of REST Services (JBORS): a spaghetti web of One-to-One connections between providers and consumers. As a result, an enterprise may find the REST effort doesn’t improve technical or business agility, but, instead, end ups in only swapping out IT toolsets, message formats, and protocols.The job of API governance is to identify and mitigate these problems. Web APIs promise better business agility while, simultaneously, achieving better ROI on developer time. This is why I&#39;ve seen an increasing number of APIs created within our organization. With sufficient volume, patterns begin to emerge. Capital One, broadly speaking, has five lines of business. In the card business alone we have hundreds of sprint teams developing and deploying APIs.Our teams are API-First. They describe their API intent in an Swagger/OpenAPI description. They then submit this for collaboration. The graph shown here are API submissions for review to my area, the API Center of Excellence, grouped by week. In the first year there were over 2600 submissions for more than 650 unique APIs. Sure, there’s a fair amount of poor resource design or misapplication of a status code in those designs. For those API design problems, the fix is straightforward. However, when you look at this many APIs, deeper, more challenging design issues begin to emerge. At enterprise scale, reusability can be blocked by something deeper, something more institutional, than what can be handled simply by &quot;lexicon police&quot;. Harvard Business Review may not be where you&#39;d expect to seek out your software architecture insight. However, they published a fantastic study attempting to measure the duality between product and organization architectures. The conclusion was: &quot;[software] products tend to &#39;mirror&#39; the architectures of the organizations in which they are developed. This dynamic occurs because the organization’s governance structures, problem solving routines and communication patterns constrain the space in which it searches for new solutions&quot;Of course, anyone that has seen a microservices presentation will have heard of this phenomenon by a different name: Conway&#39;s Law. Informally, Conway&#39;s law has come to be known as:&quot;Any organization that designs a system will produce a design whose structure is a copy of the organization&#39;s communication structure.&quot;This isn&#39;t new, revelatory linkbait dominating social media at the moment. Conway made these observations about software development in 1968. The reason we&#39;re still talking about it today is because it continues to illustrate a fundamental piece of human behavior. As Conway, more formally, stated: &quot;Consider a large system S that the government wants to build. The government hires company X to build system S. Say company X has three engineering groups, E1, E2, and E3 that participate in the project. Conway&#39;s law suggests that it is likely that the resultant system will consist of 3 major subsystems (S1, S2, S3), each built by one of the engineering groups. More importantly, the resultant interfaces between the subsystems (S1-S2, S1-S3, etc) will reflect the quality and nature of the real-world interpersonal communications between the respective engineering groups (E1-E2, E1-E3, etc).&quot;Let&#39;s discuss how this behavior affects API design.Fred Brooks, in his seminal work, The Mythical Man Month observed that the more people that were added to the project, the more likely that software project would take longer. Just adding people to a project doesn&#39;t make it go faster. In fact, the increase in the amount of communication overhead is more likely to slow a project even after the initial &#39;drinking from the fire hose&#39; phase has past. Simply put, the more people, the more communication that needs to occur. That also applies to design. The more people contributing to a design, the more diverse the number of approaches, experiences, and desired outcomes a group is likely to have. The lack of cohesion result in an API design that is difficult to use. From Conway’s Paper: &quot;Ways must be found to reward design managers for keeping their organizations lean and flexible. There is need for a philosophy of system design management which is not based on the assumption that adding manpower simply adds to productivity.&quot;Businesses need to incentivize correct bounded context creations first, then apply manpower; not the other way around.  But what does the really mean? How does a company&#39;s communication patterns inadvertently affect API production? An advantage of adopting the microservice architecture is that small capsules of functionality are independently deployable. Work can be partitioned out to separate teams.  When beginning an API interface design, the correct identification of logical bounded contexts is essential. When done incorrectly, the resource association, or lack thereof, are a signal of the communication patterns of the organization behind the scenes. Let&#39;s start with a simple example. Suppose we need to create an API that does something with a company&#39;s users. We identify that we&#39;ll need two resources - the collection (&quot;/users&quot;) and the instances within that collection (&quot;/users/{userId}&quot;). Given that we want this done ASAP, a natural mistake might be to divide the labor across two different development teams; Team A will be responsible for the endpoints against &quot;/users&quot;, and Team B will create the design for the userId instance. Adding two development teams means that we&#39;ll have the work delivered in half the time, right? Isn&#39;t this &#39;division of labor&#39; in action?Any time you have a collections and instance resource, they strongly imply that they should be in a single API. However, I see these separated into different work units all the time. The teams are assigned to produce code by resource. Subsequently, when a you, a potential consumer of these APIs, goes to the portal site for discovery, you find multiple APIs related to a single concept - &quot;user stuff&quot;. Moreover, if the key provisioning requires separate keys in order to access each item, you&#39;ve just doubled the problem on the part of the user.Let&#39;s suppose that the teams did deliver their contributions in the expected amount of time. Chances are, if you have two teams, you&#39;re going to get two different approaches. Take the user object on the left; this is a simple set of fields to POST to the &quot;/users&quot; resource to create a new instance. We have things like &quot;name&quot;, &quot;street&quot;, &quot;city&quot;, etc. Simple and straightforward; no room for misunderstanding, right?Actually, even with this simple example, there&#39;s plenty of places for discrepancies to appear. Look at the output by Team B on the left. They&#39;ve taken the single &quot;name&quot; field and, instead, decided to represent it as two fields, &quot;firstname&quot; and &quot;lastname&quot;. Rather than having a number of address elements as siblings of the other user fields, they&#39;ve created an array structure. They start with &quot;home&quot;, but the structure leaves room for alternative values, like &quot;office&quot; and &quot;shipping&quot;. Even the &quot;zip&quot; has been modified to be &quot;postal-code&quot;, assuming that they intend to support both US and Canadian customers. This is a fairly trivial example. After quickly scanning the two objects, a consumer would be able to map values from one item to the other. However, imagine the kinds of internal jargon, abbreviations, and assumptions that may exist within one group that may not be obvious to another. By separating the design across multiple teams, the API consumer is forced to bridge these discrepancies, increasing their pain and sapping their productiveness.  The solution for this is to define the bounded context first. Let it determine the units of work, and then assign a single team to own that. Don&#39;t start with the number of teams available and let that drive the division of labor. Otherwise, there are guaranteed to be inconsistencies in the API nuances that are invisible to teams, but friction to integrators.Having a single team working on a common concept means that objects used in both the creation and retrieval are guaranteed to look the same, because the team has clear communication among itself (or should). Further, when consumers go looking, what they find maps to their expected model, rather than APIs designs via division-of-labor convenience.The second observation is a bit of a mouthful. However, how many have dealt with &quot;not invented here&quot; thinking? If so, you&#39;ve seen this effect in action.If you&#39;re within the same line of business, or even same geographical location your development teams will be much more inclined to reach out, build a bridge, and ask a question. The faces are familiar. Those folks are &quot;one of us&quot;. Different line of business? Hell, different floor in the same building? The attitude is much more likely to default to &quot;those people speak a different language - it would be easier to just do it ourselves&quot;. Let&#39;s return to our &#39;users&#39; resource example, only now the model has been included to include an instance of a user&#39;s preferences. Team A is put in charge of the code for this feature, including the API to retrieve and update these properties. These are common things that you would find on most accounts: language preference, avatar image, and so on. That works well and is used to populate a &#39;settings&#39; UI in an app or on the web. Everyone is happy when the 1.0 ships. A little while later, Team B is working on a new feature that allows users to customize the sort orders for their search pages. They&#39;ve got the ordering down to a science, but it is now time to save the user&#39;s preference somewhere. Conceptually, it should be part of the &#39;preferences&#39; resource. However, nobody on Team B knows anyone from Team A. In fact, Team A is in a different location. Team B could pick up the phone, make the introductions, relate the use case for the zillionth time, and argue with Team A over their existing backlog prioritization.Or Team B could create a new one-off resource: &quot;/users/{userId}/preferences/sort&quot;, and avoid all that. After all, Team B knows how to create APIs - they don&#39;t need help there. And &quot;preferences&quot; already kinda implies a collection, of which &quot;sort&quot; or &quot;sortOrder&quot; would be one. So what&#39;s the problem? The problem is that the lack of communication on the part of the teams will manifest as additional &quot;chattiness&quot; on the part of the consumers. Yes, adding &quot;just one more&quot; resource doesn&#39;t seem, in the moment, like that bad of thing. However, it is a slippery slope, as illustrated in this mockup on the left. In this sample we see things like &quot;out-of-office&quot;, manager, time zone, etc. If the previous strategy employed by Team B is allowed to proliferate, one could see how the resources would also explode into a host of one-off, fine-grained items. Imagine a consumer, like a mobile device, not only having to call each of these to populate a display, but track their dependencies on each of these. Yuck.The solution to this second item is identifying, and enforcing, that teams own a context, not a codebase. In our example, Team A owns the user preferences context (if not the user context itself). Any additions, updates, or removals from that context should be performed by the owning team. If not, the conceptual debt incurred in order to convenience the API producers will be, subsequently, paid on every integration.The 3rd Conway&#39;s Law Effect is that one&#39;s internal organization may not align to external perceptions. This can be extremely problematic when attempting to convert internal APIs to external products - things simply don’t map. Conversations are impeded and business value can&#39;t be derived, because the APIs on offer are from the perspective of internal hierarchy, rather than externally presumed functionality.Suppose we are responsible for the APIs in a global consumer goods business called &quot;Veridian Dynamics&quot;. There&#39;s the shampoo division and, somewhere upstate, the razors folks. Across the country lies the newly acquired &quot;Big Pumpkin&quot; division, responsible for the glut of seasonal products that one sees each fall- things like pumpkin spice candy, toothpaste, toilet paper, etc. They are the weaponized pumpkin division. Let&#39;s look at our first attempt to articulate what our conglomerate does. This first mapping results in a resource design organized around the various divisions. We create three high level path concepts to begin grouping those things that are similar. Under an &quot;api.veridian.com&quot; domain, we put an identifier for &quot;/shampoo&quot;, &quot;/razor&quot;, and &quot;/pumpkin&quot;. Each line of business has its own set of needs, which they exposed as APIs in the appropriate area. These take the form of collection and instance resources under the appropriate areas. Shampoo has its formulas. Razors have their own innovative product strategies. So, too, does the weaponized pumpkin division. While it might make the utmost sense in the moment, this first API resource attempt that Veridian made is problematic. Development teams have been organized around specific product divisions, and the resource produced reflect those organizational structures. That may not be a problem if the codification of internal structure only remains available internally. But let&#39;s introduce another fictional conglomerate, Buy &#39;n Large, or BnL. They are a national big-box store and they are looking to carry Veridian Dynamics&#39; products in their hundreds of stores. In order to do so, they want to integrate their purchasing and fulfillment systems with Veridian Dynamics&#39; inventory levels. Veridian Dynamics is ecstatic; they have APIs! The integration will be easy! The executives head off to the golf course while the developers send over the documentation for how to get their inventory levels. It takes awhile, as it has to be collected from each of the units and compiled into documentation for BnL.Shortly after that, BnL begins to grumble. They want inventories, they should be able to just call for Veridian Dynamics inventories. However, because Veridian has organized its resources by organization division, BnL has to make multiple calls. Further, because each division was allowed to define its own approach, none of the calls behave the same. If one wants to retrieve inventories from the shampoo division, one would call the shampoo inventory collection. That seems straightforward until BnL&#39;s engineers try to do the same thing for razors and find (surprise!) that they need a product identifier before being able to get the stock; they&#39;re now in the business of keeping lists of razor productIds, or polling other APIs to make sure they have the latest information. And the pumpkin division? The division across the country that was recently acquired? That API is more than a little different: a caller not only needs to know the &#39;stock keeping unit&#39; (or sku) but have an understanding of that division&#39;s regional warehousing. What should have been a simple task for an external entity becomes a prolonged and ongoing conversation about Veridian&#39;s internal organization.And that is only the immediate problem. With an API resource design aligned to the organization, what happens when new initiatives cross those boundaries? For example, what if the shampoo and pumpkin divisions join forces to create pumpkin-spiced shampoo? Under the previous model, does that go under the &#39;pumpkin&#39; or &#39;shampoo&#39; top-level paths? How are external entities going to know where to find the self-lubricating razor product that comes out of a shampoo and razor team-up? Where do we send the congressional inquiry when Veridian announces its razor pumpkin home defense product? Ultimately, if there is an external perception of a central concept, then the APIs - at least the external facing ones - should express that concept. In our BnL example, if they perceive Veridian&#39;s products as a single entity, then the resource design should reflect that. If being able to call for the inventories of individual products is important, we could create an API endpoint of a GET to &#39;/products/{productId}/inventories&#39;. If BnL still wanted all inventories, we could maintain path hierarchy by pass a wildcard, in this case the tilde (&#39;~&#39;), for the productId. There are several options. The point is, there API design would be aligned to the external expectation of the business function, not the internal organizational chart. #TFW Devs Realize These Problems Can&#39;t be Fixed with Tools, but by Changing PeopleIf we continue to treat API design is something that is just for developers, then developers will attempt to fix the problems with the developer tools on hand. But, as Conway’s Law implies, no amount of automation or framework selection will solve this problem.I&#39;ve demonstrated three ways in which API Design is effected by the communication patterns in a company. But how do you change those patterns? Ultimately, changing the communication patterns means changing the culture. That may sound daunting. But there are common sense, incremental ways of getting started. The first step is recognizing that there may be a problem. Viewing API design through the lens of Conway&#39;s law allows us to find spots where an API&#39;s design may be suboptimal due to organizational factors. But once we&#39;ve identified that there is a problem, what do we do about it? Blue Ocean Strategy was written by W. Chan Kim and Renee Mauborgne in 2005. In it the authors articulated the challenges and possible approaches for creating meaningful organizational change. Much of the latter portion of the book includes impactful guidance for making culture change possible. The book identifies for challenges to cultural change. The first is cognitive challenges. Going back to our Veridian and BnL example, the engineers that designed the first set of resources may not realize how difficult those APIs are for an external entity. The second challenge is motivation. Once the inconsistencies is brought to the Veridian engineers&#39; attention, they may understand why their initial design is suboptimal, but have very little financial or intellectual motivation for making a change. There may be a lack of urgency:&quot;It&#39;s a pain, sure. But that is job security for their guys, am I right?&quot;The incentives here may be intrinsic (why aren&#39;t we the API Twilio or SendGrid of retail giants?) or extrinsic (we have quantified the amount of lost sales the integration headaches are costing our business). Either way understanding there is a problem and wanting to take action are two different things. The next challenge to cultural change are resources (or the lack thereof). Suppose that we&#39;ve shown Veridian&#39;s engineers the problem. And they are motivated to solve it because they see how the current design is limiting new initiatives. However, they may question where the budget for this new centralized, product API comes from. Or state that redesigning the API needs to be put on a backlog, the prioritization to be fought over at the next planning iteration. The final challenge may be the most difficult: the institutional politics. Teams within each one of Veridian&#39;s divisions may acknowledge there is a problem (but it is someone else&#39;s problem). They are motivated to change (if that change supports their already existing initiatives). They might be committed to helping the company get more business (as long as it doesn&#39;t come at the expense to what the divisions are doing). The politics don&#39;t go away because we&#39;re talking about technology. If anything, they get more complex.  (Update: 2020-03-25) Since publishing, I have read a number of additional books unpacking digital transformation and shifting corporate behavior. Two of the best are Agendashift, by Mike Burrows, and Switch, by Chip and Dan Heath.That sounds daunting, because it is. Positive culture change within a company can be one of the most difficult professional things to do. However, not all is lost. There are ways of seeding change that don&#39;t involve wheelbarrows full of money or a vice president title. To begin, start with disproportionate influencers. You know these people - the ones who are incredibly plugged in, always seem to get the regular raises, and who leadership turns to in meetings. Every company has these stars. Once these people are identified, determine how your agenda compliments, or even furthers theirs. Appealing to their better nature or a sense of duty will only get you so far. But if it can be demonstrated how your course of action actually gets them what they want, and things will begin to happen. Once the disproportionate influencers are onboard, shine a light on their accomplishments. To change a culture, you have to paint a picture of what the destination will look like. Not only does that reward the influencer for their alliance, but it communicates to the rest of the org what behavior gets rewarded.One mistake that wordy people, like myself, make is assuming that a single presentation, or a well-reasoned argument, is all it takes. This may appeal to people&#39;s logic. However, action rarely takes root until the audience feels the pain of a certain situation. The realities of business-as-usual (BAU) don&#39;t become real until individuals are living it.Finally, resources should be redistributed from &quot;coldspots&quot; (high need but little impact) to &quot;hotspots&quot; (big impact for little investment). Can ongoing, in-person training be recorded and provided in self-service fashion? Constantly evaluating where time is being spent, and the impacts of that time, is critical for any effort. At this point, I&#39;ve hopefully made the argument that an organization&#39;s structure can adversely affect API design. Any API design culture needs to: Incentivize correct bounded context creation first, then apply manpower Overcome resistance to reuse inherent in the org chart Align bounded context for external APIs with external expectationsThank you for your attention.Update: For more thinking along these lines, check out James Lewis&#39;s 2015 GOTO Conference talk, How I Finally Stopped Worrying and Learnt to Love Conway&#39;s Law. Concepts include John Boyd&#39;s OODA Loops and the microservice stability onion. Really.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-12-07T00:00:00-06:00'>07 Dec 2017</time><a class='article__image' href='/2017/12/07/ConwayAndAPIDesign'> <img src='/images/2017/12/Slide1.PNG' alt='Three Ways Conways Law Affects API Governance'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/12/07/ConwayAndAPIDesign'>Three Ways Conways Law Affects API Governance</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Making IT Culture Change Work",
      "category" : "",
      "tags"     : "Software Change and Software Governance",
      "url"      : "/2017/10/26/API-Blueprint-Followup",
      "date"     : "Oct 26, 2017",
      "content"  : "I recently posted the talk I presented at API World 2017. I estimate that there were maybe sixty or seventy people in the audience and a fair number stuck around afterward to ask questions and share their experiences.I’ve gone ahead and grouped the most commonly asked questions together here for other’s benefit. Also, if API Governance is your sort of thing, check out the nice write up that Kin Lane, the API Evangelist, did on the process and approach that we’re trying at Capital One:  “While talking with Matt about their approach at Capital One, he asked if it was comparable to what else I’ve seen out there. I had to be honest. I’ve never come across someone who had established API design, deployment, and management practices. Were actively educating and training their staff. Then actually measuring the impact and performance of APIs, and the teams behind them. I know there are companies who are doing this, but since I tend to talk to more companies who are just getting started on their API journey, I’m not seeing anyone organization who is this advanced. Most companies I know do not even have an API design guide, let alone measuring the success of their API governance program. It is something I know a handful of companies would like to strive towards, but at the moment API governance is more talk than it is ever a reality.”We try - but I know we don’t have all the answers. If you’re working through these issues in your own org, please reach out; I’d love to compare notes. Studies show 70% of IT culture change efforts (DevOps, Cloud, Microservices, etc.) end in failure. That’s a pretty depressing statistic. Let’s work together to make things better.Now onto the questions.The main stage at the 2017 API World Conference.Why share this? If it is beneficial, isn’t it in your company’s best interest in keeping it all bottled up for yourselves?No, for the same reason Netflix doesn’t worry that sharing its expertise on microservice design in infrastructure management will lead to a rival streaming service. As Adrian Cockcroft, former grand poobah for Netflix architecture, once said:  “People copy the process they see but that is an artifact of a system that is evolving fast.”That, subsequently, has been colloquialized as “People try and copy Netflix, but they can only copy what they see, which is copying the results, not the process”.To explain it with a sports metaphor, the New England Patriots have been one of the most consistently dominant franchises for the past fifteen years. If you gave any other team their playbook, is the same success guaranteed? Given the number of times assistants have left for other teams, the answer is no.As, I hope, my presentation points out, employees’ sophistication, available infrastructure, company culture, and desired outcomes all play a part in defining the right path forward. What I showed is a guide, not a destination. Attempting to apply, whole cloth, without consideration for any of these factors is likely to result in an ill fit.The tool that you showed for lifecycle management - is it open source?No, unfortunately not at the time of this writing. For teams looking to try using OpenAPI documents as artifacts that proceed through a governance process, I would recommend giving Swaggerhub a look. Or possibly Stoplight.io. Neither appears to support configuration of editorial and approval workflows. However, many of the other features (issue tracking, source control, style validation) are present.I may be missing some alternatives. So many of the search results for “API lifecycle management” are about client credential issuance and request throttling. Or, if the tool does address design time considerations, the goal is for a single user, or team, to generate a mocks.When ‘reality checking’ our lifecycle approach, I repeatedly referenced commercial web publishing workflows. In that space, an item from any number of creators (usually an article, but sometimes a video essay or listicle) proceeds through a series of checks. Along the way, revisions occur which may send the item back for re-evaluation. That model resonated strongly with our need to involve numerous stakeholder groups (product, security, risk, architecture, etc.) on a design.Much of your talk, particularly the part about metrics, was about communication to executives. But what if I’m just a developer? What if my software governance is broken/horrible/painful/no-good? How do I change that?Being on the receiving end of a bad (or badly executed) process can be demoralizing. The first step is to understand why; often the effects may be well known (we have to wait a full two weeks after making a request before we get production credentials on our VPC!) without the reason (round tripping to get finance’s approval for licensing requires sign off from, eventually, an accountable executive at the VP level, or whatever). In my experience, even the most egregious pain points in most companies started with the best of intentions (let’s make sure our costs don’t spiral out of control because of a unchecked, erroneous deployment script).Next, identify those with the power to change the situation. Referring to techniques in Blue Ocean Strategy, it is not enough to articulate the problem (“It takes two weeks to get into production!”). Those with the power to change may, cognitively, understand why a change would be desirable. But they won’t be motivated to change unless they have felt the pain themselves.“Feeling the pain” is much easier when explaining questionable technical decisions to technical stakeholders. It is more challenging, though not impossible, if those with the power to change the situation are non-technical. When this challenge was posed to my peers, Tyler Singletary,  SVP of Product at Tagboard stated the importance of quantifying what the material effect was, either in cost or lost revenue.Does the pain inherent in the process:  Cause a significant time increase (and cost-overrun) of implementation?  Hinder getting an integration with [target company X that has benefit Y that the company wants]?  Lose Sales?  Impede progress on Strategic Goal X?  Cost more to support?Quantifying the pain makes it go from a geeky abstraction to a business reality. The similarly named (but totally different) Taylor Singletary, who does Slack Developer Relations, had this insight to share:  “I think if I wanted a technical executive to feel the pain, ask them to document something you know has barby edges. To make the non-technical executive feel some version of that pain, ask them to read that same document out loud.”(Update: 2020-03-25) Since publishing, I have read a number of additional books unpacking digital transformation and shifting corporate behavior. Two of the best are Agendashift, by Mike Burrows, and Switch, by Chip and Dan Heath.I am someone now in charge of a governance program. What do I do to get started?First, congratulations! Second, condolences!IT governance is a challenging intersection of technical understanding, people management, business strategy, and servant leadership. The first step is to recognize which one of those was the strength that resulted in your appointment to the position. In my experience, many that have been put in charge of their company’s API quality were picked because of their technical acumen; they have accrued a history of APIs that delivered meaningful business value and they’ve now been given authority to “fix” other APIs in the company. Having that, you’ll be in a better position to know what you’ll need to supplement, either with personal study or extra resources.Next, define the desired outcomes. It is tempting to immediately begin defining rules to counter any tiny annoyance that might be at the top of mind. However, jumping to define rules is rushing to employ tactics when what you need is to define is a strategy. If the business objective is to grow paying clients to your API product by 2x over the next year, does it matter that a contractor insists his compound word enumerated values are represented with underscores, rather than camelcase?The purpose of a governance program is to deliver business value, whether that is avoiding risk, creating efficiency, and/or maximizing return on investment. Make sure to have the long (and sometimes uncomfortable) conversations about expectations in order to define the desired outcomes. Then, work backwards to select the tactics necessary to support it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-10-26T00:00:00-05:00'>26 Oct 2017</time><a class='article__image' href='/2017/10/26/API-Blueprint-Followup'> <img src='/images/2017/10/conductor_midjourney.png' alt='Making IT Culture Change Work'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/10/26/API-Blueprint-Followup'>Making IT Culture Change Work</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "API Governance for IT Culture Change",
      "category" : "",
      "tags"     : "Presentations and Software Governance",
      "url"      : "/2017/10/03/API-Governance-Blueprint",
      "date"     : "Oct 3, 2017",
      "content"  : "Here is a copy of the presentation that I gave at API World 2017. I&#39;ve had the fortune (or misfortune, as the case may be) to work on API platform governance programs for the past several years. This is a culmination of my lessons learned during this time.Hello everyone, my name is Matthew Reinbold and I work for Capital One. My team, the API Center of Excellence, helps developers create great API experiences. We are big advocates for the power of consistency and cohesion in API design. To be clear, my team doesn&#39;t write the APIs but we collaborate with the people that do.I am curious - how do people learn about API practices? Where do you go for new tips and techniques?How many people (willingly) subscribe to two or more email newsletters? I happen to write one called Net API Notes.How many people (willingly) follow industry people on Twitter? I&#39;m Twitter&#39;s @libel_vox.How many people use an RSS reader to keep up with blogs? Occasionally I post long form stuff on https://matthewreinbold.com.I happen to be engaged on many fronts. As we go along, you&#39;ll see my contact info at the bottom of almost every slide. Please, if anything in this preso here raises questions or you have different insights let&#39;s talk about it. Let&#39;s have the kind of dialog that should be happening within your companies. Why do we need to help each other figure things out? Because change is constant. And, in other news, the sky is blue and water is wet, right? We all accept this as being obvious. And yet, when it comes to managing software complexity, API or otherwise, within our organizations, we create rules, processes, and punishments for those things that deviate from our understanding of the world today. We readily acknowlege change and yet build governance as if things won&#39;t.We can change the narrative. Governance doesn&#39;t have have to be restrictive. Instead, I&#39;m here to paint a different picture, one where governance is an enabler of positive change.We have to. The toolsets that developers would like to use to solve their problems in the most efficient manner are expanding at an incredible rate. This is just a snapshot of things that my team has had to evaluate in some capacity in the past year.And pick your physical metaphor, be it a radar, or a cycle, but these new approaches are going to continue to come. That&#39;s why we&#39;re here and why APIs have been so incredibly successful. APIs are a strategy for dealing with change, whether they are web-based, RESTful, or otherwise.  Modularity of systems is a successful approach to dealing with change. Writing to the interface, rather than the implementation, means that when a better persistent data store comes along, or when a better framework presents itself, we can take advantage of that with a minimum amount of disruption to the rest of the company. That said, this isn&#39;t about technology. Or at least that is not why it is valuable. Swapping out a data store under the covers is just intellectual noodling unless it delivers a tangible business value. At Capital One, the modularity that our API program delivers has allowed us to create value on platforms that didn&#39;t even exist three years ago.Here we have three very different customer experiences: a mobile native application, a voice assistant, and a chatbot. When we started our API journey several years ago, did we know that we needed APIs to be a launch day partner for the Amazon Echo Show, or that we needed to translate an emoji to a financial transaction? No, of course not.However, being able to execute on an API Strategy has meant being able to deliver the kind of customer experiences that we won a JD Power award for a few months ago. However, one can&#39;t just say that you&#39;re adapting an API strategy to accommodate change and everything will magically work. The culture has to be has to be wired for change. Any strategic initiative that isn&#39;t aligned with the culture will, eventually, fail.  What does culture change look like? Well, if you&#39;re Jeff Bezos, it looks like this. The story goes that sometime around 2002, 2003, he sent out an internal memo to the Amazon staff dictating that all functionality should be exposed via standard interfaces. Anyone that didn&#39;t do that would be fired. That culture change to support a strategic API plan is what lead to the eventual success of not only Amazon, but of Amazon Web Services.Now, you all seem like very lovely people. Even though we&#39;ve just met, I can tell. But, I&#39;m willing to bet you don&#39;t have the kind of executive authority to make these kinds of decrees in your own organizations.And that&#39;s how we end up with governance, or, all too often bad governance.Culture is those things that are important to the organization. It defines the personality of the company and how that company response in times of stress. It is the shared belief in how things are done, and what things are important. It is how a company responds to change.Unfortunately, bad governance attempts to eliminate, or at least restrict, the amount of change that can occur at any given time. This is why companies have &quot;approved tech stacks&quot; that everybody must build to. Developers can only use certain frameworks. Or write in specific languages. Or use only one brand of laptop. Governance, in these situations, is not about the enablement of strategic delivery. Or about positive cultural change. Governance, here, becomes about risk management in the face of change. It says &quot;somebody screwed up, let&#39;s make sure they don&#39;t screw up again&quot;. Governance becomes a list of allowances that made sense in the moment in which they were drafted, and not easily changed for future considerations.When all you have is a hammer, every problem to be solved becomes a nail. If you have standards that allow for web APIs, then all problems must be solved by APIs. If you&#39;re infrastructure requires protobufs, then a solution that gRPC is optimized for is off the table. Governance, rather than enabling, restricts the solution space. The culture either complies to this governance (thus lacking the capacity to innovate) or, more commonly, circumvents it. That&#39;s shadow IT and, by its very unaccounted-for nature, re-introduces the kind of risk this governance was meant to address in the first place.At Capital One, we had an opportunity. This is a small snapshot of our API footprint but it hints the challenges we faced in 2016. We had created a culture that incentivized the creation of APIs. But, as the CoE watched, we became increasingly concerned about whether teams were creating the right APIs. Were these good APIs? Easy to use? Readily available to be combined into new products and services to deliver business value? Or had we created a culture which prized poorly written, unintuitive point-to-point integrations, because that added to the overall count? Had our culture optimized for the quantity of APIs, rather than the quality of APIs? More importantly, if that proved to be the case, how would we change the culture? As the CoE began to wrestle with the problem, a common question that I heard several times was &quot;Why aren&#39;t the teams following the rules?&quot; Among many in our leadership, the assumption was that if we just crafted the &quot;write good APIs&quot; rule, then our problems would be solved. That wasn&#39;t going to happen. What we needed, instead, was a systematic approach that incentivized desired outcomes and dynamically, holistically reacted to changes in the landscape.  The first part was defining a healthy ecosystem. Applying policy on an API-by-API basis meant we risked not seeing the forest for the trees. Stepping back, we recognized that we were entrusted with a complex ecosystem. And like a complex ecosystem, there were some actions that would help it flourish. There were also things that, like invasive species, could jeopardize the health.Once we felt we adequately understood the terrain, the second part was determining how to guide teams from where we were to where we needed to be. There are many ways to cross a chasms. To do so successfully means acknowledging the existing culture. At Capital One, we have a very heavy preference on powerpoint decks, for better or for worse. Engaging with people means meeting people where they are, on their terms, to start a dialog.The third piece is ensuring that we&#39;re measuring our performance. I&#39;m excited to meet my governance peers from other industries. I&#39;ll ask them how they quantify success and they&#39;ll all too often refer to their published API Style Guide. And I&#39;ll ask them how they know that it is positively working. Unfortunately, many don&#39;t have a good answer. Without some measurement of performance, a governance effort won&#39;t be able to determine progress toward a target state, the effectiveness of initiatives, or illustrate the journey for executive leadership. That is not an effective way to run a program or ensure business value is being created. Let&#39;s dig deeper into each of these parts. Having a healthy, reactive ecosystem does not mean that there are no rules. Reverting to the wild west, where freewheeling console cowboys fire off whenever (and whatever) they want is no more a guarantee of delivering on business value than bureaucratic, dictatorial, and centrally planned systems. Certain things still needed to be defined and enforced. But it isn&#39;t all the things. This is the principle of &quot;selective standardization&quot;.Picking sides is necessary because REST APIs follow an architectural style, not pattern. It&#39;s not a specification and that&#39;s a big reason you&#39;ll find all manner of religious flame wars over this approach verses that. However, for the sake of getting work done, there&#39;s a need to identify those things that are important for efficient operations and ensure that their adopted uniformly across an organization.Take API versioning. I have two approaches presented here, but there are more. In this case, we want to ensure that a developer with API experience in Plano can leverage their experience and utilize their learned patterns when they attempt to use an API created by teams in northern Virginia. In this case, it is less about being &quot;right&quot;, but selectively standardizing those things that add value in being consistently implemented across the organization.And then, of course, you also want to ensure that standards are protecting the long term health from detrimental practices. Like the pictured cough syrup, there&#39;s a lot of approaches that, in the short term, appear to get the job done. Alcohol, cannabis, chloroform, and morphine probably solve the problem in the short term (I&#39;m guessing). But do that on a regular basis and a body will have some serious, long-term ramifications.I illustrate the fallacy of best practices by talking about a different interface that we&#39;re all familiar with, the electrical outlet. Which one of these is the &quot;best&quot; way of conducting electrical current? Hopefully, you&#39;ll agree with me that it is contextual; where you are has a lot to do with the interface you&#39;re likely to see. But imagine the pain it would be if every outlet in a house had a slightly different outlet. How difficult would it be just to plug something in and get on with work if every interface was seemingly at random? How cumbersome would having to manage all those adapters be?I try to refrain from using the phase &quot;best practice&quot; when it comes to the undefined, or subtle, nuance around API design. To say something is &quot;best practice&quot; strongly implies that everything else is &quot;worst practice&quot;. Reality is that it may just be different, but - for the sake of consistency - we haven&#39;t adopted it in our house. Instead, I refer to &quot;common practice&quot;. The documentation of this &quot;common practice&quot;, or selective standardization isn&#39;t a bad thing.However, this is where I see many organizations stop. They write an API style guide, publish it, and then wonder why the haphazard adoption by well-meaning volunteers seems to have created more problems than it solved.At minimum, the standards must be a journey, not a destination. A key component to &quot;selective standardization&quot; is knowing what to select. It is one thing for us in our ivory tower to throw darts at market forces and team needs. It is entirely another to repeatedly engage with those doing the work.Our coaching effort identifies those passionate practitioners throughout our lines of business who have raised their hands and said, &quot;getting this right is important to my teams and me&quot;. Coaches not only receive additional training that they then apply to their teams. They also earn access to evolving our standards.In this way, standards aren&#39;t something that are dictated to teams. Teams drive the standards. These aren&#39;t alien requirements from another planet. They see their own needs and concerns reflected back at them. That is an incredibly powerful motivator toward acceptance and buy-in.After identifying some aspects of a healthy ecosystem we now need to help teams traverse it. Each team is at a different point in their journey, and different points of an API lifecycle require different interactions. At Capital One, we have a four-phase lifecycle for API development: planning, design, development, and deployment. An OpenAPI description is the artifact that progresses through the process. Not only is it used to capture the team&#39;s intent, but approved, machine-readable descriptions are what enable automatic publishing to a service discovery portal and provisioning to our API gateway.A piece of our lifecycle tooling may look familiar. After a team has provided some metadata during their planning stage, they proceed to design their API in a modified version of the Swagger Editor.  When they click on the &#39;eyeball&#39;, in the upper right, teams get a preview of what their documentation will look like in the service discovery portal. We had different needs in how we wanted our content organized so we provided a different rendering to the default Swagger UI. It is during this preview that any violations to those &quot;selective standards&quot; are called out. These are presented to teams so that they can fix the errors prior to engaging my team in design discussions. This is incredibly powerful. Rather than spending time pointing out that teams can&#39;t submit a body as part of an HTTP GET request, for example, reviewers are freed up to address higher level concerns (more on that in a moment).Those discussions are captured and maintained alongside the API description. The history of how the API design evolved to be the way that it is can be seen by clicking on the word balloon. Previously, conversation would get lost in email threads or chat channels. Not only was that incredibly hard for people to track down if they had questions later, but that history became a black box for new team members. Without the history, they had no insight into what were highly contested aspects that made the API what it was, and which pieces were fair game to be changed.The lifecycle tool uses an enterprise instance of Github as the system of record. So, in addition to saving the conversational discussion, we can also easily do diffs between versions of an approved API design.Having an API design artifact that moves through a lifecycle, with transparent and maintained history, enables collaboration. But what is the direction we&#39;re moving teams toward?When I need to illustrate web API design maturity, I&#39;ve started to use a pyramid. At the bottom are those APIs that provide some functionality over HTTP and little else.The next level are those APIs which don&#39;t just expose functionality, but are also reliable. An APIs that is down Thursday nights from 3-5am because of backend batch processing may be functional, but not as reliable as we&#39;d like. Likewise, if an API can&#39;t (or won&#39;t) scale to meet demand, it also isn&#39;t reliable.Intuitive APIs are where we begin to see thought put into the developer experience (or DX). At this level we&#39;re thinking outside-in, rather from the data record-out. Key traits are behaving in a predictable manner, and exhibiting the selective standardization that we previously defined. Moving a tier above that are empowering APIs. Beyond just having a good developer experience, these APIs also contribute direct, or nearly direct business value. In the case of our Bank Account Starter and Credit Offer external APIs, we can trace significant new revenue and accounts booked through affiliate usage. These APIs have grown the funnel, or empowered, our existing lines of business in meaningful ways.At the top of the pyramid are transformative APIs. These are rare, but powerful. These are APIs that don&#39;t just expand existing lines of business, but open up brand new opportunities. We&#39;re currently working on some ideas but, as I said, these are some of the hardest APIs to create successfully. Should all APIs that we product be transformative? No. That&#39;s why the pyramid is shaped the way it is, with more reliable APIs than intuitive, more intuitive than empowering, etc. What is important is that, during collaboration, we look for opportunities to advance the work; if a team only has a functional API, can we make it reliable? If it is functional and reliable, can we also make it intuitive?The last point I&#39;ll make about helping teams navigate this landscape is that simply posting an API style guide, or sending out a firmly worded email is a poor substitute for rolling up one&#39;s sleeves and engaging directly with developers. Whether it is San Francisco, in the top picture, northern Virginia on the left, or in Plano, TX on the right building trust is still something done best face to face; trust that the API CoE has the developer&#39;s best interests at our heart, and trust in our developers to do the right thing. Believing that API stands for &quot;assume positive intent&quot; is much easier when you&#39;ve seen eye to eye with someone.  After we&#39;ve left, it is the responsibility of the coaches to continue being the approachable, friendly face devs work with on their questions and concerns. They are what turn a one-off training into an ongoing, living discussion in their respective areas. Enough of this Kumbaya crap. It may sound like a great story. But how do we know it&#39;s working? Whether it is because it is hard or because it is an afterthought, meaningful metrics at the API program level are hard to find. And that is unfortunate. Business leaders have invested years, and sometimes tens of millions of dollars, towards service development. When asked if these technology initiatives have been successful, these same leaders have little to point to other than statements like: &quot;I&#39;ve deployed 47 APIs this year, and my peer on the west coast has 30 in production, so my API folks must be better&quot;. Hearing it out loud, hopefully that sounds as ridiculous as it is. But, in the absence of any other KPI, they go with what they have.  As this quote by Tom Peters implies, metrics don&#39;t exist in a sterile clean room. They actually drive behavior. Metrics can drive culture change in an organization but they must be carefully monitored for unintended first (and second) order effects.  I want emphasize that the following metrics I&#39;m about to cover are meant to address specific concerns that existed as we surveyed our landscape. Your company will be different. Attempting to implement these without consideration of your specific situation is likely to lead to disappointing results. As we stepped back and attempted to answer what makes a good API, we saw three categories of numbers emerge: conformance, performance, and transformative metrics. Conformance is the adherence of an API design to our standards. These are the rules and usage patterns that can be checked for, automatically, in our lifecycle tooling.Performance is how responsive an API is when called. These are easily quantifiable metrics and often the first numbers that people think of when reaching for numbers.Together, however, conformance and performance are not enough. Just meeting performance expectations without deviation from the rules doesn&#39;t make a great API. It is like typing away at a word processor with an expected words-per-minute without creating a spelling or grammatical mistake; while you might not have any squiggly lines anywhere on the page, it doesn&#39;t mean that you&#39;ve written a compelling story. That is where the transformative metric comes in. This component, which I&#39;ll talk about in a moment, allows us to capture the subjective nature of the APIs in a way that can be tracked and acted upon.In this first slide, the number of APIs submitted to review without any deviations from our standards are broken out by LOB. For much of 2016, many of our producing devs were submitting things to collaboration that only were free from policy deviations only 15-20% of the time. My team, subsequently, had to spend precious consultation time pointing out discrepancies rather than on moving to transformative experiences. Given our desire to move teams up the quality pyramid, this was a problem.In January of this year, we introduced self-service validation into the tool that could be done prior to submitting for review. With this capability, development teams are able to correct their mistakes on their own time, and the CoE can devote more of the review to higher order tasks.A vast majority of the APIs that Capital One produces are for internal use only. And while our external work has clearly defined service level agreements (SLAs), in a weird quirk, many of our internal APIs do not. This concerned my team for awhile but when we&#39;d ask for someone to define them, we&#39;d never hear back.So we took the opportunity to define our own in order to create a culture change. We defined a three-pronged SLA: 99.95% of the responses should not have a status code in the five-hundreds, the mean response time needed to be under 500 milliseconds, and 95% of the calls served needed to be less than two seconds. We spent time deriving these values but, ultimately, they were a guess on our part. But their very existence means teams now have to begin considering whether their APIs meet this behavior. And, for teams that have considered their performance and published their own SLAs, we happily apply those numbers to the performance that we can see. Another example where we&#39;re using metrics to drive cultural change is with what we call &quot;stalled&quot; APIs. These are API descriptions that development teams begin but, six months after the design has been approved, still haven&#39;t made it to production.While we had a story here or there guessing what might be happening, this metric allowed us to capture the effects of this behavior at a LOB level, as well as identify whether it is getting better or worse. Is this the result in shifting product strategy? Frequent team disbandment and reorganization? Before we could start addressing those problems, we first had to identify that we had one.  NPS stands for net promoter score. It encapsulates a variety of the subjective nuances comprising an experience. It is very handy in capturing the &quot;goodness&quot; of an API design.There was a couple of ways we could have approached this scoring. However, executive leadership was already well versed in what NPS is. We&#39;ve used it forever to gauge the customer experience on a variety of our services and products. It is not enough to just ask a person scoring an API &quot;is this good?&quot;. One of the subtly clever aspects of NPS is that it reframes the question to put a reviewer&#39;s professional reputation at stake. Rather than asking &quot;Do you like this API?&quot;, NPS asks &quot;Would you recommend this API to your peers?&quot;. Everyone likes to think the are arbiters of style and distinction. As such, they take great pains to not recommend sub-par experiences.The lowest possible score for NPS is -100 and our sample scores show we can do better. However, those scores aren&#39;t surprising given that we&#39;ve been producing little more than functional and reliable APIs for years. The lack of higher-order, transformative APIs shows up in these scores. But now that we&#39;re measuring, we can track whether ongoing initiatives are making it better or whether we need to do something else. There are some additional metrics that I won&#39;t mention here. The point is that these are an ongoing conversation. When a metric outlives its usefulness, or we find it is incentivizing the wrong behavior, we change. We take all of that data and boil it into the single visualization you see here. These radar plots allow leadership to, at a glance, see their organization&#39;s API quality relative to their peers. As quality along an axis increases, the shape grows outward, like a balloon.The CoE packages these insights together once a month and sends them to the accountable executive over each line of business. Usually this report includes not only observations, but tactical items that can be done to positively impact a metric or metrics. The executive directs coaches within their area to implement those changes, if they deem them necessary. Finally, the coaches then work with their development teams. That is a brief overview of how we&#39;ve attempted to create a governance program that is change enablement while incentivizing culture change. We define healthy ecosystems, help teams navigate that terrain, and then measure our effectiveness along the way. A common comment that I hear, at this point, is that &quot;This sounds great, but we don&#39;t have the budget for this&quot;. Or &quot;we need a bigger team&quot;. I&#39;d agree; if we assume that making a massive change can only happen with a massive amount of resources, then we&#39;re likely to end up on the unpleasant end of a political tug-of-war.In regards to doing more with less, and seeding the cultures to make that approach viable, I highly recommend the book, Blue Ocean Strategy The majority of the book is about identifying new business markets and, while interesting, that&#39;s probably not what most people in this room do. However, the last third talks about creating successful culture change in order to compete in those markets. It is amazingly relevant to discussions on software governance. One of the techniques it discusses is the relationship of kingpins, fishbowls, and horse-trading. Going back to our API quality report work, we don&#39;t keep those numbers to ourselves. From the beginning, the distribution was about getting the report to the people, the kingpins, with the authority (and the responsibility) to act on the findings.Next, the report acts as a fishbowl where each of the kingpins can see how the other is doing. In my experience, executives didn&#39;t get to where they are without being a tad competitive. Publishing results and easing comparative analysis creates a natural driver for action; each of the leaders wants to be number one among their peers.The final element is horse-trading. Over time, sometimes by sheer inertia, certain areas accrue an abundance of resources despite requiring different resources. And my CoE doesn&#39;t have all the time or energy to produce everything that we feel would be impactful. In these cases, we can approach a LOB that is doing great work in a specific area and offer to share their story as an example for the wider org. In return, we ask for help producing those insights we may not have been able to do otherwise. We have an audience. They have manpower. A careful audit of what one has and the judicious application of horse trading can result in the kind of effects one might only associate with a &quot;bigger budget&quot;.(Update: 2020-03-25) Since publishing, I have read a number of additional books unpacking digital transformation and shifting corporate behavior. Two of the best are Agendashift, by Mike Burrows, and Switch, by Chip and Dan Heath.In conclusion, change is constant. If the role of governance is to arrive at the perfectly optimized system for today, we will find ourselves perpetually frustrated tomorrow. Day after day, year after year, that theoretical perfection will seem more and more distant.Instead, if we look to governance not as a destination, but a journey we are on, then change is just part of the landscape.I&#39;ll end on one final Tom Peters quote: &quot;Excellent firms don&#39;t believe in excellence - only in constant improvement and constant change.&quot;Build a culture whose governance processes are optimized for change.Thank you for your attention. My name is Matthew Reinbold. I am the Lead for the Capital One API Center of Excellence and, if you&#39;d like to continue this discussion my contact information is listed here.That&#39;s it for the presentation. But, if you&#39;re interested in more, check out the most commonly asked questions (and answers)",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-10-03T00:00:00-05:00'>03 Oct 2017</time><a class='article__image' href='/2017/10/03/API-Governance-Blueprint'> <img src='/images/2017/10/api-governance-blueprint/Slide01.png' alt='API Governance for IT Culture Change'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/10/03/API-Governance-Blueprint'>API Governance for IT Culture Change</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Logan, Westerns, and a Civilized Internet",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2017/07/12/Logan",
      "date"     : "Jul 12, 2017",
      "content"  : "Have you seen the movie, Logan (2017)? There’s no shame if you saw the promos and, previously burned by X-films, relegated it the whenever pile. However, it is quite good. Hugh Jackman, a fan-favorite onscreen character despite uneven vehicles, gets a moving, if dark, sendoff. It has the kind of depth that resulted in it featured on Wisecrack’s “The Philosophy of” series:As the video points out, Logan is less a superhero movie, and much more a western. As articulated by Will Wright in his book, Six Guns &amp;amp; Society, the typical western follows a predictable arc:  Our hero, usually a man from the wild, is embraced by encroaching civilization  The hero is dragged into conflict to protect his new, civilized friends; this struggle is often the clash between new and old worlds  He saves the day, sometimes becoming part of this new group; other times discovering that the very uncouth means to save the new world have no place in itThe struggle between new and old worlds is key. The video references “Enclosure”, the 500-hundred-year old English practice of taking communal lands, which were free for anyone’s use, and enclosing them. This creates private farms. The idea is to take something perceived as wild and uncontrollable and order it with ownership, rules, and law.The effects of enclosure on the typical western hero aren’t great. As Jeremy Hsu says in his review of the film:  “None of the surviving heroes in those classic Westerns truly enjoy a happy ride into the sunset. But they do all seem to recognize themselves as relics of a dying era. Their individual stories reflect the larger narrative of the Wild Wild West giving way to civilization marching in lockstep with technological progress.”I consider myself fortunate having come of age along with the internet. My internet wasn’t Facebook, Amazon, YouTube or even Google. It was the crazy hallucinogenic potential of the early cyberpunk authors, the fevered nonsense of Mondo2000, and embarrassing, unpolished attempts at self-expression on GeoCities, web forums, and 1x1 transparent spacer GIFs. It was wild. Unpredictable. Raw. I really didn’t understand the meaning of the word “madcap” until I had a student account and an unmonitored college computer lab.Slowly, but surely, enclosure has come. Like the encroachment of a western’s civilized society, there’s always a benefit: predictability, safety, and comfort. Towns got a sherrif, pastor, and schools. The internet got commerce. It gave us information. And law was passed that wasn’t just good, but necessary; case in point, Title III of the Americans with Disabilities Act. Some taming of the wild was necessary.But enclosure can go too far. “Zero rating” is the practice of network access providers not charging customers for data when they use specific internet services. Implementing a zero rating scheme upholds the letter of net neutrality; products or services aren’t blocked. However, in a world of data-capped plans - particularly on mobile - it certainly violates the spirit.Network access providers have been playing a very long game. They’ve diversified, going from being “dump pipes” to international media conglomerates. Comcast bought chunks of NBCUniveral from 2009 to 2013. Verizon bought AOL in 2015 (Huffington Post, Techcrunch, etc.), Yahoo in 2016, and its built its own Go90 exclusive. AT&amp;amp;T is attempting to buy Time Warner and pair with its previous DirecTV purchase). Even with more modest players, like TMobile, bundle services like Spotify, Apple Music, and Pandora together in an “unlimited” package. You can still roam to other places… but it will cost you. Rather than compete on service or speed, content that doesn’t count against a datacap is the new competitive edge.So the rough-and-tumble of the early internet is gone, and today’s current category leaders (Netflix! Tumblr!) are crowned with the new administration. And that’s a problem. A statement, made last year by the previous FCC chairman, points out that zero rating practices:  “present a serious threat to the Open Internet: they distort competition, thwart innovation, threaten free speech, and restrict consumer choice — all harms the rules were meant to prevent. These harms tend to fall disproportionately on low-­income communities and communities of color, who tend to rely on mobile networks as their primary or exclusive means of access to the Internet.”Want to take on an incumbent? Now you not only have to provide a better service or site than they do; you also have to overcome the deals they have with network access providers. How many orders of magnitude does your offering need to be for someone to, knowingly, edge toward their data cap?A screenshot from the Logan movie. Kind of how I&#39;m starting to feel about these net neutrality fights.People may not change, but the world’s frame of reference does. I recognized that my perception of what the internet is may be very different from someone who has always ever viewed it with an Instagram filter. Perhaps I am a relic from the old world that, having helped civilize it, now no longer has a home here. But maybe I have a fight or two left before I return to the wilderness.Logan is a great movie. It is about control: the struggle in seeking, maintaining, and relinquishing it. July 12 is a day of protest. Given the political climate, there’s outrage fatigue. I get that. But if we don’t have a free and fair medium for expression, collaboration, organization, and the subsequent reporting thereof, then tackling those other challenges will be impossible.For more on the caustic effect of the current direction, check out this piece from the Verge. If you are interested in getting involved, check out BattleForTheNet.com. There’s more at the Electronic Frontier Foundation (EFF). If you’d like to leave a comment on the current FCC net neutrality plan, try GoFCCYourself.com and mention you want to see strong oversite of ISPs (just don’t use stolen customer identities to stuff the comment box).Finally, if this all seems rather dull and boring, here’s what John Oliver had to say about Net Neutrality a few months ago:Update 7/12/17: Turns out, I’m not the first to make the connection between the internet and the physical American frontier. Tim Wu, coiner of the term “net neutrality”, covered similar territory in his 2014 New Yorker piece.Update 7/19/17: Wired has a great piece on how to keep the fight for net neutrality going.Update 8/24/17: The praise for Logan keeps coming.Update 1/6/18: This piece, by Zach Tellman, about open source, frontiers, and the propensity of tech to eat their elders is amazing.  “At first, each community is defined by its potential. But as that potential is realized, the community begins to be defined by its compromises. That change is felt most keenly by the people who were there first, who remember what it was like when anything seemed possible. They feel fenced in and so they move on, in search of their golden city.”Update 9/12/18: Europe passes some baffling, and possibly crippling, internet legislation. Gobsmacked.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-07-12T00:00:00-05:00'>12 Jul 2017</time><a class='article__image' href='/2017/07/12/Logan'> <img src='/images/2017/07/loganclaws2_midjourney.png' alt='Logan, Westerns, and a Civilized Internet'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/07/12/Logan'>Logan, Westerns, and a Civilized Internet</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "underconstruction.gif",
      "category" : "",
      "tags"     : "Milestones and Software Development",
      "url"      : "/2017/07/04/SiteUpdate",
      "date"     : "Jul 4, 2017",
      "content"  : "A Brief Bit of ContextIn 2011, shortly after moving to Denver, Colorado, I relaunched my blog. I had been, happily, using self-hosted Wordpress for a number of years. However, I felt I was missing out on a learning opportunity by not making a CMS for myself.It was around this time that I had switched to writing in markdown for personal note taking. I was also interested in exploring a non-database approach; blog posts would be written as flat files. I had some ColdFusion framework scaffolding for application management I wanted to further noodle with and responsive web design was begging to be explored. In short, I didn’t just want a place to dump words; I wanted a sandbox to play in. Viola! A Blog!I learned a lot, which was the point. But, as time passed, there were a number of wrinkles that didn’t have easy fixes without effort and/or host changes:  URL’s maintained the “*.cfm” ColdFusion extension, something that was increasingly dated. URL rewriting was possible, but that seemed like a workaround for what should be naturally occuring behavior.  Secure, encrypted communication (“HTTPS”) was problematic on my shared host, even in the age of Let’s Encrypt. Given that HTTPS actually is served faster, I was increasingly bothered I was not only insecure, but slower than I could be.  I hadn’t gone far enough with the “static site” approach. Writing the articles in markdown was a start. But then processing them through a server continued to have all the security risks while netting none of the performance upside. Very little of what I was doing required run-time processing.  Deployments felt dated. While development teams I collaborated with in my day job had shiny, new deployment pipelines, I was still setting up FTP (not even SFTP!) and overwriting files. This is minor (I don’t believe every passion project needs the complete continuous-integration-laptop-sticker-sheet). But it felt dated.A screenshot of my Wordpress site in 2009. Yes, I am a fan of Aidan Hughes.Static Site RenderingThe benefits of static site rendering are numerous:  SPEED - There’s no processing server side; posts have already been reduced to the essential atomic units of the web: HTML, Javascript, and CSS. There’s something poetic to me about that.  Security - While not so much an issue with my own coded CMS, I lived in constant fear of missing a zero-day Wordpress exploit patch and finding myself, along with clients, compromised. Reducing the number of moving parts significantly decreases the places where something might go wrong.  Hosting - Rather than having to find, research, and deploy to increasingly rare ColdFusion hosts (or port to another language), I can post my content to anywhere that supports HTTP/JS/CSS.  hosting. This becomes very compelling given that Github Pages, one option, is free.Jekyll is great. Feed it html and markdown and out comes a blog. Moving over my custom pieces, already organized as one file per post, was trivial. It was just a matter of changing my custom XML, used to define titles, tags, etc. to Jekyll’s Front Matter YAML. Jekyll is written in Ruby but, for my purposes, it really doesn’t matter; I fire up a command line, capture my word-junk, and Jekyll does the rest. Kin Lane has been estolling the virtues of Jekyll for awhile. I’m just now catching up. Jekyll is free to download and run locally on your machine.My New Writing ProcessAfter I finish a piece, I push the resulting changes, rendered by Jekyll into static content, to a Github repo. This not only gives me a record of changes over time; it also populates a Github page. This means my blog is able to leverage the same hardened infrastructure that Github uses to run the rest of its operation. Github Pages is a free service for public repos.Github page sites, understandably, have Github URLs by default. Maintaining my own domain name is important to me. If I should ever move, for whatever reason, I should be able to change the host without requiring everyone to update their links. A custom host, registered with Hover.com, is the abstraction that allows me to do that.Unfortunately, Github Pages don’t easily enable SSL for custom domain names. For that, I added Cloudflare to the mix. Cloudflare is a CDN, or Content Delivery Network. They own a ton of hardware and geographically scatter it about. They then replicate content distributed through them to each of these nodes. When you make a request, the content is returned from the closest server, not whatever server the content originated from. The result is speed. But, not only that, Cloudflare can be configured so content can be delivered through its network via HTTPS, and not just HTTP. Given my needs, Cloudflare usage is free.At this point, I can render a static site from markdown with Jekyll, deploy new updates via Git, host it on Github Pages, point to it with a custom domain, and secure it with Cloudflare. The last hurdle is take requests mistakenly made to HTTP URLs and reroute them to HTTPs (and thus avoiding the dreaded ‘mixed content’ browser nastigrams. Thankfully, Cloudflare saves the day here, too. I’ve got a smoking fast, secure, and reasonably sound site for the cost of a domain name and some elbow grease to put the bits together.What’s Left to Do?I have, in fits and starts, been porting over previous content to the new site. I have content from 2015 and newer moved. References to the REST API Notes newsletters go back to the beginning of 2016. More to do there but having a couple years worth of the most recent material is not nothing.The design is spartan, at the moment. I’ll probably let this grow organically, as the need arises.I also am missing sub-navigation dynamically driven by a tag. For example, in an article about APIs, I could drop in some script that would create in-line navigation that would link to my other pieces about APIs. If I wrote a new piece and used the specific tag, the navigation would be updated automagically. I still need to figure out how to make this work in a static-site generated workflow.Doesn’t Medium Already Do All This?After a thousand words, I’d assume the rational question would be “Why not just get a Medium blog”? Medium is great for enabling discovery. I also have load of respect for Ev Williams and his track record in making the web a great place for creators (Blogger, Odeo [which was ahead of its time], Twitter, and now Medium). But, increasingly, Medium seems like a failing experiment and less like a finished product. In trying to find a business model that works, Ev has acknowledged that successful web monetization pushes publishers to ‘all car crashes, all the time’. That really, really makes me nervous about the longevity of any content contributed there.But I am privileged. After decades of practice, I can suss out the techno-gobbledygook and cobble together a working site. A vast majority either can’t - or won’t. We need more viable options, not experiments, for the creation, hosting, and discovery of ideas. Until one of those happens, however, I’ll continue to be here, figuring out how to make this work on my own.Update 7/19/2017: Troy Hunt has a fantastic piece on CloudFlare and unhealthy security absolutism.Update 7/20/2017: Another Troy Hunt piece, discussing why the web is quickly going to secure by default. I had heard about non-secured sites being punished in search engine rankings, but the browser implications are as compelling reason as any.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-07-04T00:00:00-05:00'>04 Jul 2017</time><a class='article__image' href='/2017/07/04/SiteUpdate'> <img src='/images/2017/07/underconstruction_stablediffusion.png' alt='underconstruction.gif'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/07/04/SiteUpdate'>underconstruction.gif</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Searching for Systematic Solutions",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2017/04/13/SystematicSolutions",
      "date"     : "Apr 13, 2017",
      "content"  : "Last week I attended the O&#39;Reilly Software Architecture Conference in New York City. While not &quot;officially&quot; a software architect anymore, I was keenly interested where the industry zeitgeist was regarding microservices, devops, and event-driven architectures. There was some very valuable information on tap (by the end of the second day I had a few thousand words in my notes file). But there was also a couple shadows cast; apparitions that still have me cringing a week later. Snapshot of the stage at the O&#39;Reilly Software Architecture ConferenceA session would begin by establishing a strawman: an omission or lack of proper design would lead to an undesirable consequence in production. In one case, for example, the presentation presented an erroneous decomposition of a problem. Rather than bounded contexts around a business capability, they jumped straight to resources, letting the data define the subsequent API design. The result was redundant data seemingly owned by resources, requiring additional data synchronization across the distributed data-sources; i.e. a &quot;distributed monolith&quot;.The presenter would then proceed to outline a more elaborate solution, one that required the initial design failure. The more elaborate solution would have a titillating sounding name, of course. It was usually some combination of yesterday&#39;s buzzword and an action adjective . My take-away from these presentations is that anyone is just a &quot;hyper-componentization&quot;, &quot;rational-serverless&quot; or &quot;pico-ops&quot; away from a lucrative career in conference speaking and consultant fees.  The technical press is incentivized to unearth a steady stream of THE NEXT BIG THING&amp;trade;! The dopamine drip of discovering the bigger, better, and/or faster way of doing things is what drives attention to online publications, book subscriptions, and conference attendance. Too often, though, this seems to result in an industry that casts off yesterday&#39;s solutions as quickly as they can get tomorrow&#39;s promises. Rather than proceeding with care and practice after missing the mark, the solution, all too often, seems to be to find new silver bullets. That phenomenon is unfortunate, and (probably) unavoidable. It is also, however, not the most challenging thing. Many of the presenters were proud (and, in some cases, rightly so) for demonstrating purely architectural solutions. Engineering conferences probably present developer solutions to the similar problems. I also guarantee that business folks are solving things from their perspective. While occasionally victories are possible, systemic success is not guaranteed because the problem is not being approached in a systemic, cross-disciplinary way. A company&#39;s business, culture, and technology are inextricably linked. Addressing one in isolation, without considering the push and pull of the others, is likely to doom an effort (or, at a minimum, impede it). Take, for example, microservices. Microservices are, simultaneously, a software architecture pattern, a cultural change, and a business concern:Most technologists understand microservices as a software architecture pattern. Defining service boundaries through principles domain-driven-design for the sake of decomposition is a powerful thing. But only having the tech right doesn&#39;t mean microservices will be successful in an organization. Culture, as defined in the O&#39;Reilly book, Microservice Architecture, is &quot;a set of values, beliefs, or ideals that are shared by all the workers within an organization.&quot; If a employees do not trust each other, microservice coordination can&#39;t be minimized. If the organization values calendar release cycles tied to marketing blitzes, maximizing deliverable independence will be hard. Adoption of any new behavior must be tied to a business benefit. If the combination of speed and safety inherent with successful microservice execution isn&#39;t reflected in a business metric, it becomes &quot;a tech thing&quot;. &quot;Tech things&quot; have a way of being entertained when times are good. However, when adversity happens, anything that isn&#39;t obviously tied to a business objective is in jeopardy.Whiteboard from a recent offsite deep dive into microservices, and what it would take to support them.It is a mistake to look at the success that Amazon and Netflix have had and attribute it to only one of these parts. Their systematic success requires systematic solutions. Succeeding with a new architectural paradigm, like microservices, means creating cultural, business, and technological change. Separating meaningful approaches from buzzword buzzards at single-discipline conferences is one thing. Having the position and/or professional network to holistically apply it successfully is another. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-04-13T00:00:00-05:00'>13 Apr 2017</time><a class='article__image' href='/2017/04/13/SystematicSolutions'> <img src='/images/2017/04/whiteboarding_midjourney.png' alt='Searching for Systematic Solutions'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2017/04/13/SystematicSolutions'>Searching for Systematic Solutions</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Empathy for All",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2016/12/27/EmpathyForAll",
      "date"     : "Dec 27, 2016",
      "content"  : "In a recent Rob Bell podcast, the motivational speaker and former pastor discussed how people seek simplicity in uncertain times. Post-election, I even found myself reflexively demonizing, or over-simplifying, the opposition. The fact is that the country after the election isn&#39;t suddenly different than the one we had before. John Stewart, in a rare post-Daily-show interview, warned against painting vast swaths of America with an undifferentiated red brush:&#39;So much of what liberals fight for is that people shouldn&#39;t be judged as &quot;monoliths,&quot;... defining Trump supporters by the worst of his rhetoric is ignorant.&#39;There is absolutely no place for homophobic, misogynistic, racist, fascist, anti-Semitic, anti-Muslim, or anti-science sentiment in our government, presidential or otherwise. Referring to neo-Nazis as the &quot;alt right&quot; is a dangerous normalization. The continual stream of confusing, even contradictory, statements is less a sign of befuddlement and more a page out of the authoritarian playbook. The handful of people that seek to embolden and enrich their own diminutive agendas born of fear and ignorance will be, eventually, defeated. Period. But what about the tens of millions of others? Who are those people that voted for Trump not because of his rhetoric, but despite it? What kind of pain exists that makes embracing a monster more desirable than continuing to endure? How badly does a system have to fail for someone that &quot;blowing it up&quot; seems a logical step?  I grew up on an Indian reservation, rural places long known to be economically challenged. If I skim the list of lowest-income places in the United States I see familiar names. I can&#39;t justify Trump or his actions. But I can empathize with a rural America that has seen far too many of its basic social systems (social, economic, governmental, etc.) strip mined and abandoned in the name of progress. We talk about the &quot;Rust Belt&quot;: the areas of declining industrial production slowly turning fallow before a changing world economy. But at least those places have the dignity of a moniker. Much of America - the America that elected Trump - does not. This is the America where their youth leave; either migrating to cities due to lack of opportunity at home or joining the military. They leave behind a diminished, aging population that puts even greater strain on the remaining community fabric.  Those that stay face suicide rates in rural areas are double those in urban areas. Their infrastructure is crumbling. They watch heroin use rise in their communities. That is when they&#39;re not suffering from crystal meth or prescription pill related crime. When jobs do come, they often are at the behest of vast, international conglomerates more interesting in extracting what value there is left, rather than building sustaining economic engines. In his book, Throwing Rocks at the Google Bus, media theorist Douglas Rushkoff articulates how Walmart, through low prices, paradoxically bankrupts communities over the course of decades:&quot;So now Walmart is in trouble, because so many small towns where it operates are impoverished. Once you have a Walmart, you can&#39;t make any money doing anything else. Everyone just either works for the Walmart or buys from the Walmart, that&#39;s it. And it&#39;s an extractive force, so eventually the towns go belly up, and now there&#39;s Walmarts closing because the towns they&#39;re operating in have died.&quot; That is the status quo that rural America has been told is the way forward. The future being championed by technology companies also doesn&#39;t provide much hope. Automation, not trade, has already claimed manufacturing jobs. The introduction of self-driving, long-haul trucks now threatens to eliminate one of the last remaining middle-class occupations that didn&#39;t require a degree. Simply retraining isn&#39;t the answer, either, as many rural Americans live in &quot;Education Deserts&quot;. Who is employed as a trucker? Besides several of my family members, quite a few of red state Americans:Map of most common jobs, by state, from NPR&#39;s Money BlogModern America has left part of itself behind. It is exactly this kind of status quo - the kind that only extracts without replacing with an alternative, that champions the disruption of livelihoods without transition to replacements, that &quot;hollows out&quot; health and home to enrich elites in far flung places - that has simmered resentment and anger. There are horrible people who took glee in a Trump victory. Then there where the millions that want - need - something different. A snapshot of a tweetstream by Mark on Christmas&quot;But who gives a shit about some backwater?&quot;Unfortunately, I see this sentiment all too often. Richard Florida, an American urban theorist, has long argued that knowledge economies favor urban rather than rural areas. In a recent piece, he argued that our economic vitality required ceding nation state power to cities. Rather than using government power to create opportunity, as co-ops are doing with New-Deal regulations to run fiber-optic cable, he&#39;d accelerate these places returning to dust from which they rose.America is not only a coast. Americans are not just the people who think or look like I do. The American dream is not a system that enriches some while sacrificing others. Red or blue, the audaciousness of our civic experiment is that we are a plurality. After the fascist and nationalistic fervor dissipates, we then begin the hard job: reclaiming an America system that works for all of us, not some of us. Avoiding another protest vote capable of electing the next Trump depends on it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-12-27T00:00:00-06:00'>27 Dec 2016</time><a class='article__image' href='/2016/12/27/EmpathyForAll'> <img src='/images/2016/12/america_stablediffusion.png' alt='Empathy for All'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/12/27/EmpathyForAll'>Empathy for All</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Toward a More Perfect Union",
      "category" : "",
      "tags"     : "Software Governance and management",
      "url"      : "/2016/12/03/AMorePrefectUnion",
      "date"     : "Dec 3, 2016",
      "content"  : "I collaborate with numerous API development teams at Capital One. This week, like many before it, was a big week. On Tuesday, we had a year-end, all-hands meeting for the DevExchange product management team. We&#39;re geographically dispersed and these in-person events give us the rare opportunity to humanize our counterparts. The event was followed by a team event at a bowling alley. While enjoying the more relaxed atmosphere, a previously unmet co-worker came over and asked, &quot;shouldn&#39;t you be off somewhere, approving an API?&quot; I totally missed the playfulness and immediately had a mini-panic attack: &quot;Did I miss an email? Which team did I forget about? Who&#39;s road map delay am I going to be blamed for next?&quot;Turns out this was perfectly nice guy I knew only from email that just wanted to say &quot;hi&quot;. My job is to represent an enterprise&#39;s non-functional requirements during software development. At some places this is called &quot;API Governance&quot;. At others, the role is handled by a &quot;Center of Excellence&quot;. Regardless of the name, I&#39;ve seen the mess that happens when API consistency and cohesion aren&#39;t upheld in distributed systems. Spoilers: it ain&#39;t good. I take my job seriously. Probably too seriously, if the near cardiac arrest is any indication.The next evening, while trying not to worry about new work wrinkles, I watched Jenn Schiffer&#39;s presentation to the 2016 XOXO Festival. In the video Jenn points out that technologists, especially those working on the web, take themselves so incredibly seriously. That, combined with what had previously happened earlier in the week, got me thinking.I returned to work the next day resolute to reintroduce the levity to my job. WORK&amp;trade; still has to be done, of course. But can we carve out time for those things that edify and excite us about it? That remind us why we&#39;re passionate about the jobs we&#39;re doing? Perhaps as important, can we aggressively defend that time from being co-opted by &quot;more important matters&quot;? At the time my intern started, I started a book club within our team. The purpose was to read a book on product management or software development once a month and, at the end, discuss the lessons in relation to our daily activities. It was initially intended to provide context for the intern on the breadth and depth of our profession. I quickly also saw the important of regularly seeking out, and discussing, external ideas in relation to problems we were living through (the Innovator&#39;s Dilemma conversation was fantastic). After the first several months, however, participation dropped off. People had real WORK&amp;trade; to do. As is at most companies, enrichment is a luxury paid for in time. And, as people got busy, they don&#39;t have that time to spend. In the short term, those co-workers opted to take those meetings, finish those presentations, and answer the emails demanding their attention. But we&#39;re trying to accomplish big things; bigger and of much longer duration than any one occasional scheduling conflict. We&#39;re in a marathon, not a sprint, and I worry about the long term implications.Today was NexTech2016, an internal conference. It not only shares internal progress but, in TED-talk style, brings in outside voices. Tarah Wheeler, website security czar for Symantec, finished the day emphasizing how important security for financial information is. After all, Tarah argued, this is how people &quot;buy their bread&quot;. Getting something to work and then calling it a day isn&#39;t enough. We need all the seriousness we can muster because we build the financial mechanisms that impact people&#39;s lives daily.It was a well-intentioned message. I&#39;m sure some in the audience may have needed to hear it. But, after she finished, I turned to the my co-worker and we both, simultaneously, let a long, weary sigh. There&#39;s a balance, a fluidity here we haven&#39;t mastered yet. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-12-03T00:00:00-06:00'>03 Dec 2016</time><a class='article__image' href='/2016/12/03/AMorePrefectUnion'> <img src='/images/2016/12/marathon_midjourney.png' alt='Toward a More Perfect Union'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/12/03/AMorePrefectUnion'>Toward a More Perfect Union</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Planting One&#39;s Feet",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2016/11/17/ElectionAction",
      "date"     : "Nov 17, 2016",
      "content"  : "For better or worse, people will be processing the how and why of this election for some time. Unfortunately, we can&#39;t wait for full comprehension (if such a thing were even possible) before acting.Many of the guides online discuss how to get started with encryption for messaging and email applications. There is certainly a concern that the world&#39;s most sophisticated surveillence apparatus is now in the hands of an unpredictable, even vengeful, actor. However, there&#39;s steps even prior to that we need to consider. Before doing a digital cleanse, consider that there are many, many organizations that are already staffed and fluent in doing the important work that needs doing. Their difficult jobs just became much, much harder. John Oliver did a fantastic piece on his HBO program about the election results (NSFW). He outlined numerous organizations worthy of support. Just throwing money at a problem doesn&#39;t solve it. But it is somewhere to start.I just subscribed to the Washington Post. In addition to the Executive, Legislative, and Judicial branches, the media has served as &quot;the fourth estate&quot;. Thier job has been to keep the American public informed of acts being done in their name. Despite this, &quot;traditional&quot; journalism, has been drastically weakened by digital disruption. Other alternatives include The New York Times and Pro Publica, an independent, non-profit that announced they&#39;ll begin the hard work of tracking hate crimes. Then I set up a recurring donation to the Electronic Frontier Foundation (EFF). America is a nation of laws and we need instiutions able to highlight and stop abuses. I chose the EFF because of the importance encryption, net neutrality, and online rights will play in the immediate future. The ACLU. John Oliver mentions plenty more deserving options.Finally, and perhaps most importantly, I also arranged a recurring donation to the House for All Sinners and Saints. Admist all the hate, communities of love and acceptance shoulder new burdens. The House for All Sinners and Saints is a Denver based Lutheran church lead by Nadia Bolz-Weber, author of &quot;Accidental Saints&quot;. What is not on the agenda is fleeing to another country. On election day, my wife took our two daughters to watch her vote. There was a lesson in civic duty that they needed to observe. In the same way, holding one&#39;s ground for basic human decency is the example we need to set. There&#39;s far too much at stake here to leave it to others.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-11-17T00:00:00-06:00'>17 Nov 2016</time><a class='article__image' href='/2016/11/17/ElectionAction'> <img src='/images/2016/11/protest_midjourney.png' alt='Planting One&#39;s Feet'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/11/17/ElectionAction'>Planting One&#39;s Feet</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Ex Machina",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2016/10/12/ExMachina",
      "date"     : "Oct 12, 2016",
      "content"  : "&quot;AI CREATES MOVIE TRAILER!&quot; yells the headline. IBM&#39;s Watson, looking for something else to do besides win Jeopardy, is now making movie trailers. The trailer by itself, for a horror movie called Morgan, isn&#39;t anything special: some off putting music, dark sets, and implied danger. It would just be an ok achievement for a computer until one reads the fine print: Watson actually selected six minutes of scenes it identified as potentially important, and then a human editor composed the resulting minute and a half, paired it with music, and then published the press release proclaiming the marketing gimmick finished. *slow clap* A much better example of where machine intelligence is applied is the short film Sunspring. The script was created by feeding numerous &quot;sci-fi&quot; screenplays through an algorithm. The result was then interpreted by humans - a director, cinematographer, costumers, actors, scorers - to give it (some?) coherent narrative. It is interesting. However, it clearly shows the limits even the state-of-the-art is capable of. There&#39;s a difference between pattern matching and creativity.The Turing Test is a recently released game that explores these issues in more depth. The game mentions the Chinese Room Argument, a thought experiment from the early 80s attributed to John Searle. In the theoretical situation a non-Chinese speaker is put into a room. Messages, written in Chinese, are passed into the room and responses are required. While the individual inside doesn&#39;t understand the contents of what they are given, they have book where they can match the characters they receive with correct responses. Once they find the correct pattern, they record a copy of the response to be passed back out. In the experiment, is the individual in the room &quot;speaking&quot; Chinese? To those outside the room, it may appear that a conversation is happening. The person inside, however, has no understanding of what is being said.That, ultimately, explains why Sunspring is so odd. The machine learning algorithm was told to find significant patterns in the training data. But while it understood the syntax of language, it has no semantics; it doesn&#39;t understand what the words mean. There have been tremendous strides in the field of machine learning. Those are heavily contrasted with some astonishing setbacks. To this point, however, what is often trumpeted as &quot;AI&quot; is still very much just a more efficient Chinese room participant. We are not yet in the presence of true, creative AI. Even then, the form that it takes will (most likely) be altogether alien, bordering on unrecognizable.A still from Ex Machina (2015)We get a moment of that in Ex Machina (2015). (If you haven&#39;t seen it yet this is your spoiler warning; further discussion of the film discusses important plot points of the third act.) Nearing the end, Ava (Alicia Vikander) carries out her escape from her creator with the help of Caleb (Domhnall Gleeson). She engineers a particularly brutal death of Nathan, her maker, played by Oscar Isaac. While the violence is shocking, the result isn&#39;t: Ava is exerting a justice that jives with most people&#39;s moral code. But it is the next action that chills to the bone. Millions of years of evolution have ingrained certain expectations about correct behavior.  Humans yearn for fairness. When we perceive a situation as &quot;unfair&quot; we tend to get testy. Caleb risks a tremendous amount to free Ava. As a result, we expect a happy ending for him; as the film&#39;s &quot;hero&quot; that would be fair. Yet Ava leaves him to die not because she has to, but because she can. The cold calculation of that moment is as alien and terrifying as anything else in the film.In a New America AI conversation with author Charles Stross, he made the argument that we are already in the presence of AI: the Limited Liability Corporation. Legally, they are treated as people. They acquire resources to sustain their life. They grow, they mature, and - in some cases, even die. In Stross&#39;s tour-de-force singularity book, Accelerando (Creative Commons Download Available), we don&#39;t find other alien species as we reach into space, but business algorithms continuing to churn long after their creators had passed from existence: &quot;Basically, sufficiently complex resource-allocation algorithms reallocate scarce resources ... and if you don&#39;t jump to get out of their way, they&#39;ll reallocate you. I think that&#39;s what happened inside the Matrioshka brain we ended up in: Judging by the Slug it happens elsewhere, too. You&#39;ve got to wonder where the builders of that structure came from. And where they went. And whether they realized that the destiny of intelligent tool-using life was to be a stepping-stone in the evolution of corporate instruments.&quot;Today&#39;s showy attempts at machine intelligence are attempts at creating artifacts for people. They, like the participants in the Chinese room experiment, are being given a string of characters. They respond with what, they are told, are pleasing responses. When our constructs begin to reshape culture for their own, and most likely unrecognizable, ends - that is the point when we are confronted with true AI. And, like Caleb&#39;s imprisonment by Ava, that realization will come too late. Update 7/31/2017: Maciej Cegłowski, the creator of Pinboard and notable social critic, posted the slides to his wonderful talk, “Superintelligence - The Idea that Eats Smart People”. Some well reasoned (and reassuring) thoughts on AI. Or at least that’s what the machines want us to think…",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-10-12T00:00:00-05:00'>12 Oct 2016</time><a class='article__image' href='/2016/10/12/ExMachina'> <img src='/images/2016/10/ava_stablediffusion.png' alt='Ex Machina'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/10/12/ExMachina'>Ex Machina</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "What if Developers Aren&#39;t Meant to Do API Design?",
      "category" : "",
      "tags"     : "management, Software Development, and API Design",
      "url"      : "/2016/09/06/DevsAsAPIDesigners",
      "date"     : "Sep 6, 2016",
      "content"  : "I&#39;ve grown concerned after running an enterprise API governance program. I review dozens of API designs, presented in the OpenAPI format, each week. In the past I&#39;ve adamantly maintained that poor API design was a training issue; if we, as the enterprise, could better connect developers with the right resources at the right time then we&#39;d see an increase in consistency and cohesion. Getting those materials created and distributed has been a point of emphasis. But what if developers aren&#39;t meant to do API design? What if that is an entirely new, emergent skill set? Before &quot;Devops&quot;, enterprise software shops had numerous professional specializations: quality assurance, software architecture, software development, systems administrator, database administrator, etc. Each of these was recognized has having specific, deep expertise in a narrow field. The downside of having these channels, however, was that they became isolated from each other. &quot;Tossing it over the wall&quot; substituted for end-to-end project management. In the worst cases, when budgets or headcounts were under duress, all out trench warfare erupted. Devops, especially the frothy conference buzzword type, was supposed to bring peace to those software shops. If infrastructure could be reduced to code, the thinking goes, then everything could be handled by the developers. Rather than having separate disciplines that devolve to defending their turf in times of trial, you just have developers and (in a condescending acknowledgement of reality) those that support them. That extreme, all-is-devops viewpoint also is also problematic, however. In a previous job there was an impassioned embrace of devops. The existing sysadmins and database administrators were told, officially, that they were &quot;legacy operations&quot;. Unofficially, management was telling seasoned, loyal professionals to pound sand. Perhaps unsurprisingly, six months later, production systems began falling over. The devops devotees didn&#39;t appreciate that Cassandra requires regular maintenance to avoid having its performance undermined by tombstones. Developers now had less time to do the things they enjoyed (developing) because they were relearning skills others had perfected (operations). Time to triage issues went through the roof because developers were relearning different skillsets. Couldn&#39;t those operations and database folks help out? Unfortunately not. They had sought jobs elsewhere; places where their experience was valued.I was reminded of this from a recent API Evangelist post: GraphQL Seems Like We Do Not Want To Do The Hard Work Of API Design. I want developers to view API design as a core part of their job. I want them to see the importance of designing the API first, rather than being something they auto-generate from an implementation. I think these are complimentary skills and I certainly disagree with those that regulate API design to &quot;documentation&quot;. However, is that too much to ask from a majority of our developers? Is API design its own thing, no different than systems administration or architecture? Is it time to recognize the API designer as its own unique profession, complete with its own career path? Should we stop expecting a hodgepodge of different disciplines (architecture, developers, product management) to do this important work in-addition-to what they currently do? ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-09-06T00:00:00-05:00'>06 Sep 2016</time><a class='article__image' href='/2016/09/06/DevsAsAPIDesigners'> <img src='/images/2016/09/silos_midjourney.png' alt='What if Developers Aren&#39;t Meant to Do API Design?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/09/06/DevsAsAPIDesigners'>What if Developers Aren&#39;t Meant to Do API Design?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Hiring Blind",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2016/08/02/HiringBlind",
      "date"     : "Aug 2, 2016",
      "content"  : "At a previous place I worked they required employees to answer the same online survey on a weekly basis. The intention was good - because of the geographically distributed workforce, it was a digital (albeit brute automated) attempt to open the lines of communication. The all-male engineering team, of which I was a part, was coming off a poorly received feature deployment to our almost-entirely female clientele. It coincided with an article I found about how Etsy raised their female engineers hire rate by 500%. A key to that success was supplementing traditional hiring practices with their own home-grown talent.  One of the questions on that recurring form was how the company could improve. So one week I proposed the creation of an internship program, focused on identifying, mentoring, and (eventually) hiring the talent we lacked. &quot;Yeah&quot; my manager responded via the automatically routed response, &quot;but those things are hard.&quot; Nothing changed, and I left the company soon after for a number of reasons.That was years ago and yet things, seemingly, have only gotten worse in the tech industry. Given the problems the lack of diversity cause, this is insane. What&#39;s more, companies like Facebook - when confronted with diversity numbers that don&#39;t match platitudes - blame the public education systems for not producing enough qualified applicants.That doesn&#39;t sit well, and for good reason:&quot;When I saw this article I had to fight back tears. I thought about all the work I&#39;ve put into to get to where I am today and wondered will it even matter when I start my job search in a few months. According to most tech companies, if I can&#39;t pass an algorithmic challenge or if I&#39;m not a &quot;culture fit&quot; I don&#39;t belong. I haven&#39;t even started my first full-time job yet and I&#39;m already so tired of feeling erased and mistreated by the tech industry.&quot; While searching for examples of what works I came across two examples from another notoriously unbalanced environment: late night television writers&#39; rooms. In the first, John Oliver&#39;s team narrowed down applicants through two rounds of blind selection. The second example, Samantha Bee&#39;s Full Frontal, also used a blind submission process. I am currently hiring and have these things on my mind. It wasn&#39;t immediately obvious how to conduct a blind submission process for an API software governance product manager. However, working with our hiring team, we worked out a first round process that is focused on skills mastery, rather than resume history. The initial  candidates are opaque to me; instead of, consciously or unconsciously, giving the benefit of the doubt based on name, school, or previous employment the gate to subsequent vetting is based entirely on their vision for creating a better process. I am fortunate to work at a place that not only talks the talk, but walks the walk. It would have been easy for someone involved in this process to push back, saying this was &quot;just an HR problem&quot;. They could have argued that &quot;the process is what it is&quot;. They could have dismissed doing something different because it was &quot;hard&quot;. To work, encouraging diversity is everyone&#39;s responsibility. This is an experiment with no guarantee of success. However, it is important that we continue to try. Let&#39;s figure it out together.Update 2016-09-10: Facebook&#39;s point-based recruiting system isn&#39;t producing diversity. As I mentioned, I have other problems with Facebook. However, the deeper dive into raises some eyebrows.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-08-02T00:00:00-05:00'>02 Aug 2016</time><a class='article__image' href='/2016/08/02/HiringBlind'> <img src='/images/2016/08/hiring03_stablediffusion.png' alt='Hiring Blind'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/08/02/HiringBlind'>Hiring Blind</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Codified Cultural Bias",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2016/08/01/CodifiedCulturalBias",
      "date"     : "Aug 1, 2016",
      "content"  : "Microsoft&#39;s TayMy friend, who I hadn&#39;t seen in a decade, was having a hard time understanding why I had left Facebook. After all, not being on the platform had made getting together in person that much more difficult. What was wrong with me?&quot;The AI we need to fear isn&#39;t the Terminator. It is codified cultural bias.&quot;Shockingly, that didn&#39;t clear things up. Before we start talking about extinction-level robotic events, we need to talk about your &quot;feed&quot;. Social networks have some sort of &quot;feed&quot;. This is the ongoing list of items created by a social circle visible to you: tweets from those you follow, photos from friends, job updates from coworkers, blurbs from blogs, etc. When a site starts, be it Twitter, Instagram, or Facebook, this stream of events is be presented in reverse-chronological order, with the newest item appearing on top. While simple, this presentation became problematic as these sites grew. Each platform wanted to maximize the amount of interaction a visitor had with the content they were presented. But as the flow-rate of each stream increased, &quot;great&quot; content - those items that would engage an audience and cause them to interact - began disappearing beneath of flood of banality. The social network&#39;s response was to, algorithmically, surface these pieces; to persist them in a stream longer than they would otherwise be in a chronologically organized timeline. Pieces of code scan everything available to you, prioritize what you should see, and display those items first.  In creating the default framing of the world around us, these algorithms have tremendous power. They are trade secrets. This code, and the machine learning behind it, isn&#39;t published publicly for review. It isn&#39;t possible to independently evaluate and assess the level of charm or malice contained within. These algorithms could be every bit the obedient, well-intentioned digital retriever, fetching our online newspaper on command.Unfortunately, history tells a different story. For example, Pokemon, because of a algorithm quirk, hate black neighborhoods. Facebook, previously caught in a filtering scandal having supressed news of a certain type, is getting worse. But so what if algorithms routinely demonstrate a white bias - it is only for games and social networks, right? Wrong. When industry practice, with its bias, is then subsequently applied to sentencing we don&#39;t need Terminators; we&#39;ve got algorithms afoot destroying lives. How do examples like those above happen? Did the authors of the Google algorithm that tagged two photoed black people as gorillas intend to offend? Was it Microsoft&#39;s mission to create an algorithm, named Tay which spewed genocidal tweets? I&#39;d assume not, at least not consciously. But the process used for everything from sentiment analysis to image recognition relies on patterns derived from &quot;machine-learning&quot;. And machine-learning has proven particularly adept at learning unintended lessons. Machine-learning starts with a subset of data. This data is used to train the algorithms to recognize patterns. But, if there is a problem with the data, things go awry. Specifically, the lack of diversity in test pools causes these pattern matching processes to double down on cultural biases. Microsoft admitted &quot;it wasn&#39;t prepared for what would happen when it exposed Tay to a wider audience.&quot; When the seed data is from almost entirely 20-something, single, white males the result are algorithms predijudiced against the old, married, female, and racially diverse. &quot;Machine Learning is money laundering for bias.&quot;I&#39;m not the only one increasingly bothered by this. Recently the New America institute hosted an even chat with Charles Stross, the author of a number of science fiction books. He was asked what about future AI scared him. Charles stated quite firmly that he is much more concerned about algorithms that reinforce, even exacerbate, social injustices than he is a robotic uprising.That brings us back to Facebook. The thing that sets it apart from other services is the heavy-handedness with which it pushes the algorithmic feed. Where elsewhere I can flip a setting or click on a dialog and have the chronological view back, Facebook reverts to the algorithmic version over and over and over. If I am against ceding cultural artifacts to a closed system then I shouldn&#39;t tithe to it. If I&#39;m creeped out by Facebook monetizing &quot;echo-chambers&quot; built from friends and family&#39;s content then I shouldn&#39;t contribute contribute the mortar. Finally, if I distrust the algorithm&#39;s ability to serve society&#39;s best interests, I am obliged not to be there.For years, the begrudging response to why somebody should use it was that &quot;everybody is already on it&quot;. That will remain true until it is not.    Update 2016-09-14: The PBS Idea Channel on Why Facebook News Can&#39;t Escape Bias  Update 2016-12-06: Software Glitches so Bad, It Gets the Wrong People Arrested  Update 2017-08-25: Machines Taught by Photos Learn a Sexist View of Women ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-08-01T00:00:00-05:00'>01 Aug 2016</time><a class='article__image' href='/2016/08/01/CodifiedCulturalBias'> <img src='/images/2016/08/microsofttay_pixray.png' alt='Codified Cultural Bias'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/08/01/CodifiedCulturalBias'>Codified Cultural Bias</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Consistency AND Cohesion",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2016/06/02/ConsistencyAndCohesion",
      "date"     : "Jun 2, 2016",
      "content"  : "Many find they have not one, not two, but dozens of APIs within their organization. RESTful APIs are descriptive, not prescriptive. That is, there is so much about the creation of an API interface design that is open to personal interpretation. Left alone, odds are these interfaces will share few similarities. Telling multiple development teams to do some Googling and expecting them to arrive at exactly the same &quot;correct&quot; interface conclusions is ripe for disaster. The flexibility of API interface design, along with the body of seemingly contradictory advice, can be be a hinderance to scaling without central guidance.  In response to this problem, some companies create an API style guides. Just because you create a persuasive, even comprehensive, document for how to do something, however, it doesn&#39;t mean people will. That goes double when the creators of an API perceive that the  API style was dictated to them, rather than it is something done in their long term best interest.Apiary&#39;s Emmanuel Paraskakis Sharing an all-too-common OccuranceThe consist and cohesive approach to API interface design within an organization is more important than the industry (or pundit) perceived &quot;correctness&quot;. The more microservice-like the granularity, the more important this becomes.Consider another interface that we are all familiar with: the electrical outlet.An enterprise is like a house. There are numerous individuals installing outlets (sometimes there are even multiple contractors for a single room). Without a geographical context, how do contractors choose the &quot;correct&quot; outlet? Is an European electrical interface more or less &quot;correct&quot; than a North American one? Of course not - all of the interfaces pictured carry electrical current. All are perfectly fine if consistently and cohesively used throughout. If a single house has an unpredictable assortment of electrical outlets then even doing simple connections incur an additional cost. The lack of consistency and cohesion has created friction to usage. An enterprise should strive to establish a set of API guidelines, or common practice, that fulfills their business intent. This might be creating the style guide mentioned above. However, that is only the first step. The bulk of subsequent effort is relentlessly ensuring that the consistent and cohesive application of those common practices happens. Everybody understands consistency. What is less obvious, when enforcing enterprise API guidelines, is the cohesion between interfaces. The Internet, my favorite source for Schrodinger&#39;s Cat jokes, defines cohesion as:&quot;the act of forming a uniform whole&quot;But what does that mean for API interface design? Consider the following image. A Salt Shaker and Peppercorns: Cohesive Function but Inconsistent InterfacesAt any table you&#39;re likely to find salt and pepper for seasoning food. However, here we see a salt shaker and pepper corns. While the two items are cohesive - they are both used to season food - the interface is inconsistent. Everyone can use a salt shaker. However, having to use the pepper corns in their current state is problematic. Salt and Pepper Sprays: Consistent Interfaces, but Uncohesive FunctionIn this image we&#39;ve solved our interface consistency problem: we&#39;ve got salt spray for creating luscious, beach-like hair... and we have pepper spray. They&#39;re both sprays. The interface is consistent. However, there is no cohesion. There is no uniform whole. You wouldn&#39;t use these items together (at least I hope not). And, despite being &quot;salt&quot; and &quot;pepper&quot;, neither one has anything to do with a meal condiment. Consistency of the interface doesn&#39;t mean much if there is no cohesion in how the services can be combined. Salt and Pepper Mills: Consistent Interfaces, and Cohesive FunctionSalt and Pepper Shakers: Also Consistent Interfaces, and Cohesive FunctionHere we have two versions of an interface design that is both consistent and cohesive. The salt and pepper shakers are fine. Or, if you would so choose, the salt and pepper mills also demonstrate a consistent interface with cohesive behavior. What is paramount is that an organization standardizes on one interface design or the other. They shouldn&#39;t try to straddle both. Or, even more common, they shouldn&#39;t hope consistency and cohesion just happens over time, since &quot;good&quot; will be self-evident. That is just a recipe for confusion.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-06-02T00:00:00-05:00'>02 Jun 2016</time><a class='article__image' href='/2016/06/02/ConsistencyAndCohesion'> <img src='/images/2016/06/salt-and-pepper_craiyon.jpg' alt='Consistency AND Cohesion'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/06/02/ConsistencyAndCohesion'>Consistency AND Cohesion</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Advice for Software Developers",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2016/05/25/AdviceForDevelopers",
      "date"     : "May 25, 2016",
      "content"  : "Riding back on the corporate bus after a long, fruitful day at the main campus, the young developer next to me struck up a conversation. He was intrigued to find out that I was a former developer that had &quot;crossed-over&quot; to product management. It was a pleasant enough exchange. Like most chats, however, I end up playing them back in my mind and wishing I had brought up various points or couched an opinion different. In particular, this obviously bright guy asked:&quot;How do I keep growing my career?&quot;I think I mentioned something about magic eight-balls. Or maybe I suggested garlic cloves. But, upon further reflection, I do have something more definitive on the topic I wish I would have shared. First and foremost, I applaud this dude&#39;s approach. When I think back to my early 20&#39;s I was equal measure (1) too cocksure to think I needed any advice from anybody or (2) too self-conscious to ask direct questions from strangers. The fact that this guy is engaging those around him and soliciting this kind of information is fantastic. Yes, you&#39;ll get lousy advice about magic eight-balls every once in awhile. But you&#39;ll never discover the nugget of wisdom if you don&#39;t beat about the bush. The second advice that I have for anyone, not just developers, is learn how to tell your story. I&#39;ve talked about the importance of storytelling and &amp;lt;a href=/2015/03/30/SafeCulturesforSharingFailures/&quot; rel=&quot;nofollow&quot;&amp;gt;the necessity of fostering storytelling cultures in software&amp;lt;/a&amp;gt;. Regardless of your profession, you have to be able to communicate ideas. And I&#39;m not talking about the big things like negotiating a pay raise or justifying a big strategic bet. It also plays a factor in those little moments: the hallway conversation, the desk drive-by, and the email you&#39;re about to send. The information age has placed even more of a premium on being an effective communicator than in the past. As digital mediums continue to extrapolate essential things from an exchange, like body language, it is vital that people compensate accordingly. Further, we don&#39;t really know something until we are able to communicate it to others. As a recent Forbes&#39; article states:&quot;When we enter professional life, we immerse ourselves in the jargon and principles of our chosen field and obediently follow precepts laid out by our respective priesthoods. Yet we rarely put serious effort toward expressing ourselves in a language that can be understood by those outside our tribe. Then we wonder why our efforts and achievements fail to resonate.&quot;A curious mind, one that is willing to seek out answers, is a tremendous asset. Combine that with the ability to articulate what he finds and this developer is poised for a bright future. On the Bus",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-05-25T00:00:00-05:00'>25 May 2016</time><a class='article__image' href='/2016/05/25/AdviceForDevelopers'> <img src='/images/2016/05/storytelling_midjourney.png' alt='Advice for Software Developers'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/05/25/AdviceForDevelopers'>Advice for Software Developers</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "A Microservice Primer",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2016/02/08/MicroservicesKickstart",
      "date"     : "Feb 8, 2016",
      "content"  : "IntroductionIf you have had anything to do with APIs in the past several years, chances are you&#39;ve heard of microservices. If you&#39;ve tried Googling afterward, chances are also that you&#39;ve been overwhelmed by the deluge of tutorials, tips, and treacle within an easy click.After a year&#39;s worth of writing the Net API Notes Newsletter, I&#39;ve been there. To help shortcut the learning process I&#39;ve collected some of the best resources in one place. Enjoy, and if there is an essential reference that I&#39;ve missed, let me know - I&#39;d be glad to check it out.Foundational WorkWhat are microservices? Here&#39;s where to start:While Martin Fowler made &quot;microservices&quot; famous, he neither coined the term or claims to have done so. Still, his post that launched dozens of conference session speakers is essential reading.David Simons has a slide deck that hammers home the most basic tenets of microservices.Sam Newman, a colleague of Martin Fowler, has written a hugely influential O&#39;Reilly book, &quot;Building Microservices&quot;. For the distilled version, try &quot;Deploying and Operating Microservices&quot; on YouTube. (There&#39;s also plenty more where that came from.Where to Start Building?RESTful API design has enough ideological quagmires. Microservices are no exception. Should developers start with a monolithic software architecture or opt for fine grained services? There&#39;s no right answer. But for an introduction to both sides:The pros of beginning with microservices in mind.The advantages of starting with a monolithic architecture and decomposing later.Implementing MicroservicesSami Lamti not only attended a workshop by Sam Newman, but shared his impressions of the content. The four part series includes:Defining MicroservicesApplying Microservices to Existing CodeSecurity, Orchestration, Choregraphy, and TestingTesting and VersioningProblems and PitfallsIrakli Nadareishvili is a frequent API speaker. Like Sam, he has a couple of online videos worth looking at:Microservice Architecture: The Blind SpotsAPI360 Summit: APIs Are Your Best Products (for best time usage, skip to the 18:30 mark for Irakli&#39;s comments on unbundling)At some point when you have numerous, tiny services you have to put them back together again. That may be either through choreography or orchestration. For an example of how Netflix does it, check out Daniel Jacobson&#39;s article on &quot;The Future of API Design: The Orchestration Layer&quot;.Microservices in PracticeIt makes no sense to fill up on theory and ignore the body of first-hand accounts from those that have built microservices. A couple notable accounts include:How SoundCloud Ended Up with Microservices.The Complexity of Microservices and Partial Failure at ComcastNginx and Determining Microservice SuccessIrakli quoting Irakli on Microservices in early 2015Extra CreditWhile I&#39;ve tried to only provide the highlights, there&#39;s plenty more for those with the time (or the inclination) to go further: Adrian Cockroft, of Netflix infrastructure fame, has a 40-page PDF available for free entitled &quot;Migrating to Microservices&quot;.Adrian also has a presentation on The State of the Art in Microservices on YouTubeWerner Vogels shares Amazon&#39;s transformational story.Neal Ford muses on how microservices are the first post-DevOps revolution architecture.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-02-08T00:00:00-06:00'>08 Feb 2016</time><a class='article__image' href='/2016/02/08/MicroservicesKickstart'> <img src='/images/2016/02/puzzle_stablediffusion.png' alt='A Microservice Primer'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2016/02/08/MicroservicesKickstart'>A Microservice Primer</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On API Product",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2015/09/22/SoulofANewNewMachine",
      "date"     : "Sep 22, 2015",
      "content"  : "If culture is important, then how do we ensure it appears in an API design?The Soul of a New Machine was a Pulitzer Prize winning book written by Tracy Kidder. It chronicled two computer design groups attempting to create the microcomputer of the 1980s. The &amp;quot;Soul&amp;quot; referred to the essence of the machine they toiled to bring to life. It was the summation of the people who played a part during creation. As stated on the Wikipedia entry:&amp;quot;The soul is theirs, stored in silicon and microcode.&amp;quot;Lately I&#39;ve been spending a fair amount of time thinking about not just APIs, but API Products. In doing so, I&#39;ve become aware that there is another level of mental perception required in order to create them. Anybody can sit down and, in an afternoon, become up to speed and the mechanics of a RESTful API; these are things like what verb to use where, status codes, and resource creation. A person can use their favorite language and quickly put together something that checks all the  functional boxes to be called an API. But that doesn&#39;t make a good API Product. An API product should have character. It should have a personality. It should display the best intentions of its creators by optimizing for the consumer. It should have a soul.  What does a technical implementation with &quot;soul&quot; look like? I was reminded of this while watching a (fairly) recent presentation by John Musser. At 10:15 he discusses why REST is preferable to SOAP, and at 16:44 why developers, overwhelmingly, have chosen JSON over XML. In both cases it would easy to mechanically dictate these revelations to teams creating products: &quot;if your API isn&#39;t RESTful and passing JSON payloads, you can&#39;t deploy&quot;. But that doesn&#39;t engage the teams into thinking about the character of the API they should create &amp;mdash; APIs that, like REST and JSON, are simple to consume, lightweight, readable, and make sense to both humans and machines.We should know the character, or soul, of the APIs we want to expose publicly: intuitive, flexible, solving a business objective in a meaningful way and &amp;mdash; dare I say &amp;mdash; delightful to use (where it makes sense). Are there others? Different characteristics warranted by the industry one is in? With those desired properties defined, we can shape and guide the conversation about everything that comes as part of the design; in the same way that simplicity enticed developers to adopt REST over SOAP, our characteristics should drive our API developer&#39;s decisions over ontology placement, payload representations, etc. It is tempting to try and shortcut API design. A company could attempt to imbue disparate teams with knowledge and experience (sometimes won over the course of years). But, for the sake of expediency and consistency, many API creators are handed a checklist of &amp;quot;company guidelines&amp;quot; and told them to blindly adhere to them. At best, this leads to functionally competent, but wrote, designs. At worst, it creates a culture where developers become divorced from outcomes and asking a centralized governing or deployment body to &amp;quot;just tell me what to do to deploy&amp;quot;. In this case, the education gap introduced for sake of speed doesn&#39;t just persist; it is exacerbated as the number and complexity of APIs grow, requiring ever more gatekeepers and &amp;quot;expert&amp;quot; oversight to maintain the facade. The &quot;best practices&quot; have gone from being a kickstart to a crutch.&quot;for a while, we eliminated &#39;best practices&#39; as a phrase at work because it was becoming a crutch and it was stifling any new or innovative thinking&quot; - @lindybrandon&quot;I hate &#39;best practices&#39; as a phrase.. I prefer &#39;common patterns&#39; because the opposite of best is worst while the opposite of common isn&#39;t necessarily bad.&quot; - @caseysoftwareThere is still a vital role performed by API governance. But those creating the API product need to have the best understanding of the potential consumer&#39;s needs and use cases. This understanding needs to be the characteristics upon the which the API is built, even if that supersedes general best common practice.If the totality of API common practice is a toolbox, then it is not a matter of educating teams to &amp;quot;use a hammer&amp;quot;. When building API products, we need to be educating teams when to use a hammer, and when to grab a different tool to express themselves. The soul of the new, new machine requires it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-09-22T00:00:00-05:00'>22 Sep 2015</time><a class='article__image' href='/2015/09/22/SoulofANewNewMachine'> <img src='/images/2015/09/soul02_midjourney.png' alt='On API Product'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/09/22/SoulofANewNewMachine'>On API Product</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Tomorrowland is Necessary",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2015/06/09/TomorrowlandReview",
      "date"     : "Jun 9, 2015",
      "content"  : "Tomorrowland (2015), staring George Clooney and Britt Robertson, is not a great movie. But it is a necessary one. (While not necessarily a review, there are spoilers ahead. If you enjoy your cinematic experiences unburdened by expectation, now is the time to find some cat gifs.)I have a hard time with Black Mirror, the outstanding BBC television series, for exactly the opposite reasons. The dark, near future dramas unspool less like speculative fiction and more like factual accounts we&#39;ll wake up to. In this show there is no hope in what technology hath wrought. There is no joy. There is only a grim resilience in a world where selfies increasingly are able to capture the monsters inside. It is excellent. But we live in an era of assembly line soothsayers.  You can&#39;t click on the Internet without landing on a garbage spewing misanthrope, bargaining their latest shock-and-awe disaster for eyeballs. In that reality is Black Mirror necessary?Tomorrowland isn&#39;t subtle. There&#39;s as much nuance in the plot as a typical tween-targeted episode of Disney Channel schlock. Clooney and Robertson are, tonally, in different movies. The retro-futurism is only a token gold leaf running along the movie&#39;s trim. And somebody owes Daniel Suarez a royalty for some similar parallels to his book Influx (2014) and its Bureau of Technology Control.And yet the villain&#39;s monologue, delivered by a wonderfully glowering Hugh Laurie, got me choked up in a way that few media experiences have yet this year.His character, Governor Nix, admits to having beamed dour and cataclysmic visions of the future into decision maker&#39;s brains. He was attempting to scare them straight; to warn them of the future that would happen without action. The population didn&#39;t recoil. Instead, he watched in dismay as the populace lapped up the visions of dystopia. They then perpetuated and mutated the stories, seeding them into the cultural firmament of our time. Rather than being a warning, the visions of modern collapse blossomed and begat subsequent nightmares. Nix concludes his failure was due to a misunderstanding of the human condition. Building things is hard and does not guarantee success. But doing nothing is easy. It asks nothing of you.So we subsequently take the easy route. We wallow in worst-cases and blockbuster spectacle; anything to distract ourselves from tomorrows that are incrementally worse than today.  &quot;The sky above the port was the color of television, tuned to a dead channel.&quot; - William Gibson, Neuromancer (1984)I loved last year&#39;s Big Hero 6 (2014). It had over-the-top superhero action and a beautiful amalgamation of concepts in the rendered &quot;San Fransokyo&quot;. But most of all, the character&#39;s love for science and technology was joyous. Yes, it gave the bad guy his powers. But it was also the means for our heroes&#39; journeys and (spoiler) eventual triumph.I love science. I love making things. But where are the tales of triumph? Of the human spirit elevated through the tools of its own design? Good grief, Apollo 13 (1995) was released twenty years ago (and probably should be considered historical drama rather than a work of science fiction). I love a incredibly realized dystopia like that seen in Mad Max: Fury Road (2015) but where are the counter-points? Not tales of utopia, but the stories about the best of us for the rest of us?The trailer for The Martian (2015) was released today.   &quot;I&#39;m gonna hafta science the shit outta this.&quot; - Mark Whatney, played by Matt DamonThis is necessary.Extra credit: Same day, same dystopian sentiment. No coordination needed.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-06-09T00:00:00-05:00'>09 Jun 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/06/09/TomorrowlandReview'> <img src='/images/2015/06/tomorrowland_midjourney.png' alt='Tomorrowland is Necessary'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/06/09/TomorrowlandReview'>Tomorrowland is Necessary</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs will be Invisible",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2015/05/19/APIswillBeInvisible",
      "date"     : "May 19, 2015",
      "content"  : "In preparation for the Nordic APIs Seattle event, the speakers were asked a series of questions regarding the past, present, and future of API design. These aren&#39;t trivial questions; as developers and designers of complex systems it is important to revisit where we&#39;ve been in order to steer where we&#39;re going. For posterity, I thought I&#39;d share my responses.How did you get interested in APIs?One of my first API experiences, prior to the native-app fueled explosion, was to consume multiple partner APIs to create a new, unique experience (more here and here and here). Even in the &quot;bad-ole SOAP days&quot; it was obvious how powerful standardized patterns of reuse and interaction could extend &quot;traditional&quot; software development. It&#39;s not for everyone (or everything). But I&#39;ve been accelerating data across increasingly frictionless pipes since. What is/was the best API you ever used?Everybody cites a handful of APIs worth emulating - Stripe, Twilio, SendGrid, etc. However, what I&#39;m currently digging is a tool for creating APIs - Kimono Labs. Point it at any available website and it will take the structured HTML and turn it into retrievable API data. It is extremely powerful. Further, it underpins a point: if you don&#39;t have an API, somebody will create one for you. That probably sounds great to some businesses that have hesitated with their own API efforts. But why would you leave your brand, your data, and your potential customers in the hands of a 3rd party?What is the most important thing to think about when a corporation creates their own API?I believe the most important thing is the business model. The cost for taking on the entirety of an API&#39;s life cycle should be known before starting. While the &quot;build-it-and-they-will-come&quot; model is romantic, in reality, I&#39;ve rarely seen it end well. ESPN, for example, appeared to create a public API that didn&#39;t have a clear vision for what developers were supposed to build with it or how customers would pay to help sustain it. That API is now, predictably, no longer public.A sub-section of Interstate I-90 beneath BostonWhat is the future of APIs?We are still in a period when people are wrestling with what constitutes a successful API. I&#39;m sure plenty of folks also talked at great length about the benefits and correct implementation of the Interstate Highway system shortly after its inception, too. But that nuance is wasted on me - Interstates simply exist, are efficient, and I&#39;m onto thinking about the destination at the other end. Mature infrastructure becomes invisible. We&#39;ll soon reach a similar point with APIs. We&#39;ll take for granted that there was a period when creating distributed software systems this way was a contested thing. In the future the only time we&#39;ll comment on an API is when it is missing (or in need of repair). ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-05-19T00:00:00-05:00'>19 May 2015</time><a class='article__image' href='/2015/05/19/APIswillBeInvisible'> <img src='/images/2015/05/computer02_midjourney.png' alt='APIs will be Invisible'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/05/19/APIswillBeInvisible'>APIs will be Invisible</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Favela vs the Planned Community",
      "category" : "",
      "tags"     : "Software Governance",
      "url"      : "/2015/05/12/APIsandGovernance",
      "date"     : "May 12, 2015",
      "content"  : "When speaking about the entire API life-cycle, much of the terminology is muddy. To me, API Management are those things concerned with the day-to-day operation of an API or API ecosystem. These are things like self-service documentation, monitoring, access enforcement, and request throttling. I define API Governance as those processes which shape and inform the way APIs are made in conjunction with other APIs. It is the planning that is concerned with the health of entire ecosystems, not a single implementation.There&#39;s not a whole lot of governance required when a company has one API. It is what it is. The need for a larger approach to the design and building of APIs is warranted when we consider multiple APIs, as is the case with microservices. With this architectural pattern a company may have dozens, if not hundreds, of exposed APIs. Here applications may no longer have point-to-point integrations with the APIs they&#39;re dependent on. Instead, interactions are the result of numerous APIs being composed into new experiences. These experiences are enabled from having a neighborhood of coherent, consistent APIs to draw from. Picture a favela, or Brazilian shantytown. Each building successfully fills the role of a house. It provides shelter and security. Like an API, it is encapsulated and enjoys a certain level of cohesion. If all we were concerned about was the functional requirement to have lots of houses there we can look at the resulting hillside patchwork and call it a day. A Brazilian Favela. Photo by Armando Lobos. Used under Creative Commons license.But expecting a new product to navigate this is unrealistic; those new to this environment will quickly be overwhelmed and lost. There has been no thought to things like accessibility or navigability because there was no coordinated vision for the holistic environment. There was no HOA or community planning. We lack a larger vision for the neighborhood. Planned Community. Photo by Dan Reed. Used under a Creative Commons license.This vision is not the role for Quality Engineering (QA). QA is a separate discipline devoted to ensuring that the functional requirements of effort, or the API, are met. QA, using our neighborhood metaphor, is more akin to building inspectors. They ensure the house is structurally sound, adheres to the original plan, and won&#39;t inadvertently cause harm. That is a vital role, but one focused on the house, not the neighborhood.API Governance still requires each API to fulfill it&#39;s functional requirements; API developers still are the construction crews tasked with building houses. However, API Governance has a responsibility to ensure non-functional requirements are also accounted for. These are the API equivalents of access for emergency personnel, edifying amenities like pools and green-spaces, and consistent navigation throughout. There are lots of places that meet the basic expectations for shelter. But how desirable is the neighborhood?At the recent Capital One API Summit, Irakli Nadareishvili was adamant that centralized planning is a mistake, whether for economies (ala Communism) or microservices. I agree that overly onerous bureaucracies, acting as gatekeeper between development and deployment, will sap the innovation and agility from a system. The inability to respond to new business opportunities (or threats) is a bad thing. However, the wild west is also an untenable model. A constantly changing landscape with no structure or coherence is not a place I want to build, either.API Governance is a tricky balancing act. But, ultimately, it is necessary for creating appealing API neighborhoods. Update: This piece generated a fair amount of discussion. I&#39;ve attempted to capture some of it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-05-12T00:00:00-05:00'>12 May 2015</time><a class='article__image' href='/2015/05/12/APIsandGovernance'> <img src='/images/2015/05/community_pixray.png' alt='The Favela vs the Planned Community'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/05/12/APIsandGovernance'>The Favela vs the Planned Community</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "How APIs Drive Business Innovation",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2015/04/20/HowAPIsDriveBusinessInnovation",
      "date"     : "Apr 20, 2015",
      "content"  : "With innovation, companies are playing with more pieces than they may realize.Until recently, a business that wanted to spur growth into new categories had three primary options. The first is to leverage an existing core competency in a new market. Another is to be the first to out maneuver competition by anticipating a marketplace change. The third is to create new offerings to meet the unmet needs of existing customers. The explosion of API offerings, tools, and formats hint at a new, fourth opportunity for business innovation. Rapid advances over the past several decades - the shrinkage and commodification of computers, the introduction of business software, and the rise of worldwide networks - have created a bounty of new, digital assets. Companies have found themselves increasingly saturated with data. Sharing that data creates value. Increasingly, the primary way to share data is via APIs.Amazon remains one of the largest and most profound API innovation stories. According to legend, one day in 2002 Jeff Bezos, the leader of the online retailer, issued a company wide mandate stating that:     * All teams would expose data and functionality through service interfaces.    * All teams had to use those interfa ces to communicate with each other.    * All interfaces, without exception, must be designed to be externalizable.    * Anyone who didn&#39;t implement the above would be fired. What started as an edict has since blossomed into a multi-billion dollar business, posed to someday exceed their traditional e-commerace business.Amazon took their efficient and elastic scaling of computational resources, a core competency honed through ebbs and flows of seasonal shopping, and codified them. Once such useful building blocks were exposed, anyone who could consume an API could benefit from Amazon&#39;s cloud. This freed up additional time and resources for these companies to focus on their key value propositions.  Salesforce faced a similar dilemma. A decade ago they dominated the nascent online customer relationship management (CRM) space. But they knew that wasn&#39;t enough. Remaining only a website opened the possibility of Salesforce being disrupted by a more nimble startup; a situation where they would have the dubious distinction of being the &quot;legacy&quot; solution. Rather than wait, Salesforce made the innovative business decision to expose key business processes through APIs. Rather than compete with the next big sales idea, they offered developers a platform on which to build and incorporate their own. Developers could jumpstart their application by being placed in front of the hundreds of thousands of customers that Salesforce already head. Salesforce gained the advantage of not needing to code everything themselves, allowing a community of developers try out ideas. In 2006, 40% of the requests to Salesforce&#39;s web servers were to their API. By 2013 that number had grown to 60%, across 2.5 million applications and 800,000 developers. It isn&#39;t enough to start an API program and call oneself a platform, however. An API needs to be a continuation of a business&#39;s larger strategy. eBay was one of first large online ecommerace companies that offered an API. However, much to many&#39;s surprises, it did not offer the ability to search listings. At the time, eBay was most concerned with increasing the volume of sales on its webpage and, as a result, it&#39;s API only allowed it&#39;s users to post new items. It was only after it had established a reputation for having everything did it then add the ability to read from it&#39;s data. Creating an API program doesn&#39;t just give developers the opportunity to kickstart their applications with a piece of proven functionality. The provider of the API wins by creating (or expanding) an ecosystem, increasing retention, and raising brand awareness. Some companies have gone so far as to becoming API-only, where the developers are the customer. Payments processing company Stripe and communications provider Twilio both are meant to be consumed primarily as a service - the API is the business. Before the first line of API code is written, companies must first analyze their digital assets. This data can generated from a wide array of physical items (commonly now referred to as the Internet of Things), each producing a stream of performance information that is useful for refining processes. It can be the culling and refinement of data from across previously isolated data silos to create new forms (the Big Data movement). It may be the codification of a core competency into a service, as was Amazon&#39;s case. Data may even come from new relationships; recognizing the value of their data to create actionable insights, companies may trade with interested parties who are able to reciprocate. Next, companies need to establish the vision of the ecosystem they wish to be built and the role of their platform within it. Does the company wish to enter a new market? Is the purpose of the API to extend their company reach? Understanding the larger company goals and how a platform, exposing digital assets via APIs, supports them is essential. Most importantly, businesses need to begin with the realization that an API is a strategic and architectural choice, not a technological one. The work in creating a successful API initiative is independent of the technology stack within an organization. It is only after taking inventory of the core functionality or digital assets to be exposed and the platform that a company would want to see that technology considerations should be considered. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-04-20T00:00:00-05:00'>20 Apr 2015</time><a class='article__image' href='/2015/04/20/HowAPIsDriveBusinessInnovation'> <img src='/images/2015/04/car_stablediffusion.png' alt='How APIs Drive Business Innovation'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/04/20/HowAPIsDriveBusinessInnovation'>How APIs Drive Business Innovation</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Safe Cultures for Sharing Failures",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2015/03/30/SafeCulturesforSharingFailures",
      "date"     : "Mar 30, 2015",
      "content"  : "We need to learn from stories. While the Internet is awash with tales of success it is harder to find write-ups on what didn&#39;t work. It is a shame. Cautionary tales are a valuable source of learning. They are what helps us, collectively, get better at our craft.   &quot;What&#39;s far more precious than being fluent in programming languages and tooling is the ability to collaborate and empower each other.&quot; - FoxBut few people want to be associated with a failure. And recounting the events of what happened, done incorrectly, leads to finger pointing, hurt feelings, and even retribution. Even though people may intellectually understand how this is a worthwhile, creating a storytelling culture is difficult to get right.Creating a Storytelling CultureHow do you create a culture? Specifically, how do you create an environment where success incrementally builds from repeatedly shared experience? In the book Blue Ocean Strategy by W. Chan Kim and Renee Mauborgne four major hurdles to changing cultures are listed:Cognitive - people must have some understanding of why the change in strategy or culture is neededLimited Resources - changing an organization will require shifting resources away from some areas and towards othersMotivation - people have to want to make the changeInstitutional Politics - the possibility of change needs to be supported from those with the authority to do soThe Cognitive BarrierTo pass the cognitive barrier, everyone needs to understand why a storytelling culture is valuable. Knowledge transfer, as obvious as it is to some, may not be high on the list of priorities for many. Not painting oneself into a corner or reducing time by leveraging other&#39;s experience is extremely valuable to an organization. Any opportunity to buttress abstract rationale with by sharing specific examples should be taken. Employees need to hear a clear, consistent message:   We will try things and they may not all work out. That&#39;s more than OK; that&#39;s expected. We&#39;ll learn from what happened, good or bad, and get better at what we do in the process.The Resources BarrierIf a cultural change represents a moonshot then rallying the momentous support necessary is difficult. What&#39;s worse, failure at such a grand scale will be demoralizing and will dissuading subsequent attempts, even if the original vision was worthwhile. It is better to start with small, almost seemingly insignificant interventions. One can&#39;t bray about how this is the silver bullet, sure to fix all that ails them. Instead, it is much more palatable to couch something as &#39;just a tweak&#39;, or as &#39;only temporary to see what happens&#39;. Any reasonable person is much less likely to be defensive against small, incremental ideas; the boat hasn&#39;t been burned and they&#39;re not stuck against their will. The are empowered to have a say in determining how things go. The Motivations BarrierMotivating people to create a storytelling culture is different than cognitively justifying why it is important. People may understand that sharing their experience is laudable but are unmotivated to do so. Motivation comes in two forms: extrinsic and intrinsic. Extrinsic motivators, like a financial bonus, are those rewards for specific actions that are external to the work itself. Intrinsic motivations are those psychological rewards that employees get from doing work they know is meaningful. If an employee&#39;s bonus is tied to the number of bugs they fix then they are financially motivated to spend time fixing bugs. Writing up the necessary steps to prevent bugs from happening, ironically, is now not in their financial interest. Likewise, the effort to document a complex solution needs to be celebrated. Having the time spent frowned upon and the artifact subsequently banished to a CMS back-alley, unread, is a powerful (intrinsic) deterrent. The Institutional BarrierFinally, those with authority must agree that a storytelling culture is important and be willing to communicate that message. If management is unwilling to discuss why knowledge transfer is important (the cognitive barrier), support small, incremental efforts (the resource barrier), and shape intrinsic and external rewards to create the desired behaviors (the motivation barrier) then any effort will be extremely brittle. Wrapping UpDoes your company view documentation as an &quot;extracurricular chore&quot; that detracts from &quot;real work&quot;? Do you share postmortem findings with other teams after major efforts? How easily are you able to discuss with others in the organization what you&#39;ve learned? Are failures buried, never to be mentioned again? Do you have a collaborative culture, eager to learn from its mistakes or one that is only intent on trumpeting its wins? More to the point: if you don&#39;t have a culture where it is safe to share the stories of failure honestly, how will you change it?(What does openly sharing one&#39;s experience look like? Richard Clayton&#39;s Failing at Microservices needs kudos not only for it&#39;s merit; that his team, his company, and his culture felt that these lessons were ok to share is wonderful. We&#39;re better API practitioners because of it.)(Update: 2020-03-25) Since publishing, I have read a number of additional books unpacking digital transformation and shifting corporate behavior. Two of the best are Agendashift, by Mike Burrows, and Switch, by Chip and Dan Heath.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-30T00:00:00-05:00'>30 Mar 2015</time><a class='article__image' href='/2015/03/30/SafeCulturesforSharingFailures'> <img src='/images/2015/03/lifepreserver_craiyon.jpg' alt='Safe Cultures for Sharing Failures'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/30/SafeCulturesforSharingFailures'>Safe Cultures for Sharing Failures</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Under the Skin (2014)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/03/23/UndertheSkinReview",
      "date"     : "Mar 23, 2015",
      "content"  : "Under the Skin (2014) is a different type of horror. There&#39;s no surprises waiting to jump out from behind a corner. There&#39;s no gore for gore&#39;s sake. The Scottish fog doesn&#39;t mask a cornfield filled with screaming, virginal teenagers.~~spoilers below~~What makes Under the Skin a unique experience is the camera. It becomes an alien surrogate, putting the audience in the position of a passive observer to humanity&#39;s quirks. The lust, the mealtimes, the midnight runs to the grocery store, the sweaty dance parties, the hope, the fear, the disgust - each registers the same. The lens is dispassionate. It forgoes the usual tricks meant to maximize the moment. In doing so, it becomes as alien to our expectations as Scarlett Johansson&#39;s main character.There&#39;s some interesting commentary about predators, human or otherwise. We see the alien begin its prowl. She is an object of sexual attraction for those too lonely, too misanthrope, or too wrong to be missed. Sacrificed to unsettling blackness, she returns to the hunt. As her character arc progresses, however, she begins displaying the all-too-human emotions of pity and curiosity. Ironically, it is her transformation to something approaching human that makes her prey for another.Answers aren&#39;t easy. What was the motorcycle guy all about? They pureed people for &amp;#8230; what? If the attempted rapist was also the one that killed the deadly alien does that make him a hero? And how are we supposed to feel about that? Usually, it is lazy to leave a satisfactory conclusion as an exercise for the audience. Here, however, the mystery makes things more chilling. The horror is of our design.The making of this movie reveals a slapdash process. I&#39;m amazed it is as coherent as it is. That said, those desiring the typical space opera and clear story will be disappointed. For those curious and willing to seek out new cinematic experiences may be haunted by Under the Skin. It will come after you long after the final credits roll.See it if: You like a bit of fartsy in your artsy, don&#39;t mind your movies ambiguous, or ever wondered what Radiohead&#39;s Karma Police video is like when stretched out to 107 minutes.Seen on: Amazon Prime Video",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-23T00:00:00-05:00'>23 Mar 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/03/23/UndertheSkinReview'> <img src='/images/2015/03/undertheskin_midjourney.png' alt='Under the Skin (2014)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/23/UndertheSkinReview'>Under the Skin (2014)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Traveling Salesman (2012)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/03/17/TravelingSalesmanReview",
      "date"     : "Mar 17, 2015",
      "content"  : "The Traveling Salesman (2012) is a tough sell. Unapologetically, it promises audiences two hours of mathematicians arguing. As we saw with Pi (1998) and Good Will Hunting (1997) there are ways telling moving (and very different) stories against a backdrop of algorithms. Math doesn&#39;t have to be boring. But this movie isn&#39;t about that quest; we only join our geniuses at the end of their struggle. All that is left is negotiation on what it means. And for a group of (supposedly) bright people we are treated to dim, slowly unwinding exposition.~ spoilers below ~The film is the immediate aftermath of four individuals who have solved the P versus NP problem. The movie stumbles out of the gate by not establishing why this is a big deal. Undefined, the subsequent tension and emotional outbursts are confusing. Twelve Angry Men (1957), also takes place on single set but its dramatic tension grows from a man&#39;s life being at stake. By the time the Traveling Salesman pounds the table over China and national security and banking and everything we&#39;re wondering why the first hour was even necessary.Much like the failed Limitless (2011) we are told these people are geniuses without ever being shown works of genius. We are told there are ramifications for not going along with the government without being shown (except in one odd, insomnia-fueled dream sequence?) . At the 11th hour we are told that the protagonist has a McGuffin that resets the negotiation power dynamic. And, from that, we do see some interpersonal sparks fly. But it is too little, too late.If I were to redo this movie I&#39;d start with clearly stating the government&#39;s ultimatum upfront: either unanimously sign over the research for the supplied terms or face treason charges. Left alone, we have better characterization as each actor presents why they would want to take the deal - maybe it is to pay for a sick relative&#39;s care. Maybe they want to sign out of fear. Maybe one wants their name on it out of pride. With the human element properly established we now introduce their foil: the mathematician of integrity who, for the audience, clarifies what their breakthrough means. We see well-reasoned point and counter-point with just enough humor to break the monotony. And then, just as we think we&#39;re arriving at consensus, we can call into question the integrity of our white night. When you start casually dropping references to the Manhattan Project and Von Neumann you set expectations. Unfortunately, it is not enough to just tell people you&#39;re a smart movie. You have to show them.Seen On: Amazon Prime Streaming Video",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-17T00:00:00-05:00'>17 Mar 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/03/17/TravelingSalesmanReview'> <img src='/images/2015/03/travelingsalesman_midjourney.png' alt='The Traveling Salesman (2012)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/17/TravelingSalesmanReview'>The Traveling Salesman (2012)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Chappie (2015)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/03/07/ChappieReview",
      "date"     : "Mar 7, 2015",
      "content"  : "Chappie (2015) is more a fun world to visit rather than a story to enjoy. Both with District 9 (2009) and Elysium (2013), Neill Blomkamp has demonstrated an incredible ability to create sun-baked science fiction universes. Even the third time around, back in his native South Africa, these dry, earth-tone vistas are an exciting and welcome break from the Bladerunner-esque cityscapes usually littering tech noir. This, along with Mad Max: Fury Road (2015), may launch a new generation of filmmakers that turn this backdrop into sci-fi pastiche. For now, though, I savor the uniqueness.What I can&#39;t look past, however, are South Africa&#39;s musical export, Die Antwoord. If Neill would have cast Ninja and Yolandi as minor gang members for a cameo appearance we could have appreciated the show of hometown pride. But, instead, they&#39;re asked to advance challenging, philosophical topics - man verses machine, nature verses nurture, the true nature of man, the existence of souls, and (as if they didn&#39;t already have enough of a challenge) where we go after we die. I can&#39;t say they&#39;re bad actors; they don&#39;t suffer from the &quot;dead eye syndrome&quot; that is the usual tell-tale sign. I think it is worse than that: I think they were just being themselves. That is, they aren&#39;t articulate or engaging enough for the complexity of these scenes. A lot of the &quot;heft&quot; this movie might have had, subsequently, never lands. I wanted to see more of Hugh Jackman, and his character&#39;s fundamentalist Christian beliefs. His criticism of AI and the conceit that Chappie had gained a soul could have been thought provoking stuff. But we never got that intellectual push-n-pull before it was boom-boom gansta time. To be clear, it is fun, enjoyable gansta time. But it is cotton candy compared to the rich, layered dessert hinted at.On a final note, Sigourney Weaver is criminally underused. Her only purpose seems to be to deliver a few terse lines while glowering. Even Jodie Foster had more to do when staring daggers at Matt Damon&#39;s Elysium character. But hey, if her work with Neill on this resulted in the studio committing to making Alien 5, then whatever.There is a scene, early on, where the thugs have stumbled into a firefight. As bullets fly, Yolandi pulls out neon pink automatic rifle and strikes a pose in gratuitous slow motion. It looks cool. It is also completely ridiculous. If you can be ok with that dichotomy, you&#39;ll enjoy Chappie. See it if: you want to be engrossed in the eerie spectacle of Ninja&#39;s tattoos out-acting Ninja, enjoy unique world building, or are ok having all the feelz for a swaggering, curse-dropping robot.Seen on: a big, old-fashioned theater screen.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-07T00:00:00-06:00'>07 Mar 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/03/07/ChappieReview'> <img src='/images/2015/03/chappie_craiyon.png' alt='Chappie (2015)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/07/ChappieReview'>Chappie (2015)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Coherence (2014)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/03/04/CoherenceReview",
      "date"     : "Mar 4, 2015",
      "content"  : "I sat down to watch Coherence (2014) with high hopes. Several end-of-year best-of lists made reference to it and the premise - friends at a dinner party discover that not everyone is who they seem to be - was promising. But these high hopes were quickly buried under numerous quirks and inconsistencies. It has the feel of improv with delusions of grandeur; or a party game of Clue played on meth.~ spoilers ahead ~We open with Blair-Witch-PTSD inducing shaky cam and claustrophobic close ups. It is probably good because it distracts from the stilted, wooden conversation said by unlikable characters. Cameras spontaneously snap. Power flickers on and off. There&#39;s a bump outside. Spooky! Somehow this has something to do with a comet. In case we forget, the clunky plot advancement occasionally calls timeout for &quot;weird comet history story time (or meteor, whatever)&quot;. There&#39;s a conflation of the Schrödinger&#39;s cat thought experiment, quantum physics, and parallel universes. It never rises above the drug-assisted pseudo-science found in freshman dorm rooms (&quot;Dude! Have you ever really looked at your hand? And did you hear about the comet?&quot;). Because one of Schrödinger&#39;s cat&#39;s was dead then, obviously, the people in the parallel universes are out to kill them! Obviously! Things quickly escalate for no real reason. Cue nosebleed on hippie spiritual person!Parallel time sequences can be tricky to pull off. There&#39;s a lot of show-your-math to account for. This film side-steps the issue by first implying that everybody has been dosed with ketamine and is an unreliable. Later, it is revealed that there&#39;s not one alternate reality but many; don&#39;t worry about keeping track of the timing of how and when the peanut butter got in the chocolate because everything is leaking into everything else at anytime that is convenient anyway. Everyone agrees that these revelations are obvious.With the comet sputtering out, the sullen Em goes full peeping-tom in order to find a likable cast. Finding one, her plan for happiness is to concuss, repeatedly, her other self in order to take her place. Rather than punting the limp body to another reality she, instead, opts to lock herself in a car. When that goes wrong, she knocks herself out again and hides the body behind a shower curtain (obviously). Sadly, her powers of toilet-lid savagery don&#39;t work on the audience&#39;s misery. End scene.See it if: You want to see what not to do with dialog, pacing, plot, or comet preparation.Seen on: Amazon Prime Instant Video",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-04T00:00:00-06:00'>04 Mar 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/03/04/CoherenceReview'> <img src='/images/2015/03/comet_midjourney.png' alt='Coherence (2014)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/04/CoherenceReview'>Coherence (2014)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Robocop (2014)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/03/04/RobocopRebootReview",
      "date"     : "Mar 4, 2015",
      "content"  : "The Robocop (2014) reboot seemed to skim across the collective conscious like a stone across water. Released in the January wasteland, many, like myself, didn&#39;t see it (it only managed to eek out a mere 3rd place on its opening weekend). But is it really that bad?There&#39;s some welcome advancements to the 1987 original. The opening action sequence does a wonderful job establishing the world. Instead of cheesy television parodies, we have Samuel L. Jackson doing an all-too-real 24-hour cable news personality. There&#39;s a better setup of interpersonal relationships and character motivations (with an important exception, which I&#39;ll get to). The action, also with one notable exception, is superior (Equilibrium (2002), an otherwise lesser film, set the muzzle flashlight bar so high that is seems silly for another film to try). Gary Oldman, as the sympathetic doctor, and Michael Keaton, are superb. Even minor characters like Mattox (Jackie Earle Haley) and the marketing weasel, Tom Pope (Jay Baruchel) have some great moments.It all exceeds expectations but still falls frustratingly short of being great. At one point, OmniCorp&#39;s scientists drug him to the point of &quot;being a zombie&quot;. Unfortunately, the audience isn&#39;t able to tell the difference. There was never enough of the human charisma or humor displayed for us before to notice when it subsequently went missing.  The relationship with his wife and son seemed more a contrivance than the bond strong enough to overcome $2.6 billion of OmniCorp investment. The surprisingly compelling first two-thirds are undone by a final act where all the screenwriter&#39;s strings are showing.See if: you enjoy well-executed near-future action that presents lots of big questions but doesn&#39;t really solve them by movie&#39;s end.Seen On: Netflix",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-03-04T00:00:00-06:00'>04 Mar 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/03/04/RobocopRebootReview'> <img src='/images/2015/03/robocop_craiyon.jpg' alt='Robocop (2014)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/03/04/RobocopRebootReview'>Robocop (2014)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Jupiter Ascending (2015)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/02/19/JupiterAscendingReview",
      "date"     : "Feb 19, 2015",
      "content"  : "First things first: Jupiter Ascending (2015) is not the candy-colored disaster you may have read about on social media. This isn&#39;t jet-booted Cloud Atlas (2012). Yes, there&#39;s lots ripe to be ridiculed by the 140-character satirists: Mila Kunis loves dogs! And dog men! Spaceman roller blades! Soylent-ever-after is people! But that is being glib and dishonest to the entirety of what made it to the screen. The early chase across the skies of Chicago during pre-dawn light is amazing. The establishment of Mila&#39;s character and her family is touching, funny, and interesting. There&#39;s some big concepts that make the larger space opera unique. The space sets are dazzling.There are problems but they are quibbles compared to the complete lack of chemistry between the two leads. The relationship between Dog Boy and Toilet Girl must work to drive the vehicle forward. Unfortunately, every time the two leads were left alone I found myself checking the time on my phone. The audience has to believe that Tatum is so in love with Kunis that he&#39;ll risk his life (repeatedly) to save her. His emotional shrug as he goes off to do so, ultimately, is mirrored by the audience.It is a shame because I want to see the Wachowskis continue to create daring, unique cinematic visions. There&#39;s fun stuff here. Per usual with their work, the visuals are amazing. They&#39;re just not enough to overcome the very real human problem at the core.See it if: You got a thing for odd tangents into steampunk, byzantine  bureaucracies,  awkward &quot;romantic&quot; exposition, or villains encouraged to not only chew scenery, but devour it. The world building is unique, but can probably safely wait until the movie comes up for free as part of a Netflix or Amazon Prime account.Seen on: A theater big screen.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-02-19T00:00:00-06:00'>19 Feb 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/02/19/JupiterAscendingReview'> <img src='/images/2015/02/jupiter_stablediffusion.png' alt='Jupiter Ascending (2015)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/02/19/JupiterAscendingReview'>Jupiter Ascending (2015)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Zero Theorem (2014)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/02/18/TheZeroTheoremReview",
      "date"     : "Feb 18, 2015",
      "content"  : "A Terry Gilliam film is worth watching even if the premise never quite lands. He was doing &quot;twist&quot; endings ( Brazil (1985) ) well before M Night Shyamalan could drive that car off the cliff, over the shark, and into the ground. The world in 12 Monkeys (1995) practically seethes, a character in its own right. And in The Zero Theorem (2014) we are once again graced with a spectacle nearly as ambitious as the central tenent: What does it all mean? Why are we here?      Much like his previous work, the answers aren&#39;t obvious (I think there&#39;s some pretty profound stuff here about a father, son, and holy ghost but I&#39;m still trying to piece it together). There some dark, yet subtly funny, commentary about &quot;Internet culture&quot; (which, in the future, is just &quot;culture&quot;). But people just looking for entertainment will find the final third messy and disappointing. I&#39;d encourage those folks to just relax and enjoy the pretty pictures. See If: You love rich, off-kilter worlds, ever wondered what Monty Python would look like if it developed a William Gibson fetish, or enjoy dystopias without easy answers.Seen On: Google Play Video",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-02-18T00:00:00-06:00'>18 Feb 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/02/18/TheZeroTheoremReview'> <img src='/images/2015/02/zerotheorem_pixray.png' alt='The Zero Theorem (2014)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/02/18/TheZeroTheoremReview'>The Zero Theorem (2014)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Congress (2014)",
      "category" : "",
      "tags"     : "Culture and scifi",
      "url"      : "/2015/02/02/TheCongressReview",
      "date"     : "Feb 2, 2015",
      "content"  : "The Congress (2014) is a challenging movie. I so badly want to recommend it on the strength of Robin Wright&#39;s performance and the compellingly plausible nature of the first third alone. But - perhaps because of its ambition, perhaps because of poor stylistic execution - I will readily concede that it is not for everyone. In the film Robin plays a version of herself. As such, she is relentlessly reminded of the poor choices she has made - both as an actress and as a person. At times these scenes are painful to watch; a cinematic recording of trolling&#39;s affects and its manipulative nature. There are real questions raised about what it means to tell human stories with fabricated characters. And if the movie would have been content to leave the story there it would have been great. Instead, it drives way, way, way off the rails with a dystopian animated psychedelic freak out. At one point, watching Robin make love to Jon Hamm&#39;s character while sprouting flora tendrils against a backdrop of crashing airplanes I distinctly recall thinking &quot;What the hell is this all about?&quot; My guess is most audiences will have given up well before that.See it if: You enjoy hard science fiction where the answers may be elusive and putting the pieces back together is an exercise largely left to the viewer. Or, if you love Robin Wright. Everyone else may find this frustrating.Seen on: Amazon streaming",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-02-02T00:00:00-06:00'>02 Feb 2015</time><div class='video-icon'> <div class='circle pulse'></div><div class='circle'> <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'> <polygon points='40,30 65,50 40,70'></polygon> </svg> </div></div><a class='article__image' href='/2015/02/02/TheCongressReview'> <img src='/images/2015/02/robinwright_midjourney.png' alt='The Congress (2014)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/02/02/TheCongressReview'>The Congress (2014)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Storytelling and the Developer&#39;s Need to Communicate",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2015/01/08/StoryTellingAsCommunication",
      "date"     : "Jan 8, 2015",
      "content"  : "During the APICraft Conference in Detroit Kin Lane, the API Evangelist, had a special session to discuss storytelling in software. At first blush this may be somewhat non-nonsensical; what do &quot;Goodnight Moon&quot; and &quot;The Adventures of Huckleberry Fin&quot; have to do with being a more productive programmer? As the discussion fragmented to include a wider number of voices it became apparent that, actually, there is quite a bit going on.  &quot;The universe is made of stories, not atoms.&quot; - Muriel RukeyserKin stated that he wanted to carve out time during the unconference to discuss the power of storytelling. On twitter he had gotten into arguments with others that dismiss its importance. These people are adamant that being a good developer means &quot;I just write code&quot;. But we have to tell internal stories. We have to explain things to bosses. We have to justify what is going on. Not everyone needs to be a blogger. But we all have to communicate.&quot;It&#39;s not who is smarter, it&#39;s who can communicate better.&quot; - on twitterAnd it is not just a matter of sharing quips or antidotes for the sake of water cooler aplomb. Research has demonstrated that storytelling as a vastly different effect on the brain than staid bullet points. Those lists engage the brain&#39;s language processing area and little else. Telling a story, however, engages a greater portion of the listener&#39;s mind. They are more likely to remember what you&#39;re saying and why it was important. Why? A story engages the parts of the brain that would experience the event if put in the same situation:  &quot;If someone tells us about how delicious certain foods were, our sensory cortex lights up. If it&#39;s about motion, our motor cortex gets active.&quot;In 2014 there was a tremendous debate within the API development community on the merits of hypermedia. Many, like myself, have grown frustrated that we&#39;re still debating pros and cons at clinical, even theoretical, levels of rhetoric. Kin related the current hypermedia discussion to the early days of RESTful interfaces. There had been a point where the simple utility we enjoy today almost veered into over-specification; a mistake made by semantic web movement. Sharing pragmatic implementation stories helped REST API creators avoid common architectural pitfalls and led to today&#39;s flourishing ecosystem. What&#39;s said about hypermedia needs to move beyond computer science bullet points. We need the war stories, good and bad, from those in the trenches making these systems a reality. We need software developers to see, hear, and feel themselves solving their own problems in a way similar to the stories being told. It is only at **that** point that any broad adoption begin.Update 2015-04-15: Thoughtworks has a piece up on their site &amp;mdash; Speech is Influence: Why Technologists Should Embrace Rhetoric.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2015-01-08T00:00:00-06:00'>08 Jan 2015</time><a class='article__image' href='/2015/01/08/StoryTellingAsCommunication'> <img src='/images/2015/01/books_stablediffusion.png' alt='Storytelling and the Developer&#39;s Need to Communicate'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2015/01/08/StoryTellingAsCommunication'>Storytelling and the Developer&#39;s Need to Communicate</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The API Economy and the Amen Break",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/11/04/APIEconomyandtheAmenBreak",
      "date"     : "Nov 4, 2014",
      "content"  : "In college I made mashups. I rode a burgeoning explosion in audio editing tools to a place of madcap experimentation; a cacophony of sound made by a million bedroom producers. At the turn of the century technologically savvy musicians were forming communities to sell their wares, swap advice, and brainstorm their next projects. In this musical wild west expanse, sub-genres blossomed . One, called glitch-core, capitalized on the audio artifacts produced by the hodgepodge of (sometimes) amateur tools. Rather than seeking the sleek sheen of radio pop, these producers embraced the clicks and pops indicative of underground creation. They would bring them to the fore, elevating them to a new form.A bedroom producer often did not have access to live musicians. Instead, their music was comprised of samples. A sample is a snippet stripped from an existing composition and re-purposed into something new. The undisputed, most popular sample of all time is the Amen Break. What other sample of sound has its own documentary?As the video explains, one six second loop created untold value for an entire matrix of individuals; artists, promoters, venue owners, and (ultimately) culture. It has become so ubiquitous it has become woven into the very fabric of modern life. APIs, similarly, are snippets of business logic. The allow for new application forms to emerge. APIs are the samples of the programmatic world and we are at a very precarious time in their adoption. The owners of the Amen Break, The Winstons, could have aggressively sought to enforce their copyright of the drum loop. Fans, music, and culture (not to mention the economies they create) would be poorer for it. Instead, the Winstons and their tacit allowance for reuse allowed &quot;a thousand Mancunians bloom&quot;. (An aside - If you haven&#39;t seen 24 Hour Party People, the cinematic story of Manchester&#39;s early electronic music scene, you&#39;re missing out.)Twitter, having achieved scale, has been aggressively building legal moats around what is and is not possible with their API. Netflix recently closed off public access for its API. ESPN ended their public API program. In an effort to capture as much short term value as possible, companies squelch the potential for larger, unexpected cultural good.   &quot;platform providers confuse the immediate drive for profit with the long-term needs of its users.&quot; - The Hazards of the API EconomyDevelopers don&#39;t like thinking about legal issues. But we need to begin considering our responsibilities, as API developers, to preserving a commons of functionality snippets for the future to be mixed upon. Publishing documentation intended for wide distribution and with a recognized legal allowance, as with the API Commons, is an important step. A way of quantifying the benefit of contributing to the commons for a private business would be another. Having a mechanism for a community to assume and distribute ownership for a popular, shuttered service is also important for mashups&#39; long-term stability. Web APIs are eating software. Like the early days of sample manipulation, we are still figuring out the ramifications. But if we are quick to monetize and channel API development efforts to our own, narrow interests we lose what some bedroom tinkering might blossom into. And that would be a damn waste of some beautiful potential.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-11-04T00:00:00-06:00'>04 Nov 2014</time><a class='article__image' href='/2014/11/04/APIEconomyandtheAmenBreak'> <img src='/images/2014/11/drum_stablediffusion.png' alt='The API Economy and the Amen Break'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/11/04/APIEconomyandtheAmenBreak'>The API Economy and the Amen Break</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Technical Literacy for All",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/10/29/TechnicalLiteracyForAll",
      "date"     : "Oct 29, 2014",
      "content"  : "My first computer was a Tandy. It was Dad&#39;s gift to the family for  Christmas in 1991. I quickly tired of the simple office productivity software with GUI&#39;s made in ASCII. That&#39;s when I discovered Basic programming. From the code printed in issues of the Tandy enthusiast magazine I&#39;d retype whatever games that might have been included. Inevitably, I&#39;d mistype something on all but the simpliest of listings and things wouldn&#39;t run. But it wasn&#39;t wasted time. Even if the input was garbled beyond recognition I was learning logical thinking - being able to break down problems into repeatable, understood elements. After one particularly frustrating FAIL I took what I had gleaned about loops and screen coloring and made my own program. It  manipulated the sixteen color display to produce a seizure-inducing, strobing effect. When my Dad saw it he asked, &quot;You did this?&quot;. It wasn&#39;t with disdain or anger.  It was one of the first times I can remember hearing genuine pride over something I had done in his voice.  I will cherish how I felt in that moment for the rest of my life. Believe it or not, I am 14 in this picture. And now you see why I was stuffed into lockers in middle school. Hang in there young spectacled peers - it does get better.Personal computing has come a long way since those days of beige desk monoliths. Computers &amp;mdash; cloud, handheld, wearable, or other &amp;mdash; have embedded themselves in every aspect of our lives. But the ubiquity of computers, and the software that runs on them, has had a troubling side effect. The computing I knew, the one with code sample magazines, has been replaced with shrink wrapped gadget lust. Need the phone to do something? Well, there&#39;s an app for that - no need to trouble yourself with creating your own. And, for heaven&#39;s sake, don&#39;t open the case - that will void your warranty. Better to just buy the new model then trying to update what you have. This disposable approach dismays me.I believe that technology is a thing people should do, not something people are meant to buy. Technical literacy is the difference between being able to make a future, and reacting to one. As Douglass Ruskoff, media theorist, famously declared &quot;Program or be Programmed&quot;. Lawrence Lessig also, correctly, pointed out that &quot;in cyberspace, code is law&quot;. I don&#39;t want people to be consumers, users, marketing leads, or the product. I want them to be makers, or equal creators of their experiences. If our children don&#39;t have the ability to write the laws that will govern their interactions, they will become beholden to those that can.That&#39;s why I started a group for my son and a group of his friends. We call it &quot;Code with Kids&quot;. Once a week we have a collaborative play session around a particular topic. I start with some big concepts - the history of computing, web programming, game development - and attempt to atomize it down to comprehensible, candy-colored chunks. Each kid received their own Raspberry Pi computer and was encouraged to customize it; week one was looking at various computer case mods online and then making our own cases with Lego. I feel it is vital to establish their ownership of this device - this isn&#39;t the school&#39;s lab machines, or a parents&#39; laptop, or something shared with their siblings. The PI is their computer and the basis for subsequent programming flights-of-fancy. I&#39;ve posted some resources for what we&#39;re doing to Github, along with the agenda.                                                                                                           There aren&#39;t grades. There isn&#39;t homework or required assignments. And while the lessons do build on and re-enforce what was learned in previous weeks we&#39;re not building toward a final performance or competition. I&#39;ve specifically tried to tailor things around a loose idea of directed play.Children do need to learn how to overcome adversity, problem solve under time duress, and cope with pressure. They need to learn how to take winning and losing with equal grace. But this pointed, heavily-orchestrated approach can&#39;t be the entirety of a learning experience. I fear too much of youth&#39;s time for open-ended discovery has been replaced with the scheduled rigidity of pre-supplied intention. A rigid curriculum of orderly school topics spills over into numerous extra-curriculars, each with it&#39;s own set of quantifiable metrics and trending curves. The need to appoint a winner for all things extends well beyond adolescence.Kids need unstructured play. I want &quot;Code with Kids&quot; to be a space where they&#39;re free find a technology thread that interests them. I&#39;m just a facilitator to them discovering a joy in making things. I don&#39;t know if, by the end, they&#39;ll be creating the software of tomorrow. I don&#39;t know if they&#39;re having fun (although early results are positive). Like trying to manually recreate those early computer programs, I don&#39;t know exactly where this is going. But, for the sake of tomorrow&#39;s creators, it is worth trying.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-10-29T00:00:00-05:00'>29 Oct 2014</time><a class='article__image' href='/2014/10/29/TechnicalLiteracyForAll'> <img src='/images/2014/10/buildingcomputers_pixray.png' alt='Technical Literacy for All'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/10/29/TechnicalLiteracyForAll'>Technical Literacy for All</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "My Daughter&#39;s Balloon Stand",
      "category" : "",
      "tags"     : "Milestones",
      "url"      : "/2014/08/25/theBalloonStand",
      "date"     : "Aug 25, 2014",
      "content"  : "While I was at work I received a picture message from my wife. It was of my five year old daughter sitting behind a box propped on the sidewalk. The caption was &quot;Balloons for Sale - $1&quot;.I am ashamed of my immediate reaction. &quot;Balloons for sale,&quot; I thought, &quot;that&#39;s ridiculous! Who would buy that? It is never going to work! They&#39;re not even real balloons; they&#39;re decades old water balloons she found in a box somewhere and partially filled with air! And the time of day is all wrong - everyone is at work. And even if they weren&#39;t, we aren&#39;t on a busy street! How is she going to make change?&quot; And on, and on, and on...And then I realized that the perceived embarrassment that I was trying to protect her from wasn&#39;t because of her fragility. It was mine.The voice picking apart the entire enterprise is the same voice that I hear constantly. I compulsively try to address every possible short coming prior to ever starting. And, since no project is foolproof, I talk myself out of whatever had seemed like such an amazing idea just hours before (you have no idea how many domain names I&#39;ve registered and never done anything with). I pretend I&#39;m saving myself the embarrassment of failing. Really, though, I&#39;m talking myself out of trying.On her own, my daughter had figured out (1) people like balloons, (2) she could make some money selling them, (3) a balloon stand is really just a box (we&#39;ve got lots of those) and (4) there are people right outside the door! My wife talked about how she, the girl unable to focus two consecutive minutes on cleaning her room, made up her own song:   &quot;Ba-LOONS for SALE! Ba-LOONS for Sale! I&#39;ve got a red one! And a Green one! Ba-LOONS for SALE!&quot;Waiting for a CustomerShe was a natural. She was making something happen. She had figured out how to offer something special of her own design to the world. And my first instinct was to shut it down.Yes, the street was empty and, ultimately, she didn&#39;t sell a single balloon. However, instead of being disheartened, my daughter just looked at it as another challenge. &quot;Mom,&quot; she said, &quot;I&#39;ve got a new plan. I&#39;m going to go to the park - I&#39;ll bring my brother. There&#39;s lots of people there. I&#39;m going to sell my balloons!&quot;",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-08-25T00:00:00-05:00'>25 Aug 2014</time><a class='article__image' href='/2014/08/25/theBalloonStand'> <img src='/images/2014/08/balloons_midjourney.png' alt='My Daughter&#39;s Balloon Stand'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/08/25/theBalloonStand'>My Daughter&#39;s Balloon Stand</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Detroit and Hypermedia",
      "category" : "",
      "tags"     : "Culture and travel",
      "url"      : "/2014/08/11/DetroitandHypermedia",
      "date"     : "Aug 11, 2014",
      "content"  : "I recently had the pleasure of attending the 2014 API Craft Conference. Despite the compelling nature of the content, the host city, Detroit, could not be ignored. I came for the ideas and left haunted by the venue. What happens when a city struggles to wear the infrastructure built for a population twice the current size? It&#39;s not a particular building, or block, or area; the entire downtown is a hodgepodge of modern, inhabited buildings standing alongside achingly beautiful, yet derelict, ruins. The fluted columns and ornamental decorations speak to times that have clearly past. These buildings&#39; deaths are now marked by a wreath of semi-permanent plywood barriers resting about their base, barring entrance. All copper has been stripped and sold. All windows removed and boarded up (if there was money to do so). In some cases it is obvious where there have been fires. Without any money for proper cleanup, netting is fixed around the critical wounds to prevent ash from breaking off and raining on what pedestrians might be below. Cities are normally in a constant state of reinvention. It is shocking to see one where the finality of yesteryear does not give birth to the banality of today. That&#39;s not the way we&#39;re accustomed to the story going. It induces unease. The actor has gone off script; we no longer have a clue how this is going to play out.How bad is it? When water services were recently shut off, gallons were shipped into the city from neighboring Canada. A cost saving measure to install cut-rate batteries into parking meters backfired. It has left half of the parking meters out of order, further diminishing revenue.                                             And yet people are still people. While I waited along the waterfront, an older gentlemen stopped and struck up a conversation.  As he moved to leave he said:&quot;I still believe in Detroit.&quot;Whether in Detroit or elsewhere we are the same: we endure the trials of today in hopes of a better tomorrow. The experience compelled questions. Ruin on a city-wide level doesn&#39;t happen overnight. Nor is it usually caused by a single event. Detroit was presented by a constant litany of societal change and, systematically, it made poor decisions. How did this Detroit happen? And are there lessons here that could apply to software?Debt had always been Detroit&#39;s Achilles&#39; heel. Administration after administration used it to bridge gaps between diminishing revenue and the cost of maintaining existing levels of municipal services. A fleeting bit of financial success in the 90s, however, allowed the city to borrow without discretion. Detroit&#39;s debt ballooned to 8 billion. This, eventually, caused the city to declare bankruptcy last July.Any developer is familiar with tech debt. These are the decisions we make in the name of expediency. We receive immediate software gratification knowing we&#39;ll have to pay for that incurred debt at a later time. It may be foregoing test creation for time-to-market advantage. It may be leaving documentation for a later, less-busy date. It may be knowingly opting for today&#39;s simplicity over tomorrow&#39;s scalability. The discussion is pertinent to APIs. Much of the current API boom was driven by app store development. These native apps caused development of narrowly-defined APIs around existing processes. In these situations the relationship between consumer product and API provider is 1-to-1. Often the same team provides both pieces. There is no information that is out of band; the entire development pipeline is within the purview of the same organization. Hypermedia seems completely extraneous for this group. Link relations to communicate affordances, semantic meaning for self-documenting responses, and hypermedia as the engine of application state (HATEOAS) solves a problem that they don&#39;t have. From their perspective, yes, hypermedia is bullshit. Sessions for the UnconferenceDebt can be a useful tool. But, as in the case of Detroit, it restricts future possibility. The next wave of API development is not like the previous one. New services, powered by automatic machine discovery, will have different expectations of affordance communication. The Internet of Things, although API driven like the native app revolution, will be an order of magnitude bigger. As the diversity of API consumers extends beyond the browser, end-of-life horizons will extend into decades. Building single-consumer APIs is a form of technical debt. They&#39;re expedient for today. But, like Detroit&#39;s budget approach, ineffectual tomorrow.I know it can be hard to predict a software&#39;s path after it launchs. Guessing is even harder when the world has grown an additional decade of technological thickets. Hypermedia suggests a helpful set of features for future-proofing an API. The extra upfront labor it entails avoids the technical debt of tomorrow. The promise is not fulfilled yet; much of the conversation at API Craft was admitting the problems with the scene so as to address them. But I&#39;m human. I hope. I still believe in hypermedia.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-08-11T00:00:00-05:00'>11 Aug 2014</time><a class='article__image' href='/2014/08/11/DetroitandHypermedia'> <img src='/images/2014/08/detroit_pixray.png' alt='Detroit and Hypermedia'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/08/11/DetroitandHypermedia'>Detroit and Hypermedia</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Cooling on the Connected Car",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/06/30/CoolingOnTheConnectedCar",
      "date"     : "Jun 30, 2014",
      "content"  : "I am old enough to remember the wall-mounted telephone. Provided by the telephone company, it was a fixture in the house for years &amp;mdash; the same as every other Bell customer. As &quot;cell phones&quot; became a thing anyone paying attention realized that land lines were an endangered species. Whenever a person places a call they aren&#39;t interested in calling a location. People call a person. The destination is not the hardware at a fixed point. The ability to have a device which comes with us, that allows communication that transcends a fixed point, is a positive thing. The Old Bell Wall-Mounted Telephone; Functionality at a Fixed PointAt the recent API days in San Francisco the focus was on the &quot;connected car&quot;. The discussion centered around bringing &quot;Internet-like&quot; connected services into people&#39;s automobiles, enabling a new series of apps and services. Irakli Nadareishvili recapped many of his thoughts on his blog.He correctly identifies market fragmentation being a problem. When it comes to cars it is not a matter of developing for IOS or Android. There are seemingly as many efforts as there are car makes. But that is not the worst part. The more troubling thing Irakli mentions is his first bullet point:  &quot;There is a disconnect between mobile and automotive industry life-cycles.&quot;In 2013, the auto industry sold north of 15 million vehicles in the United States. Compare that to 120 million smartphones in the same time. The average US person, during the recent recession, averages a new car every 10 years. Meanwhile people are upgrading their phones every two years.This deviation in upgrade cycles is not something the auto manufacturers can hope to surmount. It&#39;s akin to the folly of the all-in-one tv/vcr/dvd console. On the surface, who doesn&#39;t want a simple, single package? Multiple bits of functionality at a fixed point.The initial logic, like cars running their own custom OS&#39;s, initially stands. However, it crumbles badly over time. When something breaks (or new advances, like Blueray or flat panels occurs) people now either need to replace the entire unit, or they end up running the wires to an external box they had hoped to forgo. Modularity of components is future proofing; the obsolescence of a purchase doesn&#39;t happen at once. I see the same mistake happening in cars that has happened with &quot;smart&quot; TVs. I&#39;ve got a perfectly good, yet &quot;dumb&quot;, HDTV. When I want to add capabilities I bought a Roku. When the next generation came out, adding memory and processing power, I could upgrade for the price of the Roku, not the price of the TV. I can add various dongles, like Chromecast, Apple TV, or Amazon&#39;s fire and get whatever innovation they have for minimal investment. When something new is announced tomorrow, I can integrate that too. Meanwhile, smart TVs are either stuck with the capabilities they shipped with or they resort to the same modular approach I employ (albeit having paid a premium to get there). Give me the lowest common denominator and I know it&#39;ll work tomorrow.A few years ago I bought a used family vehicle. One of the selling points was the in-dash navigation. The map images displayed are stored on a DVD played from the spare wheel well. I&#39;m sure the maps were great in 2007. But in 2014 the number of omissions has lead to less then ideal situations. There&#39;s no real time traffic. The UI is painfully rudimentary. And it costs more than $150 for a new disk. All that (and more) results in me just using the navigation on my phone. The only thing I miss in using my mobile is the prime, overly large pixel real-estate being in the dash provides.The seems to be the same conclusions driving Apple and Google&#39;s automotive ambitions. Yes, it makes sense to have a screen along for the ride, but make it a dumb screen. In the video below they show how the phone (with it&#39;s quicker upgrade iterations) makes the car smarter. The desirability of the vehicle&#39;s &quot;smarts&quot; is preserved. When the mobile gets more powerful, the network gets faster, and the apps get better the car also benefits.Finally, travel is an increasing source of quantified-self information. Average time in traffic, number of stops, etc. is valuable information. Yet a car which attempts to &quot;bake in&quot; these productivity apps with their own proprietary systems means my &quot;travel self&quot; is locked to that vehicle. If I borrow someone else&#39;s car, or use a service like Uber, or ride a bike there&#39;s now a gap in my quantified story. It is like the beige phone stuck to the wall; being a self-contained platform fails in the usage reality that is fragmented, distributed, and mobile.  Update 2023-08-08From a recent Reddit post quoting a Verge article:  “People are getting fed up with all the useless tech in their cars — For the first time in 28 years of JD Power’s car owner survey, there is a consecutive year-over-year decline in satisfaction, with most of the ire directed toward in-car infotainment.”",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-06-30T00:00:00-05:00'>30 Jun 2014</time><a class='article__image' href='/2014/06/30/CoolingOnTheConnectedCar'> <img src='/images/2014/06/smartcar_stablediffusion.png' alt='Cooling on the Connected Car'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/06/30/CoolingOnTheConnectedCar'>Cooling on the Connected Car</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "NFL and the IoT",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/06/16/NFLIoT",
      "date"     : "Jun 16, 2014",
      "content"  : "There&#39;s been a considerable amount of hand wringing about how the coming IoT (Internet of Things) will shape our everyday experiences. Emerging uses of augmented reality is another technology that causes conerns (and is less distinct from the IoT than one might think). In a recent Ted Talk former NFL punter Chris Kluwe discussed how coming changes in augmented reality will change a fan&#39;s relationship to the game of American football.Chris Kluwe, wearing Google Glass, on stage at TEDWhile in LA toward the end of 2013 I had a similar rant while stuck in one of the city&#39;s traffic accoutrements. I stated, quite plainly, that there would always be subjective judgments in the game that would require a human official to be on hand &amp;mdash; holding, for example, or pass interference can expose the motes in the eye of the beholder. However, there is a whole other class of rule enforcement that land squarely in the realm of absolute, quantifiable truth. Imagine a thrilling game that is quickly headed toward conclusion. The offense marches down the field, battling not only the opponent but the clock. The ball is handed off, the running back finds a lane around the edge, turns on the afterburners while avoiding pressure and... maybe stepped out?The most innovative use of technology the NFL can lay claim to is instant replay. And, in cases like that above, even that is inconclusive. In or out of bounds is not the only problem area where subjective observation is asked to judge absolute truth. Was a pitch between a quarterback and a player on a halfback pass was actually a forward pass? Did the quarterback accidentally scrambled beyond the line of scrimmage before launching the ball? In the midst of a scrum, did the ball break the plane of the goal?There&#39;s absolutely no reason for this kind of dithering.  With the size, durability, and feature set present with common RFID tags there should be no question when it comes to ball placement. Put RFID chips in the player&#39;s shoes, gloves, contact points like elbows and knees, and the ball. Have those things aware of where they are within the field&#39;s grid. Plotting their relationship to the sidelines, goal, and the line of scrimmage would then be trivial. The pace of the game, tightly intertwined with excitement, increases as a portion of momentum-sapping replays are obsolete. Even better, fans are assured that calls are correct (where possible). But assuring the correctness of the game is only the first part. Once we have a field full of connected things we get a wealth of performance data. Amazing performances are now captured in minute detail. A game, like Madden, would no longer be a pale facsimile of the gridiron. Fans would now be able to download faithful recreations of every game, every play, and every player. Individual plays would be sources of study. While fantasy football players (*really* competitive ones) regularly &quot;watch tape&quot;, they are limited to the whatever pirate clips end up on YouTube. In a tagged world a game&#39;s dataset could be imported into a Madden-like 3d rendering engine. Suddenly numerous options open to the causal fan in the immersive pursuit of why &amp;mdash; slow a play down, rotate the camera, see the way the center of gravity buckles and the hole suddenly appeared. The Internet of Things, and the continuous stream of data it produces, will change our lives in ways profound and curious. It will be a deluge of information into the already swollen stream we tread. But we do have chances where we can figure things out, if we choose to. By first embracing these things in how we play (and how we experience play) we can work to sort out the unexpected compromises and conflicts before we adopt it for the everyday.Update (2014-08-04): After I posted this there have been a couple of changes. First, the NFL is swapping out the archaic overhead play shots analyzed by teams during the game with tablet-based equivalents. It is not a heads up display, but it is a start. They also will be embedding RFID chips in players&#39; shoulder pads this season. While I could see this is where we were going, I did not anticipate it would be this quickly.Update (2015-06-25): I had heard speculation that the NFL was going to begin experiments collecting data from players. However, I hadn&#39;t expected that developers would already have access to that data. Available via an API, ambitious programmers will be able to access data generated via RFID chips embedded in each player&#39;s shoulder pads. This is the beginning. Update (2023-10-01): When the Falcons played the Jaguars in London today, Disney+ and ESPN+ hosted an alternate version of the game. Called &quot;Funday Football&quot;, player actions are animated as bobble-esque like toys within Andy&#39;s bedroom, from Toy Story. The overall experience was... odd? The beginning was filled with technical glitches while the promised &quot;zaniness&quot; given the situation never really materialized. For football fans, it was a poor way to watch the game. And kids (who I presume are the intended audience), were bored. At least one of the announcer&#39;s first name was Booger, but that meant the broadcast&#39;s funniest moments (&quot;Let&#39;s see what Booger is doing,&quot; and &quot;What&#39;s up, Booger?&quot;) were also the most unintentional. I&#39;m not sure who this was for. Baby steps?",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-06-16T00:00:00-05:00'>16 Jun 2014</time><a class='article__image' href='/2014/06/16/NFLIoT'> <img src='/images/2014/06/nfliot_stablediffusion.png' alt='NFL and the IoT'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/06/16/NFLIoT'>NFL and the IoT</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs on the Edge",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2014/05/31/gluecon-day-2-recap",
      "date"     : "May 31, 2014",
      "content"  : "The second day of Gluecon continued the previous day&#39;s emphasis on APIs and better development cultures. However the lack of focused tracks, handful of last-second cancellations, and smattering of off-the-cuff presentations resulted in a more meandering day.    Index     The Case for Application Driven Cloud Computing   How to Make Things Invisible   The NARWHL API Framework   What We Need to Know About the IoT   10 Reasons Developers Hate Your API   APIs.json and API Discovery on the Web    The Case for Application Driven Cloud Computing Adam Davis, Citi Throughout the conference, there was a reoccurring image of the developer and operations groups within medium-to-large companies. It was no different with Adam, who got to his image of farm silos early in his deck. Adam lamented the loss of the &quot;good old days&quot; of open systems. During this time there was little separation between development and operations.  The devs, systems administrators, and database maintainers all worked on the same team.  All good things are destined to come to an end, however. Rather than jointly herding cattle in the same direction people came to care for their own systems as if they were pets. Companies delegated and defined specific roles within an organization was to achieve efficiencies. But, instead of elegant, pin-point systems the enterprise morphed into fenced off pastures (or, depending on your agricultural metaphor of choice, siloed fiefdoms).  Through heavy standardization and limited variation Henry Ford was able to achieve efficiencies on his fabled assembly line. He reduced the time it took to produce a car from 12.5 hours to 93 minutes, while simultaneously accomplishing the task with less manpower. These efficiencies came with concessions: the cars only came in the color black because it was the only color that could dry fast enough.    &quot;Automation needs to be fit for purpose and not constrained by the procedure it replaces.&quot;  Many companies have introduced automated processes into their operations. But, because tearing down fences that have defined boundaries between departments is hard, we now have the same pastures as before, just with robotic cows.     &quot;so what we ended up by automating [four] standardized processes with cloud is four automated silos&quot; - Lori MacVittie  What is missing is the realization that automation should be able to bridge across these artificial divisors. Yes, the robotic cows are more efficient, but it is not victory. If we architect our applications differently for cloud-scale, shouldn&#39;t we also re-architect how we host them? Back to Gluecon Day 2 Index How to Make Things Invisible Joshua McKenty, Piston Cloud Computing    &quot;Learning to program has no more to do with designing interactive software than learning to touch type has to do with writing poetry&quot; - Ted Nelson  If one is not trying to get better, they won&#39;t get better. It is not a matter of acquiring 10,000 hours toward a pursuit, it is the deliberate practice during that time. If we&#39;re not uncomfortable during the work we&#39;re not getting better.  Writing API SDKs is uncomfortable because, in part, because it makes us consider consuming the API as the client rather than as the API author.  Ignoring things doesn&#39;t make them invisible. Many API developers ignore the users. They create distributed systems hooks that make sense to them. But the end consuming clients aren&#39;t invisible, in this case; they&#39;re just forgotten. And APIs written in this way usually aren&#39;t very good.  Affordance is a term used in the design of physical object. It is how we are clued in on how to use an object. It is the way a door handle suggests to us whether we need to push or pull. It is the hint that a baseball would best fit in the hand rather than being sat on. And, in software, it is the messaging on how to interact with the UI. If we have to write documentation on how to use an API then how obvious is the API interface to begin with? The API is not a natural extension of code. It is it&#39;s own product. And it requires the thinking about product presentation the same way care is put into a gadget from Apple or the detail present in a Tesla car. It sounds simple. But, obvious in retrospect, simple is hard to do in the moment. Being right doesn&#39;t matter. Having the &quot;right&quot; API isn&#39;t a correct affordance. If a user wants a duck, they should get a duck. Providing an API that offers anatomical duck parts and expecting them to reassemble the pieces from scratch is unrealistic. If a user&#39;s mental model expects a duck, it is the job of design to present said duck.  A REST API should not expose objects. It should expose resources. It is important to realize that those two things do not necessarily have a 1-to-1 relationship. Internally you may have a wing, a beak, and a gizzard object. But what is exposed to the consuming client is a duck. Apple throws out affordances to get to the right affordance. With Piston, Joshua&#39;s company, they&#39;ve thrown out the concept of OS. It doesn&#39;t matter anymore. There is no reason to expose that. Simple is the only thing that does scale. Open Stack has a ridiculous number of APIs. And it gets in trouble because of that. It&#39;s not even that it offers the gizzards of a duck; it&#39;s even more granular than that, offering the API equivalent of muscle, tissue, and blood vessels. In the effort to expose every single nuance that might ever be possibly desired they&#39;ve created an overwhelming and unapproachable system. The tension comes from the desire for composability in the future (the ability to remix things during innovation) verses standardization now (ability during maturation). The thing that might be different now is the mobility gap (not in reference to the economic concept, but the idea of the space between where data actually resides in the cloud). It is like making pizza in the 1500s. You can&#39;t make a pizza chain in that period because tomatoes were in the new world taking a year for a round trip. You can&#39;t ignore the network. Distance can&#39;t be eliminated. Today we&#39;ve solved the tomato problem and pizza chains are everywhere. But the cost of moving data is the #1 bottleneck.  Cloud computing on the edge is a dumb idea. If the edges are as far away as possible (as it will be distributed with the Internet of Things, or IoT) then the gap is huge. It is building a duck with a gigantic worm hole in the middle.  What you care about is the abstraction where you get work done. You don&#39;t care whether 120 volts at 60 hertz is an open standard. It no longer matters. Part of our obsession with detail is that we get hung up on levels where we don&#39;t need to be.    &quot;Anybody who tells me I can&#39;t use a program because it&#39;s not open source, go suck on rms. I&#39;m not interested. 99% of that I run tends to be open source, but that&#39;s my choice, dammit.&quot; - Linus Trovalis  Deliberately try to make a vast portion of what you do invisible. There is no &quot;right way&quot; to do things. We need to be like improvisational performers. In improvisation, there is a rule of thumb that you can&#39;t say &quot;no&quot; to anything that is said because it kills the momentum. The solutions that we need to build are &quot;yes and...&quot; solutions.  Back to Gluecon Day 2 Index Taming the RESTed NARWHL - Striking the Balance Between Usability and Zealotry in REST Rob Zazueta, Mashery   Rob Z ofo Mashery Presenting his NARWL Methodology  Rob approaches API design from a strategy-first perspective. Part of his job is not only to understand what is happening in the REST space but translating that into practical execution for clients. In talking with the best and brightest in the API space it becomes obvious that we have a problem: there&#39;s a discrepancy between those arguing best practices and those charged with getting things done. Traversal of hypermedia API links is a P-I-T-A. While it may be highest academic realization of hypermedia API design but it is, in practice, difficult to use. It requires a ton of code to &quot;follow your nose&quot;. The example provided by Rob is finding an employee&#39;s contact information within an enterprise system where all you know is the global resource directory endpoint. First you&#39;re required to call that to get the directories for individual countries. Then, once you have the link for United States employees, you have to call that link to get employees for individual states. Then, calling the California employee endpoint, you might be provided with a number of offices; and you still haven&#39;t found the employee&#39;s email address.   Through work with customers, Rob compiled his experience into the NARWHL framework. NARWHL stands for Noun As Resource With Hyper Links. It is intended for consumption by application built by people. It is the core nouns of a system exposed as resources.  An API should not cause confusion from those responsible from implementing interactions with it. It should be obvious. It shouldn&#39;t require research spike after research spike. NARWHL is about creating APIs that people can use now. On the Richardson maturity model, NARWHL starts at level 3 and then goes further.  When developing a NARWHL API start with discovering the possible use cases. This should be a cross-disciplinary action. Your API is a product with all actors involved.  Once you have your resources you can then design your endpoints. Endpoint design matters. Yes, hypermedia allows people to traverse across links but links aren&#39;t just a machine-to-machine way of communicating. It is important because of the affordances, the clues, the links offer as to what is going on. We refer to links when we debug. Implementation of links is how we segment labor. Endpoints, and their logical construction, still are vital. Saner versioning through content negotiation is also possible using NARWHL. To do so API developers should start using specific MIME types in responses &amp;mdash; even custom ones. A mime type of &quot;content-type: text/json&quot; doesn&#39;t have meaning. As a result information on usage and parsing has to be conveyed in other ways (like documentation). Use something with meaning: content-type: applicaiton/vnd.example.products.json+v1. It&#39;s a way of doing versioning without embedding versioning in the canonical resource URL. If you do it like this today then you don&#39;t break stuff.  SDKs suck because:  they&#39;re one more thing to maintain they often assume functionality outside the API they get bloated  The answer to the SDK problem is to have dynamic client generation through response profiles. The documentation of methods, parameters, and models are tightly integrated into the server code, allowing APIs to always stay in sync. Dynamic code libraries rock because:  they reflect only what&#39;s defined in the API they grow and change as the API iterates they feel more native to the developer  By using a API definition with a common standard (swagger, RAML, HAL, etc. ) dynamic code libraries are possible. The one thing SOAP did well was WSDL. Every language had something that could generate code if given a WSDL. We should get to the point where we are able to auto gen code from an API definition in any language that best suits our task.  Rob wants the best for REST APIs. But he also wants those who are under deadlines not to get tripped up on academic minutia. NARWHL is an attempt to walk the line between strategy and practice. Back to Gluecon Day 2 Index After the Breathlessness: What we Need to Figure out About IoTLorinda Brandon, SmartBearLorinda began her talk by stating her mission was to represent non-technical America to the conference. The reality is that most have been interacting with the Internet of Things (IoT) for quite some time (connected gas pumps, onStar which is a connected car). Despite this, the average consumer wouldn&#39;t consider those experiences revolutionary or out of the ordinary. They quietly just became the way things were done.Why is the IoT way different? For the first time these always-on, connected devices are coming into our homes. What does it mean to be a consumer experiencing a connected device in their home for the first time?The promise of this new wave is an Internet not of stuff &#39;out-there&#39; but of &quot;my things&quot;. Food starts prepping as I approach home, the lights come on, and the music may start playing. The promise is that our things will understand us and our needs, that our immediate world will be modified by these things to reflect our preferences and desires. We will have a relationship. We want our stuff to love us.What is our current relationship with &quot;smart&quot; things? We buy them one at a time. We love them individually (a NEST, a Sonos, a fitbit, etc.). Lorinda has a tension with the NEST because it is in a room rarely accessed, and thus, never thinks she is at home. A Sonos only allows for one relationship at a time; among her family they haggle about who&#39;s account is active at a time. The preferences and desires by which to augment the immediate world clash when there are multiple people inhabiting it. These connected things are very disconnected with each other. Worse, we don&#39;t trust the connected things we put in our homes. We don&#39;t know the data collected (suspect that it is different than the data we&#39;re allowed to see) and we don&#39;t know who owns that data. Developers only focus on the possibility of IoT. Testers, however, are still struggling to come to grips with testing mobile. Now we&#39;re throwing these devices into the mix. To succeed with this exponential bump in complexity IoT devices (and the APIs that support them) need to be:simplediscoverablesecure (it&#39;s our responsibility, both systems and data, we have to do the right thing while the law catches up)testable (if it can be made testable we can solve a lot of the other problems)The speed to market is not as important as the integrity of product. Back to Gluecon Day 2 Index 10 Reasons Developers Hate Your API (and what to do about it) John Musser, Programmable Web, API Science If you want to entertain yourself, Google &quot;API Sucks&quot;. The warning sign an API sucks is when people ask &quot;can you just send me a CSV?&quot; in order to get the data they need. So why would people hate your API? And, more importantly, what can you do about it?  Your documentation sucks. How do you fix it?  Keep the big picture in mind, seeing your API from the viewpoint of someone brand new. Be clear Provide Find-ability Use Live Docs auto generated from machine descriptors You communication skills need work (you need to keep your developers informed, otherwise your changes lead to breakage) Post a Change Log for an API Publish a Roadmap for what to expect Update Release Notes (how do I know whether to care about a change?) Blog about Changes Engage Forums (doesn&#39;t even have to be your own, like SoundCloud using Stack Overflow) Write Email (targeted, non-marketing speak) You don&#39;t make it easy (no hello world, getting started guide, nothing to copy &amp;amp; paste) Provide fast signup (get a feel with 0 committment) Illustrate process with the 1-2-3, a conceptual wizard for getting started to inform on entirety of process from beginning to first win write quickstarts allow for free &amp;amp; trial tiers if possible, publish and maintain copious SDKs use GitHub (samples made available for forks) Lawyers are running show (seen with commercial restrictions, no SLA, rate limiting, overwhelming reams of legalese) be clear (500px publishes legalese alongside plain English) set the tone (etsy terms-of-use beautifully frames the terms of service with clear intentions) shorter = better think long term - offer assurances of how long service will be provided. Create a deprecation policy so that those building on an API know what to expect. share the wealth and articulate business model You API is unreliable (or buggy or inconsistent) communicate health through a status screen or dashboard monitor performance don&#39;t hide if something bad happens, own it You don&#39;t give tools to succeed. (How do I debug? What&#39;s my usage?) Provide: dev dashboard debug/log, what&#39;s happening from the API veiwpoint test sandbox playground test console you&#39;re marketing to me, not helping me evangelists (help, don&#39;t pitch) events hackathons your api is too complex (or you have your own custom, or insider knowledge) use REST use json be pragmatic, don&#39;t over-engineer it your time to first &#39;hello world&#39; (TTFHW) is too long (how long to zero to 60?) craft great DX (developer experience) incorporate all prior fixes - that is a part of developer experience You haven&#39;t learned from the best use role models - twilio, stripe, github, sendgrid keep learning understand that a great API is a journey, not a destination  Back to Gluecon Day 2 Index APIs.json and API Discovery on the Web Steven Willmott and Kin Lane, 3Scale and APIEvangelist.com, respectively The problem that they set out to solve with APIs.json is that:  there is an increasing number of APIs which rarely use a machine readable format to describe them no obvious place to publish/find them in a machine manner API consumers aren&#39;t able to create classes of tooling across APIs, for example, something to crawl the &#39;web of APIs&#39; API publishers have to self-report and replicate data everywhere in niche silos (on programmable web, on own site, on custom aggregators like mashape, in specialized directories, etc)  Kin started, in his work with the federal government, to place a &#39;/developer&#39; subdirectory at every government office. In the same way a &#39;.gov&#39; TLD is a clear indication a website is government-approved information, a &#39;developer&#39; directory would be a known point providing machine readable hints we wouldn&#39;t have to think about. This work subsequently lead to the definition to &quot;data.json&quot; file being expected at the top level of government domains. Now the effort is to extend beyond government mandates and become a grass-roots standard among API publishers. With this simple, self-published format we can now create tooling to aggregate these things. An example tool is the search engine on APIs.IO. Unlike API aggregators that have come before, APIs.IO is not a repository for data. API creators only need to add link to APIs.json file and the search engine will subsequently crawl what it finds there. The site also has an APIs.json builder. Developers can put in some properties and the site will help write the file. There is a common glossary of link types to be included in the docs. The repository of these is available on Github and open to discussion.   APIsjson.org is the site to find out more about the API format. Think of the APIs.json format as the equivalent of a machine-readible sitemap for an API.  Back to Gluecon Day 2 Index",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-05-31T00:00:00-05:00'>31 May 2014</time><a class='article__image' href='/2014/05/31/gluecon-day-2-recap'> <img src='/images/2014/05/gluecon-MOTION1.gif' alt='APIs on the Edge'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/05/31/gluecon-day-2-recap'>APIs on the Edge</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "APIs and Better Dev Cultures",
      "category" : "",
      "tags"     : "Software Change, Software Governance, and Software Development",
      "url"      : "/2014/05/21/gluecon-day-1-recap",
      "date"     : "May 21, 2014",
      "content"  : "This is the third continuous year that I have had the good fortune of attending the Gluecon conference. Held May 21-22 in Broomfield, Colorado, the conference focuses on big data, cloud, and API issues. Admist the technical chat, a number of the sessions that I attended also had an emphasis in enhancing software development culture. Below is an abridged version of my notes.Michael Eacrett of SAP Discussing In-Memory Platforms   Index     Social Glue   Containers All the Way Down   The Parallel Universes of DevOps and Cloud Developers   Deconstructing Women in Technology   API SDKs will Ruin Your Life   DevOps vs the Enterprise   API Track Introduction   API First!   Why Your Next API Should Be Designed By a Linguist   Security Testing with APIs   How to Secure Your REST API the Right Way   What Makes a Great Developer Company?   Software Psychologists to Become Analytics Heroes   Social GlueRachel Chalmers, (ignition parterns)Through many natural examples, ideal team size seems to be 2-6 people. Breaking up the Problemsolving large problems is very heardbreaking down the problem is itself is a problembut it can be donegood interfaces make good solutionsbetter interfaces are cultural as well as technicalReference to a Velocity 2009 ppt, called &quot;10 deploys per day - dev and ops at Flickr&quot;. It proposed a new social contract partially in software but also &#39;codified&#39; in a culture. The code was the stored wisdom of the ops team. They set ground rules of how people would interact with the software and among themselves. They cultivated a healthy attitude toward each other when the inevitable disasters would happen. This trust in the team reduces cognitive load.   &quot;Enterprises want to move from disaster recovery to disaster indifference.&quot; Chris StevensA company is not just a technology or a legal structure. A company is a group of companions. Is is a set of people that work better together than alone. Rachel also cited a Netflix culture document, &quot;Seven Aspects of our Culture&quot;. A culture like Netflix&#39;s is a key differentiator. Rachel is willing to bet her career that an open, transparent organization can out compete a coercive, controlling one. Netflix is highly aligned, loosely coupled. Code is stored wisdom. Culture is about creating a safe and supportive environment where the best ideas can be captured into code.CIOs want to build service-orientated architecture. The move from waterfall to agile is a response to a need to more quickly in the face of competitive pressure. It illustrates how every company should think of itself in the software and information business.Private IT will never compete with the public cloud. And &quot;not developed here&quot; approaches can&#39;t compete with SaaS. Desktop gives way to mobile. But mobile is training wheels compared to the coming IoT (Internet of Things). Silos give way to APIs and services. These process are all reflection of the need to better capture collective intelligence for competitive advantage.Code is stored wisdom. Culture allows wisdom to surface from groups. Clean interfaces enable groups to speak with one voice, reducing communication overheads.  Back to Gluecon Day 1 IndexContainers All the Way Down: A Blueprint for Upgrading the InternetSolomon Hykes, DockerDocker is an open source project that standardizes how a project is packaged and subsequently executed in a sandboxed environment. The pieces are detached from any specific machine. The challenge we all have is that the applications that we&#39;re now building don&#39;t neatly fit notions of platforms of the past. We are able to point at individual products but things like cloud services are fuzzy concepts; it doesn&#39;t capture the entirety of what we&#39;re doing. We cobble together tools that are not fit for working together. Creating the glue to make these disparate pieces work takes a lot of time and effort.  &quot;apps we are building are made of services: discrete logical loosely couple composable components&quot; Composability and remixability are important. They need to talk with each other over network messages. They also need to be independent of the machine they&#39;re running on. Hardware dies, becomes obsolete, and therefore the software - with expectations of 100% uptime - needs to be independent of infrastructure.   &quot;My thought in the 70s was that the Internet we were all working on alongside personal computing was a really good scalable design, and that we should make a virtual internet of virtual machines that could be cached by the hardware machines. It&#39;s really too bad that this didn&#39;t happen.&quot; - Alan Kay (creator of OOP, and Smalltalk)All Docker does is try to gain consensus around a key thing is missing: regardless of how people wish to implement to solution there is a uniform place for people to go build stuff.  The new problems:clusteringorchestrationdiscoveryidentity and trustThese problems have been solved. We just need to standardize the interfaces between them.   &quot;Docker is a standards body that anyone can join just by writing code.&quot;Back to Gluecon Day 1 IndexThe Parallel Universes of DevOps and Cloud DevelopersDonnie Berkholz, RedmonkIn his job, Donnie has gained an expertise of quantifying things like open source communities. When observing cloud based solutions, becomes apparently that developers are put in the position of being their own sysadmins. DevOps - the traditional division with sysadmin functions - are not aware of what the developers are doing.   It&#39;s not about tools, it&#39;s about people and culture.Part of the separation problem is because of differences in culture. In order to facilitate faster deployments, we need to tear down the silos around the separate groups. Silos are difficult to maintain when things are entirely open.   &quot;Completely disagree that the solution for devs and ops working together is culture. Culture reflects norms, not causes them&quot; Bernard Golden&quot;Infrastructure as code&quot; are projects like CFEngine, Puppet, Chef, Saltstack. It&#39;s not a new idea (CFEngine came out in 1993). However, the tools came to the forefront with the need to matriculate deployments to the cloud.The best Dev/Ops Experience wins. Common barriers to a great DevOp experience include:inability to find the downloadrequiring registrationtricky, multi-step installation and/or configurationhaving a poor first dev experienceseeing no community where I can turn to for supportOptimizing for cloud deployment is very different than just building software that can be run in the cloud. For Ops its not about the run-time experience, it&#39;s about the build time experience. In dev world, people choose tools they enjoy, the same as with developers. For example, an obscene amount of developers choose mongoDB because of how delightful the development experience is. Listed in order of popularity, developers choose:mongoDBredismysqlmongolabBut Ops prefer the tools that best support them:postgreSQLCassandrariakToday we have two separate communities, living in parallel. They do similar things but rarely does either group reach out to each other. What is the common ground? Continuous delivery and DevOps are extremely similar things, but continuous delivery is thought of as a code thing. DevOps is thought of as babysitting servers. That needs to change.Back to Gluecon Day 1 IndexDeconstructing Women in TechnologyIngrid Alongi, Quickleft  &quot;More girls tend to associate computing with &#39;typing,&#39; &#39;math,&#39; and &#39;boredom,&#39; while boys are more likely to associate computing with &#39;video games,&#39; &#39;design,&#39; &#39;electronics,&#39; &#39;solving problems,&#39; and &#39;interesting&#39;&quot; - 2008 ACM StudyThere is a problem in the discussion on women in technology; the problem is that we&#39;re not focused on the right problem. It is the equivalent of &quot;Surviovorship Bias&quot;, a phenomenon observed during WWII. At that time the Allies wanted to increase the odds that bombers would successfully return from their missions. Armoring the entire plane was impractical; it would make them too heavy. So they examined where on the planes they found bullet holes. The intention was that they would armor these spots. While it was a nice sentiment, it was solving the wrong problems. Instead of studying where the bullet holes were on planes that made it back to base, they should have studied where holes appeared in planes that failed to return. Those were the locations that needed additional armor.A similar problem exists when discussing women in technology. We&#39;re looking in the wrong place. It&#39;s not a matter of convincing women that technology is cool. It&#39;s a problem of culture; women constantly feel pressure to prove their code is just as good as a man&#39;s. Or woman feel singled out. They feel conspicuous. They are never made to feel that they are just another member of the team. So they vote with their feet, and leave the industry. Setting out to explicitly &quot;build a more diverse team&quot; runs the risk of being misconstrued as a touchy-feely effort. However, committing to building a high-performance team not only clearly aligns with the business goals, but will naturally require diverse inputs. Seven ways to promote a better performing team:Make a commitment to seeking out original, diverse thinkers and providing a trusting, safe environment where ideas can be thoughtfully heard, considered.Host team-building events during office hours. If the only way to talk to boss is after hours at the bar, then that&#39;s a turnoff to some types of people.Provide multiple outlets for people to reach out to leadership. Empower people to freely talk to those with the power to change things.Examine hiring practices. References to &quot;design guy&quot; in long term strategy will likely elbow female candidates from considering themselves for position. Likewise, beware of loaded words or job descriptions that appeal to one group over another.Examine your bonus and raise criteria. While you may hire good engineers only a certain subset may be good negotiators. If left unchecked, this may be perceived as wage discrimination.?A job is a professional place of work, but that doesn&#39;t mean it can&#39;t be fun.Back to Gluecon Day 1 IndexAPI SDKs will Ruin Your LifeJohn Sheehan, RunScopeWhy do SDKs have such an uptake among providers? Because SDKs are on the critical path to developer success for the APIs.The problem is that to support SDKs in the 6 major languages (.NET, Java, Ruby, Python, PHP, node), and each version has multiple versions. The result is a tremendous amount of developer pain. And then GoLang comes along.Can autogeneration be a solution? Not really. That is a great way to create mediocre code. Can it be left to the dev community? Perhaps. But that also has hit-or-miss results and can reflect badly on the service because of bad initial experience.Devs love SDKs. They are used because:Enable Rapid PrototypingFill Gaps When Language Support is DeficientNegotiate Complex APIs (or bad APIs, but if a bad API requires an SDK to be usable, shouldn&#39;t the API be rewritten?)Facilitate Native API UsageVersioning of the SDK in conjunction with the API is frustrating. Adds headaches to deployment. Other SDK dangers include:Using more than one (because of library conflicts)Community-built (updates are out of your control)Introduces many dependenciesMay become an inactive projectBack to Gluecon Day 1 IndexDevOps vs the Enterprise: What We can learn from Mainframe (Going Big and Screwing Up on DevOps Implementations)Mike Baukes, ScriptRockQuite often, the business doesn&#39;t understand what you&#39;re doing in DevOps. With agile, things can work really well when the familiarity and ability of each member is the same. When there is a high degree of variability then things can become difficult; people get overwhelmed.There are challenges to devops. Things standing in the way of even deploying simple updates:teams spread across geography and org chartsaverage request fulfillment was 2 weeksriddled with process debtIn building the team culture they recruited the best, but that immediately caused tension and elitism and arrogance began to grow. While they had done a great job selling an approach from the C-level down they hit wall with those in the trenches.Technical debt was a huge barrier. Spent 90% of time writing code and 10% on education. When it comes down to it, it was faster to code it themselves. Didn&#39;t invest enough in the making a good solution. Entire 8 week project was blown away six months later because not enough time was spent on education.The lessons learned during the implementation:spend time upfront being empathetic with the company you&#39;re coming into; there&#39;s a reason why things have evolved the way they aredon&#39;t automate what you don&#39;t understandDevOps is an organizational changesoftware in production and but not in dev is #fail (leads to a shifting sands of patch management, reporting, etc if otherwise)How would Mike do things differently today? Wave 1know what you haveconfiguration drift detectionconfiguration visibility across all devicesWave 2map accountability to orgexecution docpre-flight checksWave 3test driven automationservice driven infrastructureeliminate duplicate documentation  &quot;Don&#39;t automate what you don&#39;t understand&quot; And don&#39;t automate what isn&#39;t working, either. Omar SultanBack to Gluecon Day 1 IndexAPI Track IntroductionAlex Williams, The New StackIt used to be about getting the best efficiencies out of a stack. Now it is about the speed with which you can bring new products to market; whether or not it is efficient doesn&#39;t matter. As long as the first attempt is efficient enough for the consumer, that wins.   &quot;We have seen the emergence of lightweight apps... but now we are starting to see the emergence of the lightweight infrastructure.&quot;-  &quot;The API is the single point of truth. We saw how effective that was for supporting apps. That&#39;s why we&#39;re starting to see the emergence of APIs in the infrastructure environment.&quot;The &quot;single point of truth&quot; is threatened, however, by the Oracle vs Google ruling. If everyone is forced to create custom interfaces for fear of being sued, we run the risk of destroying the speed of interoperability and deployment, the original promise of APIs. It&#39;s no longer a technology matter. An understanding of the courts and broader culture sentiment is increasingly going to matter.Back to Gluecon Day 1 IndexAPI First: Designing Your Product from the Platform OutKirsten Hunter, 3ScaleThe idea of API First is that you build the API first before anything else; including websites that traditionally would be server-side code outputting HTML. It involves loving your API and making it a first class product. You want the API to drive an experience that is meaningful to the end user. APIs that are organically grown resemble an old potato that has left to sprout. Ad-hoc API development leads to duplicate code, features without specific use cases, and inconsistent interfaces. APIs that are perceived as &quot;another thing&quot; to do (in addition to feature development, tests, etc) will never scale or be loved.The API First Development model is the MVC strategy taken to the next level. It is a uniform contract providing consistently across view clients (mobile, web, other).Examples of API first companies:LOB (cloud printing)Instagram (started mobile first, but used mobile API to power a website)3ScaleEtsy (with v3, even website is on the API)Kirsten doesn&#39;t encourage the use of SDKs. Anything that provides a level of abstraction from the API will provide levels of difficulty in understanding and maintainability (not to mention providing another place for bugs to hide). If an API is so difficult to use, fix that first rather than building an abstraction on top of it.  &quot;If you want your API to remain relevant make it the central interface to your biz logic for both product and integrations&quot; - James Andrew VaughnBack to Gluecon Day 1 IndexWhy Your Next API Should Be Designed By a LinguistRebecca Standig, Keen IOWhat is linguistics? Linguists look for patterns. In relation to APIs, morphology and phonology are pertinent. They think about syntax in very abstract, meta ways. The same processes are important when developing APIs. Certain language structures are difficult to pick out given the limited amount of information, something not unlike working with customers.When developing the language of an API, consider:do you have a grammarthat makes sensethat can be intuitively guessed at by those familiar in your field but not with your implementationand be broken down into granular, component partswith a syntax (the implementation details) abstracted away from the user?Common linguistic phenomenon is that complex aspects becomes increasingly less complex over time. This holds true for APIs as well. If something is too difficult to accomplish (for example, requiring multiple calls to compose a single interface) it will be refactored over time.Back to Gluecon Day 1 IndexSecurity Testing with APIs (Security Scans)Michael Giller, SOAPUIFirst type of security vulnerability are injections:sql injectionxpath injectioncode injection (watch out for eval() func)log injection (people can soak up cycles chasing planted ghosts)XML External Entity InjectionCross Site Scripting (XSS); allows people to bypass same origin policy.  &quot;Sensitive information exposure test is brilliant. Seeing service versions, stack traces -- turns my stomach.&quot; Neil MansillaDenial of Service attack - be able to recognize when to recognize it is under attack. Within SoapUI, using load testing to verify the capability of a server to handle exponential traffic surges.Check user permissions. Make sure that your users can only access the information they need to access.Watch out for sequential IDs - they are just begging for someone curious enough to act on &quot;what if&quot; questions.  &quot;In addition to security, it also protects from exposing business growth metrics.&quot; Neil MansillaFuzzing Scan generates random input for specified request parameters for a specified number of requests. Helps expose whether you&#39;re returning hints for attack when the API is unsure what to do with what it is given.Back to Gluecon Day 1 IndexHow to Secure Your REST API the Right WayLes Hazelwood, StormpathBest PracticesAPI Keys, not PasswordsEntropy (a key is larger, random than a human-friendly password)IndependenceSpeed (if using keys, don&#39;t necessary have to do processor intensive algorithmic hoop jumping)Reduced ExposureTraceabilityRotationAuthenticate every request (it&#39;s supposed to be stateless; sessions are discouraged)Encrypt API key secret values (permanent data store protection)Avoid Sessions (no  XSRF [cross-site forgery] if there is no session)Identifiersshould be opaquesecure random or random/time UUIDURL-friendly &#39;base62&#39; encodingavoid sequential numbers:distribute ID generation loadmitigate fusking attacksQuery InjectionAlways sanitize and validate every input. Redirects and ForwardsThis is where clients and/or customers can declare their own URLs to be sent to after the server processes things.* Avoid if possible* if used, validate the value and ensure authorized for the current userTLSUse TLS for everythingOnce electing to TLS:never redirectnever switch back and forthCookies: set the &#39;secure&#39; and &#39;httpOnly&#39; flags for secure cookiesbackend infrastructure connections use TLS tooconfigure your SSL provider to support only strong (FIPS 140-2 compliant) algorithmsuse cipher suites w/ perfect forward secrecykeep your TLS certificates validapp-level encryption + TLKS for most secure resultsConfigurationdo security testing as part of continuous integration suitekeep security patches up to dateuse same config in Dev, Prod, QA (docker is great for this)externalize passwords/credentialsStoragesensitive data encrypted at restencrypt offsite backupsstrong algorithms/standardsstrong encryption keys and key mgtstrong password hashingexternal key storageencrypted file systemBack to Gluecon Day 1 IndexWhat Makes a Great Developer Company?Ethan Kurzweil, Bessemer Venture Partners&quot;Making the Case for the Developer as the Center of the Universe&quot;Why developers? Why make companies that sell to them?We now have examples of successfully developer-lead companies (Facebook, Yahoo, Google). Microsoft has greatly benefited from catering to the developer ecosystem. Even with the recent negative press coverage, Microsoft still has 2x the free cash flow than Google.Because they are more central to competitive advantage, developers are now making spending decisions. References the O&#39;Reilly book, [The New Kingmakers, and how the CIO is last to know. Developers are bringing in their own tooling to accomplish tasks; platform decision making is driven even more bottom-up than top-down.]eBay paid $800 million to buy Braintree because they had a beloved developer platform, while PayPal was not. Braintree is now replacing the existing PayPal infrastructure.The business models are strong. Cost of Acquisitionlow hurdle to adoptionorganic usage drives businessmarketing covers sales and support initiallysocial media is accelerant (devs talk a lot!)Lifetime Value of Customersvery sticky and hard to rip outenjoy economies of scalenet negative churn; as customer&#39;s usage grow, so does your revenueExamples of companies doing it right:sendgridgithubtwilionew relicWhat makes a great developer company?The seven commandments of building the biggest company possible (not all need to be met, but getting most of these help):delivered as a service that can be metered (as opposed to on premise where you lose touch with usage patterns) - ex. twilioYour relationship grows with their business (economics of dropbox on amazon); need to capture value of the business growth you&#39;re facilitatingReplaces something that companies already pay for (Amazon Web Services replaces the pain and maintenance of keeping services yourself. Easily allows company to find budget to direct to youOffers an amazing user experience (as good as a consumer product). Just because it&#39;s a dev company doesn&#39;t mean that devs deserve bad experiences. (Mashape, Stripe)Devs love it and aren&#39;t afraid to express their love (what do you get when you do a twitter search for a product?)Exhibits strong network effects (does it get stronger as more people use it, like Stackoverflow - the more people answer questions, the more valuable the service is)Eliminates the need for non-core skillset that no one enjoys (Stripe, Stormpath, Oauth provider)(bonus!) Democratizes Development - does it extend the power of software and engineering to more people beyond traditional developers? (Optimizely, ability to run an A/B test). Success is measurable through metrics. Takes 18 million programmers (worldwide) and opens it up to the 400 million IT workers.Back to Gluecon Day 1 IndexCarpe Datum! Time for Software Psychologists to Become Analytics HeroesBjorn Freeman-Benson, New RelicBjorn realized that much of what we do in software is about listening to other people. That is why he lists &quot;software psychologist&quot; as his job title on LinkedIn. It is one thing to have bugs in the program. But, as he learned the hard way while developing UrbanSim, there may be bugs in the larger mental model. The software may be behaving perfectly, but if the model is incorrect the results will still result in the same disappointment.  Psychologists use an assortment of evidence-based treatments to help people improve themselves. In software psychology, I most commonly use code-psychotherapy, better know as &quot;listening to the pain&quot;.Software psychology needs to be done in the real world. We need to listen to the systems that are doing the actual work. Triaging in a test environment is like taking a person to a tropical beach, allowing them to relax, and then asking them what is wrong with their life. There are bizarre corners of the net where odd things happen. If we aren&#39;t listening then we&#39;re missing the oddities that would never even occur to us while building a test case.What is a Code Scream (as opposed to Code Smell)?  A code scream is a behavior indication of a deeper problem in the system. It differs from a a code smell in that it is a behavior rather than structural, e.g., an overly long response time rather than an overly long method.The code can also scream about other things. It may not be a technical insight. It may be trying to tell you something about the business. Since all businesses have turned into software businesses, these software insights are available in every organization.The data exists - but it is currently not optimized. The real world makes listening hard. The steps:you have to learn how to get the data outthe query runs against productionthe query will take overnight to completeit will take a few tries to get it rightThe problem with this is similar to how Amazon&#39;s software (pre-2000) used to be. At the time it was one executable written in C (everything from warehouse to storefront, you would just start the same exe with different command line arguments). It took 12 hours to compile. As a developer, you would get one update a day, regardless if you were willing to work extra hours.That is why Amazon moved to a software service architecture. Likewise, listening needs to be more rapid than a nightly data warehousing dump. Collect, store, and present ASAP. Even better, don&#39;t just listen. Have a conversation. How do you do that?Ask good questions (to ask good questions (and get good answers) you need to ask a lot of questionsCollect all the data, because you&#39;ll never know when you&#39;ll need it. allows for new questions as your desire for insights deepenNOW, ask lots of questions - if you get fast answers, you&#39;ll ask more questionsenable the business to &quot;listen to your code&quot;; build dashboards, share, and help others become data psychologistsBack to Gluecon Day 1 Index",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-05-21T00:00:00-05:00'>21 May 2014</time><a class='article__image' href='/2014/05/21/gluecon-day-1-recap'> <img src='/images/2014/05/molecules_midjourney.png' alt='APIs and Better Dev Cultures'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/05/21/gluecon-day-1-recap'>APIs and Better Dev Cultures</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Conferences and the Magic Circle",
      "category" : "",
      "tags"     : "Software Change and Culture",
      "url"      : "/2014/05/20/magiccircle",
      "date"     : "May 20, 2014",
      "content"  : "The concept of &quot;The Magic Circle&quot; was first described by Johan Huizinga, a Dutch historian, in 1938. Long before &quot;game design&quot; was a profession, Johan identified play as a vital aspect of human culture and development. He noticed how otherwise predictable children would change when interacting with friends during recess.  In his book &quot;Homo Ludens&quot; he referred to the physical space for playing, the playground, as &quot;the Magic Circle&quot;. The Magic Circle is significant because it is a designated safe place to experiment with alternative realities. Cry &quot;fire!&quot; in a crowded public place and you may get arrested. Shout &quot;base on fire!&quot; in a game of tag and nobody thinks twice; it&#39;s just a new wrinkle to play. Inside the circle, in that place, events take on special meanings. Extra Credits is a fantastic YouTube series covering the minutia of game design in fun, approachable ways. They recently covered the Magic Circle concept. What stands out to me is how important the environment is in allowing people to be swept up in a moment:Conferences are a magic circle. They are a mind playground for exploring the myriad of intellectual possibilities not normally possible amid a daily litany of feature fulfillment and task triage. It is true; the semantics of any technical topic are most likely already available online, much of it for free. But while the content is ready one&#39;s mind may not be.Why are conferences so much better at kick-starting our excitement than the equivalent online course?  New experiences slow time down. Usually the brain ignores what is going on around us because the mind has already concluded, from experience, it isn&#39;t worth the storage. Present it with something new and we wake up. Rather than being yet another tab in a browser we&#39;re navigating unfamiliar environments, talking with new people, and hearing provocative ideas.At any good event the crowd comes away talking about &quot;the energy&quot; or &quot;inspiration&quot;. It&#39;s because they passed through the sticky membrane of self-consciousness and into the circle, where it was OK to be excited about their work. It is OK consider alternate paths. It is possible to rise above minutia and consider the larger landscape. &quot;We will implement continuous integration this year!&quot; &quot;We will switch to a new JavaScript framework!&quot;It clashes with our normcore. As a recent event recap stated:&quot;For a few fun-filled, informative days, I get all pumped up with excitement. And then I get back to the office and work/life happens. High priority work comes in, staff changes, something happens and all the awesome stuff that I learned or wanted to do, just kind of fades to the background.&quot;Continuing education isn&#39;t about finding the magic circle; opportunities for interacting with engaging, interesting people in new ways are all around us, if we dare to look. The trick is keep that magic from fading once we step back into our regular lives.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-05-20T00:00:00-05:00'>20 May 2014</time><a class='article__image' href='/2014/05/20/magiccircle'> <img src='/images/2014/05/magiccircle-stablediffusion.png' alt='Conferences and the Magic Circle'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/05/20/magiccircle'>Conferences and the Magic Circle</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On Amsterdam &amp;amp; APIs",
      "category" : "",
      "tags"     : "Culture, Software Development, and Software Change",
      "url"      : "/2014/04/02/amsterdamimpressions",
      "date"     : "Apr 2, 2014",
      "content"  : "Even after a weekend stateside, I&#39;m still processing the events of last week&#39;s API Strategy and Practice Conference, held in Amsterdam. Filled with some of the foremost thought experts in the field, the event was an excellent opportunity to reflect on where we&#39;ve been, the problems with where we are, and what we need to solve in order to get to where we need to be.Amsterdam, the CityConsistency vs. NoveltyHaving Greater API VisionAutomata for Scaling to Internet of Things SizeConclusionAmsterdam, the CityAny description of the event has to start with discussion of the incredible host city. As explained by a native, Dutch culture has always been one of trade. That is reflected in the language (everybody can converse easily in multiple tongues, including crystal clear English) to food (try the Indonesian, seriously), to culture. In two words, things are integrated and copesectic.The venue&#39;s outward facade, for example, was a brick building with murals from Danish life at the turn of the 20th century. Inside,  presentations were held inside a towering chic cube of glass, more modern art than historical shrink wrap. Likewise, the infamous &quot;red light district&quot; at the heart of Amsterdam felt more festive open air bazaar than skeezy backwater. A church was across from a sex shop, down the street from a cheese maker, around the corner from a cannabis vendor; everything is there and simpatico as if any other way would be silly. The contrast did not form lines oxymoronic moral conviction but rather illustrated the sharp relief with which American society demarcates things.                                                Consistency vs. NoveltyThe conference kicked off with Ken Wronkiewicz (@wirehead) talking about &quot;Software as a City&quot;. He mentioned the story of why railroad tracks are spaced the way they are, and have been for hundreds of years. Then, as Ken explained, the Bay Area Rapid Transit System began work on their own rail network in the 1960s to serve the San Francisco region. They did not follow the previous conventions and, as a result, pay exorbitant multiples of other municipal light rail systems because of the custom everything.Ken&#39;s point is that all systems go through Cambrian explosions of disruption and novelty. However, at some point those ecosystems establish norms and standards. In order to grow, whether it is APIs or railroad tracks, consistency for pieces networked together is important. With web APIs, we have reached the point in which it is better to be consistent with the best practices than novel in our execution.There are exceptions to this, of course. Hypermedia APIs remain an area which is going through it&#39;s Cambrian phase. There&#39;s seemingly a new media type popping up for discussion on industry forums every-other week. The trick is to watch the tooling. Right now developers are almost exclusively hand-rolling their own solutions. When things have standardized enough that vendors can program against it then we know that an area has reached a tipping point.An API Vision (API Leap of Faith)Mehdi Medjaoui (@medjawii) was quick to remind the audience of our favorite API metaphor, Lego Bricks (considering our proximity to Denmark, it was appropriate in more than one way). As builders, however, our conceit is that we can&#39;t see the forest for the trees. If we could have a vision for the pieces beyond the code immediately in front of us we would do things differently.The Lego Ads Mehdi Used to Illustrate Needing to See Beyond the Pieces He proposed a set of principals that, if broadly adopted across APIs, would enable the fulfillment of these grandiose visions. The tenants of such an &quot;Open API Standard&quot; are:Add something new to the network. Having dozens of different image manipulation APIs doesn&#39;t help. Instead, the fragmentation causes confusion and delay.Be transparent. Walled access to datasets is a short term strategy. This leads to industries, like real estate, ripe for disruption. Business models should be based on service, not uniqueness of the data.Be accessible. Documentation, code samples, pricing information &amp;mdash; all of these things aren&#39;t post-development cleanup but essential considerations during development.Play nice with others, or interoperate. While the de facto standards for web APIs remain in flux, that doesn&#39;t mean we shouldn&#39;t strive for levels of consistency (see Ken&#39;s talk). Address legality (I&#39;m combining Mehdi&#39;s seperate policy and terms of service points into a single need). Another sign of discipline maturity, Mehdi was one of many calling for better API policy towards attribution, derivative works, and data ownership. While hackers grouse at perceived &quot;overhead friction&quot;, these things are necessary to ensure confidence for companies to build their business on someone else&#39;s platform.Aspire to neutrality. We can&#39;t all have the same vision. If possible, be neutral in architectural decisions to allow for the greatest number of possibilities to flourish.Be reliable. We all got a kick out of the fail whale. But it&#39;s no longer 2007 and institutions incorporate Twitter for Amber alerts, incident notification, and crime investigation. If APIs are advertised as infrastructure then they have to have the up-time of any other utility. You don&#39;t open a toilet lid and discover the water is 404 Not Found.Build the Commons. We shouldn&#39;t be re-inventing the wheel. Odds are other API developers would benefit from non-differentiating work. These are things like frameworks. When possible, developers should contribute back to places like the API Commons to accelerate the work of others like them.&amp;lt;/li&amp;gt;As Mehdi correctly pointed out, none of these things are easy. However, if we take the leap of faith to implemented our APIs in this way, we will scale with greater ease.Automata, Scaling,  &amp;amp; the Internet-of-ThingsThe final event talk I wanted to highlight came from Mike Amundsen (@mamund). In an evocative presentation Mike discussed the challenges that developers will face in the coming Internet-of-Things era. Already underway, instead of (best case) having to support millions of users we&#39;ll now be asked to support tens of billions devices. A logarithmic leap will require new approaches. To prepare for such a future Mike told the stories of three individuals &amp;mdash; Von Neumann, John H. Conway, and Theo Jansen &amp;mdash; who each, individually, hit upon the idea evolvable systems for problem solving. Rather than coding solutions, these systems, called automata, would be given rules and then allowed to create solutions on their own.Software, as we know it, will not be able to scale for an Internet-of-Things. We cannot continue writing every line of every step along a pre-determined path. Instead, programmers will need become more akin to farmers: nurturing a complex set of inputs to yield a bountiful result. They will need the eye to prune the branches unlikely to bear fruit.  Their experience will dictate when to harvest and when to leave a problem set fallow. Developers of the future will be tenders of a software garden rather than worms excreting line after line of endless crap.This is such a powerful shift in perspective that I want to marinate on specific points in future posts. However, if this sounds appealing you can get started with Mike&#39;s notes. He&#39;s got a blog post about this, too. The video is below. ConclusionSome big ideas there and I only covered three talks of what was presented over three days! As our software continues to become more complex and interconnected these are the kinds of conversations we need to be having. A hat tip to Kin Lane and Steven Willmott for providing a forum for those to occur. I only hope I have the time digest the intellectual challenges issued by the Amsterdam API Strategy and Practice Conference before the next one arrives!Conversation Spilled into the Night, Picture by Kin Lane",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-04-02T00:00:00-05:00'>02 Apr 2014</time><a class='article__image' href='/2014/04/02/amsterdamimpressions'> <img src='/images/2014/03/amsterdam_stablediffusion.png' alt='On Amsterdam &amp;amp; APIs'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/04/02/amsterdamimpressions'>On Amsterdam &amp;amp; APIs</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On Content",
      "category" : "",
      "tags"     : "Software Development and travel",
      "url"      : "/2014/03/24/WhyBuildSomeoneElsesCathedral",
      "date"     : "Mar 24, 2014",
      "content"  : "One of the privileges of being invited to speak at the 2014 CFObjective conference was access to the private speaker Google Group. Here new speakers could ask questions from wily vets, the organizers could give updates, and everyone could collaborate on how to make everyone&#39;s experience better.One of the first orders of business was gathering together people&#39;s bios and head-shots for promotional materials. Almost instantly, the replies came in (who doesn&#39;t like talking about themselves?). While the rest of us were lobbing email with various attachments, Ryan Anklam dazzled the subscribed rabble with his Github speaker repo.Numerous people quickly emulated Ryan, throwing down their descriptive markdown. The day that I saw Ryan&#39;s update, I also happened to watch one of the recorded sessions from the API Strategy Conference on Hypermedia APIs.  One presentation by Irakli Nadareishvili got my attention. Before joining Layer 7, the API company, he enabled NPR&#39;s &quot;write once, publish anywhere&quot; content strategy. So would he be a fan of using Github for distributing things other than source code?  Not quite:&quot;Web content management systems are all broken. How do I know they&#39;re broken? &amp;hellip; A very vivid example of how broken content management systems are is how many people are using Github these days to launch their websites. &amp;hellip; It&#39;s not just a fad that some geeks do. &amp;hellip; When people are choosing code version management systems, very technical systems to publish their content I think it&#39;s safe to say that Houston, we have a problem.&quot;The current state of the Internet has been described as &quot;a web of silos&quot;. Where once web practitioners created their own sites, services, and aesthetics they&#39;ve now abdicated that work to providers. Rather than having their own website, a local business relies on  a Facebook page. Rather than creating their own experience, people cede incredibly insightful stuff to Medium. And rather than share the hard-won coding knowledge with others with their own voice, some developers use Gists, much to their dismay.&quot;People were relying on my software to share code from an entirely separate service. A service that nobody has any real control over.&quot;Despite promises to absolve people from having to think about services, these places go down (and down, and down again). Your online persona is now tightly coupled to a corporate interest that is not your own. Terms of service may change. Monetary strategies may change. Maybe someone at corporate decides blogs aren&#39;t a thing anymore. Or the company might be bought and shut down, taking &quot;your&quot; data with it. As Dave Winer mentioned while talking about blogging silos:&quot;We&#39;ll do much better if there are a million personal blogging silos instead of one or two huge corporate blogging silos. &amp;#8230; In the case of Twitter, the freedom-loving founders will eventually leave, and the new management will likely care more about return on investment than All The News That&#39;s Fit To Tweet. &amp;#8230; My message is this -- it will be way too late to undo the damage once Twitter and Facebook have it locked up.&quot;The same could be said for email providers. Or image hosts. Or source code repos. I&#39;m not new to this. I saw the personal blogger hype train leave the station, only to derail on time constraints and lack of talent. The intended destination remains a worthy one, even if the mode of transportation is a work-in-progress. The Oude Church, AmsterdamThe Cathedral and the BazaarIn 1999 Eric S. Raymond wrote a technology cornerstone, The Cathedral and the Bazaar. In his musing on open source technology, Eric laid out a powerful metaphor for illustrating the difference between the rollicking, sometimes chaotic nature of the web  and these siloed services we&#39;ve come to rely on.Centralization is attractive is because it is orderly. With order comes efficiencies like scaling, reach, and borrowed historical interface indoctrination. But in order to maintain that order, sites like Facebook, Twitter, Medium, or even GitHub assert control over the experience. People can contribute their individual bricks, but it is to build a building conforming to another&#39;s design.Bazaars are messy. They grow haphazardly. They are not uniform. There&#39;s duplication of effort and can be confusing to new people.But, unlike Cathedrals, Bazaars best serve the needs of an individual. There is no central authority saying how your site or project should be configured. There are no limits on what you do with the little corner. You don&#39;t have to ask for permission and, with a few important exceptions, you can publish anything you want without fear of running afoul of some other business model&#39;s terms of service.  The bricks are your own to arrange as you see fit. These individual stalls in the Bazaar, haphazard though they may be, gives the entire ecosystem a resiliency that the Cathedral lacks.This is what motivates the POSSE (Publish [on your] Own Site, Syndicate Elsewhere) movement. It&#39;s not a polarizing edict that &quot;everybody must blog on their own website&quot;. There&#39;s very viable reasons why siloed sites exist. It is about publishing to one&#39;s one presence first to ensure you own your content and then syndicating elsewhere (a recent episode of the In Beta podcast with Amber Case goes into POSSE with much more depth).I&#39;ve attempted to take back my own online presence. If you follow me on social media, you may have noticed use of my own personal shortcode: vpop.in. These shortcodes link to special aggregate pages where I can collect cross-silo conversations, post pictures, or save interesting, evolving tangential information. If those conversation pages include a reference to my own blog posts, those are highlighted at the top. Likewise, the posts are aware of these ongoing, additional conversations and gently usher the reader to these pages at the bottom. I maintain control of my content, I can re-combine conversations held across multiple endpoints for a broader view, and I can wallow in my own confirmation bias to my heart&#39;s content. I maintain control of my centralized identity, which then spiders outward to those other sites. It&#39;s not a POSSE system, yet. My site updates aren&#39;t automatically doled out to other networks. However, it does qualify for another acronym: PESOS (Post Everywhere, Syndicate [on your] Own Site). I haven&#39;t sanded off all the rough edges. Frankly, this method of hand curated conversations wouldn&#39;t scale if I was one of the digerati who&#39;s bathroom duckface earns quadrupal-digit likes. But in the rush to convenience publishers on the web lost some of their independence. This is my small way of figuring out how to take control back.Ryan&#39;s Github speaker project made me confront my misgivings with where web content is going. Rather than create a Github project, I spent the extra time creating a speaker page on my own site. Having done it, I realize that is where it probably should have existed all along. I&#39;m committed to my place in the bazaar. It may not have the soaring buttresses or vast audience assembled, in harmony, in the same place. But it is mine.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-03-24T00:00:00-05:00'>24 Mar 2014</time><a class='article__image' href='/2014/03/24/WhyBuildSomeoneElsesCathedral'> <img src='/images/2014/03/cathedral_stablediffusion.png' alt='On Content'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/03/24/WhyBuildSomeoneElsesCathedral'>On Content</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Spike Jonze&#39;s Her (2013)",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/03/03/Her",
      "date"     : "Mar 3, 2014",
      "content"  : "On Sunday, the Spike Jonze&#39;s near-future science-fiction romance, &#39;Her&#39;, won the academy award for Best Original Screenplay. It was also nominated, but didn&#39;t win, for best picture, score and production design. This is my review.                        I stand outside the theater door. I&#39;ve seen Spike Jonze&#39;s &#39;Her&#39;. It had to be now. The family is out of town. I&#39;m left to my own devices for the weekend. I found a time on a device. I navigated here on a device. It was a device that wordlessly spat out the ticket, and it is a device that is failing to tell me what to do next. The ear buds are in my ears but they aren&#39;t playing any music. It&#39;s easier to keep the movie with me if there&#39;s less of the real world to interact with. And having ears stuffed with plastic grants me plausible deniability to having heard any conversation. Negligence is more socially acceptable than having peace to ruminate on an idea.I&#39;m busy. There&#39;s work to code, chores to do, neighborly pretense to maintain. I drive aimlessly, the chorus from the film&#39;s Moon Song, &quot;a million miles away&quot; on repeat in my head. I&#39;m at an electronic store but have need of nothing. I strain to hear the shelves for a siren call of need. But everything mumbles of only being more, not a must. I backtrack, assuming that I&#39;ve missed something. I drift through the technology of pending interconnections; the aisles of waiting IMs and long form journalism and porn and VOIP and MMORPGs and cat GIFs and tearful unmentionables and misunderstood context. Anything you need at the speed of light. Inside every injection modeled piece of Chinese die-cast is the family reconciliation, the basis for world peace, the classroom for all of Africa and an end to suicide. It&#39;s a jigsaw puzzle never to be assembled, fragmented and frozen in impenetrable sealed plastic. I&#39;ve contented myself with being able to own a piece and being OK without the rest. So has everyone else.I&#39;m updating statuses to initiate discussions that will never happen. I&#39;m collecting links that will never be revisited. I&#39;m favoriting videos I will never finish. I want to feel connected in a quantity not possible for actual consideration. I worry about link rot. I think about heat death and the moment when the last LED driven by the last fiber containing the last photon ends. What will we leave behind when the selfies, the &#39;likes&#39;, the memes are gone? What remains when these simulacrum of story have faded away? Huxley was wrong: Soma isn&#39;t a pill, it&#39;s a snapchat.I&#39;m home. I&#39;m scrolling through family pictures absent-mindedly on my phone while watching BladeRunner. The replicants are dying. Harrison Ford is chasing someone in a transparent rain coat through a dirty neon street. The line between the Phillip K Dick&#39;s dystopia and the utopia of Brave New World, or &#39;Her&#39;, blur. I know. I may have never read Brave New World, but I did skim the Wikipedia article. My kids are growing before my eyes, months, years passing with every swipe; smiles under glass. Zhora asks &quot;are you for real?&quot; The Google Hangout rings for attention. &quot;Hi Dad!&quot; a high-pitched voice says, a second before the picture syncs. My children are giddy, describing a day in overlapping bursts that are as nonsensical as they are indicative that bedtime will be much later than proposed. My wife interprets. We laugh. They&#39;re having a good time. They could be in another state. Or another lifeline. But we&#39;re together now.&quot;Night Dad, love you!&quot;The screen, with nothing more needing to be said, fades to black. I turn off the TV. I close the laptop. I reset.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-03-03T00:00:00-06:00'>03 Mar 2014</time><a class='article__image' href='/2014/03/03/Her'> <img src='/images/2014/03/phoenix_midjourney.png' alt='Spike Jonze&#39;s Her (2013)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/03/03/Her'>Spike Jonze&#39;s Her (2013)</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Hiring Beyond Keywords",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2014/03/01/HowIdHire",
      "date"     : "Mar 1, 2014",
      "content"  : "I recently wrote about the problems that plague software recruiting. One of the issues raised is just how horrible a technique keyword matching is to finding good talent. What keywords do allow is for scale; they can be searched for by untrained people or dumb algorithms who are more interested in meeting quota for emails sent or calls made. But that approach is akin to throwing a net as wide as the ocean to catch one incredibly notable fish. Ultimately, it&#39;s also going to snare quite a bit of undesirable &amp;mdash; or worse &amp;mdash; merely ok talent.&quot;Beast of a Job Interview&quot; by Mike Licht from Flickr, used under the Creative Commons Attribution 2.0 Generic License.The solution that I ultimately hope we could get to is one where engineering departments take a pro-active approach to community building and talent development before they need to hire. In that way, managers are never left to rely on a third-parties word that they &quot;have access to a vast pool of applicable talent&quot;.Of course, that is easier said than done. As Scott Weiss mentions on the Andreessen Horowitz blog, &quot;recruiting the very best talent is extremely competitive&quot;. If not hiring by keyword, what do you hire for? Do we bombard a candidate with brainteasers, hoping to see how they can problem-solve themselves out of a blender? Thankfully, Google has (hopefully) ended the era of riddles and trick questions. So do we rely on grades as proof of potential? In June of 2013 Laszlo Bock, Google&#39;s senior vice president of people operations, said that:&quot;G.P.A.&#39;s are worthless as a criteria for hiring, and test scores are worthless. ... We found that they don&#39;t predict anything.&quot;In a follow up piece this year Laszlo specified that Google hires for three main things:General Cognitive Ability &amp;mdash; This is not a person&#39;s I.Q., but their learning ability. Google values individuals who are able to ingest an ongoing stream of information and process it in an ongoing manner. Emergent Leadership &amp;mdash; While leading various social clubs at one time or another is nice, Google is more interested in those able to recognize opportunities to step in and perform a role at a given time and, just as importantly, step back when that moment has past.Intellectual Humility &amp;mdash; Others may post &#39;Help Wanted&#39; signs for programming Ninjas and Rockstars. The problem with that is those that self-identify with those terms aren&#39;t the most likely to play well with others, and even less likely to be receptive to different ideas or criticism of their work.That&#39;s great for Google. But what about those organizations that don&#39;t have the same kind of marquee name recognition? What do people hiring within startups do when they don&#39;t have the luxury of cherry-picking from all the resumes from enthusiastic candidates flooding their inbox?If you follow college sports then you&#39;ve heard of the Boise State Broncos Football Program. Originally known for the ridiculous blue artificial turf, they have, over the past decade, become a home for unprecedented success, regularly &quot;punching-above-their-weight&quot;, despite not having the recruiting muscle of larger, more prestigious schools. (Many might recall their 2006 season, where they capped the season with an upset over the heavily favored Oklahome in the 2007 Fiesta Bowl.) A piece on Forbes from last year hints at their strategy for success. It starts with recruiting in a way different from the Alabama and LSU programs of the world:&quot;&amp;#8230; the Broncos have been so incredibly successful at it because they have made a conscious commitment to being the best in the world at one thing &amp;mdash; developing football talent. By taking the traditional notion of recruiting the most gifted individual available for a specific position and forgoing it in favor of intangible characteristics, the Broncos have insured above all else, the student-athletes who come play for them embody the beliefs inherent to perpetuating the culture.&quot;Put in terms of software development, they aren&#39;t trying to &quot;hire&quot; the rockstars, code ninjas, or caffeine-guzzling gurus of the world. They are looking for individuals who have demonstrated an ability to become successful in an area, and execute. The refinement (like learning a particular language) can come later. As long as an individual demonstrates a certain core set of skills: the ability to learn quickly, a demonstrated self-discipline, and examples of effective communication they&#39;re worth hiring. These are the skills that are rare and worth paying a premium to have.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-03-01T00:00:00-06:00'>01 Mar 2014</time><a class='article__image' href='/2014/03/01/HowIdHire'> <img src='/images/2014/03/checklist_pixray.png' alt='Hiring Beyond Keywords'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/03/01/HowIdHire'>Hiring Beyond Keywords</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Recruiter Problems",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2014/02/24/TheRecruiterProblem",
      "date"     : "Feb 24, 2014",
      "content"  : "Chuck Duppong, a fellow polyglot developer, has been capturing his frustration with job hunting in some fantastic posts. His first, captures just how ridiculous some &quot;must-haves&quot; within job listings are. The second is on the paradox of the &quot;rockstar developer&quot;. Having recently come off a job with it&#39;s own ups and downs, I can relate. But, as a recent piece points out, there are four jobs open for every developer. Software job hunting should be easy. So why do recruiters make this harder than it has to be?It is easier to harass every developer than to find the right developer. &amp;mdash; Four Things that Make Job Hunting for Developers HellThere&#39;s volume, for one. There are software recruiters who takes the time to understand what a company needs and how that might align with a developer&#39;s wishes. (Dylan Thompson, from Cypress HCM in Atlanta, was an absolute pro to work with. It&#39;s also been a few years, but I&#39;ve got a ton of respect for Robert Merrill out of Salt Lake/Provo.) However, for every Dylan and Robert, there are another twelve (twelve-dozen?) throwing as many warm bodies at a position as possible. In a recent, fantastic experiment, a faked LinkedIn profile averaged a recruiter ping every 40 hours and saw 530 emails from 382 recruiters across 172 organizations. In this game, candidates are scratch tickets: the more a recruiter plays the more likely they are to get lucky and win. Unsurprising, that rubs programmers the wrong way.    &quot;They think I have superpowers! Wait, they use that line on everybody?&quot; Even if external, 3rd-party, recruiters were to slow down and vet each candidate, I doubt they&#39;d be able to. They are responsible for filling numerous opportunities across as gamut of industries. Even a seasoned technology veteran would be hard pressed to have the depth of experience to understand what they were hiring for at any more than a superficial level. And if their chops were really up to snuff, they&#39;d be earning the salaries developers can earn themselves. This, then, results in the ridiculous keyword bingo I&#39;ve so often seen.In one particularly cringe-worthy phone interview, the recruiter ran down a list of acronyms they had in their internal application form. The list became increasingly obtuse until she asked how many years I had developed &quot;open source&quot;. I realized that, in her mind, there wasn&#39;t any differentiation between a programming language like Python and a licensing approach. When the understanding doesn&#39;t extend beyond a list of check boxes with funny sounding names,  there&#39;s little hope for the pre-screening process to be meaningful. And we can forget about being able to recognize and recommend related, relevant experience; no keyword, no interview. (This is also the same recruiter who emailed asking if I wanted pursue some new opportunitites only two weeks after I sent a very polite note thanking her for her time and telling her I had taken a position somewhere else. So maybe she&#39;s not the best example.) They final thing that bothers me about the broken process is maybe minor, but drives me nuts: the lengths to which recruiters go to obscure the hiring company. Their fear is that, once a candidate knows the business behind the curtain they&#39;ll approach them directly; leaving the recruiter who did the matchmaking without their bounty. That leads to ridiculous emails that sound more like terms of service than the delicate, emotional conversation that job hunting is:Return of this email confirms that Matthew Reinbold, has given XXXX, Inc., A YYYYY Company, the sole and exclusive right to represent you for a &quot;Developer&quot; at &quot;ZZZZZ&quot;. Any other company which submits my name or resume for such assignments at this client has done so without my authorization and consent.  Additionally, I agree that I will not disclose the end-client in which I am being submitted to by XXXX, Inc.  Disclosing this information may remove me from consideration for the position. Can you please reply with &#39;I Approve&#39;?But finding a cultural fit is huge. There are places I wouldn&#39;t approach with a fifty-foot Ethernet cable. Other places either don&#39;t provide the amenities or career path I expect. If I knew, up front, who the opportunity was with I would have been able to save everyone involved plenty of time.And it&#39;s not just for the candidate&#39;s benefit. A company using a recruiter can&#39;t sell it&#39;s workplace benefits. It can&#39;t leverage its public awareness to attract the kind of talent that might be drawn to it. It remains anonymous until the point when both sides have been legally bound not to perform any backroom shenanigans; a point at which all sides have likely invested numerous hours.Despite some noble efforts, I don&#39;t see the situation changing anytime soon. The tools make it too easy to flood developer channels with unsolicited offers (deleting your LinkedIn account seems like an extreme measure driven by an extreme imbalance). The fire hose approach eschews understanding or depth. The incentives reward ambiguity and lack of job specifics. In my perfect world companies would be actively grooming talent prior to needing it. The would not only be active participants but community organizers. Done this way, when it came to hiring, a company  would already be familiar with the potential available.It takes an extraordinary manager and/or organization to shoulder that kind of burden when the immediate Return-On-Investment (ROI) is unclear. But just because it takes effort doesn&#39;t mean it&#39;s not worth doing. A development team shouldn&#39;t cede the responsibility for their future coworkers to external parties. Programmers shouldn&#39;t shirk interacting with other people because it&#39;s a soft, squishy skill they never bothered to develop. The health of any ecosystem, like the available talent pool, is the responsibility of those that dwell in it.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-02-24T00:00:00-06:00'>24 Feb 2014</time><a class='article__image' href='/2014/02/24/TheRecruiterProblem'> <img src='/images/2014/02/pokemon_stablediffusion.png' alt='Recruiter Problems'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/02/24/TheRecruiterProblem'>Recruiter Problems</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Fandemonium that Binds",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/01/31/SportsAsCivicUnifier",
      "date"     : "Jan 31, 2014",
      "content"  : "It was over lunch during last year&#39;s Gluecon conference that I got some seriously incredulous looks. The topic had drifted onto the conversation of sports. The stranger that I had struck up an argument with maintained that the Denver franchises were irrelevant, an unenlightened throwback to savage times gone by. I contended that sports are one of the few civic unifiers that our fragmented, narrowcasting world has left. That raised an eyebrow.      United in Orange &amp;mdash; picture by Lindsay Rein It isn&#39;t hard, especially prior to the Super Bowl, to find authors hand wringing over what the NFL is doing to us. And while there are some valid points there, many more settle for cheap snark; simultaneously mocking an event they are &quot;too sensible&quot; to take part of while (ultimately) contributing to the game&#39;s awareness. The cacophony misses the cultural benefits that sports in general, and the NFL in particular, grant a geographical region. Probably because putting a dollar amount on the stories that bind is hard.Robert Alter wrote about the mythos we bestow upon communities in his 2005 book, &quot;Imagined Cities&quot;. It described how, with the progression of technology in the nineteenth and twentieth centuries, metropolitan areas became more diverse. Where clear roles used to exist &amp;mdash; Pittsburgh made steel, Charlotte grew cotton, Seattle was a fishing and trade outpost &amp;mdash; people were suddenly doing a whole slew of things across numerous industries. It was this dilution that required new narratives to be written. Sometimes these stories were just the past facts romanticized for a new age. Others were outright fictionalizations. But they ultimately came to describe someone&#39;s &#39;home&#39;.In 2011, Emily Duda published a wonderful master&#39;s theses called &quot;Sports and the City: The Rhetorical Construction of Civic Identity through American Football Teams&quot;. Not only does she mention Robert Alter&#39;s work but she details the importance of this myth-making (emphasis is mine):&quot;While the city of Pittsburgh faced a decline in industry, the Steelers simultaneously experienced their longest and most well-known era of success during the 70s. As the reality of factory life began to fade, the team (which was especially known for its defense) more intensely articulated a connection to &#39;blue collar&#39; life which was otherwise deteriorating. The idea of the Steelers functioning as a &#39;blue collar&#39; team regardless of the city&#39;s economic makeup suggests that the team has emerged as a way to maintain a civic identity which was otherwise crumbling. Because Pittsburgh&#39;s economic decline meant that there were no longer enough jobs to support the population, the city experienced a population decline. A number of fantasy themes emerged out of that population shift. Leaving Pittsburgh is often figured in political terms, as a type of economically motivated diaspora, or in religious terms as an exodus. Because of the implied unwillingness to leave the city, there is attendant nostalgia. Performing the team identity and using the team&#39;s symbols is articulated as a way to maintain both the identity of the city (i.e. the perception of Pittsburgh as a blue-collar town) and the civic identity of those who once lived there (i.e. fans who relocated, but still believe themselves to be &#39;Pittsburghers&#39; and maintain an affiliation with the city). Adherence to the team functions as a connection in the absence of geographic and temporal proximity, recalling a city removed by both distance and time.&quot;People move. That&#39;s a reality of our age. But they continue to cheer for the place that they identity with. They cheer for the place they call home. Fans cheer even if their idea of home no longer exists in reality.This Sunday the Denver Broncos are playing in the Super Bowl. I have never lived in a place where the team is as beloved and ingrained into the city&#39;s cultural identity as the Broncos are (from Elway&#39;s restarants to Peyton&#39;s frequent audible &#39;Omaha!&#39;). The mythos is about an untamed power, independence, ruggedness, and speed. The Broncos are inexorably linked to the Rocky Mountain region; if one skips the corporate sponsor, their stadium is &quot;Mile High&quot;. Their opponents, the Seattle Seahawks, likewise have been able to create a powerful narrative: the 12th man, the collective persona of the city willed into insane, physical existence.        An Actual Flight Plan this Week by Boeing, a Seattle-Based Company People have a natural need to belong to a group. They want to be part of a winning team. They want to believe the positive stories about their city because, ultimately, it is the story they want told about themselves. Rather than belittling those enjoying something popular it would be better to recognize it for what it is: a participatory story in the pursuit of self. Trust me, I understand that is a romantic notion. But it is very real. And I don&#39;t know if you can put a price on it.        The Denver Art Museum, &#39;United in Orange&#39; ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-01-31T00:00:00-06:00'>31 Jan 2014</time><a class='article__image' href='/2014/01/31/SportsAsCivicUnifier'> <img src='/images/2014/01/stadium_stablediffusion.png' alt='The Fandemonium that Binds'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/01/31/SportsAsCivicUnifier'>The Fandemonium that Binds</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Happiness Aggro",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2014/01/29/HappinessAggro",
      "date"     : "Jan 29, 2014",
      "content"  : "I recently began playing the Blizzard online Collectible Card Game (CCG), HearthStone: Hereos of Warcraft. As a  Magic: The Gathering  (MtG) player from decades ago I&#39;m enjoying the experience. Blizzard&#39;s take on the genre is a beautifully polished distillation of the genre&#39;s mechanics.            Screenshot from the Hearthstone: Heroes of Warcraft Beta   One of those mechanics, and a favorite of mine, is aggro.  With an aggro deck a player attempts to accomplish an objective in as little time as possible. All deck cards are tailored to accelerate a desired outcome. Not only are aggro decks simple, in principle, to understand. I enjoy them because the accelerated outcomes result in being able to play more in the same amount of time.With my family, time is a premium commodity. &quot;If an aggro approach to a CCG works well,&quot; I thought, &quot;what would it be like if I did the same to my entertainment? What if the cards are the technologies available? What would a &#39;happiness aggro&#39; approach to the game of life&#39;s entertainment look like?&quot; Muttering to myself, I began constructing.Google&#39;s Priority Inbox should be a technology ace-in-the-hole: take the cruddy task of wading through emails and only show the best stuff. Put another way, increase my happiness by separating the chaff from the wheat for me. But it fails as a time saver for several reasons. First, I can&#39;t shake the nagging feeling that I&#39;m missing something if I&#39;m not seeing everything, and end up looking at the default inbox anyway. Second, crap still does get through that saps my time. Third, time savings for the Priority Inbox are difficult to quantify over the regular Inbox, so I don&#39;t feel aggro. With email, I&#39;m still looking for a better card to play.I&#39;ve had more success with the podcasts I enjoy. I was having difficulty finding time to enjoy a number that I&#39;ve become fond of. Normally I listen during walks over my lunch break. But during winter that isn&#39;t always possible. Instead of abandoning some of my favorite sources of inspiration until next spring I have, instead, multi-tasked my morning prep time. I take around twenty minutes getting ready each day (the new three S&#39;s: Social media, Shave, and a Shower). Over a week that&#39;s two hours. To play podcasts, I use BeyondPod, a podcatcher for Android. It allows me to set a custom playback speed. When enabled, those two hours of media time are actually closer to three with no sacrifices to my other activities. I also recently subscribed to Aereo. It takes the TV channels available over the air and makes them available for streaming online. One of the benefits, besides not having to contort rabbit ears every time the channel is changed, is their &quot;cloud DVR&quot;. As users of TiVo have been extolling for years, time-shifted television is a magical thing. But the real aggro virtue is being able to skip commercials. I love the NFL. But a typical game not only has the same, repetitive ads for the same cars and alcohol. Much of the game itself is commentary and infographics of questionable interest interspersed between the action. A DVR does away with that. For the recent NFC and AFC championship games I watched six-and-a-half hours of scheduled game time in just over four hours. I didn&#39;t miss any of the action (or at least the action that people care about). And now I had over two hours back that would have previously been spent molding the couch to my derriere. It&#39;s not all beer and Beast-mode Skittles. For one, DVR&#39;ing a cultural event puts you at risk of spoilers. And there is something amazingly fun when a community rallies for a second-screen hash-tag rapture. Those experiences (ala Sharknado or the upcoming Super Bowl&#39;s #AdBowl) have to be real time. And happiness aggro isn&#39;t about fast forwarding through experiences. Gaining a breadth of experiences while sacrificing depth isn&#39;t the point. It takes work. One has to identify what&#39;s fun about the entirety of an experience and maximize only that while minimizing the rest. Selecting the technology to build a deck of approaches, and then constantly refining those, requires a degree of self awareness. But, when successful, a happiness aggro approach to entertainment means one can have the same amount of enjoyment in less time. Who wouldn&#39;t be entertained by that?  Update 2014-01-31 David Armano: Super Bowl &quot;A Moment of Truth&quot; for Real-Time WIRED asked if people would be using social media as a &quot;second screen&quot; during the big game. More than 80% of respondents said &#39;yes&#39;.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-01-29T00:00:00-06:00'>29 Jan 2014</time><a class='article__image' href='/2014/01/29/HappinessAggro'> <img src='/images/2014/01/karts_craiyon.jpg' alt='Happiness Aggro'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/01/29/HappinessAggro'>Happiness Aggro</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Resolve to Systems, Not Goals",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2014/01/23/SystemsNotGoals",
      "date"     : "Jan 23, 2014",
      "content"  : "It&#39;s almost the end of January, and chances are the New Year&#39;s resolution you had made for yourself is long forgotten. You&#39;re not alone. I&#39;ve done stuff like that every year. So why aren&#39;t we getting better?Goals are like cotton candy. There&#39;s an implied substance. They&#39;re easy. They&#39;re exciting. The aspirational success of our better selves seems so close I can taste it (I imagine a cross between sweat and butterscotch). But, ultimately, I fail when it comes to implementation. &quot;I want to travel the world&quot; is a great goal. But the ginormous scope is more likely to overwhelm the venture before it gets started than sustain it. A day goes by without action and I may feel guilty and resolve to do better the next day. But then something happens and another day goes by. That stagnation goes from a pool of guilt to stinky, stagnating stress. Those lousy feelings lead to avoidance. Before I know it I&#39;m ready to call off the entire thing and resolve to &quot;try harder&quot; next year.         Reaching   It is not enough to have goals. What is needed, instead, are systems. Systems focus effort on obtainable daily wins that, cumulatively, move one closer to their goal. And by establishing a enjoyable daily cycle with demonstrable process we are also establish the virtuous feedback loops of positive habits.I&#39;d like to claim I came to that realization on my own. However, props go to my wife, who forwarded me an excellent piece from Entrepreneur.com (Update 2022-01-03: the original Entrepreneur piece seems to no longer be there; however, there is this one with similar sentiment.). The TL;DR version:                    Commit to a process, not a goal.        Release the need for immediate results.        Build feedback loops that celebrate the journey.            (Update 2022-01-03: for more on creating systems to support goals, also check out this piece on the ArtWorkArchive site.)Once again, I started 2014 with several goals. But, with the above details in mind, I&#39;m approaching them differently.I get so much from writing on a regular basis. I feel sharper when I regularly strain to mine words from the depths and forge them into coherence. Unlike years previous, however, my goal is not &quot;to write a book&quot; or &quot;NaNoWriMo&quot;. That would be committing to a huge goal that is more likely to leave me feeling like a failure on a daily basis. Instead, my system is setup to encourage me to write at least five hundred words a day.            Diagraming Is One Way Of Better Seeing a System   What do I mean by &quot;system&quot;? The first is selecting a daily amount that I can accomplish. Five hundred words I can manage among family, work, and play. I&#39;ve released the need for immediate results; those words are private and can be about anything. If they turn into a blog post later, so be it. I&#39;m free to see what happens. Instead of feeling stressed about trying to fulfill a quota I&#39;m excited about writing and seek out opportunities now &quot;to see what&#39;s there&quot;. And these daily steps are incrementally moving me closer to a &quot;big&quot; goal. A typical book is 50,000-60,000 works. Assuming I meet my system requirements  five days a week I&#39;ll have written 130,000 words in 2014 &amp;mdash; or about the equivalent of two and a half novels. To close the feedback loop I&#39;m using DraftIn, an online collaboration tool for writers. It allows me to set a daily quota, sends reminders when I haven&#39;t written anything, and congratulates me on positive streaks.Other goal I have is going deeper into Android development. A goal I&#39;ve had in the past that I now recognize as a trap is &quot;deploy something of my own in the Android Play store&quot;. That doesn&#39;t do a good job of setting up a system of daily progress to the goal. There&#39;s a tremendous amount of expectation there for immediate results. And what is the feedback, without those incremental wins, on whether I&#39;m any closer to putting an app in the store today than I was yesterday?This year I&#39;m approaching things differently. My means for daily improvement in the right direction is working through a pair of books. The first is Learn Java for Android Development by Jeff Friesen. The second is Learning Android: Building Applications for the Android Market by Marko Gargenta. I created a public repository on Github to measure progress. It produces an RSS feed of updates and a JSON feed if I want to build my own simple feedback congratulations and reminders. Even if I don&#39;t have an app in the store by 2014 I&#39;ll be much more familiar with Git, Java development, and Android.Finally, I&#39;d really like to &quot;get into&quot; (literally) wearables. I have a number of ideas that are probably better suited for a separate post. But what I&#39;m trying to define, at the moment, is what the virtuous system is for that goal. How do I turn that into a process? How do I move toward something bigger without requiring immediate results? And how do I build feedback loops for a physical item(s)? That is going to take some additional processing.What are you doing for resolutions this year? What have you found that works? Leave me a comment in the contact form below. I&#39;d love to have a few people to bounce ideas off of. How we can keep the good intention of the New Year going the entire year long?",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-01-23T00:00:00-06:00'>23 Jan 2014</time><a class='article__image' href='/2014/01/23/SystemsNotGoals'> <img src='/images/2014/01/calendar_midjourney.png' alt='Resolve to Systems, Not Goals'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/01/23/SystemsNotGoals'>Resolve to Systems, Not Goals</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Too Old to Techno?",
      "category" : "",
      "tags"     : "Culture and management",
      "url"      : "/2014/01/14/TooOldToBeGreat",
      "date"     : "Jan 14, 2014",
      "content"  : "Technology, particularly the web, celebrates the boy wunderkid. It&#39;s mentioned in Amazon&#39;s original series, Betas. There, in the pilot, Hobbes, the older security expert, corners the younger founder in the bathroom. He&#39;s panicked because he&#39;s too old (35!) to have hitched his ride to one more dot-com flame-out. Things are even more pronounced in real life. It is there that tech founders publicly assert that a web founder has peaked at 25:&quot;Consumer Internet entrepreneurs are like pro basketball players,&quot; a venture capitalist told me recently while discussing the prospects for a thirty-something founder, &quot;They peak at 25, by 30 they&#39;re usually done.&quot;There&#39;s plenty more where that came from. And why not? Tell someone young (or stupid) enough that their work is changing the world and they&#39;ll live, breath, and sleep it. At that point they&#39;re less like employees and more like hyper-docile minions. I did that while at IBM. I saw curling up in a sleeping bag beneath my desk as a programmers&#39;s right of passage. But would I do that again? No, (or more accurately hell no).I was self-conscious at my previous job, filled with twenty-somethings (and numerous older individuals in the throws of arrested development). They&#39;d arrive on Mondays talking about blind dates or crazy parties. To me, at a different point in my life, it all sounded so superfluous. I had a hard time relating. Switching over to a different medical package for benefits wasn&#39;t a big deal for them; odds were they weren&#39;t likely to use it anyway. Married with three kids, however, the new terms were a source of concern and worry.Likewise, when I was interviewing for positions, there was a number of companies that expressed surprised at the number of things I&#39;ve done. Their concern was never with the nature of the work or my past experience. It was whether I would give &quot;110% completely&quot; with &quot;everything else&quot; I had going on. It was an odd statement considering that I had come back from an extended, isolated stay in Costa Rica and recently resigned from my previous position. I could only assume &quot;everything else&quot; was the family they had gasped in surprise at. Or maybe it was my strongly implied &quot;been there, done that, have the worthless options to show for it&quot; attitude toward sleeping at my desk.I was reminded of this while listening to a recent Hanselminutes podcast with Chanelle Henry. In it, they wandered onto the topic of age. She described feeling overwhelmed about how her idols had achieved so much while so young. It resulted in a post that ended up widely circulated. &quot;Oh my&quot;, I thought &quot;I wonder how old she must be to have felt such angst?&quot; As mentioned later, she began questioning everything because she was 31.*facepalm*(For what it&#39;s worth, I&#39;m 36.)Chanelle, to her credit, came to a conclusion wise beyond her years. Ultimately, age doesn&#39;t matter. We can&#39;t compare where we are or what we&#39;ve achieved with others because we have no idea how they got there. It&#39;s like comparing oranges to apples to a Smart Wig. A former co-worker once asked why I hadn&#39;t continued remixing music after college. In one of my more zen-like moods, I replied that &quot;there are many paths, but we can only walk one at a time&quot;. What I meant is that, yes, we were raised to believe that we could do anything. And, for the most part, that is still true. But we can&#39;t do everything, or at least everything well, at the same time. It&#39;s ok to try things, have fun, and then spent that time somewhere else. Imagine the stress if you had to continue to do the things you&#39;re doing now for the rest of your life?! People would never try anything for fear of choosing poorly.If you can&#39;t compare your lot in life with others what can you do? Ultimately, for me, it comes down to whether I&#39;m happy with the decisions that I&#39;ve made to this point. Would I still get married out of college? Yes. Would I still quit my job and run my own freelance firm for five years? Yes as well. I even admit I&#39;d make the same mistakes again; the lessons learned from those vastly outweigh the in-the-moment discomfort. Our benchmark for our lives shouldn&#39;t be when we made/make our first million. It should be the number of regrets we avoid along the way.The career that we can look back on with pride is a career worth having. In the meantime, I encourage any investor to write a million-dollar check made out to cash to prove me wrong. I wouldn&#39;t regret that.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2014-01-14T00:00:00-06:00'>14 Jan 2014</time><a class='article__image' href='/2014/01/14/TooOldToBeGreat'> <img src='/images/2014/01/children_craiyon.png' alt='Too Old to Techno?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2014/01/14/TooOldToBeGreat'>Too Old to Techno?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Roar Proceeds a Fall",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2013/12/16/ClassAndTechElitism",
      "date"     : "Dec 16, 2013",
      "content"  : "There is a fascinating cultural moment happening in San Francisco. Every year this hot spot of the world&#39;s software zeitgeist compete to hire the best and brightest. While accoutrements meant to lure these people include everything from on-site dry cleaning to black comedy conference rooms, the main enticement remains money.These ever increasing salaries, ironically, come with a price: it&#39;s eroding away the cultural diversity the area is known for. Those displaced aren&#39;t happy about it. What started as political performance has now become violent. In the big picture it is not the Syrian civil war. But slashed tires and rock-broken windows aren&#39;t the symbols of civil society, either.&quot;Yes, we&#39;re in the midst of a battle for a culturally, racially, and economically diverse San Francisco and Silicon Valley. (It&#39;s not just a local fight, either; what&#39;s happening here is subtly &amp;mdash; and will be overtly &amp;mdash; playing out elsewhere, too.) From Google bus graffiti and IPO protests to essays lamenting the shuttle buses and others defending techies, 2013 marked a shift for the geographical hub of the tech that&#39;s reshaping our lives. Lines were drawn. A battle began.&quot; &amp;mdash; Susie CagleIt is part of the American cultural mythos playing out. Is is the Puritan belief that if you work hard, you will be rewarded. We are a nation where anyone, given enough elbow grease, can acquire their piece of happiness. It also implies that if you haven&#39;t pulled yourself up by your self-reliant bootstraps, you certainly must not be working hard enough. You must be lazy and stop bothering those working it with your FAIL.&quot;The difference is in other cosmopolitan cities, the lower part of society keep to themselves. They sell small trinkets, beg coyly, stay quiet, and generally stay out of your way. They realize it&#39;s a privilege to be in the civilized part of town and view themselves as guests. And that&#39;s okay.&quot; &amp;mdash; From a Valley CEOLike many arguments, the idea that one just has to work harder on their coding sounds great in a vacuum. Reality, however, is far more messy. Success is a function with numerous  inputs, of which hard work is only one. There is luck. There is who you know. Charm. Intelligence. Vigor. Resilience. Even where you were born.While I can work from places remote and exotic, from South Dakota to Costa Rica, I couldn&#39;t have started there. My success as a programmer has been about the people I&#39;ve been able to meet and work with. A conversation built trust. That trust lead to a job. That job lead to a bigger job, and so on. While someone getting a killer work from a brilliantly written blog post or open source library does happen that hasn&#39;t been my career. I needed more than to &quot;work hard&quot;. I needed to find a new community. So I moved. I understand that is a luxury that not everyone has.But when you have a city where critical components to the civic makeup - teachers, law enforcement, medical staff - can no longer live there, can you still call it a community? Or a homogeneous fantasy land? Have you created a techno-libertarian utopia? Or a tone deaf bubble of the world&#39;s best and brightest no longer building the relevant goods and services the world needs.Succession is not the path to diversification. In the best case, it&#39;s the path to ridicule. It&#39;s circling the wagons of one&#39;s kind, rather than obtaining a greater understanding of real people and their problems.Does anyone else remember their introductory college course on genetic selection? I recall there was a story about tigers. Normally a powerful creature, actually larger than a lion, a set of tigers became trapped within a volcanic crater when the only path in or out was blocked. Over subsequent generations, due to inbreeding, the tigers&#39; health declined, with greater defects increasingly threatening the future viability of the species.Diversity is necessary for the health of complex systems. If we wall ourselves off to preserve the purity of an ideal we&#39;ve forgotten the thing that makes us great. All that&#39;s left is arrogance and avarice.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-12-16T00:00:00-06:00'>16 Dec 2013</time><a class='article__image' href='/2013/12/16/ClassAndTechElitism'> <img src='/images/2013/12/bus_stablediffusion.png' alt='The Roar Proceeds a Fall'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/12/16/ClassAndTechElitism'>The Roar Proceeds a Fall</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Mobile is Dead",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2013/12/12/MobileIsDeadLongLiveMobile",
      "date"     : "Dec 12, 2013",
      "content"  : "People have been writing, in one form or another, since crude cave paintings. Even with all the time that has transpired since, people still get together and talk about recording words. But have you ever heard of a typewriter user group (at least, one outside of yesteryear romantics pining for community&#39;s sake)?With any emerging technology people need to gather and evangelize this new thing. Personal computers weren&#39;t always obvious. Enthusiasts like the Homebrew Computer Club had to meet to celebrate the concept. They gathered to support each other, clarify the vision of what they&#39;re doing, and share best practices as they are being developed. This commiserating bolsters the faithful. It reinforces that the view from atop the plateau is worth the effort to push a rock up the S-curve.The people who gather and babble, gobsmacked, at the potential of these widely adopted tools has regressed to something statistically insignificant. The pioneers are no longer needed. The line which those tools have gone from magical to mundane has been crossed. After that threshold people talk more about what they&#39;re doing and less about what they&#39;re doing it on.&quot;Mobile&quot; is at that point now. Every successive release of the iPhone is evolutionary, not revolutionary. Android doesn&#39;t paint a new picture, but layers on new functionality on an increasingly rich collage. Forget the phone; even the web is now just an app. People are no longer sharing the transformative power of having a computer about their person at all times. The technology is no longer a shiny badge for achieving a level of gadget sophistication. Nobody coos in rapture on the sidewalk while staring lovingly at their gorilla glass. It&#39;s now the stuff of everyday. It&#39;s a speed bump to something else.What are the ramifications of a technology that has arrived at where mobile is now? The growth slows. It is no longer the wild west, and the gold rush is over. Saturation takes hold. For new entries, differentiation takes an increasing number of cycles. That is probably a good thing. There&#39;s something embarrassing about working in an industry when developers are dueling to become the next fart app millionaire. As said in boardrooms the world over, &quot;We need a mobile strategy&quot; is wrong. The statement always put an emphasis on the medium over the value proposition for the customer. Today, however, it&#39;s a dead end. Paying lip service to the medium is no longer even a press-release worthy novelty. (&quot;ACME CO RELEASES APP&quot; is to 2013 what &quot;ACME CO IS NOW ONLINE&quot; was in 2001 &amp;mdash; a yawner.) Everybody releases apps. Everybody should have approaches for dealing with the web on unpredictable screen sizes. It is what you do for people on those platforms that matters. Hopefully, for your organization, how you make your customer&#39;s lives better is an easier question to answer than which app store you should upload to.The death of the mobile movement isn&#39;t all bad. It means that tooling for the space is getting serious investment. It means a greater number of practiced, wisen craftsmen are lending their years of experience to making the experience better. It means being able to do a search on Google and finding relevant results. It means we can get on with the serious business of getting better rather than just getting on.I used to attend a number of mobile-focused groups. Meetup.com still regularly kicks out meeting invites for related events. I have difficulty mustering more than a meh. I don&#39;t need a pep rally anymore. Mobile, as a movement, is dead to me. Mobility lives everywhere.     ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-12-12T00:00:00-06:00'>12 Dec 2013</time><a class='article__image' href='/2013/12/12/MobileIsDeadLongLiveMobile'> <img src='/images/2013/12/mobile_stablediffusionpng.png' alt='Mobile is Dead'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/12/12/MobileIsDeadLongLiveMobile'>Mobile is Dead</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Designing Interfaces When There Are None",
      "category" : "",
      "tags"     : "Software Change",
      "url"      : "/2013/12/11/UbiquitousComputing",
      "date"     : "Dec 11, 2013",
      "content"  : "Among entrepreneurs and developers mobile is everywhere. There was the app that turned down a three billion dollar cash offer. Brick-and-mortar retailers like  WalMart saw more than 55% of their traffic coming from mobile devices on Black Friday. Even the venerable overseas&#39; Internet cafe has seen its fortunes reversed. If you have anything remotely to do with the web, chances are you&#39;ll be supporting development for an &quot;alternative&quot; screen, if you haven&#39;t already. That is obvious.    What is less clear is that mobile is just a speed bump on the way to ubiquitous computing. Mobile was a watershed moment because CPU cycles were no longer constrained to a physical location. We don&#39;t have to batch process our research before leaving our desks and hard line connections. This has lead to new behaviors like show-rooming, turn-by-turn directions, even planking. The NEST Thermostat is controllable from an app. Amazon hopes you&#39;ll summon a drone with every online purchase. Even the Maker Movement is, in part, wiring their physical devices to online services. Second Life, the failed attempt to create a virtual world like the real one, had it backwards: we&#39;re less interested in bringing the physical world to cyberspace. Instead, we seem intent on embedding our digital services within in the physical world.    Despite an otherwise disappointing Google trip, one of the highlights was my talk with Simon Meacham. He serves as Head of Google&#39;s Developer Relations for Cloud Computing. He effused excitement for his work on their platform. But he was quick to clarify that the &quot;cloud&quot; was only an inflection point. Like mobile, it&#39;s a transitional moment in time, not a destination. He believes that ubiquitous computing will be marked by a time when when the devices we use will disappear into nothing more tangible than the bits they process. Instead of chicken pecking on and staring vacantly at we will simply talk to the air and magic will happen. The computer will simultaneously be nowhere and everywhere. No future comes for free. I recently got a new phone. While upgrading every single app notification preference was lost. The first 24 hours after activation was a frustrating game of whack-a-mole to find what app was bleating for attention &amp;mdash; and mute it.Imagine if that same intrusion was no longer caged within that small, black-mirrored glass. Instead of being something that can be turned off and put away, the questionable calls for our attention were everywhere, without an ability to dismiss or deny it.Then there is the concerns over privacy as the breadth of NSA spying continues to surface. And when it isn&#39;t governments, it is companies trying to sell us stuff. Will ubiquitous computing equate to ubiquitous surveillance? Will there be an off switch? Do we need to be all-on, all-the-time?&quot;The idea of a single general-purpose &quot;computation&quot; device is fading into the same historical background as having a single steam engine to power a whole factory, or a single electric motor to power every appliance in a house. As it fades, designers and developers have to learn to design smart things that serve the interests, abilities, and needs of people. We must create a practice of ubiquitous computing user experience design.&quot; &amp;mdash; Mike KuniavskyWe make the experiences that benefit and enrich the miniaturization and mobilization of digital experiences. Eventually, we&#39;ll code the interfaces when the interfaces disappear. When computation is unbound by its plastic mooring will we be asking people to conform to this new reality? Or will we be smart enough to engineer ubiquitousness like water; with the ability to ebb and flow, occupying whatever space is available to an individual?There are exciting things on the horizon. We only have to be brave enough to see it for what it can be.    ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-12-11T00:00:00-06:00'>11 Dec 2013</time><a class='article__image' href='/2013/12/11/UbiquitousComputing'> <img src='/images/2013/12/internet_craiyon.jpg' alt='Designing Interfaces When There Are None'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/12/11/UbiquitousComputing'>Designing Interfaces When There Are None</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Less Analyzing, More Synthesizing",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2013/12/01/LessAnalyzingMoreSynthesizing",
      "date"     : "Dec 1, 2013",
      "content"  : "I&#39;m constantly curating. Whether it&#39;s recording a random association that strikes me as illustrative or bookmarking a neat quip to revisit later, I&#39;m a hoarder of bits. The problem with this approach, however, is that I&#39;ve gotten very good at saving and still have difficulty with *editing* it into meaning. Data without the rigor of synthesizing into knowledge is just Facebook.I have a difficult time with editing because I&#39;m not nearly as practiced with it as I am accumulating. When a person (or, at least, a dutiful one) chooses development as a career, they commit to continual learning. To be successful, particularly on the web, vigilance is required because the terrain is constantly changing. There seems to always been something new to learn. &quot;What&#39;s next?&quot; is as good of reason than any other to cast about for distraction.This can be addictive. As researchers have discovered:&quot;...that not only did money, food, and sex also activate these reward centers, even pictures of these things had the same effect. And most recently, an experiment done with monkeys showed that even a little bit of information stimulates our brains&#39; reward centers. And what is the internet besides a collection of millions of bits of information&amp;mdash;hit after dopamine&amp;mdash;releasing hit.&quot; As someone with &quot;researcher&quot; tendencies (according to my Enneagram profile) the endorphin hit from discovering a new online meme to mine is particularly acute. I feel joy on a focused Internet exploration only to discover, at the end of too many hours, I have little more than fools-gold; and that&#39;s only if I take the time for refinement (ooo, I wonder what Google has if I search for &#39;idea refinement&#39;?). While not nearly to the same degree, living in a metropolitan area provides a similar level of excitement. It is easy to be hyped-up on an endless procession of Meetups, Ignite talks, user groups, co-working facilities, and conferences. A city has a set of diverse, hopefully new (and possibly unique) stimuli.But assuming in-person attendance automatically equates to personal growth is a mistake. Likewise, consuming information does not necessarily lead to becoming knowledgeable.I grew up in an extremely rural area of South Dakota. I decided a long time ago that I would lose my mind out of boredom if I lived here permanently. But I love visiting. The isolation begets contemplation. Stillness allows for study. Remoteness hushes both signal and noise. Without a cacophony of competing story lines I am left to construct my own narrative. It&#39;s time for a vacation; not one of physical gratification but of mental purpose. The timing with the holidays is good; ground breaking industry announcements don&#39;t happen between Thanksgiving and Christmas. I&#39;m resting the feed reader. I&#39;m refraining from refreshing the pod-catcher. Twitter and Facebook won&#39;t notice if I&#39;m gone. And I&#39;m sure I&#39;ll be able to find the same Pinterest content next month.Fear of Missing Out is such a strong human feeling it&#39;s ascended to hashtag status. But maybe a self-imposed vacuum will give me a chance to practice that woefully undervalued human trait: creation. Update (2013-12-12)Shortly after I posted this article, I came across this mini-documentary from across the pond. They perform an experiment with a number of individuals who fear they may be &quot;addicted&quot; to the Internet. While there may be some unsatisfactory resolution, it does raise some interesting questions.  NO INTERNET WEEK: FULL DOCUMENTARY from Mother on Vimeo.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-12-01T00:00:00-06:00'>01 Dec 2013</time><a class='article__image' href='/2013/12/01/LessAnalyzingMoreSynthesizing'> <img src='/images/2013/12/waterwheel_craiyon.jpg' alt='Less Analyzing, More Synthesizing'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/12/01/LessAnalyzingMoreSynthesizing'>Less Analyzing, More Synthesizing</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "WE Make Stuff",
      "category" : "",
      "tags"     : "Culture and Software Change",
      "url"      : "/2013/11/07/TheNewNormal-WEMakeStuff",
      "date"     : "Nov 7, 2013",
      "content"  : "In a single weekend I had a trio of &quot;future technology&quot; experiences that shocked me in their normality.The first was when I was having lunch with my wife and a friend of hers from out of town. This friend, an admitted &#39;Mommy Blogger&#39;, mentioned, unprompted, just how much she missed Google Reader. After being discontinued by Google earlier this year she had yet to find a suitable replacement and, as a result, felt like she wasn&#39;t as up to date with what her peers were up to. The common narrative around Google Reader users was that these were a vocal, yet small, phalanx of power users. Google had sun-setted the popular blog aggregation tool because it wasn&#39;t growing. My wife&#39;s friend is an intelligent, bright person currently launching her own micro-business. But is she a TechCrunch-loving, hard-core web junkie, as we were lead to believe the typical Google Reader was? Hardly.The next day I woke and made my way to the kitchen. Over breakfast my wife and her Mother was discussing what a hashtag was and its correct usage on various social media platforms. Most online denizens know Chris Messina launched that boat back in 2007. However, to hear the discussion was surreal.  &quot;Oh, I thought she was using it was to show a break in the text, to put extra emphasis on each word.&quot;&quot;No, it means you&#39;re referring to a larger conversation that others are having. Most apps will automatically link the word with the hashtag to search results for that item. It&#39;s away of connecting what is currently being said with what others are also saying.&quot;The final moment of future shock was when coordinating carpools to perform errands. It wasn&#39;t just the burst of address swiping whenever an address was mentioned. It was the spontaneous discussion of how badly Siri sucked for navigation and the hacks people had come up with to circumvent potentially spurious turn-by-turn &#39;help&#39;.  I have been blessed with a preponderous number of smart people in my life. Being the bright people that they are, it shouldn&#39;t be a surprise that they&#39;re not only using the software I&#39;m contributing to, but actively changing it to fit their own ends. To think of them as only &quot;consumers&quot; implies a dangerous, hierarchical relationship. It divides the world into two distinct groups: the silly users, who either &quot;get&quot; things (or not) and the &#39;technorati&#39; who sit in judgement.            Emphasis here is not that I make stuff, but WE make new realities together.    Jack Dorsey, of Square and Twitter fame, said as much in a late 2012 blog post:The term &amp;ldquo;user&amp;rdquo; made its appearance in computing at the dawn of shared terminals (multiple people sharing time slices of one computing resource). It was solidified in hacker culture as a person who wasn&#39;t technical or creative, someone who just used resources and wasn&#39;t able to make or produce anything (often called a &amp;ldquo;luser&amp;rdquo;). And finally, it was made concrete by Internet companies whose business models depended on two discrete classes of usage, a paying customer (often purchasing ads) and a non-paying consumer (subsidized by viewing the ads). Along the way only a few criticized the term, calling it abstract at best, and derogatory at worst.It&#39;s time for our industry and discipline to reconsider the word &amp;ldquo;user.&amp;rdquo; We speak about &amp;ldquo;user-centric design&amp;rdquo;, &amp;ldquo;user benefit&amp;rdquo;, &amp;ldquo;user experience&amp;rdquo;, &amp;ldquo;active users&amp;rdquo;, and even &amp;ldquo;usernames.&amp;rdquo; While the intent is to consider people first, the result is a massive abstraction away from real problems people feel on a daily basis. An abstraction away from simply building something you would love to see in the world, and the hope that others desire the same.Software does not exist in a vacuum. It is operated by people with decades of varied and unique experiences. This results in outcomes not considered in our insular VentureBeat or The Verge echo-chambers.             Irakli Nadareishvili on industries that refer to their customers as &quot;Users&quot;.   We all live in the future now. Being in touch with a larger community is humbling; we are no longer descendant from on-high decreeing new realities (if we ever were). As writers of software, we need to approach life with as eyes and ears open. Software shouldn&#39;t be a statement about us, the developers. It should be more about what it allows people to say about themselves. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-11-07T00:00:00-06:00'>07 Nov 2013</time><a class='article__image' href='/2013/11/07/TheNewNormal-WEMakeStuff'> <img src='/images/2013/11/future_pixray.png' alt='WE Make Stuff'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/11/07/TheNewNormal-WEMakeStuff'>WE Make Stuff</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Facebook Likes for Fun and Profit",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2013/09/05/SocialMediaforCollectibleCollecting",
      "date"     : "Sep 5, 2013",
      "content"  : "How do you figure out where an NFL team&#39;s fan live? Why, abusing the privacy settings on Facebook, of course!Assembled by Sean Taylor, the methodology for assembling the map is straightforward. Each of the league&#39;s 32 teams have a Facebook fan page that users can follow. Identifying the followers, he then went through and catalogued where each of those fans live. Color coding each area based on the predominance of likes and, viola! the geographically dominant teams became apparent.There were some interesting takeaways. For example: &quot;Some teams, like the Steelers, Cowboys, and Packers, seem to transcend geography, with pockets of fans all over the country.&quot;&quot;No matter which team you root for, it&#39;s pretty likely you&#39;ll have a friend who is Cowboys or Steelers fan, which is maybe unsurprising given their country-wide support&quot;        Even in the heart of Broncos&#39; fandom, a Steeler fan continues to make his passions known.    For most, this would just be an odd curiosity. However, for someone like me that trades NFL memorabilia, this is actionable intel. I try to ensure I have a mix of different team items; the frequency with which people move for work combined with greater exposure through new media options like Sunday Ticket and Red Zone channels mean you might meet a fan of anyone anywhere. But if pressed for space I skew toward Steelers, Cowboys, and Packers. Jets and Jaguars never do well. It&#39;s not just because they&#39;ve had lackluster seasons. Looking at the map it would appear it is also because their fan bases are so geographically concentrated in places not named Denver.It is also worth pointing out that confabulating geographical area with team popularity would be a mistake. While the Minnesota Vikings purple certainly covers a hearty swatch of the upper plains, I can speak from experience that there aren&#39;t that many people there. Collecting items for resale based on the size of the geofence isn&#39;t properly gauging the audience size.For those numbers, the Harvard College Sports Analysis Collective have more conclusive results. The actual top ten by size are:Dallas PittsburghNew EnglandGreen BayNew OrleansNew York GiantsChicagoIndianapolisPhiladelphiaOaklandThus far we&#39;ve only talked about Facebook. What about Twitter? If we look at twitter followers and then sort by most follows, we see a remarkably similar list:New EnglandDallasNew York JetsPittsburghGreen BayNew York GiantsSan FranciscoBaltimoreNew OrleansChicagoThe graphic exhibits the classic &quot;long tail&quot; seen in most popularity rankings. The Steelers have more than a million more Facebook likes than the Patriots despite only being one spot ahead of them. The graph is very top heavy.Another notable observation is that every team that has won a Superbowl in the last 10 years has at least 1.5 million Facebook likes. Translated to collector strategy, collect winners. In my case, I put the brakes on Broncos and started gathering Ravens after they beat Denver in last year&#39;s playoffs.All of this is extremely seasonal, but that is another post. With luck, I hope to be taking a more in-depth look at code and stats as they apply to America&#39;s favorite sport. Sit back, relax, and enjoy the return of the NFL season this evening!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-09-05T00:00:00-05:00'>05 Sep 2013</time><a class='article__image' href='/2013/09/05/SocialMediaforCollectibleCollecting'> <img src='/images/2013/09/bigfootball_craiyon.jpg' alt='Facebook Likes for Fun and Profit'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/09/05/SocialMediaforCollectibleCollecting'>Facebook Likes for Fun and Profit</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "My Google Interview",
      "category" : "",
      "tags"     : "Milestones",
      "url"      : "/2013/08/31/MyGoogleInterview",
      "date"     : "Aug 31, 2013",
      "content"  : "Another person just asked how the Google interview(s) I had at the beginning of July went. With that I realized that I really haven&#39;t shared the bizarre story. I&#39;ve avoided talking about it elsewhere online since I&#39;m still looking for my next job; you can never tell how things might be interpreted. But since it&#39;s just you and me and the NSA here on the interwebs, what&#39;s the harm, right?I was flown to the Google offices in San Francisco for a final, onsite interview for what I thought was a Developer Evangelist position. After three rounds of phone interviews, I was lead to believe that the position was all about building communities and giving Google-centric talks; if coders had success building in the Google cloud then I would be successful. The phone conversations focused on my community management experience, specifically on how to have quantifiable analytics on otherwise fuzzy terms like &quot;programmer satisfaction&quot; and &quot;developer growth&quot;. I started the morning with the first of five interviews. As it proceeded, I became aware of how the questioning seemed to diverge from what I had prepared for. My fears were confirmed when the person opposite, the founder and head of Google&#39;s cloud evangelist program, said &quot;I&#39;m not sure why you&#39;re here for a program manager position.&quot;I had to agree since I was there for Developer Evangelism, not Program Management. The polite gal who was responsible for showing me around was brought in. Reviewing the email chain did indeed show that I hadn&#39;t confused titles. HR people where called. The head of the department, who had just told me that I was all sorts of wrong, waived off the remaining four interviews as being a waste of everyone&#39;s time. He explained, and I agreed, that my passion for writing and speaking about code made me a better developer advocate candidate that whatever he was looking for. Obviously this was disappointing. The Google recruiter that had arranged for me to fly out said I was free to wander while they tried to figure out next steps. I wandered for a bit along San Francisco&#39;s famous piers for a bit but wasn&#39;t feeling the artisinal cheese shops at the moment. Not having anywhere else to go, I decided to drive out to Candlestick park to see where the 49ers played. They were going to tear it down after the coming football season. It seemed apt with my mood.            The Google, San Francisco office is nestled in a nook beneath the Bay Bridge.    Shortly before I was to fly out I got a call from the recruiter letting me know they had scrambled a developer advocate interview track for the next day. Travel arrangements had been taken care of and had my hotel accommodations extended. Exhausted from the day of nerves but excited about the second chance, I found a Kohls, picked up a clean polo for the extra day, and retired to re-review my interview notes.            Day two certainly got off to a beautiful start.    The next day I made my way back to the Google offices beside the Bay Bridge. I was eager to discuss technology landscapes, code differentiation, and my ideas for inspiring developers. Instead what transpired was over five hours of whiteboard algorithm diagramming. There were no bathroom stops or breaks for lunch in the highly touted Google cafeteria. By the end fatigue and huger had set in. Late in the afternoon I know I was probably less than coherent. When I commented that my phone interviews for the position hadn&#39;t really focused on code, an interviewer replied :&quot;But we don&#39;t write or speak, that&#39;s a separate group. We build the libraries others use.&quot;According to previous day&#39;s interview a developer advocate had to have a passion for writing and explaining code. The paradox still causes my brain to implode if I dwell on it too long. It&#39;s like staring at a Mobious strip trying to divine where it starts and stops. Only your career is at stake.            A Google cafeteria. By the time I was done on the second day the chefs had packed up and gone home. But they did offer me a peanut butter and jelly sandwhich after I foolishly asked if they had anything other than hummus in the satellite kitchen.     I flew back to Denver. The internal Google recruiter, the one who arranged for me to fly to San Francisco, called a few days later. He was polite. He said that he was confident that if I had been prepping for a code-centric interview track I would have been fine. And, all things accounted for, I had performed respectably. However, my marks hadn&#39;t been high enough for them to extend an offer. When asked about the discrepancy between what I had interviewed for offsite verses on, he was as confused as I was. His only explanation was that perhaps the perception on what the job was had changed from when I had done the phone calls prior to Costa Rica and when I was subsequently onsite a month later. He felt sure there was a place at Google for me but he just needed to figure out what that is.I haven&#39;t heard from him since, nor do I expect to.That&#39;s more than you possibly could have wanted to know about my interview at Google. Despite what happened I still believe being called to work there is like a minor league player being called up to the majors. The size of company and intelligence of people there make moonshots possible (just a brief list includes project Loon, self-driving cars, and wearable computing). It&#39;s a place my Mother has heard of, which means they&#39;re doing something at scale that is right. I would not discourage others from aspiring to join them.But it is hard to know what to do with the experience. I can walk away from a clear failure with a set of feedback for improvement. This, despite getting a peak at what their hiring process is like, still feels like a colossal waste of time. Really, it&#39;s not even an interesting story - just a weird, confusing, odd set of stress that is now past.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-08-31T00:00:00-05:00'>31 Aug 2013</time><a class='article__image' href='/2013/08/31/MyGoogleInterview'> <img src='/images/2013/08/interview_midjourney.png' alt='My Google Interview'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/08/31/MyGoogleInterview'>My Google Interview</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Exploring the Hollywood Model",
      "category" : "",
      "tags"     : "management",
      "url"      : "/2013/08/02/DecadeofPop-HollywoodModelforSoftware",
      "date"     : "Aug 2, 2013",
      "content"  : "There were many reasons why I left &#39;conventional&#39; (i.e. cubical) employment to work on Vox Pop Design full time. One of those was a need to explore alternative ways of organizing creative talent. In studying how other creative functional groups are organized I came across what many refer to as the Hollywood Model.Note: The pictures for this piece come from the Japanmanship blog. In that piece he describes using the Hollywood model to change the games industry. The diagrams are also extremely relevant for web design &amp;mdash; just replace the &#39;publisher&#39; shown in the images with &#39;customer&#39;.In traditional custom software development a customer approaches a firm for a project. The first meetings may be with a sales rep or (in smaller cases) with project leads to clarify scope and come up with requirements. These then filter down until the developers &#39;in the trenches&#39; receive their marching orders. Change requests are carried from the top of the chain to the bottom and questions are bubbled from the bottom to the top. Like the game &#39;telephone&#39; these messages often become altered with the number of re-tellings between individuals, leading to more requests and more questions. While all this is going on overhead expenses &amp;mdash; office space, benefits, company branded trinkets from HR, etc &amp;mdash; continue to accrue. Wages for untapped labor &amp;mdash; say a database guy in one of those cubicals who is on the sidelines during a front end redesign &amp;mdash; also begin to add up. The software firm needs them when projects require it. However, not all projects do. In those cases management further has their hands full finding busy work &amp;mdash; something that adds additional organizational overhead and does not serve the customer.Now studios have large structures with their logos on them. They have permanently staffed marketing, sales, and accounting divisions. When I refer to the Hollywood model I&#39;m not referring to a Universal or Paramount. Instead I&#39;m referring to the organizational make up of the creative teams behind the movies that we enjoy. These would be the directors, cinematographers, costume designers, etc. These creative types aren&#39;t staffed by one shop in side by side cubicals. The teams are extremely ad-hoc; they come together because their talents are uniquely suited for a project, they do their jobs, they have the wrap party, and then are off to their next thing.That brings us to the second diagram, this time of a firm structured to the &#39;Hollywood Model&#39; way of organization. It still has an agency at the center. This firm, like Vox Pop, serves several purposes:Provides a consistent point of contact.Serves as project oversight assigning tasks, integrating work, and ensuring quality.Evaluates talent and determines compatibility.Acts as unifying &#39;public face&#39; for free agents.In Utah I&#39;ve been blessed to be surrounded with a number of highly skilled people. While many of them have traditional 9-5 employment they are also looking for opportunities on the side. This model allows them to contribute their considerable talents to fulfilling projects as they are able. It provides a variety of work that they might not get during their day employment. And the customer gets an extremely high quality product because we&#39;re not using just whoever has some free man-months at the moment. We seek out the best experts available to contribute solely for their project. Overhead is low. And I never invite you to tedious company &#39;socials&#39; and expect you to make small talk.Are there problems with this way of organization? Absolutely. For one, I spend a considerable amount of time &#39;talent scouting&#39;. The freedom that is given to freelancers means that they may not have the time to the degree that you need it when you need it. That leads to my second point: the central agency (in this case, myself) needs to be incredibly diligent in planning with the flexibility to adapt at the drop of a hat (although I still believe that overhead to be lower of that than the brick n&#39; mortar firm). Third, and one of the things that keeps me up at night, is the lack of assets or equity this model creates. If I was to decide to move back to South Dakota today there would be nothing to sell. Fourth, a firm organized in this way is NOT ideal for any work that requires a degree of security (government, military, health care, etc). This is because the freelancers are using their own equipment in their own spaces and communicating back over (likely) unsecured channels. Fifth is the lack of any kind of health care benefits for for freelancers. Many &#39;agents&#39; that I&#39;ve worked with yearn for the freedom of freelancing but are tethered to a beige prison because they cannot afford health care at the same level they&#39;ve previously enjoyed. It&#39;s not just a problem that I face. However, if this model has any shot at scaling there needs to be some form of affordable coverage available to allow the best and brightest to pursue projects at their leisure.There is considerably more and this brief overview is a gross oversimplification of the economics, sociology, and theory behind what&#39;s happening. However, the initial experiment has been going very well. I think there is something here that is worth continued exploration.Originally published on the Vox Pop Design Blog, May 22nd, 2007.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-08-02T00:00:00-05:00'>02 Aug 2013</time><a class='article__image' href='/2013/08/02/DecadeofPop-HollywoodModelforSoftware'> <img src='/images/2013/08/hollywood_midjourney.png' alt='Exploring the Hollywood Model'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/08/02/DecadeofPop-HollywoodModelforSoftware'>Exploring the Hollywood Model</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "the anyScreen Project",
      "category" : "",
      "tags"     : "Software Change and Software Development",
      "url"      : "/2013/08/01/anyScreen",
      "date"     : "Aug 1, 2013",
      "content"  : "I started working for Placewise Media in May of 2011. Initially my role was fluid, filling gaps where needed. Not being charged with a specific project, however, has it&#39;s benefits. With others busy, I was soon tasked with figuring out how to get our content into an app. The project manager for that project was Greg Hickman, founder of the Mobile Mixed podcast.            Gathering together feedback on the existing mobile app.   It took several late nights toward the end of 2011 but we shipped, as promised. As early 2012 arrived, we were tasked with creating not just an app or site, but a larger direction for the entire company. Management could tell that mobile was a transformative force. But it was hard to look past a platform (an app, a site) and determine the larger ramifications on how we approach development. What we needed wasn&#39;t a mobile design refresh; we needed a broader content syndication strategy for any screen.&quot;The anyScreen Project&quot; was the result of our research done in early Q1 of 2012. Some of our recommendations were common sense. Others were purposely more &quot;left field&quot; in order to allow compromise. We presented to a handful of interested groups. We made the document available to decision makers. Then, like so often happens within a company, we started working on other things. Greg moved on and became the Mobile Marketing Manager at Cabela&#39;s. I became technical lead on the the Shoptopia App. Ultimately, I also left.Up till that point none of the recommended courses of action had been seriously considered for assignment and implementation. That doesn&#39;t mean they weren&#39;t good. Despite some statements now seeming dated I stand by the work. What I regret is not making the strong financial case to justify the effort. With limited resources, illustrating a better consumer experience isn&#39;t enough to influence release schedules. We needed a clear path to X% growth in billings. We were arguing hearts and minds when we needed to understand the purse strings.So, without further ado, here is a public, slightly redacted, copy of the anyScreen report. Enjoy.           Collected notes on the responsive web experience.   The anyScreen InitiativeDefining a Compelling and Comprehensive Placewise &amp;ldquo;Multi-Screen&amp;rdquo; ExperienceOur Audience is Changing.The trend in smart phone usage is clearly one direction:   70% of smartphone owners use their mobile phones to influence in-store purchases (  source )  92% of retail volume still takes place in brick and mortar stores  42% of consumers are more likely to return to stores that have in-store mobile promotions  19% of U.S. consumers browse their mobile devices while shopping in-store  58% of consumers want to get product information in-store  31% of American adults who have cell phones use their phones for the majority of their Internet access (  source )  Among American adults (18-29) who use the Internet on their phones, 45% do most of their web surfing there. (  source )  More than 1 in 10 Americans have a smartphone, desktop/laptop, AND tablet device (13% - July, 2012)  52% of American desktop/laptop owners also own a smartphone  1 billion smartphones will be sold in 2014 Facebook&amp;rsquo;s numbers point where most audiences are going: 102 million accessed Facebook solely from mobile in June, 2012. That&amp;rsquo;s a 23% increase over the 83 million mobile-only users in March. 18.7% of Facebook&amp;rsquo;s 543 million monthly mobile users don&amp;rsquo;t visit the desktop site (  source ).How do we satisfy changing site consumption?In order to successfully engage audiences in the next year we need to:   Deliver targeted messages and offers - messages tailored not just to the person&amp;#39;s interests but to the platform they&amp;#39;re on  Improve response rates by detecting when a customer is ready to act (through user actions like store follows and deal bookmarking)  Improve customer loyalty through tailored and personalized experiences To succeed in these goals we must overcome the existing problems with our current website approaches. After study, five problem areas were identified:   Fragmented URL Strategy  Slow Performance  Little Sensitivity to User Intent  Poor Mobile Evangelism  Aging Login &amp;amp; Registration Approaches Fragmented URL StrategyConsumers occupy an ecosystem of screens; a Placewise visitor is not a &amp;ldquo;mobile user&amp;rdquo; or &amp;ldquo;laptop user&amp;rdquo;. The same people interact in a multitude of formats and devices. It is this multi-screen consumption which causes inconsistent and/or problematic behavior with our current inclusion of URLs:   Do we use a &amp;ldquo;traditional&amp;rdquo; website link in an email template which may be read on a mobile device?  Do we use a mobile url in a push notification or SMS?  Does a website link posted to social media like twitter or facebook direct to the desktop or mobile experience?  If a user receives a bit.ly link on a mobile device but content is not mobile enabled what happens?  What happens if a user attempts to access a mobile-only contest via their desktop browser? The proposed solution is to no longer have both &amp;ldquo;m.*&amp;rdquo; url subdomains and full urls exist simultaneously.  There  should  be one canonical link that  references where a location exists online . This link will default to the  mobile, responsive experience UNLESS the user is on a device with a screen greater than 1024x768. The purpose during a period of transition is to allow for full, &amp;ldquo;traditional&amp;rdquo;, experiences on larger screens while supporting the diversity of lower resolutions. It will be assumed that mobile links exist for all content; if that content is not available in the responsive template the request will &amp;ldquo;default&amp;rdquo; to content that is on the desktop site. This represents 180-degree change from the URL policy that currently exists.Proceeding in this manner not only provides better search engine optimization (SEO) (  source ). The bigger benefit is from an operations and development standpoint. Among staff there will never be any confusion as to which link to provide. All URLs included in code will be formatted one way. Finally, references to our content can be safely shared across a variety of platforms and services without the danger of the &amp;ldquo;wrong&amp;rdquo; link for the viewer&amp;rsquo;s context causing a sub-optimal experience. Slow PerformanceSpeed isn&amp;rsquo;t only a mobile concern. Numbers from 2011 show that 47% of consumers expect a web page to load in two seconds or less. Further, 74% will abandon if a site takes more than 4 seconds to load (  source ).  When given the option of increasing site speed or adding an additional feature,  we should always error on the side of speed.Just making a site responsive doesn&amp;rsquo;t make it fast. Unfortunately, 86% of responsive sites have the  same size or larger page sizes than their desktop counterparts (  source ). We need to develop with the mindset that if it wasn&amp;rsquo;t instantaneous it didn&amp;rsquo;t happen. Speed itself is the killer feature. Speed translates into more time spent on our sites, more return visitors, and more positive overall experiences - all positive outcomes that increase our desirability for brand sponsorship.Speed increases are possible with:    Asynchronous Processing &amp;ndash; The client facing site or app responds to user interaction immediately while discretely synchronizing with the global server when possible, convenient, or bandwidth permitting. For inspiration on how this can be done review the instagram model of processing images (  source 1 ) ( source 2 ).   Caching - The fastest response is the one not made. Whether including most-likely pages device side via a multi-page jquery mobile template or saving extra database calls with built in ColdFusion caching, numerous opportunities exist to reduce backend transactional overhead.   Device Appropriate Images - Responsive images are difficult. However, the benefit is the best pixel-per-bandwidth ratio possible. Because so much of our layouts are graphically heavy savings are possible by a more responsible content serving strategy. Most people (71%) expect mobile sites to load as fast or faster than desktop sites (  source ). The benefit of all of these approaches, in addition to meeting audience expectation, is they also allow us to scale to a much larger degree on the hardware we already have.Little Sensitivity to User IntentWhile Responsive Web Design (RWD) has taken a significant portion of designer mindshare since being coined two years ago,  it is incomplete. A responsive approach only deals with the technical aspects of a user&amp;rsquo;s experience. This is primarily thought of as the window size of the content display.  Adaptive Design (also referred to as progressive enhancement) is creating an experience  for the user&amp;rsquo;s needs, desires, or situation. Users expect different experiences on different devices. Tablet and desktop shopping site experiences are both for discovery. In these cases the user is  planning a trip: reading articles, bookmarking deals, and making note of events. While the  intent is the same, however, the input means are drastically different: keyboard/mouse inputs verses touch interfaces.Mobile users are  action driven in  discrete bursts. Google Analytics shows that an overwhelming percentage of Placewise visitors are using mobile to find two things:   Specific Store Information  Mall Hours Our goal should be to encourage repeat visits,  not to snare as many clicks per visit as possible. This would better support the mobile user&amp;#39;s goal of finding the desired information quickly. While adaptive design dictates the mobile approach, Responsive Design needs to define our email template creation. Mobile email clients on Android, iPhone, and iPad increased from 4% to 20% from 2009-2011 (  source ). Our recommendation is that email  should be formatted to correctly fit their device wherever it is consumed. Resources for building responsive email templates are included in the BaseCamp project. Poor Mobile EvangelismCurrent sponsorship inclusion on mobile sites is a banner below-the-fold. This is unacceptable positioning for such a high percentage of our audience. This occurs because campaigns are created within the context of desktop experiences: Where does this fit in the sidebar? What IAB leaderboard would be appropriate? How can we do a takeover ad similar to Kay Jewelers?The problem with all of these approaches is that they assume a full sized site with unlimited technical restrictions. For example, the Kay Jewelers ad, while successful, used Flash that was impossible to duplicate for an iPad. Dealing with sponsors who only provide IAB assets can be problematic in a responsive context (  source ).One opportunity is with rich media advertising providers currently being evaluated. Early tests have been problematic. However, even when one is in place, creating a compelling sponsor experience on mobile needs to be done in conjunction with the desktop.Another question posed by our current approach is when a user arrives on a mobile website that has a corresponding Android/IOS app, why are we not politely direct a visitor to the corresponding store to download it? Failing to even  mention additional touch points with is a glaring failure. How are we expected to promote our sponsors interest when we can&amp;rsquo;t even promote our own?Aging Login &amp;amp; Registration ApproachesTyping anything on a mobile device is a pain, but login, in particular, can be difficult. Since mobile devices are user centric why does a user&amp;rsquo;s session still last only 20 minutes? Expanding the session timeout for devices that are clearly mobile (and therefore personal and unshared) seems an obvious step. But is it possible to go further and emulate the &amp;ldquo;login once and forget&amp;rdquo; simplicity of a native app? Strong consideration needs to be given to the burgeoning &amp;ldquo;no login&amp;rdquo; design pattern (  source 1 ) ( source 2 ) (  source 3 ). By eliminating (or reducing) desktop conventions of a username/password pair we would lower the bar to user engagement in non-desktop contexts. There also is an ongoing debate within Placewise about the correct way to do login. A number of desktop sites employ a shoptopia modal login. The mobile sites use a more federated identity system to provide access on platforms that aren&amp;#39;t HTTP based (like the native apps). The discussions have centered around whether to simplify to one system and what that would be. If not a &amp;ldquo;no login&amp;rdquo; solution, consideration of an official, published, standard like Oauth 2 should be considered.Challenges for ImplementationMoving to responsive email templates and site design will require changes to existing workflows. In a recent survey 56% of design teams reported workflow as a significant challenge when faced with responsive design (  source ). Features should be wireframed and mocked mobile first as it forces refinement of the idea to its essential components. The feature can then be progressively enhanced for more capable browsers or available technologies.The idea of wireframing and interactive prototypes can be a shock to traditional creative design. For many studios design practices have been standardized around static, fixed Photoshop mockups. Those processes prove inadequate when having to deal with the realities of a living, breathing web (  source 1 ) (  source 2 ) (  source 3 ).But even more of a procedural challenge is the mental one. This plan requires a change in thinking. Different native platforms have distinct conventions. You can&amp;rsquo;t simply port over one design to all native mobile platforms. Interactions and expectations differ. We need to be flexible enough to conceive solutions in terms of puzzle pieces that adapt to different devices instead of fixed canvas designs.As John Allsopp correctly pointed out in 2000, the flexibility of the web is a  feature, not a bug (  source ). Treating creation of digital sites in the same way as a printed product is a mistake. However, while new design workflows are necessary to support any screen, they haven&amp;rsquo;t yet been clearly identified.The Way Forward, NowThe desktop site, as it currently exist, is a sacred cow. It is our client&amp;#39;s approved vision. It is a weighty mass of everything that our clients believe a website to be; this includes glamour shots, press releases, and property management &amp;ldquo;about us&amp;rdquo; pages. Any overnight change to embrace fully visitor-centric adaptive design may be interpreted as butchering the mall&amp;rsquo;s branding. There will be push back.Our opportunity for learning what works is on mobile. Despite approaching half of their overall traffic the mobile presence is a supplemental afterthought to many. Clients do not realize the speed at which mobile is becoming the primary means by which  people engage  their content. It is essential that we figure out how to create engaging, adaptive experiences on this platform while still having the freedom to experiment. Finding that  flexibility is an asset and future proofs our designs for consumption on new devices (the web on our fridge! In our car dashboard!). Once the centers are aware that mobile is their primary touch point they will be more more loath to allow us to make the necessary mistakes to refining our approach.           Illustrating the challenges of responsive design and how it differs from adaptive.   ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-08-01T00:00:00-05:00'>01 Aug 2013</time><a class='article__image' href='/2013/08/01/anyScreen'> <img src='/images/2013/08/anyscreen_stablediffusion.png' alt='the anyScreen Project'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/08/01/anyScreen'>the anyScreen Project</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Malleable, Overnight, Digitally Abundant Future",
      "category" : "",
      "tags"     : "Software Change and Culture",
      "url"      : "/2013/07/02/DecadeofPop-MalleableOvernightDigitalFuture",
      "date"     : "Jul 2, 2013",
      "content"  : "Developers love to obsess over minutia. It&#39;s a trait that makes us good at what we do. Unfortunately, the same ability that allows us to sit stationary for hours while wrestling with detailed applications of logic can also mean that bigger pictures escape us. Any manager seeking business case justification for work that a programmer insists &quot;would be cool&quot; knows what I&#39;m talking about.Here are three &#39;big-picture&#39; thought cases. They are, by no means, a checklist for &quot;future-proofing&quot; anything. However, they serve as exercises for software discussion beyond just bug counts and shipping dates.The Future is Malleable and On Demand (because anything less will not be tolerated)My son will turn three next month. It has been fascinating watching as his mind develops expectations of &#39;normal&#39;. In the process he absolutely, positively, doesn&#39;t understand broadcast TV. Not being able to pause, resume, or fast-forward is strange. The fact that a show isn&#39;t on when he has time to watch it is bizarre. He doesn&#39;t have &#39;TV Favorites&#39; (PBS&#39;s excellent Word Girl) and &#39;Web Favorites&#39; (Ask a Ninja) &amp;mdash; its all just content. And if he sees a character that in other environments he can interact with - for example, Mario &amp;mdash; he expects to be able to interact with it in all spaces.It&#39;s been said before but its worth repeating: my parents generation (and a good chunk of my generation) watch TV. My son&#39;s generation will make TV (and podcasts, and blogs, and mashups, etc). Is your application on-demand or on a schedule? Is your application read/write or read only?The old UPS tagline &quot;Moving at the Speed of Business&quot; is an oxymoronLarge companies are known for their bureaucracies. A dearth of process is to provide oversight and accountability in the absence of trust and ensure that the organization has the codifiable knowledge to continue if a person leaves. But it also means that a lot of people spend a lot of their time telling a lot of other people what they all ready know and how they all ready knew it (a lot).If I see a cultural meme blooming I want to be able to form a business around it not next year, not next month, but the next day. We&#39;re so close: between domain registration, unzip &#39;n flip software like Wordpress, 3rd party fulfillment, web services like Google Apps for document storage, email, and collaboration, Blinksale for invoicing, Toggl for time tracking, Campaign Monitor for communication, and Google Analytics for metrics there&#39;s no reason why I shouldn&#39;t be able to scaffold an enterprise overnight. And, because of the low sunk costs, close up shop and try something else just as quickly - business stability isn&#39;t about how much concrete you lay over sand but how quickly you can find bedrock.Despite all the wonderful speed advantages these services provide they become mute when it becomes necessary to interface with those &#39;moving at the speed of business&#39;: customer budget cycles that push any new purchases out next quarter (or, more likely, new year), merchant account reviews, government filings for the right to exist, trademark research and registration, etc. Even the 2-3 days that it takes to transfer funds from PayPal to a conventional bank blow my mind &amp;mdash; they aren&#39;t lugging bags of good doubloons from one building to another; they&#39;re flipping bits in an ephemeral ledger. Electrons travel at the speed of light &amp;mdash; so should the connections between these institutions. Our inability to react in real time to the changing world around us is a disadvantage.Does you application move at the speed of an idea or at the speed of convention? Are there ways to bypass waiting on other systems if there is an expected result 99% of the time? Future competitive advantage will be largely based upon the speed with which we can make sense of stuffMy childhood exists in my memories and assorted pictures at my parent&#39;s house in the wilds of South Dakota. My son&#39;s childhood is played out in multi-media narratives on a number of photo and video sharing services for dozens of family and friends in near real time (carefully monitored and privacy protected, of course). We are in an exploding age of content made possible by cheap storage, cheap capture, and cheap distribution. The ability to find what we want when we want it is where the value lies. Search is tremendously important and really, Google&#39;s $600 a share price for their market dominance is a bargain.But search is only half the battle - comprehending the increasing amount of available data is even more important. We can have fifty-seven different types of mushrooms available at our local grocery store but without knowing how to cook them they&#39;re pretty useless.Does you application help create meaning? Is it aiding people to draw conclusions? Or does it just spew forth pretty charts because it makes the user look busy?Originally published on the Vox Pop Design Blog, November 29th, 2007.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-07-02T00:00:00-05:00'>02 Jul 2013</time><a class='article__image' href='/2013/07/02/DecadeofPop-MalleableOvernightDigitalFuture'> <img src='/images/2013/07/television_stablediffusion.png' alt='The Malleable, Overnight, Digitally Abundant Future'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/07/02/DecadeofPop-MalleableOvernightDigitalFuture'>The Malleable, Overnight, Digitally Abundant Future</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Blood, Bridges, and Ice Cream",
      "category" : "",
      "tags"     : "Milestones and Culture",
      "url"      : "/2013/07/01/ASignalForBuildingBridges",
      "date"     : "Jul 1, 2013",
      "content"  : "It&#39;s amazing how many people either don&#39;t get or accept that programming isn&#39;t communicating with computers, it&#39;s communicating through them. --- Sam AaronI work in an industry that, for a large part, is about amplifying signals. I do Internet work in the name of making voices heard. However, in the process, it is all together too easy to add to an already deafening cacophony; &quot;ONE SURPRISING TRICK!&quot;, &quot;SALE THIS TUESDAY&quot;, &quot;LOG IN NOW&quot;. It is even easy to forget the ridiculous volume of those screaming for our attention until we become reacquainted with silence. For my wife and I, that silence came when we opt&#39;d to forgo our mobile phones in Costa Rica. At $0.50 a text message, $3.00 a minute for a call, and over $20 per MB for data, it wasn&#39;t realistic to continue to use our own phones while roaming. We had looked into phone rentals and switching SIM cards for a local number, but both seemed like an unnecessary hassle. We used VOIP (Google Hangout, Skpye, and Voxer) over satellite Internet while at the vacation rental house. If we weren&#39;t at the house... well, we were probably off doing more meaningful things than reviewing our Pinterest boards. That worked well for several weeks. I missed having turn-by-turn navigation in the car. It was an odd feeling readjusting to finding our way around using a paper map. Waiting to update Facebook and Twitter until we returned home was surprisingly beneficial. We couldn&#39;t flood those channels with streams of in-the-moment (but of debatable interest) updates. Instead, the delay meant updates were more thought out, clearer, and more concise. Email had to wait to be done in batches. The reality of the situation had conquered the habitual itch to check that my brain, for years, hadn&#39;t. I was not only in a tropical paradise; I had reached a data nirvana where an incessantly chattering world had been put into balance with a quiet, reflective inner one. It was beautiful.Until my daughter cut her head open and needed stitches. My wife, the only member of our family with anything approaching functional Spanish, left for the hospital. She took our daughter to San Ramon with a vague idea of where to go and a car full of best intentions. I noticed the first hour go by. I didn&#39;t think much of it; I was busy getting dinner ready for my other two kids. After the second hour I began to become uneasy. San Ramon is only a ten minute drive away. Even with a language barrier and an emergency room stop, things shouldn&#39;t be that bad, should they? Was there a car accident? Was the hospital in a bad part of town? Were there problems with the paperwork? On the third hour the disaster scenarios had expanded - what if they had to drive to San Jose, another hour away? The problem I have with not knowing is I don&#39;t know when to stop. The more I turned the problem over in my head the more dire the situation became. Each tick of the clock reinforced my worst fears about being alone in a strange place where I didn&#39;t speak the language. There was no local number for me to call and no wifi in the hospital for my wife to email back. As the sun set I was left, literally, in the dark. I have conflated the popup toast for the heartfelt ping of real human emotion. I feel a warn glow of popularity when a 160 character missive fires my way. I&#39;ve thrown status updates out like bait on a hook, fishing for a response to bite. I could easily mute or time shift all of that. However, that night I would have gladly paid any price for the truth: &quot;She&#39;s ok. Two stitches. We&#39;re getting ice cream and will be back soon.&quot;As the builder of things we have to remember - more than proving how clever we are, more than attracting a big exit, more than establishing institutions that will outlive us - that we are creating bridges. Like a bridge, we have to maintain the structural integrity. We need to facilitate people to responsibly cross it. And, if we&#39;re no longer providing the shortest distance between two people, we should recognize that it&#39;s time to build something else. Mr. Watson --- Come here --- I want to see you. --- Alexander Graham BellThose connections give our work meaning and remembering why gives technology direction. When I sit to consider a project now, I reflect on what bridge I might be building. With the tremendous amount of noise competing for attention, that is a clear signal for what is worth doing.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-07-01T00:00:00-05:00'>01 Jul 2013</time><a class='article__image' href='/2013/07/01/ASignalForBuildingBridges'> <img src='/images/2013/07/bridges_stablediffusion.png' alt='Blood, Bridges, and Ice Cream'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/07/01/ASignalForBuildingBridges'>Blood, Bridges, and Ice Cream</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Not All Who Wander Are Lost",
      "category" : "",
      "tags"     : "management and travel",
      "url"      : "/2013/06/21/TipsForRemoteWorking",
      "date"     : "Jun 21, 2013",
      "content"  : "Working remotely is not an exact science. Even for me, who had plenty of &quot;out-of-office&quot; time accrued, a month telecommuting from Costa Rica represented an exponential increase in challenge. I&#39;m proud to report that is is possible; a programmer can make a living and experience exotic locations. However, to maintain my sanity (and, more importantly, my bosses&#39;) I&#39;ve come to adhere to the following rules: The More Specific the Task, The Greater the FreedomIf possible, the tasks for someone working remote need to be discrete, discernible, and directed. Something like &quot;change the menus to blue by tomorrow&quot; or &quot;we need to get our average search times averaging less than a quarter second&quot; have obvious completion criteria. The end points are quantifiable and don&#39;t require collaboration with other parties. The Further (or Longer) Away, the More Talk NeededOf course, if all development were so definitive, we&#39;d all work out of our houses. Synchronization with team members is essential. Without a frequent iterative cycles with concerned parties, a developer working in a vacuum could very well suck all the steam out of a project. Casual conversation is also littered with happy accidents. As technology writer and at-home worker Kevin Purdy explains:&quot;As much fun as 10-person, 20-message email roundtables about the proper name for the new project can be, there&#39;s a lot of context, personality, and creativity lost when you don&#39;t argue things out in person--respectfully, but with an audience, however small, to persuade.&quot; The More Effort Made, The More Leash GrantedRemote work is built upon trust. Doubt is seeded when someone needs you and you can&#39;t be found. Given the lack of contrary evidence - they don&#39;t see you at your desk - this can be a problem. If I do miss a request I&#39;m hellbent to reply as soon as possible. It isn&#39;t rocket science. The speed in which I reply can be the difference between maintaining a special privilege and rumors getting started. The More Tools Availible, The More Likely One is RightThere is no wrong tool for communicating. Everyone will have a preference. Some will be the most comfortable with IM. Others will always reach for the phone. I loved doing Google Hangouts but can make Skype video calls work in a pinch. You won&#39;t know which one people will use. However, being remote, the onus is on you to support whatever will make that communication happen.When Working, WorkWorking from home means having a separate space away from kids and pets. If from a hotel, it means I can&#39;t have SportsCenter playing in the background during chats. Being away from the office isn&#39;t catch-up-on-the-Netflix time. (Many developers claim they&#39;re more effective with background noise playing. However, I tend to disagree.) You are a professional so create an environment, even when traveling, that helps put your mind in the professional context.Above All, Be Honest With Why You&#39;re RemoteFinally, realize that no amazing beach panorama, jungle hideaway, African safari, or coffee shop loft will entice you to do work that you don&#39;t want to do. Can you avoid the siren call of Candy Crush if there are no disapproving gazes thrown your way? Will TP reports get filed if you don&#39;t see the manager walking past? There will be no peer pressure to keep from goofing off when remote.This is maybe the hardest part of remote work; being honest with yourself. Being able to maintain the rituals, routines, and appearances is &quot;how you train yourself to do your work when you&#39;re supposed to&quot;. Do you have the discipline to execute on unsavory tasks without supervision?",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-06-21T00:00:00-05:00'>21 Jun 2013</time><a class='article__image' href='/2013/06/21/TipsForRemoteWorking'> <img src='/images/2013/06/laptopbeach_stablediffusion.png' alt='Not All Who Wander Are Lost'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/06/21/TipsForRemoteWorking'>Not All Who Wander Are Lost</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Lament of the Lone Coder",
      "category" : "",
      "tags"     : "Culture and management",
      "url"      : "/2013/06/07/GuiltOfTheRemoteWorker",
      "date"     : "Jun 7, 2013",
      "content"  : "I am writing this from a hotel bathroom so as to not disturb three children that were dismayed (well, two were dismayed, the third was content to suck on her toes) that they weren&#39;t swimming in the hotel&#39;s pool. My wife, no less weary from a week&#39;s odyssey to move us from our apartment then I am, has left to continue to clean. I either smell from a day spent manhandling boxes or the romance of joining international jet-setters really stinks. Somehow, when I contemplated a long term remote engagement with family in tow I imagined it off to a much more glamorous start than this.        And the beds are all nestled in their, um, shipping container.   In less than twenty four hours my family will be flying to Costa Rica. We&#39;re going for a month. All worldly possessions, including the beds, are nestled safely... elsewhere. We&#39;re going to places unknown. And I will be working remotely.When Yahoo&#39;s remote workers were recalled back to the purple mothership there was speculation as to why. Some viewed it as a stealth layoff &amp;mdash; a way of reducing headcount without the pink-slip negative publicity. Others felt it was a hollow gift to Wallstreet: a signal that Yahoo! was really serious this time. Some crowed that Yahoo! Management had completely lost it, struggling to recapture former glory by resurrecting an organizational model from more prosperous times. Then again, there might actually have been people abusing the system and a move was long overdue. This isn&#39;t my first remote rodeo. There was the one company where, within a few months of working-from-home being allowed, 80% of eligible developers announced they were expecting a child. There was the unfinished basement where I committed to full-time freelancing beside the warm glow of a space heater. There was the leniency shown for the birth of my latest biological fork; a situation where I was working from home more days than I was at the office.  All of those places, unlike the place I&#39;m going, had a reliable mobile phone signal.In light of Yahoo&#39;s move I do worry about how my own actions are perceived. Are remote workers taking advantage of the system? Do they abuse the freedom they enjoy outside of workplace monitoring? Is Penelope Trunk right in saying that people that want to telecommute aren&#39;t fully dedicated to a company&#39;s cause? That I am an &quot;employee-lite&quot; because I want to give my kids the international experience that I never had?Questions like those are the guilt and fear Scott Hanselman calls the burden of telecommuting. Guilt because we know not everybody is as fortunate as we are to roll over in bed, pick up a plasticky tap-tappy thing, and be meaningful contributors to society. Fear because we&#39;re out of sight and, therefore, out of mind when it comes to choice gossip, spontaneously shared insight, or future promotions. That kind of guilt and fear drives me (and apparently a lot of other home-based workers) to go above and beyond &amp;mdash; we&#39;re paying penance for the luxury of our situation and its one of the few available ways of getting noticed.        One more look back before venturing into the unknown.   And now I&#39;m adding a mountain villa with an ocean view to the equation. This could be a very productive month.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-06-07T00:00:00-05:00'>07 Jun 2013</time><a class='article__image' href='/2013/06/07/GuiltOfTheRemoteWorker'> <img src='/images/2013/06/beach_midjourney.png' alt='Lament of the Lone Coder'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/06/07/GuiltOfTheRemoteWorker'>Lament of the Lone Coder</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Weaned on Wired Magazine",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2013/06/02/DecadeofPop-NewPioneersArticle",
      "date"     : "Jun 2, 2013",
      "content"  : "Vox Pop Design grew along with interest in remote working. In early 2009 I met Eric John Abrahamson. He was also a South Dakotan and created &quot;The New Pioneers&quot;, a collection of online profiles of entrepreneurs who &quot;represent the demographic future of the northern Great Plains.&quot; In 2009 he featured a conversation we had, which can now only be found on the Internet&#39;s WayBack Machine. The site no longer appears to be up, so I&#39;ve republished the work here. From my mention of the piece at the time:&amp;hellip;my real intent was to bridge the gap between rural revivalist pipe dreams and the kind of urban end-all-be-all centers championed by, say, Richard Florida. The future of work will need both. In a metropolitan area I find a diversity of people and ideas. This cross-pollination (even friction) creates a frenetic, energizing environment. When I abscond to South Dakota for extended periods its because the isolation provides clarity and focus. Technologies, like universal broadband, shouldn&#39;t be seen as just the ability to shore our boats where we&#39;d prefer. Much unlike an anchor, rural broadband would free us to sail between multiple points with ease and fluidity, as the work requires. Ultimately, the premise is that South Dakota&#39;s technorati, cast out because of an overabundance of education and ambition, would return. I maintain that the goal isn&#39;t some kind of geek-enabled homecoming. The goal is to be able to choose.The piece, in its entirety, is below.Matthew Reinbold dreams of moving home to Timber Lake, South Dakota. He grew up on a farm about nine miles southwest of town and graduated from high school in 1996 &quot;when the Internet was just a buzz word,&quot; he says. &quot;People told me there was no future for me in agriculture. If I ended up in Timber Lake, then someone had messed up.&quot;At the South Dakota School of Mines &amp;amp; Technology in Rapid City, he studied computer science and thought about becoming an astronaut. That dream dissolved, he says, after he spent several months as an intern at IBM in Rochester, Minnesota. &quot;I realized that if I kept chasing this unrealistic dream, I would end up in a cubicle somewhere doing something I wasn&#39;t passionate about.&quot;Instead, after graduating, Reinbold took a job with Digitech, maker of the famous &quot;Whammy&quot; pedal for electric guitars. With his college classmate and new wife, Valarie, he moved to the suburbs of Salt Lake City to work in the town of Sandy.Despite the Whammy&#39;s role in the music industry, Reinbold discovered that his job wasn&#39;t especially creative. Then came the attacks of September 11. In the economic downturn that followed, Digitech laid off staff and just before Christmas, Reinbold found himself without a job.&quot;I had been weaned on WIRED magazine,&quot; he says, &quot;and believed that if you write code, you will be set for life. That Christmas I discovered the stark reality: you have to fend for yourself.&quot;Out of work, Reinbold went back to school to learn more about business. At the University of Utah he earned an MBA with a focus on emerging technologies. &quot;I had been focused on hardware at IBM and Digitech,&quot; he says, but he developed a strong interest in web-based applications. &quot;You can work from any computer, put things up and get feedback right away.&quot;Soon after earning his MBA, Reinbold launched his own company &amp;mdash; Vox Pop Design. Working from the basement of his home, he designed web pages for local clients. As his business grew, &quot;the clients became more sophisticated,&quot; he says, &quot;and so did the sites.&quot; He began doing remote work for companies as far afield as New Jersey and Oregon.Reinbold networked with other programmers in the Salta Lake City area. He got involved with a technology user group. From that group he recruited a number of people who work for him on a project basis. He also found more remote collaborators including Matthew Orstad in South Dakota and several programmers in the Chicago area.Reinbold has read the work of Richard Florida who writes that the rise of the creative class is the driving force in economic growth in the world today. Florida shows that members of the creative class tend to concentrate in a handful of cities in the United States and he suggests that this tendency is like to continue for years to come.Reinbold understands this dynamic. &quot;In an urban area like Salt Lake City, you see the talent, the off-the-wall energy and the excitement. You can get together for a social media meet-up, a Twitter get together or a geek dinner,&quot; Reinbold says. This kind of professional social interaction helps overcome the isolation of working at home.Florida asserts that the continuing rise of the creative class will lead to further declines in rural America. Reinbold sees a somewhat different scenario framed by his personal dreams.Every year he and Valarie take their two young children back to South Dakota for long vacations in the spring and around the holidays with either her parents or his. &quot;When we go back to the rural areas,&quot; he says, &quot;it helps us to get a sense of what&#39;s really important and valuable in life.&quot; In the future, he believes, more people will shuttle back and forth between rural communities and big cities.&quot;Ultimately, Reinbold hopes to move his family and his business back to Timber Lake, but he is not going to move home and &quot;wait for something to happen. I want to put together the capital and connections so that I&#39;m able to go back to Timber Lake and provide jobs,&quot; he says.In the meantime, Reinbold continues to grow his business, and he looks forward to what the federal government&#39;s stimulus program might do to improve access to broadband in places like Timber Lake. &quot;That rutty, broken-down community is home,&quot; he says. &quot;I would love to take my kids back there. I got a great education, and I want my kids to have that same small town opportunity.&quot;Originally published on The New Pioneers.com, March 31st, 2009.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-06-02T00:00:00-05:00'>02 Jun 2013</time><a class='article__image' href='/2013/06/02/DecadeofPop-NewPioneersArticle'> <img src='/images/2013/06/techcowboy_stablediffusion.png' alt='Weaned on Wired Magazine'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/06/02/DecadeofPop-NewPioneersArticle'>Weaned on Wired Magazine</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On Technical Debt",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/06/01/BoxesAndTechnicalDebt",
      "date"     : "Jun 1, 2013",
      "content"  : "Every developer with a project under their belt understands that technical debt is a bad thing. But since it is an abstract concept &amp;mdash; like love, or the reasons for Pitbull&#39;s career &amp;mdash; it can be hard to conceptualize. You may not realize how bad a situation has gotten until your new development is stymied because of the seemingly innocent decisions made a week, month, or year ago.That decision making process was sharply illustrated while moving from my current house. I rarely see our kitchen counter tops since I&#39;m married with three kids. Flat surfaces in communal areas have a knack for accumulating the detritus of life: graded homework, mail that should probably be filed but not immediately important, random toys, my passive-aggressive crayon artwork, etc. A scene like this is a pretty common occurrence:        &quot;Sure honey, I know exactly where that dental statement is. It&#39;s on the counter. Somewhere.&quot;   This causes problems. Sometimes family will pass through Denver and want to stop. Or we&#39;ll host a kid&#39;s birthday party. OR we may really get our bindle in a fix and decide to clean something fierce. When that happens do we carefully proceed like seasoned archaeologists, peeling back the layers of our own history, making careful notes and cataloging the relevant items to their long-term homes?Nope. Not even close. When rushed, a developer will copy and paste code in multiple places. They will leave out error and edge case handling. They will introduce high coupling and low cohesion throughout modules. In our case, we put everything in a box.In either case the immediate problem gets solved. A developer ships their code to production. We ship that box to the crawlspace. The next time something happens we do it again, because it worked so well the first time. And again, and again, and again because we&#39;re busy people. But each time things get more difficult. Maybe maintenance time increases. Or things are starting to mysteriously fail. Or the server load is becoming uncomfortably high.Or maybe the crawl space is filling up.And then comes the hushed discussions of the Epic Rewrite&amp;trade;; that silver bullet that will magically fix everything. It&#39;s that moment when we have to get our house in order. It&#39;s that moment when I go down into my crawlspace and I find... this:        &quot;Well, there&#39;s probably important stuff in here. Somewhere.&quot;   All those decisions made for the sake of expediency have now come due. Instead of having everything neatly in its place the boxes, once a means of convenience, are a hinderance. Things are at a standstill because instead of taking the five minutes when a problem arose I have to take the five days to deal with the problems all at once.Technical debt is a tradeoff. Perhaps if we had a massive visual reminder of the ramifications we wouldn&#39;t be so willing to agree to the faustian bargain in the moment. It certainly would have saved me some backbreaking labor to spend the time up front.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-06-01T00:00:00-05:00'>01 Jun 2013</time><a class='article__image' href='/2013/06/01/BoxesAndTechnicalDebt'> <img src='/images/2013/06/movingboxes_midjourney.png' alt='On Technical Debt'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/06/01/BoxesAndTechnicalDebt'>On Technical Debt</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Scrolling is a Hack",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/05/31/ScrollingIsAHack",
      "date"     : "May 31, 2013",
      "content"  : "Google Glass, the Mountain View company&#39;s entry into wearable computing, is polarizing. Some (me included) are excited about such a visible company shining the light of its considerable resources on something that has been a glimmer in a geek&#39;s horn-rimmed spectacles for years. Other&#39;s decry it as the death of all that&#39;s good. This is not a post debating the purity of the privacy unicorn, and possible bludgeoning posthaste. Nor is this a post on augmented reality (AR, or - as the pedantic are quick to point out - what should be called mediated reality). There are plenty of folks aggressively building apps and services that take advantage of overlapping data to the world that is being perceived. A peek at what&#39;s happening there can be found with the Twitter hashtag #throughGlass (although, as I write this, I see it&#39;s mostly just pictures snapped with the headset).While being able to snap photos without unlocking my phone is incrementally better, I&#39;m more interested in radical gains. In the past one of those sources of revolutionary productivity increases has been investments to my multi-monitor setup. Going from one screen to two was a transformative. Expanding it to three was profound. When developing, the less switching I have to do between various windows, the better. When surfing the Csikszentmihalyi flow having something on screen is to have it at the forefront of my mind.Despite progressively adding an inch here and there to my current setup, however, I&#39;m still limited to a fixed viewpoint directly in front of where I&#39;m sitting. That made sense in the age of heavy CRT monitors. Those where the lead-lined behemoths that required three requisition forms and a small forklift to move to another cubicle. Even with today&#39;s svelte flat screens, our integrated development environments (or IDEs) still maintain the kind of navigation (scrolling, window tabs, minimizing, maximizing) necessary because of limited visible size. But scrolling is a hack. Our necks are capable of a wide degree of articulation. Could a wearable computing option increase screen real estate devoted to our favorite IDE?According to Google Glass specs the little heads up screen is the equivalent to a 25-inch HD screen about 8 feet away. However, that assumes that you&#39;re looking directly ahead at a fixed point; exactly what we&#39;re don&#39;t want. As Google&#39;s own Easter egg shows, there&#39;s plenty of opportunity for large scale displays with panoramic gestures. A normal human neck can flex downward (an action referred to as &#39;flexion&#39;) 40 to 60 degrees; or enough to touch your chin to your chest. Extension is when you crane your head upward - another 45 to 70 degrees. Rotation is, you guessed it, going from left to right. From looking straight ahead you should be able to turn your head to either side 60 to 80 degrees. You would never scroll - you&#39;d simply look up and to the left. You could have that library and the half dozen files where it is used open simultaneously.         But wait, isn&#39;t the Oculus Rift supposed to be the &#39;immersive&#39; wearable platform? - Image from TechnoBuffalo   Some might argue that the recent KickStarter darling, Oculus Rift, might be better for immersion. However, I can&#39;t see these being viable in a workplace environment. Best case, you aren&#39;t aware of your coworker happening upon you as you curse the ramifications of their recent checkin. Worst case, you&#39;d remove the headset from a long deep-dive only to discover your compatriots have scrawled &quot;BALLS&quot; across the front in silver sharpie. At least that&#39;s what I&#39;d consider (don&#39;t judge).   Update 2013-06-26 Google Glass too emasculating for you? &amp;lt;MachoManVoice&amp;gt;Check out RECON JET [roar of a jet blasting overhead, quickly followed by the screech of a bald eagle] for extreme wearable computing action! Oh yeah!&amp;lt;/MachoManVoice&amp;gt;    Update 2022-12-08    Old ideas are new again.    ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-05-31T00:00:00-05:00'>31 May 2013</time><a class='article__image' href='/2013/05/31/ScrollingIsAHack'> <img src='/images/2013/05/vrgoggles_midjourney.png' alt='Scrolling is a Hack'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/05/31/ScrollingIsAHack'>Scrolling is a Hack</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "The Web is just an APP",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/05/26/TheWebIsJustAnApp",
      "date"     : "May 26, 2013",
      "content"  : "The annual Gluecon Conference is a celebration of everything API, mobile, and cloud related. I had the opportunity of attending this past May 22-23rd event. While there, one of the most profound sentiments came at the end of Steven Willmott&#39;s presentation.Steven is CEO of 3Scale Networks, an API management tools company. He was presenting on the App-ification of the Web.  He correctly pointed out that programmers are tasked with developing for increasingly varied ecosystems. This increase often comes with little (or no) changes to budget or resources. Luckily, this has coincided with the rise of decentralized architectures necessitated by mobile devices. Skipping ahead, the conclusion is:The web is just another app.The advantage of having an API is that it provides isolation, encapsulation, and documented endpoints. This standardizes business value in a device agnostic way. I&#39;m already spending the man-hours to develop an API for &quot;alternative&quot; (but quickly becoming primary) platforms. Why not have the APIs replace the traditional client-server model for the website, as well?  Doing so results in Single Page Applications, or SPAs. Examples include Evernote, Twitter, and even the newly launched Shoptopia.com (which I&#39;ve mentioned before). It&#39;s not a new concept. Bagcheck had a post several years ago on how someone could use their site from the command-line, via their APIs, if they so chose. Now that&#39;s some progressive enhancement.We should be beyond the conceit that mobile, tablet, and desktop screens are the only ways someone may wish to consume our content. I&#39;m not just referring to a hazy Internet-of-things notion somewhere out on the horizon. At Gluecon I saw a handful of &#39;Glassholes&#39;. GM demonstrated its new developer APIs for in-car applications. Both are completely new contexts which will require new UI/UX. Starting with a device agnostic approach frees backend architects to focus delivering business value through APIs, regardless of the end screen. Dynamic languages like PHP, Ruby, Python, CFML, etc. will decreasingly be called on to generate HTML output. Instead, they will be measured by how adept they are in crafting RESTful webservices. They will have to have excellent cross-origin resource sharing (or CORS) support. Their parsing and producing of JSON cannot be bolted on or clunky to use. Finally, it will be less about how clean their rendered HTML templates are, and more about the ease in which they allow developers to abstract a myriad of backend systems into a single concise, predictable set of nouns and verbs.&amp;lt;/a&amp;gt;Like so many things (&quot;mobile first&quot;, &quot;responsive web design&quot;, and &quot;wear clean underwear when going out&quot;) it may seems obvious. But because something is obvious in hindsight doesn&#39;t mean it isn&#39;t a profound change in how we build things going forward. The web is just an app. Program accordingly.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-05-26T00:00:00-05:00'>26 May 2013</time><a class='article__image' href='/2013/05/26/TheWebIsJustAnApp'> <img src='/images/2013/05/computerapp_stablediffusion.png' alt='The Web is just an APP'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/05/26/TheWebIsJustAnApp'>The Web is just an APP</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Laptop Battles",
      "category" : "",
      "tags"     : "Culture",
      "url"      : "/2013/05/22/DecadeofPop-LaptopBattles",
      "date"     : "May 22, 2013",
      "content"  : "When I first started Vox Pop, (paying) client work was a rare thing. I was in the typical catch-22 that many first-time freelancers find themselves in: in order to get work you need to have a portfolio, but it is had to build a portfolio without work. To solve that problem I created a number of sites, including a music community called mutednoise, where I could explore topics while practicing web skills. A common feature was interviews with interesting people doing interesting things.As Moore&#39;s law marches onward, laptops have grown in stature as much as they have slimmed in sized. They can dish out multimedia mastery with the best of their studio computer cousins. This has lead to the laptop becoming a powerful weapon in a performing artist?s arsenal. mutednoise interviews Zach Huntting (Zapan), contact for LaptopBattle.org, for insights on a new series of musical competitions that pit man and portable machine against one another. Keys:Gear for making incredible music in real time exists and the setup is no more complex than an average laptop.The Laptop Battle competitions take a &#39;punk rock&#39; approach to traditional &#39;glossy&#39; electronic production and performance.If the ambitious artists, like Zapan, have their way, look for Laptop Battle Superstars on a cereal box near you soon. &amp;lt;/p&amp;gt;How did you get started using technology for music? Was it with more traditional gear (synths, grooveboxes, etc) or a computer based rig?I began as a dj and stumbled onto computer-based recording/sequencing (digital performer) as a way to &#39;perfect&#39; my mixtapes. After a brief hiatus, I began using a turntable, groovebox, dr. sample and tape recorder/microphone setup to branch out into more individual productions. It wasn&#39;t long before a good friend of mine (Cory Heindel) sent me a copy of Reason and asked me what I could do with it. I made my first completely original 74 minutes of music with reason and Cool Edit 96.How did you become involved with participating and promoting laptop battles? I&#39;m part of an artist collective / record label / etc called fourthcity, and, among other things, we put on a Monday-night multimedia event called &#39;the weekly&#39;. I was talking with Kris Moon, who has been doing music and events in Seattle for like forever, and Bobby Karate (a.k.a. bruno pronsato), who is one of Seattle&#39;s few true electronic music idols, about doing a different type of event. We decided on some sort of collaborative &#39;laptop circle&#39;, where we would each send different, minimal contributions to the group signal. A week or two before the event Bobby Karate suggested Kris and I take a look at Chicago&#39;s intermittently-held &#39;laptronica&#39; event. After which we decided to do something along the lines of an &#39;everybody plays separately&#39; type thing. Nobody really knew what was supposed to happen outside of a few people, so the night was extremely unorganized. Bobby Karate succeeded in exploding the native subwoofer though. Since more than a few of Seattle&#39;s tight-knit&#39;scenesters&#39; were in the audience the event was followed by quite a bit of email/bulletin-board discussion. After that, we proposed the idea of a bigger (and costlier) show to the fourthcity board, who approved it, and the biggest all-local electronic music event in Seattle&#39;s history was born. I had only been using my laptop as a performance instrument since 2002, and had already noticed the obvious lack of visual stimulation that overshadowed most laptop-music performances. Show-goers don&#39;t want a guy hunched over a laptop programming sequences (unless it&#39;s Luke Vibert). They want action. We made all the battle performances three minutes long, and the participating musicians, for the most part, have all pushed the arts of performance and on-the-spot composition forward. I love the laptop battle!What are the specs on your performance machine? What software are you running, what sound card do you use, etc? Are there any limitations you find yourself with? Currently I use Ableton Live, Digital Performer, and Reaktor on my Apple Powerbook (1gig memory, 1gig ram, but still lots of limitations). I also use a Novation K-Station [highly recommended], a couple cheap Casio synths, and pretty much every sample/recording/conversation I can get my hands on. I don&#39;t really use a [separate external] soundcard when performing, but probably would if I wasn&#39;t so damned lazy. My computer runs really slow, especially when I use Reaktor and Digital Performer together, but it does an okay job on stage. Why laptops? What&#39;s possible with a laptop that can or can&#39;t be done with a live band or DJ vinyl?There&#39;s a lot of stuff that&#39;s possible with a laptop that isn&#39;t available anywhere else. Computers have revolutionized music! I&#39;ve taken samples from almost every instrument I&#39;ve heard of, mapped them to software samplers, and stored them on something that weighs less than ten pounds. I can compose on the plane, fix wrong notes with one click-and-drag motion, and edit compositions to my heart&#39;s content. One of the biggest advantages to using a computer for songwriting is that you can be the whole band, which obviously reduces the number of times you have to change your band-name cuz of someone else&#39;s ego.Laptopbattle.org seems to resonate a type of 21st century punk attitude to music making: damn the polish of more conventional studio productions and embrace the excitement of making something in the moment on what&#39;s available. Do you think that is an accurate observation? Are we about to see the same artistic liberation as we did twenty-some years ago when working-class English teens started banging on guitars? Or am I just reading way too much into friends having weekend fun with their iMacs?  Definitely. It seems like every year computer-based music is becoming more and more paint-by-numbers, more calculated, which often translates to &#39;too sterile&#39;. Our crew is really diverse, so just as often as I play all-laptop shows, I?ll be jamming between a drummer, a turntablist and a guy on a keyboard. Being exposed to as many different types of music as possible is a very under-emphasized necessity for modern composers. I think it&#39;s impossible not to see the impending musical revolution - we&#39;ll be hearing soon from people we&#39;ve never heard from, those who weren&#39;t able to communicate their vision to the other members of the band, people who don&#39;t leave their rooms. it&#39;s very exciting. Big up cojilabs for the laptopbattle.org site!You already have a couple of music software companies sponsoring these events. Can you see a time when laptop manufacturers jump on the bandwagon and start sponsoring individuals or groups? If so, how far away is the laptop battle community from having one of its own do a Nike-like endorsement with an Alienware or Dell?In less than a week, laptop musicians will be sponsored like pro skateboarders. Software companies will use their sponsorships to promote upgrading in a timely fashion. Sponsored laptop producers will give on-site demos at the neighborhood computer retail outlets. This month&#39;s Transworld Laptopper will feature your favorite producers layin&#39; it down on their electronic notebooks in sequenced step-by-step glossy color photographs for the bedroom heads to emulate. In the advertising section of the same magazine you will be able to order a custom laptop designed by your favorite superstar. Finally, rules will be set by the Fourthcity International Laptop Battle Association regulating the size and placement of sponsor logos worn by producers engaging in official FILBA competitions. Several companies already have &#39;artist pages&#39; where artists who use their software/hardware are promoted in exchange for &#39;testimonials&#39;.How long till MTV picks up on this and ruins it?Well, we&#39;ve already got our fair share of weird investor dudes trying to poach on our domain name... However, one of our specific goals for this project is to unite genres that are often, especially in larger cities, distant or completely separated. Although everyone makes different sound/art from one-another, they make sound/art in a similar manner and with similar instruments. We can only benefit from a little intermingling (hey idm-ers: the hardcore and junglist crowds still have &#39;fun&#39; at shows!). I don&#39;t subscribe to the theory that the popularization of something hurts it irreparably. The laptop battle phenomenon isn&#39;t going to be popular forever, but if it&#39;s success continues for long enough, someone with money who thinks it could help them do whatever it is they want to do is gonna take it out in the open. If, because of that, it becomes too silly or &#39;played&#39; for the underground, then the people who actually know how to do it right will have to decide whether to continue battling or find something else. In any case, computers don&#39;t yet enjoy as much respect as a musical performance with instruments. MTV could help that out a lot.What advice would you give someone who has just read this and wants to give it a shot?Take lots of vitamins, don&#39;t smoke cigarettes and enjoy the world&#39;s most rewarding hobby! Remember, the easiest road to &#39;success&#39; is to do what everyone else is doing!Originally published on mutednoise.com,   April 9th, 2004.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-05-22T00:00:00-05:00'>22 May 2013</time><a class='article__image' href='/2013/05/22/DecadeofPop-LaptopBattles'> <img src='/images/2013/05/laptop_midjourney.png' alt='Laptop Battles'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/05/22/DecadeofPop-LaptopBattles'>Laptop Battles</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Triage",
      "category" : "",
      "tags"     : "management and writing",
      "url"      : "/2013/05/01/Triage",
      "date"     : "May 1, 2013",
      "content"  : "  MEMORANDUM  TO: The Team  FROM: Your Excellency, Bubba Xerxes  DATE: Dunno. Time has lost meaning by this point.   SUBJECT: No. This is not a feature request.    First, congratulations to everybody on the team for arriving at this point. A product that didn&#39;t exist outside of conceptual musings just three months ago has launched. Applause. Salutations. As they say in the old country, may fortune never gift you the haircut of a North Korean leader.    We&#39;re on code lock down (with the exception of the about pages) to keep things stable during the demo. Yeah for today!  Tomorrow and Going Forward   While no one can deny the significance of what was made there is plenty of criticism of how we got here. The development team was just coming to grips with our pipeline only to revert to the &quot;bad-old days&quot; means of production for this (including, but not limited to &quot;oh shit, that broke?!&quot; scrambling when we went live) - something that jeopardized health, humor, and good software habits.     We have reams of things to be done - from basecamp projects, to text files of bullet points, to email threads, to todo comments in the code. That needs to be prioritized. Everybody has their ax that they now want to run off and grind. We&#39;ve got a hodgepodge of approaches, technologies, and focuses. We need to get those aligned so that our short term success don&#39;t turn into long term misery.    It isn&#39;t rocket science. We articulate the needs, attach sizes to them, prioritize and then do the necessary horse trading to fit in the available time. There&#39;s a planning meeting for tomorrow at 2pm. Be sure to have your outstanding work detailed and ready for inclusion. With your help we can return to a semblance of desirable workplace conditions.     Gluckwunsche one and all. We&#39;ve fought a good fight. Welcome to triage.  ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-05-01T00:00:00-05:00'>01 May 2013</time><a class='article__image' href='/2013/05/01/Triage'> <img src='/images/2013/05/parade_midjourney.png' alt='Triage'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/05/01/Triage'>Triage</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Networked Tribes, Super-Empowerment, and Resilient Systems",
      "category" : "",
      "tags"     : "Culture, law, energy, Presentations, power, and networking",
      "url"      : "/2013/04/22/DecadeofPop-NetworkedTribes",
      "date"     : "Apr 22, 2013",
      "content"  : "On March 4th, 2010, sick and addled from cold medicine, I gave an Ignite Salt Lake talk to several hundred people. For those unfamiliar with the format, speakers are given twenty slides that auto-advance every fifteen seconds. In the resulting five minutes people share what they&#39;re passionate about. In early 2010 the economy was still mired under the weight of financial and housing crises. I was obsessed with seeing a new series of resilient systems emerge from the fear and trepidation.I stated then that trying to cram so many big ideas into such a brief talk was a mistake. That remains the case. But three years later I&#39;m also embarrassed by my earnestness. A typical day includes exhausting all energy at work, running kids to their events, maintaining a side business, and keeping a household running. That really only leaves enough time and energy for a good cry over my life choices before passing out to the Late Show. Not listed is all that fulfilling, change-the-world hard stuff. I oscillate between peace over the compromises I&#39;ve made for a stable, prosperous home and shame that I haven&#39;t helped advance a healthier agenda. Everyone faces these tradeoffs. For me to stand on stage and petition people to find their tribe when I&#39;ve done anything but was disingenuous.But hey, they are some pretty slides that I spent a fair amount of brain cycles on. At a minimum, they represent a constant struggle I have between an idealized fruit and the sucralose result of my labor. From the vault, here is an abridged portion of my notes.A person is empowered when they are able to effect those immediately around them. Super empowerment is when those same individuals motivated by the same ideas are able to affect a disproportionately larger number of people. There is a force multiplication of their actions.From ZenPundit: &quot;To qualify as a super empowered individual, the actor must be able to initiate a destructive event, fundamentally with their own resources, that cascades systemically on a national, regional or global scale.&quot; Also be sure to check out their larger exploration on the topic.There are a number of reasons why we&#39;ve seen the rise of the super empowered individual today:Innovation - their tools are betterConglomeration - where once there were many small systems, networks, and institutions an action needed to be addressed towards, now there are only a few, big networks (due to pressure for efficiencies of scale, share holder growth, etc.)Homogenization - even within the large remaining systems, they have standardized their procedures and processes making one system nearly unidentifiable from anotherMalware in the Windows ecosystem is a case study of super empowerment factors. Hackers have gone from using simple exploits to nearly unidentifiable rootkits (innovation). Microsoft leveraged its industry clout to buy out or destroy competition (conglomeration). Even if businesses do not use Microsoft products they have to support its formats in order to do business with others thus providing an attack vector (homogenization).The attacks of 9-11 are another example of superempowerment. Nineteen individuals, trained on little more than cheaply available flight simulator games, were able to cause a force multiplier result:Clean up and stabilization of the site - $9 billionRepairing and replacing damaged infrastructure - $9 billionRebuilding - $6.7 billionRepairing and restoring other damaged buildings - $5.3 billionCost of Wars (Iraq/Afganistan) since 9/11 - $964 billionOf course, that is nothing compared to the cost of the nearly 3000 individuals who died that day or the subsequent US military causalities after. The terrorists&#39; cost included box cutters, a few boxes of software, and some plane tickets. How do we lessen our vulnerability? When Christopher Columbus discovered America he didn&#39;t discover a &#39;King of the Americas&#39;. What he found a diverse array loosely affiliated groups, all semi-autonomous (map of tribal territories from Wikipedia). Tribal groups that adopted a centralized, hierarchical structure (like the Mayans) died out - the resources available couldn&#39;t scale to match that model. It&#39;s also worth mentioning that the common Hollywood portrayal of the &quot;Chief&quot; as being the unquestioned leader of a group is incorrect. Chiefs were almost entirely wise elders. They gave advice based on their experience but the tribe was not beholden to follow it. Even in leadership the tribal system was entirely unlike the hierarchical control structures of the coming Europeans.A tribe is the oldest and most successful organizational model ever conceived. Tribes create a sense of social identity that strengthenss the ability of both the individual and collective to survive. Tribes are:Egalitarian - everyone is roughly equal and order is maintained through mutual respect, ritual, and honorSegmental - each sub-unit is like any other and can operate independentlyAcephalous - there is no &quot;boss&quot;, just wise leaders whose roles shift depending on need&amp;lt;/ul&amp;gt;&amp;lt;/p&amp;gt;Tribes promote kinship through their mythology - these are the sets of reoccurring symbols and narratives that set one tribe apart from another.It would be a mistake to assume that the Old World systems swallowed those in the New because they were inherently better (things like land ownership, resource extraction, regimented command structures, etc). Instead, it was actually a form of biological super empowerment called smallpox - innovation at the viral level, a conglomeration of once disparate geographical areas through sea transportation, and a homogenization of the human immune system - that left tribes decimated and unable to compete.In light of our current problems it may be time to revisit tribal organizations. Networked technologies give scattered individuals the ability to coordinate and to organize. People are able to find those like them. They no longer have to submit to a singular global perception that does not align with their own personal belief system.By breaking things into smaller subsets we can stop talking about systems that have grown &quot;too big to fail&quot; - systems that exact an enormous price because we are so deeply dependent on them. Instead, we have tribes which are &quot;too small to fail&quot;; that is, if things go bad entire countries and/or entire economies aren&#39;t wiped out because the risks taken were only those manageable by the group. Numerous places are ripe for this diversification. Your tribe may diversify energy. Our current centralized model makes it susceptible to failure; failure not only to technical problems but also financial exploitation. A tribe here may be committed to developing affordable systems for homes to be powered off-grid. Maybe they are dedicated to propagating information on how to obtain better electrical efficiencies. Maybe your tribe&#39;s belief system is catered around the production and distribution of food. Why is it that the food that is the cheapest, most plentiful, and widely advertised is also the worse for us? We&#39;ve gifted subsequent generations a lifestyle dependent on drive-thrus and corn syrup. There are some sparks here: the slow food movement and guerrilla gardening are two worth mentioning. I also wish Jamie Oliver well. But a tribe wouldn&#39;t attempt to change an entire industry overnight. It would start with small, manageable, personal steps to better yourself and then share the results with those like you.Food almost inevitably leads into health care. Why be thin when we can pay for diet treatments? Why be healthy when we can pay for drugs to fix the problem? As Douglas Rushkoff shockingly (and rightly) points out if everyone got cancer it would be a big win for the country&#39;s GDP. We&#39;ve organized our entire health care model around a cultural predilection for treating the symptom rather than preventing it. Perhaps your tribe figures out a system of incentives that rewards preventive care.Studies show that throughout the last decade the smartest among us increasingly went into financial services rather than engineering. Our most capable are employed in wealth preservation for the richest 10% rather than in the creation of new products and services. And why not? You can work less, make more, completely fail and still get an average half-million dollar bonus after being bailed out. It is inherent to our future infrastructure, our stability, and our ability to compete that this does not remain the case. Rally a tribe to that sees to graduating scientists and engineers. Introduce bright people to meaningful work.(Brain drain due to engineering being perceived as a &#39;boys club&#39; is also a troubling problem that is driving female engineers into the arms of Goldman Sachs.)No, money is not the root of all evil and capital markets are a decent way of distributing goods and services to those who need them. However, a consumptive culture, one that demands continually buying more in order to stand still (in order to pay off debt) is a ponzi scheme of first order. A system whose success is dependent on infinite, unchecked growth is a system prone to failure. Why do we need to keep up with the Joneses? But the biggest problem is expecting the government - or any other top-down, holistic solution - to come in and save the day. In an era of multi-million dollar campaigns those funding them made their money with the way things are. They have no interest in seeing things change. We need to preserve the freedom to assemble our tribes around our shared interests and solve problems in our own ways. Everything else is just politicking and bluster. When you build your tribe never forget the mythology by which you assembled around. Whether its the belief that backyard gardens are essential or solar panels are the way to go these core beliefs are the filter by which you judge adopting other tribes&#39; ideas. Sometimes an idea will serve the mythology and strengthen the kinship among your members. Other times an idea may oppose it. Those ideas need to be rejected. Belief is the semi-permeable membrane for evaluating concepts.But it all starts with you. As Umair Haque recently wrote:The real roots of the crisis aren&#39;t about liquidity requirements, reserve ratios, or monetary transmission mechanisms. No amount of regulation or rule-making can fix it. And mere &#39;growth&#39; in GDP, as we&#39;re discovering, isn&#39;t a cure for it.What really caused the crisis was the fact that we didn&#39;t care. Bankers didn&#39;t care about the loans they issued. Boards didn&#39;t care about bankers. Shareholders didn&#39;t care about boards. Markets didn&#39;t care about shareholders. Communities didn&#39;t care about markets. Society didn&#39;t care about communities. No one cared much about society.You have to care enough for a different world before you can rally those to help you build it.The alternative is enduring a job from 9-5 for a company that you hate so that you can go home and self-medicate on junk food, reality television, and status updates. It is a mono-culture stumbling along, in the dark, oblivious to what is going on, and being victimized by boom and bust cycles seemingly beyond their control. We have a choice. We can pretend nothing is wrong, persevere, and hope for the best. Or we can take action. Tribes do not represent systemic walled grottoes hearkening back to a simpler time for the sake of comfort. They can be the places where we turn first for hope, healing, and contentment. They can be the diversity we need that happily co-exist in self-sufficient ways. Tribes represent the warm embrace of a community instead of single, disenfranchised, national target for a radicalized few.More:Global Guerrillas - John RobbUmair Haque at Harvard BusinessTransition Culture - Rob HopkinsLife, Inc - Douglas RushkoffThe New Economics - David BoyleResilient CommunitiesAlternative CurrenciesDarknetsThe recording from the evening featuring the less coherant ramble:",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-04-22T00:00:00-05:00'>22 Apr 2013</time><a class='article__image' href='/2013/04/22/DecadeofPop-NetworkedTribes'> <img src='/images/2013/04/networkedtribes_stablediffusion.png' alt='Networked Tribes, Super-Empowerment, and Resilient Systems'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/04/22/DecadeofPop-NetworkedTribes'>Networked Tribes, Super-Empowerment, and Resilient Systems</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "On DevOps",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/03/23/Devops",
      "date"     : "Mar 23, 2013",
      "content"  : "DevOps (or, more crudely, &#39;development operations&#39;) is the skill of being able to configure and maintain the proper working function of servers. I am not a devops person. I write code. But I need a server for that code. I am shaving a yak. Do Mongolians shave yaks? Or do they use our domesticated animals when they deride a senseless action? Does Bataar shave a dog? I add it to the list of things to Google, eventually.I need caffeine. I&#39;m on hour 48 of a seemingly endless trail of minutia emanating from error logs. I need a server. I am trawling obscure forums where the requirements for admission are apparently bad Engrish. And an aversion to n00bs. I use articles when I speak. I am not welcome here.Like sugar fueled children given a pinata, it all began so innocently. I&#39;m building an app. I was given a server. I work with smart people. Till now we have managed to host our servers just fine. What&#39;s another box? The mental beating began at login. The dialogs are unfamiliar. Is this important? I&#39;ve never heard of that. Maybe I should write that down. It sounds serious and was in a modal and everything. I am not a devops person. I don&#39;t know what is going on. I&#39;m just here for the web root.We need something running fast delivered fast! Like tomorrow! Is Python on IIS fast? I dunno. I&#39;ve installed servers locally for development on Windows. Do I want Windows? I don&#39;t know Linux. There are furrowed brows about deadlines. I go with something where I can guesstimate the interface over having to have the arcane scripts of the Illuminati burned into memory. I don&#39;t have the time or virginal chicken to pay for the bestowing of such things.There are snooty eastern europeans. I see them making rude gestures at their screens in a cigarette haze. I can hear them laughing at my forum questions. I&#39;ve seen movies. I just want to run my code. I want Python. I want big data. I want to be like Quentin Tarantino. I want Django. My searches are filled with movie reviews. I want what social applications like Instagram and Pinterest use. We&#39;re social too!The eastern europeans do not want to be social. My grammar contains articles and prepositions. I do not speak the right language.Why so big timeout? Do you slow internet?There was something said about being unable to sexually satisfy my wife. Or maybe mention of dependencies was about my code. The details are lost in imagined hacker cigarette haze. At some point the company who published the tutorial I&#39;m questioning say that it is a very bad way to do things. I no longer amuse Boris (or Yuri, or Mitch). Even the insults over my competence have stopped.The server 500 errors force me onward. I wander across the land of misfit questions and forgotten forums. I hope. I seek. I find answers from four years ago that no longer work. The daily standups become 10-minute homages to Groundhog&#39;s day. It&#39;s been three days. It&#39;s been three weeks. I can&#39;t remember.&quot;How&#39;s the configuration going? You made progress?&quot;&quot;I made some progress, but then that solution exposed a new problem that I didn&#39;t know I had. I&#39;m out of things to Google, Sergi Brin isn&#39;t returning my calls, and did you see him wearing those ridiculous glasses, and HEY, HOLY CRAP, LOOK OVER THERE!&quot;They nod. There&#39;s luke-warm empathy over my predicament. My dependency is buying them cover and not exposing their also-slowed pace. I hate them. We are a team. At launch maybe we&#39;ll have a pizza party, take embarrassing photos, and later masquerade our loathsome co-existence as LinkedIn praise. I love them.I need a server. Why am I here? I write code. I wanted to help people. The VP of development is people. He is speaking to me. I need caffeine. English is getting hard. Maybe I&#39;m getting l337 European hacker skills? Maybe Boris will speak to me. The VP is speaking.You know, we&#39;re not beholden to IIS. If you want to do Apache, you can do Apache.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-03-23T00:00:00-05:00'>23 Mar 2013</time><a class='article__image' href='/2013/03/23/Devops'> <img src='/images/2013/03/clocks_stablediffusion.png' alt='On DevOps'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/03/23/Devops'>On DevOps</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "So I Am Making an App",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/02/27/SoIAmMakingAnApp",
      "date"     : "Feb 27, 2013",
      "content"  : "You knows things have peaked and are headed towards the hype cycle&#39;s trough of disillusionment when even bus advertising is snarking up in your biz-ness.Samsung even did an entire ad campaign around a fictionalized startup and their game app, UNICORN APOCALYPSE. Unfortunately, I have first hand experience with all too many of the situations reenacted.  The fact that I can laugh about them now says that either (1) I am a saint, able to remain stoic in the face of the inane or (2) the meds work. It was against that backdrop that Placewise Media recently held its kickoff for Shoptopia, the project I&#39;m technical lead on. It was sharing the direction that a small subset of us had been working on for nearly six months to the rest of the company. While people may no longer be excited by yet-another-app we think we&#39;re making something special that will transcend advertising snark.We started with some of the most greenfield requirements I have ever had in my almost 15 years of development. The only constraints in those early discussions was that the app:would be B2C (us to the consumer), not B2B (business to business as our past work has been)respond to your real world placefacilitate customization, so you can make it your ownand be filled with delightful obviousness When those are your starting constraints there is lots of fertile ground for discussion. Shoptopia isn&#39;t about scratching our own itch. Much of those early meetings centered on defining what things are valuable to most people. Many whiteboard markers were sacrificed to the muses of understanding before epiphanies appeared. There are plenty of apps in the marketplace. What we identified is that they aren&#39;t the right apps. A store, like Target, may have its app but have nothing to do with the other half-dozen places you&#39;re likely to frequent. Brand apps, like Guess, rarely do a good job of letting you know if they&#39;re nearby and/or if they are on sale there. There are deal apps, but they&#39;re rarely based on physical location and, if they are, they&#39;re a firehose of things rarely related to your interests: just because you&#39;re standing outside of a Sbarro doesn&#39;t mean you&#39;re hungry, or interested in pizza, or lactose tolerant.From these issues we iterated toward a product definition. One of the earliest and powerful crystallizing examples was Pandora. When you start a new Pandora station you&#39;re given a stream of artists that approximate what you want to hear. Over time, you&#39;re able to refine the experience by giving feedback (skipping, thumbing up, or thumbing down). The result is an audio journey filled with happy surprises and welcomed favorites. That customized, personal listening experience is an automagical thing. In much the same way Shoptopia could provide &quot;personalized shopping DNA&quot; from an otherwise overwhelming, chaotic genome of retail options. It would serve a stream of interesting products, deals, and stores based on a person&#39;s unique interests. We would build something that would be just what you want, right when you need it.Automagical isn&#39;t without its drawbacks, however. Get too clever, like Target and its ability to predict pregnancy, and people (rightly) flip out. That lead us one of the most powerful design mantras of the project:Don&#39;t be creepy.Deals showing up without your input? That&#39;s a little creepy. Products suggested to you not because you&#39;d like them but because a company paid us a lot of money? That&#39;s more creepy. Collecting information about you, your friends, your wants and your desires so we can sell them to anyone for big bucks? That&#39;s maybe the creepiest of all made worse by the context. When we&#39;re talking about an app we are, by extension, talking about your mobile phone: a very personal, even intimate, thing. You caress it. You talk to it. It is the first thing to stash in your pocket before you go and the last thing you look at before falling asleep. Anything that implies we&#39;re voyeuristically spying via your *precious* for who-knows-what is out. Full-stop. If the first rule of Shoptopia during its formulative days was don&#39;t talk about Shoptopia the second remains don&#39;t be creepy.With the idea solidifying it was off to Austin, TX to meet with BestFit Mobile. This was both to both qualify that we were on the right track and evaluate their fit for the front-end development. And that brings us back to the announcement party. It is humbling to think back on some of those initial conversations. In the past six months the space has gone from barely being served to frothy with investment. Potential competitors seem to be arriving on a weekly basis. They are tackling the shopping problem from various, unique angles. First mover advantage is gone. Our success (or lack of it) is up to how well we execute. We have to deliver every ounce of the utility we want without an iota of creepiness seen elsewhere.That is the why of Shoptopia. As you probably guessed, much of that heavy lifting is with APIs. As I build, where appropriate, I&#39;ll share the &#39;how&#39;. Until then, however, I can say Shoptopia is coming to an IOS device near you in Q2 of 2013. ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-02-27T00:00:00-06:00'>27 Feb 2013</time><a class='article__image' href='/2013/02/27/SoIAmMakingAnApp'> <img src='/images/2013/03/clock_midjourney.png' alt='So I Am Making an App'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/02/27/SoIAmMakingAnApp'>So I Am Making an App</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Gamification verses Games",
      "category" : "",
      "tags"     : "Presentations and Software Change",
      "url"      : "/2013/02/25/GamificationRevisited",
      "date"     : "Feb 25, 2013",
      "content"  : "The response to my gamification talk was positive. Among our team, particularly the young single guys who still play big-budget titles, there was much excitement. A series of rapid conversations then ensued about implementation. Unfortunately, I had to be the wet blanket, despite having broached the topic. &quot;Let&#39;s add quizzes and give people some points for gathering some marketing data! Let&#39;s embed games in our site&#39;s logo, like Google! We&#39;ll add an arcade area and we will crush our time-on-site metrics!&quot;First, a game is not the same as a gamified system. A game can stand alone. It can be played for its own sake. In gamification we&#39;re taking a process that already exists and buttress it with mechanisms to amplify the fun (the &quot;ings&quot; I mention in the preso: collecting, competing, discovering, etc.). If you take away the gamification, that business process still exists. Second, one doesn&#39;t just jump to adding points and rewards for any action taken on a site. In designing a gamified system (not just a game) its important to go through a six step process:define the business objectivesdelineate target behaviordescribe the playersdevise activity loopscheck reality - is this still fun?execute with the appropriate tools&quot;Oh course, any new initiative should be goal driven! Duh! Our goal is #winning&amp;trade;!&quot;For a media site, a realistic business objective might be more page views, increased user signups, or longer sustained activity per visit. From those goals player activities and stimuli can be derived. Those stimuli may be points, badges, and leaderboards (the PBL triad). However, it is important to consider that that may not be appropriate for everybody. While points and rewards appeal to competitive achievement types, your audience&#39;s mileage may vary.This extra rigor is for the purpose of defining the player journey to provide meaningful, long-term engagement. Any site can add an PBL system and experience a temporary lift. However, the fun of collecting quickly wears off without a progression to somewhere (and I&#39;m not talking redeeming points for some prize). Defining the onboarding process, providing the incremental reasons for excitement and engagement during the grind, and providing the demonstration of system mastery by the best players are all parts of a well conceived whole.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-02-25T00:00:00-06:00'>25 Feb 2013</time><a class='article__image' href='/2013/02/25/GamificationRevisited'> <img src='/images/2013/02/gamification_midjourney.png' alt='Gamification verses Games'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/02/25/GamificationRevisited'>Gamification verses Games</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Intro to Gamification",
      "category" : "",
      "tags"     : "Presentations and Productivity",
      "url"      : "/2013/02/04/GamificationPreso",
      "date"     : "Feb 4, 2013",
      "content"  : "Last year I had the opportunity to put together a gamification preso for the Denver ColdFusion User&#39;s Group as well as Placewise Media. I&#39;ve finally got around to posting the results online. The slides are ~~embedded below but I&#39;ll warn you - they won&#39;t make much sense in a vaccum. Be sure to click on the &#39;gear&#39; and click &quot;Open speaker notes&quot;.~~ below.Update 2025-03-10 -  Revisiting this was quite the trip down memory lane (3x4 aspect ratios! Turntable.fm! Fantasy football before rampant sports-betting!). While gamification as an enterprise attention-grabber no longer is a thing, there were some aspects that seemed to hold up enough to jusitify the work to bring this presentation back. I want to thank Martin for pointing out that the Google Slides embed no longer worked and this page needed some attention.This presentation was originally developed in October, 2012.This is a presentation about gamification. While the transmutation of mundane tasks in games(!) may seem like a recent hype cycle, application of gamification has been around for some time. In this introduction I’ll be giving an explanation as to what it is, the importance of understanding a user’s journey in using a piece of software, and how we can use game design elements to support that growth.So why  should anyone listen to anything I have to say about gamification?Currently I’m a Creative Principal for Vox Pop Design and a Senior Application Engineer at placewise media. Previously I’ve worked for Microsoft Game Studios. But, perhaps most importantly, for 18 years of my life the photo above was my backyard. I love the solace and isolation of South Dakota when I return to visit. But not having much to do meant that much of my adolescence was spent trying to find the fun in the mundane. Without knowing it, I was adding gamification elements to help get things done.Much more recently I’ve become interested in the formal study of game mechanics as a means of motivating employees in workplace situations. In my experience the difference in one place being great to work at and another being a grind has less to do with the actual nature of work and everything to do with the culture of play (or lack thereof) surrounding it.So what is gamification?Simply put, it is a means to motivate. As the great game developer Mary Poppins said “In every job that must be done, there is an element of fun. You find the fun and snap! The job’s a game.” This is the “spoon full of sugar helps the medicine go down” approach to getting things done. It is not about making a game, but using game-like elements to make a process better.Fun is not just beneficial to learning but, by many reports, required for authentic learning and long-term memory.Neurologist and educator Judy Willis’s book “Research-Based Strategies to Ignite Student Learning: Insights from a Neurologist and Classroom Teacher” (ASCD, 2006) is one of many that have highlighted the learning benefits of fun. Here are just a few excerpts:  The highest-level executive thinking, making of connections, and “aha” moments are more likely to occur in an atmosphere of “exuberant discovery,” where students of all ages retain that kindergarten enthusiasm of embracing each day with the joy of learning.So fun actually seems to promote learning. It increases dopamine, endorphins, and oxygen.  The human brain and body respond positively to laughter with the release of endorphin, epinephrine (adrenaline), and dopamine, and with increased breathing volume (more oxygen). When a lesson starts with humor, there is more alerting, and the subsequent information is attached to the positive emotional event as an event or flashbulb memory.To be clear gamification is not the same as designing a game. While they may share several elements a game exists for its own sake. Gamification is the enhancement of an already existing task, process, or system.There are several aspects to “FUN”.  Different people find enjoyment in the process of doing different things, mentioned above. The list is by no means comprehensive.Many of these things are self-evident. To clarify somewhat, however, ‘winning’ is about overcoming an obstacle whereas ‘triumphing’ is not only overcoming an obstacle but doing so against other players.Smarter people than me have taken the vast array of “fun” things and have categorized them into major themes.Nicole Lazzaro is one of these thinkers. She has 20+ years as a Player Experience Designer and she categorizes fun in one of four ways (poster: http://xeodesign.com/4k2f/4k2f.jpg, white paper: http://xeodesign.com/xeodesign_whyweplaygames.pdf)* easy fun - not taxing, &quot;the bubble wrap of games&quot; - vehicle for imagination* hard fun - challenges, overcoming obstacles, competition - feelings of accomplishment - sense of mastery* people fun - working together on a team, the fun of socializing - social bonding* serious fun - some kinds of fun tie into serious real objectives, doing things that have meaning for you - provides meaning of valueAnother game designer, Marc Leblanc, puts things together slightly differently in the list to the right. These two lists, while interesting, are by no means conclusive.All of that deep thinking about what people find fun gets into some very deep and varied disciplines. Trying to get one’s head around the theoretical approaches out there can be overwhelming, as this diagram of Nicole’s Lazzaro’s seemingly simple 4 keys 2 fun shows. But while there might be vast volumes of thought that goes what might make something fun, the actual implementation should be deceptively simple.This is the progress bar for profile completion on LinkedIn.com.Usually, filling out a profile is the antithesis of fun. On too many sites it is a long form that leaves you more fearful of what the marketing department is planning with your data rather than excitement on filling it out.To solve this problem LinkedIn didn’t program an immersive game. Instead, they added the profile completion status bar that seen above. It’s not a game. Yet, by using game elements LinkedIn saw a profile completion rate increase 20%.So what elements of fun does the bar have? What elements from the ‘ings’ we talked about before does a progress bar incorporate?	* realtime feedback of accomplishment	* a demonstration of approaching “mastery”	* a surprise at what the completion percentage will be, and what task might be next	* taps an innate human desire to complete thingsA progress bar implies there is a path that a person is on - that their action is part of larger series of steps toward a positive outcome.Fun, without purpose, can be engaging for a limited time. But how can we maintain a high level of engagement for software over time? How do we keep something that was initially fun from becoming tiresome and repetitive? At a very high level, we need to consider the player journey. That journey, much like a good book, is divided into three steps:* onboarding* scaffolding* masteringEven in the case of LinkedIn and the seemingly simple progress bar, there was the implied path from empty profile to completion. The progress bar was the means by which to demonstrate it.Let’s break down each of these steps in the player journey into each of its component parts. First of these is Onboarding.Onboarding is vital to getting a player’s “buy-in”. Consider the case of Angry Birds. A player doesn’t start with every bird type. Gameplay begins with one type of bird with no ability other than to be flung from a catapult. The enemy types are simple. The structures you are tasked with toppling are straightforward. It is approachable for a new player because the number of options have been purposely limited.Consider another popular mobile game, Plants vs. Zombies. In much the same way as Angry Birds, the options facing a new player are purposely limited to the most fundamental elements - a single path for zombies to approach, a single type of zombie, and a single ability to defend their approach.In either case, onboarding is about simplifying a process to the core elements to make fun apparent.After a user is on board it is vital to support their growth as a participant in the system. The scaffolding provided not only needs to give a person the increasing nuance to a system that they’ll desire but the support they’ll need to overcome the increasing complexity.An example on successful scaffolding is seen in the classic strategy game Alpha Centauri.  The screenshot above is one of a series of governors a player is confronted with during the course of the game.They notify you of major events, alert you to new and more complex challenges, and manage things if you’re distracted elsewhere. It’s not Clippy. Clippy was an attempt at an onboarding experience that was intrusive. Alpha Centauri’s governors support a player’s increasing involvement with an app.If a system is properly scaffold then its users will eventually reach a point in which they obtain mastery. The path to mastery requires balance on part of the game systems builder. If it is too easy, people will get bored. If it is too hard, people will get discouraged. In either negative case people will leave for experiences that are more fun than what they are currently doing.There are many ways of demonstrating mastery. In some systems that may mean allowing users that have achieved a high level greater permissions or responsibility within the system (like StackOverflow). In the image here, the rewards, or badges, that I’ve accrued here are on display. Each represents a different an action taken in the system during the progression from a new account.[As an aside, there’s clearly sponsorship opportunities for brands in this approach, as many of these badges are Toyota themed (Toyota “pickup of the week”, the “Venza Head Turner”). These are a much more interesting brand integration than only having a sidebar ad.]The way that we accomplish that pathway, from the onboarding experience through till mastery, is through actual game elements.There are numerous sites online that allow you to listen to streaming music. Whether by music genome (Pandora) or relevance algorithm (Last.fm) music sites are pretty much the same: pick an artist or genre, click play, and listen.Turntable.fm is different for the way they incorporate game elements into the commonplace practice of streaming music. These elements applied to collaborative listening make something fun.We’ll return to this example in a moment once we’ve explored some of these elements.There are numerous elements that we can borrow from games to apply during our gamification of a system. It is the application of these elements which provide repeatability to a system.While certain games have made the transition to mobile devices Tic Tac Toe isn’t one of them. It’s because once we’ve figured out how to force a draw regardless of who starts (usually sometime in elementary school), the game is no longer fun. The game elements limit the replayability (and thus fun) of the system.Compare this to Hangman, which is vastly more enjoyable. The simple act of growing one’s vocabulary adds greater challenge to the game itself. An element, like the number of letters an opponent needs to guess, varies as a child gains “mastery” of progressively harder words.Many game theorists divide game elements into three tiers.These tiers can be thought of as a pyramid. Starting at the top are the dynamics of a game. These are the things that after the game has concluded you’re most apt to share with friends. It is how you felt after learning “the cake is a lie”.Good gamification starts at this high level, not with individual features. What emotions do we want the user to have? What is the story they’ll experience? What relationships will they develop having progressed through the software?With our broad motivations set, we move down the pyramid to the second level: dynamic-creating interactions. Again, these aren’t specific features but more tactical means for accomplishing our high level dynamics.For example, how do we create the highest-level goal of relationships within a software system? Well, those relationships may come about from competition between players over a scarce resource. Or people may get to know one another from feedback left by other users/players/accounts.The final, bottom, level of our pyramid is actual functionality places before people. In many cases these items are merely keepers of score. Things like badges, points, and leaderboards (for example) are ways of representing where a person is within their own progression from new user to master.Application of points, badges, and leaderboards are so common within gamified systems that they have their own acronym - the PBL Triad.Be aware - points, badges, and leaderboards all appeal to the achiever type. They may not be appropriate for other types.So now that we’ve examined gamified elements let’s return to our turntable.fm screenshot and identify the game elements present.Working around the screen in a roughly clockwise manner we see:  A room whose theme is a particular style of music, allowing people of shared taste to find each other  Avatars of varying status, with cooler avatars unlocked with higher point totals  A display of points, or favorable reactions a DJ has accumulated during the course of playing music  A collection of songs (the song queue) an individual has amassed during their time on site  A realtime feedback gauge showing the popularity of a songOf course, a gamified system doesn’t need to be the sole domain of cartoonified avatars and casual consumption. Here we see a dashboard of tenXer, a site that helps developers be more productive. In this screenshot we see many of the same elements that were present on the turntable.fm site. These include an avatar (in this case, a profile picture) and a leaderboard containing a number of “points” (in this case, hours in meetings).Stackoverflow has been incredibly successful in incorporating game elements into its system. Stackoverflow obviously wasn’t the first site on the Internet that allowed users to get answers to their questions. However, their gamified system provides motivation to users to provide the best possible answers. The result is consistent placement near the top of search engines for nearly any development query.Here we see game elements on an e-learning site, Code School. Each course has a series of obtainable badges that can be obtained while progressing through the course. Acquired badges can then be displayed on a user’s profile to demonstrate mastery.Codeacademy is a similar site. It too offers online programming classes. Beyond badges they also include things like progress bars, points, and feedback encouragement via streaks.Perhaps one of the greatest illustrations of what gamification can do for a company can be demonstrated by two otherwise nearly identical services.Dodgeball was founded by  Dennis Crowley and Alex Rainert in 2000. It was acquired by Google in 2005 and Crowley left in 2007. In 2008 Crowley founded Foursquare. Not only were the founders the same, but the core functionality and logos were shocking similar. So with so many similarities why is Foursquare still with us but Dodgeball not?Foursquare implemented a gamification strategy that made it initially successful. They learned some key lessons from Dodgeball:- dodgeball (db) had an engagement gap - it was only useful if a number of people were using it- db had a lack of choice; there just wasn&#39;t a whole lot of things to do - if the entirity of &quot;meaninful choice&quot; is to do something or not do it, people won&#39;t be engaged- db didn&#39;t have progression - you didn&#39;t get anywhere by what you did - the 100th checkin was the same as the 1st time- db had some social interaction but they weren&#39;t powerfully tied to games - there wasn&#39;t the ability to compete and/or collaborate with friends- db didn&#39;t make the action a habit - if you have to think &quot;oh I need to check in&quot; then it won&#39;t catch onWhat did foursquare do differently?- introduced badges - demonstration of mastery of their system - had mayorships, a competitive element that players could compete with each other for- choices and progression are important, checkin becomes much more granulated (health club verses conference - singular act becomes rich and complex and nuanced) - but not just type of location, but quantity to &quot;level&quot; upImage from 2009 Mashable articleWe’ve been talking about simple, low level techniques. Let’s now switch to looking at a large-scale, real world application of gamification on an existing, popular web property.The NFL is, at its core, a media company. A goal for its website would be to maximize revenue through maximizing user engagement and minimizing visitor bounces. The screenshot above is for their NFL Fan Rewards program. This page is the portal describing the game elements across their site. But chances are this isn’t the first exposure a vistor to NFL.com has.A much more likely experience is like what is shown above. Here I browsed to the site to get a quick update on how the Denver Broncos are doing. In the lower right a subtle box pops a message pop You’ve received +2 coins! My point total goes up. I’m getting feedback that just by doing this thing I would have done anyway I’m accumulating points.Clicking on the green total scrolls an overlay into view giving me a bit of info about what is going on.If I continue interacting with the content I achieve higher levels of status. Here I’ve managed to watch enough NFL.com videos, read NFL.com news stories, and left a comment (all accomplishing the NFL’s goal of greater engagement with the site) that I’ve unlocked a badge. The “Rookie 2” shows that I have progressed on my path to mastering the NFL.com experience. I also have a clear call to action to spread the game to my friends. In doing so, I can continue progressing along my own path.Much like the Yahoo dashboard, the NFL also has a dashboard where my various accomplishments are on display. At the bottom of the screenshot you can also see they have the concept of “drives”. These are much like quests in a traditional video game. Each drive involves visiting a different part of the site and (sometimes) taking an action that I might not normally take (exploration was one of our ‘ings that people find fun). From initially checking the games progress I’m now suddenly signing up for a fantasy league because I want to complete the progress bar (again, completing can be fun).The NFL.com site is extremely deep with numerous options for interaction. At the bottom we see that we are given a meaningful choice - we can either read about the points system and how it is linked to rewards (the left option) or visit the NFL.com store for points (the right option). Meaningful choice is important because it helps the visitor still feel that they’re in control.And the variety of rewards continue. What was supposed to be a quick five minute checkup suddenly turns into 45 minutes of exploration, collecting, and delightful surprise. The experience was fun and, as a result, I used the site much more than I would have otherwise because of its gamification.But these concepts don’t just have to be about externally facing sites. What about internal teams? That’s a focus for Salesforce’s Work.com (formerly called Rypple). It is a platform for motivating employees.A precursor was “the Distributor” (also known as the ‘Lovemachine’), used by Linden Labs (who are best known for creating the virtual world Second Life). From wikipedia:  “Linden Lab utilizes another internal tool, known as the Distributor, that enables all employees to distribute “points” to projects that they deem to be worthy of development and resource support. Each point has a financial value that is based on each quarter’s financial performance. As a result, key stakeholders in the projects with high point values receive a distributed monetary payoff at the end of the quarter for successfully completed projects. The Distributor was discontinued after Rosedale left the company.”More on the Lovemachine which was spun off into its own angel-backed startup.So how does one begin implementing a gamified system? There are some “off the shelf” solutions:  Bigdoor - http://www.bigdoor.com/  Bunchball - http://www.bunchball.com/  Badgeville - http://www.badgeville.com/However, be aware of what these are - a sprinkling of PBL onto an existing experience rather than an integration identifying what people want and what their expectations are. They start with features at the base of the game element pyramid when a compelling experience starts by defining goals at the top.If you are interested in learning more there are plenty of resources available online and in the books listed above.Getting deeper, “Getting Gamification Right (2011)” builds on the concepts introduced with the PBL triad and looks at motivation factors in why sometimes they work and sometimes they don’t.Finally, Amy Jo Kim has a detailed breakdown of gamification approaches based on her years of game industry experience.  Smart Gamification: Seven Core Concepts for Creating Compelling Experiences (2011)  Smart Gamification: Designing the Player Journey (2011)And that’s it. Thanks for reading this far.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-02-04T00:00:00-06:00'>04 Feb 2013</time><a class='article__image' href='/2013/02/04/GamificationPreso'> <img src='/images/2013/02/gamification_stablediffusion.png' alt='Intro to Gamification'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/02/04/GamificationPreso'>Intro to Gamification</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Document First, Again",
      "category" : "",
      "tags"     : "Software Development",
      "url"      : "/2013/01/09/DocumentFirstII",
      "date"     : "Jan 9, 2013",
      "content"  : "For the past quarter I&#39;ve been deeply involved creating a spanking new product for Placewise Media. As discussions went on it was clear that this offering would also require an entirely new API.The existing Placewise API I built two years ago is aging well. It has easily scaled to feed nearly a hundred different IOS and Android native apps. It also powers a number of externally developed phone apps, populates widgets on 3rd party sites, and syndicates content as part of new revenue possibilities that we couldn&#39;t do when we just wrote websites.That API, however, is shopping center-centric. Given the new product&#39;s scope I found myself having to draft a new set of interfaces to support the business objectives. Initially reviewing the first proposed wireframes that my backend systems were to support was daunting. After the necessary &quot;They want to do what now?!&quot; had been offered up to the programming gods I started in the same place that I did with the original RESTful API: with the documentation.As a sweet post on the Twilio website points out the repercussions of not nailing a technical system&#39;s docs are twofold: (1) some fraction of developers who would otherwise have used your product won&#39;t and (2) those that do will require more attention from your support team. Given me, myself, and I are likely to be the support team I&#39;d prefer to maximize time doing other things; like practicing my mullet-enabled luggage tricks.Documenting an API first also means you&#39;re programming to an interface, not to an implementation. What language am I going to program in? Java? Ruby on Rails? Python? What algorithm will the recommendation engine use? Collaborative? Content-based? All of those questions still matter - but they only matter to me. The consuming application shouldn&#39;t have to worry whether I&#39;ve used the correct dependency injection. They just care that when they make an HTTP GET method to my URL they always get the canonical list of mullets (for example).A perfect implementation of the wrong specification is worthless for both the API producer and consumer. If you have a perfect spec but the implementation is lacking only the producer will have the long weekend (but I&#39;m sure I can just throw some more hardware at it, right?).",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2013-01-09T00:00:00-06:00'>09 Jan 2013</time><a class='article__image' href='/2013/01/09/DocumentFirstII'> <img src='/images/2013/02/documentation_stablediffusion.png' alt='Document First, Again'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2013/01/09/DocumentFirstII'>Document First, Again</a> </h2></div></div></div>"
    } 
  
]
